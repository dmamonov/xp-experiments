XP Language experiment
========================================================================
This is the XP language - a compiled programming language built on top 
of the XP Framework and written using it; inspired and still close to PHP 
but also with elements from the Java and C# worlds. At the same time, this
experiment also proves how PHP can be used as a platform, with different
possible input syntaxes generating intermediate code to run inside it, and 
be able to re-use code written in other syntaxes but also plain old PHP,
but sharing the XP Framework's foundation classes as a common SDK.

Overview
--------
Here's a list of the subdirectories inside this one and what you will 
find inside:
<pre>
  - tests   : Unittests
  - cmd     : Utility xpclis
  - demo    : Examples
  - grammar : Grammars
  - xp      : Implementation
</pre>


Prerequisites
-------------
You will need the Opcode Engineering Library extension (short: <tt>oel</tt>)
compiled into PHP. You will find the sourcecode inside the Ruben's experiment
directory (../../people/wagner/oel-extension).

Building (shown for Windows, almost the same as on Un*x though):
<pre>
  $ cd ~/devel/php/php_5_2
  $ cp -r ~/devel/xp.forge/trunk/experiments/people/wagner/oel-extension/oel_ct/src/oel ext
  $ cscript /nologo configure.js --enable-oel
  $ nmake
</pre>

After the build has succeeded, change the XP runtime by adding the 
following section to your <tt>xp.ini</tt>:
<pre>
  [runtime]
  oel=F:/cygwin/home/Timm Friebe/devel/php/php_5_2/Release_TS/php.exe
</pre>


Introduction
------------
Designing the XP programming language we had the following goals in mind:

* Get rid of the oddities in PHP - alternative syntaxes like if / endif 
  for example or "__"-magic.
* Overcome limitations in the PHP grammar that do not allow chaining at
  all points like method calls after new() and array access after method
  calls.
* Support syntactically what the XP framework has built ontop of PHP:
  annotations, type-safe enums, return types, thrown exceptions, finallly,
  with() blocks.
* Integrate with the XP Framework's foundation classes.
* Keep the "change and run" spirit and the ability for rapid development.


Hacking
-------
When changing the grammar file you need to regenerate the parser:
<pre>
  $ make grammar
</pre>
