/* This class is part of the XP framework
 *
 * $Id$ 
 */

package demo;

import static util.cmd.Console.writeLinef;

/**
 * Complex numbers
 *
 */
public class Complex {
  protected int $imag = 0;
  protected int $real = 0;

  /**
   * Creates a new complex number
   *
   */
  public __construct(int $real, int $imag) {
    $this.real= $real;
    $this.imag= $imag;
  }

  /**
   * Overloads +
   *
   */
  public static self operator + (self $c1, self $c2) {
    return new self($c1.real + $c2.real, $c1.imag + $c2.imag);
  }

  /**
   * Overloads -
   *
   */
  public static self operator - (self $c1, self $c2) {
    return new self($c1.real - $c2.real, $c1.imag - $c2.imag);
  }

  /**
   * Overloads *
   *
   */
  public static self operator * (self $c1, self $c2) {
    return new self(
      ($c1.real * $c2.real) - ($c1.imag * $c2.imag), 
      ($c1.real * $c2.imag) + ($c1.imag * $c2.real) 
    );
  }

  /**
   * Creates a string representation for this complex
   *
   */
  public string toString() {
    return $this.real ~ ' + ' ~ $this.imag ~ 'i';
  }

  /**
   * Entry point method
   *
   */
  public static void main(string[] $args) {
    $c1= new Complex(2, 3);
    $c2= new Complex(3, 4);
    $a= $c1 + $c2;
    $s= $c2 - $c1;
    $m= $c1 * $c2;

    writeLinef('First complex number:            %s', $c1.toString());
    writeLinef('Second complex number:           %s', $c2.toString());
    writeLinef('Addition (first + second):       %s', $a.toString());
    writeLinef('Subtraction (second - first):    %s', $s.toString());
    writeLinef('Multiplication (first * second): %s', $m.toString());
  }
}
