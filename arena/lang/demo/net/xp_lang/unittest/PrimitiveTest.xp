/* This class is part of the XP framework
 *
 * $Id$
 */
package net.xp_lang.unittest;

import unittest.TestCase;
import io.streams.Streams;
import io.streams.MemoryInputStream;
import lang.types.*;

import native standard.fclose;

/**
 * TestCase
 *
 * @see      xp://lang.Primitive
 */
public class PrimitiveTest extends TestCase {

  /**
   * Test string primitive
   *
   */
  [@test]
  public void stringPrimitive() {
    $this.assertEquals(Primitive::$STRING, Primitive::forName('string'));
  }

  /**
   * Test integer primitive
   *
   */
  [@test]
  public void integerPrimitive() {
    $this.assertEquals(Primitive::$INTEGER, Primitive::forName('integer'));
  }

  /**
   * Test double primitive
   *
   */
  [@test]
  public void doublePrimitive() {
    $this.assertEquals(Primitive::$DOUBLE, Primitive::forName('double'));
  }

  /**
   * Test boolean primitive
   *
   */
  [@test]
  public void booleanPrimitive() {
    $this.assertEquals(Primitive::$BOOLEAN, Primitive::forName('boolean'));
  }

  /**
   * Test array primitive
   *
   */
  [@test]
  public void arrayPrimitive() {
    $this.assertEquals(Primitive::$ARRAY, Primitive::forName('array'));
  }

  /**
   * Test non-primitive passed to forName() raises an exception
   *
   * @see   xp://lang.Primitive#forName
   */
  [@test, @expect('lang.IllegalArgumentException')]
  public void nonPrimitive() {
    Primitive::forName('lang.Object');
  }

  /**
   * Test string is boxed to lang.types.String
   *
   * @see   xp://lang.Primitive#boxed
   */
  [@test]
  public void boxString() {
    $this.assertEquals(new String('Hello'), Primitive::boxed('Hello'));
  }

  /**
   * Test integer is boxed to lang.types.Integer
   *
   * @see   xp://lang.Primitive#boxed
   */
  [@test]
  public void boxInteger() {
    $this.assertEquals(new Integer(1), Primitive::boxed(1));
  }

  /**
   * Test double is boxed to lang.types.Double
   *
   * @see   xp://lang.Primitive#boxed
   */
  [@test]
  public void boxDouble() {
    $this.assertEquals(new Double(1.0), Primitive::boxed(1.0));
  }

  /**
   * Test boolean is boxed to lang.types.Boolean
   *
   * @see   xp://lang.Primitive#boxed
   */
  [@test]
  public void boxBoolean() {
    $this.assertEquals(new Boolean(true), Primitive::boxed(true), 'true');
    $this.assertEquals(new Boolean(false), Primitive::boxed(false), 'false');
  }

  /**
   * Test arrays are boxed to lang.types.ArrayList
   *
   * @see   xp://lang.Primitive#boxed
   */
  [@test]
  public void boxArray() {
    $this.assertEquals(new ArrayList(1, 2, 3), Primitive::boxed([1, 2, 3]));
  }

  /**
   * Test objects are boxed to themselves
   *
   * @see   xp://lang.Primitive#boxed
   */
  [@test]
  public void boxObject() {
    $o= new Object();
    $this.assertEquals($o, Primitive::boxed($o));
  }

  /**
   * Test null values are boxed to themselves
   *
   * @see   xp://lang.Primitive#boxed
   */
  [@test]
  public void boxNull() {
    $this.assertEquals(null, Primitive::boxed(null));
  }

  /**
   * Test resources cannot be boxed
   *
   * @see   xp://lang.Primitive#boxed
   */
  [@test]
  public void boxResource() {
    $fd= Streams::readableFd(new MemoryInputStream('test'));
    try {
      Primitive::boxed($fd);
      $this.fail('Expected exception not caught', null, 'lang.IllegalArgumentException');
    } catch (IllegalArgumentException $expected) {
      // OK
    } finally {
      fclose($fd);
    }
  }

  /**
   * Test lang.types.String is unboxed to string
   *
   * @see   xp://lang.Primitive#unboxed
   */
  [@test]
  public void unboxString() {
    $this.assertEquals('Hello', Primitive::unboxed(new String('Hello')));
  }

  /**
   * Test lang.types.Integer is unboxed to integer
   *
   * @see   xp://lang.Primitive#unboxed
   */
  [@test]
  public void unboxInteger() {
    $this.assertEquals(1, Primitive::unboxed(new Integer(1)));
  }

  /**
   * Test lang.types.Double is unboxed to double
   *
   * @see   xp://lang.Primitive#unboxed
   */
  [@test]
  public void unboxDouble() {
    $this.assertEquals(1.0, Primitive::unboxed(new Double(1.0)));
  }

  /**
   * Test lang.types.Boolean is unboxed to boolean
   *
   * @see   xp://lang.Primitive#unboxed
   */
  [@test]
  public void unboxBoolean() {
    $this.assertEquals(true, Primitive::unboxed(new Boolean(true)), 'true');
    $this.assertEquals(false, Primitive::unboxed(new Boolean(false)), 'false');
  }

  /**
   * Test lang.types.ArrayList is unboxed to array
   *
   * @see   xp://lang.Primitive#unboxed
   */
  [@test]
  public void unboxArray() {
    $this.assertEquals([1, 2, 3], Primitive::unboxed(new ArrayList(1, 2, 3)));
  }

  /**
   * Test objects cannot be unboxed.
   *
   * @see   xp://lang.Primitive#unboxed
   */
  [@test, @expect('lang.IllegalArgumentException')]
  public void unboxObject() {
    Primitive::unboxed(new Object());
  }

  /**
   * Test null values are unboxed to themselves
   *
   * @see   xp://lang.Primitive#unboxed
   */
  [@test]
  public void unboxNull() {
    $this.assertEquals(null, Primitive::unboxed(null));
  }

  /**
   * Test primitives values are unboxed to themselves
   *
   * @see   xp://lang.Primitive#unboxed
   */
  [@test]
  public void unboxPrimitive() {
    $this.assertEquals(1, Primitive::unboxed(1));
  }
}
