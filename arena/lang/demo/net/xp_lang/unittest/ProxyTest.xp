/* This class is part of the XP framework
 *
 * $Id$
 */
package net.xp_lang.unittest;

import unittest.TestCase;
import lang.reflect.Proxy;
import util.XPIterator;
import lang.reflect.InvocationHandler;

/**
 * Tests the Proxy class
 *
 * @see      xp://lang.reflect.Proxy
 * @purpose  Unit test
 */
public class ProxyTest extends TestCase {
  public var $handler= new InvocationHandler() {
    public [:var[]] $invocations= [:];

    public var invoke(Proxy? $proxy, string $method, var[]? $args) { 
      $this.invocations[$method ~ '_' ~ $args.length]= $args;
    }
  };
    
  protected static XPClass $iteratorClass= util.XPIterator::class;
  protected static XPClass $observerClass= util.Observer::class;

  /**
   * Helper method which returns a proxy instance for a given list of
   * interfaces, using the default classloader and the handler defined
   * in setUp()
   *
   */
  protected Proxy proxyInstanceFor(XPClass[] $interfaces) {
    return Proxy::newProxyInstance(
      ClassLoader::getDefault(),
      $interfaces, 
      $this.handler
    );
  }

  /**
   * Helper method which returns a proxy class for a given list of
   * interfaces, using the default classloader and the handler defined
   * in setUp()
   *
   */
  protected XPClass proxyClassFor(XPClass[] $interfaces) {
    return Proxy::getProxyClass(
      ClassLoader::getDefault(),
      $interfaces,
      $this.handler
    );
  }

  /**
   * Tests Proxy classes are prefixed to make them unique. The prefix
   * is a constant defined in the Proxy class.
   *
   */
  [@test]
  public void proxyClassNamesGetPrefixed() {
    $class= $this.proxyClassFor([self::$iteratorClass]);
    $this.assertTrue(new lang.types.String($class.getName()).startsWith(PROXY_PREFIX));
  }

  /**
   * Tests calling getProxyClass() twice with the same interface list
   * will result in the same proxy class
   *
   */
  [@test]
  public void classesEqualForSameInterfaceList() {
    $c1= $this.proxyClassFor([self::$iteratorClass]);
    $c2= $this.proxyClassFor([self::$iteratorClass]);
    $c3= $this.proxyClassFor([self::$iteratorClass, self::$observerClass]);

    $this.assertEquals($c1, $c2);
    $this.assertNotEquals($c1, $c3);
  }

  /**
   * Tests Proxy implements the interface(s) passed
   *
   */
  [@test]
  public void iteratorInterfaceIsImplemented() {
    $interfaces= $this.proxyClassFor([self::$iteratorClass]).getInterfaces();
    $this.assertEquals(2, $interfaces.length);
    $this.assertEquals(self::$iteratorClass, $interfaces[1]);
  }
  
  /**
   * Extension method: Checks whether an object is contained in a given list
   *
   */
  protected static bool contains(this Object[] $list, Object $value) {
    foreach ($item in $list) {
      if ($item.equals($value)) return true;
    }
    return false;
  }

  /**
   * Tests Proxy implements the interface(s) passed
   *
   */
  [@test]
  public void allInterfacesAreImplemented() {
    $interfaces= $this.proxyClassFor([self::$iteratorClass, self::$observerClass]).getInterfaces();
    $this.assertEquals(3, $interfaces.length);
    $this.assertTrue($interfaces.contains(self::$iteratorClass));
    $this.assertTrue($interfaces.contains(self::$observerClass));
  }
  
  /**
   * Extension method: Retrieves names for a list of method objects
   *
   */
  protected static string[] names(this lang.reflect.Method[] $methods) {
    $r= [];
    foreach ($method in $methods) {
      $r[]= $method.getName();
    }
    return $r;
  }
  
  /**
   * Tests Proxy implements all Iterator methods
   *
   */
  [@test]
  public void iteratorMethods() {
    $expected= new string[] {
      'hasNext', 'next',                                            // util.XPIterator
      'getProxyClass', 'newProxyInstance',                          // lang.reflect.Proxy
      'hashCode', 'equals', 'getClassName', 'getClass', 'toString', // lang.Object
    };

    $this.assertEquals($expected, $this.proxyClassFor([self::$iteratorClass]).getMethods().names());
  }

  /**
   * Tests util.Iterator::next() invocation without arguments
   *
   */
  [@test]
  public void iteratorNextInvoked() {
    $proxy= $this.proxyInstanceFor([self::$iteratorClass]);
    $proxy.next();
    $this.assertEquals([], $this.handler.invocations['next_0']);
  }

  /**
   * Tests proxies can not be created for classes, only for interfaces
   *
   */
  [@test, @expect('lang.IllegalArgumentException')]
  public void cannotCreateProxiesForClasses() {
    $this.proxyInstanceFor([Object::class]);
  }

  /**
   * Check that implementing two interfaces that declare a common
   * method does not issue a fatal error.
   *
   */
  [@test]
  public void allowDoubledInterfaceMethod() {
    $this.proxyInstanceFor([
      self::$iteratorClass,
      ClassLoader::defineInterface('util.NewIterator', 'util.XPIterator')
    ]);
  }

  /**
   * Check that overloaded methods are correctly built.
   *
   */
  [@test]
  public void overloadedMethod() {
    $proxy= $this.proxyInstanceFor([net.xp_framework.unittest.reflection.OverloadedInterface::class]);
    $proxy.overloaded('foo');
    $proxy.overloaded('foo', 'bar');
    $this.assertEquals(['foo'], $this.handler.invocations['overloaded_1']);
    $this.assertEquals(['foo', 'bar'], $this.handler.invocations['overloaded_2']);
  }    
}
