<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.SwitchNode',
    'xp.compiler.ast.CaseNode',
    'xp.compiler.ast.DefaultNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 57 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_BOOLEAN_OR',  414);
  define('TOKEN_T_BOOLEAN_AND',  415);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_DECIMAL',  263);
  define('TOKEN_T_HEX',  264);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_PACKAGE',  303);
  define('TOKEN_T_IMPORT',  304);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_T_DOUBLE_ARROW',  413);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          9,     9,     9,     4,     4,    12,     3,    16,     3,    18, 
          3,    13,    13,    14,    14,    19,    19,    21,    21,    15, 
         15,    22,    22,    22,    17,    17,    17,    26,    26,    28, 
         27,    29,    27,    23,    23,    34,    34,    33,    33,    33, 
         32,    32,    37,    24,    40,    24,    42,    24,    10,    10, 
         43,    43,    45,    45,    45,    39,    39,    36,    36,    48, 
         48,    49,    49,    38,    38,    41,    41,    41,    41,    41, 
         41,    41,    41,    25,    25,    35,    35,    51,    50,    52, 
         50,    55,    50,    57,    50,    59,    50,    60,    50,    61, 
         50,    63,    50,    50,    65,    50,    50,    50,    62,    62, 
         66,    66,    68,    67,    69,    67,    58,    58,    53,    53, 
         54,    70,    54,    64,    64,    71,    71,    75,    74,    72, 
         72,    76,    73,    56,    56,    77,    77,    46,    46,    78, 
         78,    30,    81,    30,    82,    30,    83,    30,    84,    30, 
         85,    30,    30,    30,    30,    30,    30,    30,    30,    30, 
         30,    79,    91,    79,    79,    79,    79,    79,    79,    92, 
         92,    47,    47,    93,    86,    86,    86,    86,    86,    86, 
         87,    87,    87,    87,    87,    87,    88,    88,    88,    88, 
         88,    88,    89,    89,    89,    89,    89,    89,    90,    90, 
         80,    80,    95,    94,    94,    96,    94,    94,    31,    31, 
         11,    11,    97,    98,    98,    99,    99,    20,    20,    44, 
         44,   100,   100,   101,   101,   101,   101,   101,   101,   101, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     6, 
          1,     1,     3,     1,     3,     0,     9,     0,     9,     0, 
          8,     0,     2,     0,     2,     0,     2,     0,     3,     2, 
          0,     1,     1,     4,     3,     1,     0,     1,     3,     0, 
          3,     0,     6,     5,     6,     0,     1,     2,     4,     4, 
          0,     2,     0,     9,     0,     8,     0,    10,     4,     1, 
          1,     3,     2,     5,     5,     1,     3,     0,     1,     1, 
          3,     3,     3,     0,     2,     1,     1,     1,     1,     1, 
          1,     2,     3,     0,     1,     1,     2,     0,     4,     0, 
          7,     0,    10,     0,     8,     0,     6,     0,     7,     0, 
          8,     0,     6,     2,     0,     4,     2,     1,     0,     1, 
          1,     2,     0,     5,     0,     4,     3,     1,     1,     3, 
          0,     0,     3,     2,     1,     1,     2,     0,     9,     0, 
          1,     0,     5,     0,     1,     1,     3,     0,     1,     5, 
          6,     1,     0,     3,     0,     4,     0,     5,     0,     8, 
          0,     6,     3,     1,     1,     1,     1,     1,     5,     3, 
          3,     1,     0,     4,     3,     1,     1,     1,     1,     0, 
          1,     1,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     2,     2,     2,     2,     2,     2,     2,     2, 
          0,     1,     0,     4,     2,     0,     6,     2,     1,     1, 
          1,     4,     3,     1,     3,     1,     3,     1,     3,     0, 
          1,     1,     2,     1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   224,   226,   225,   227,   229,   228,   230,     1, 
          0,    60,   221,     0,     8,     0,     4,     0,     0,     0, 
          0,    16,    20,    18,   223,    15,     0,     0,     0,     0, 
          0,     0,     0,    12,     0,     0,     0,    59,    62,     0, 
          0,     0,     0,     0,    10,     0,     0,   163,     0,     0, 
          0,     0,     0,   169,   166,   168,   167,   143,   145,     0, 
          0,     0,     0,     0,     0,   142,   154,   155,   156,   157, 
        158,     0,     0,     0,     0,     0,     0,     0,    13,     0, 
          0,     0,     0,     0,     0,     0,   151,     0,     0,     0, 
        171,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   199, 
        200,     0,     0,     0,     0,     0,     0,     0,    64,    65, 
          0,     0,   216,     0,     0,    23,     0,     0,     0,    27, 
         31,     0,     0,     0,   135,     0,   203,     0,   144,     0, 
          0,   209,     0,     0,   210,   165,   153,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   181,   182,   183,   184,   185, 
        186,     0,   173,     0,   212,     0,    25,    31,     0,     0, 
          0,     0,   164,     0,     0,     0,     0,     0,     0,   146, 
          0,     0,     0,   217,   215,     0,   219,     0,    21,     0, 
         30,    32,    33,     0,     0,     0,     0,   137,     0,     0, 
        206,     0,     0,   148,     0,     0,    17,     0,     0,     0, 
          0,     0,     0,     0,    19,    31,     0,   152,   204,     0, 
          0,     0,     0,    88,     0,   105,    92,    96,    98,    94, 
          0,    90,   100,   108,     0,     0,    85,     0,    55,     0, 
          0,     0,     0,     0,    31,    41,     0,     0,    39,     0, 
          0,   140,     0,     0,   102,     0,     0,     0,     0,     0, 
        104,     0,     0,    34,   107,    87,     0,     0,     0,   213, 
         53,    76,    77,    78,    79,    80,     0,    81,     0,     0, 
          0,     0,     0,   207,   141,   150,     0,     0,     0,     0, 
          0,     0,   119,     0,     0,     0,     0,     0,     0,    69, 
          0,     0,    48,     0,    47,     0,     0,    82,     0,    57, 
          0,    44,    29,     0,    89,     0,   106,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    45,     0,    83,     0,    43,     0,     0,     0,   120, 
          0,     0,     0,     0,    73,    72,     0,     0,    71,    49, 
         50,     0,     0,   128,   132,   103,     0,   125,     0,     0, 
         97,     0,     0,     0,     0,     0,    75,    66,     0,    56, 
          0,     0,     0,     0,   124,   131,   127,     0,    99,     0, 
          0,   122,    91,   113,   115,     0,   110,     0,     0,    54, 
          0,     0,     0,     0,   117,    95,     0,     0,     0,   101, 
        112,    67,    58,     0,     0,     0,   123,     0,     0,     0, 
        133,    93,     0,   116,     0,   114,     0,     0,   129, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    20,    72,     4,     7,     8,    11,    46,   210, 
        152,    41,    85,   138,   190,    43,   215,    42,    87,   140, 
        266,   211,   212,   213,   255,   216,   217,   233,   234,   256, 
        318,   301,   289,   326,   257,   319,   327,   368,   390,   287, 
        299,   355,    30,    22,    31,    74,   101,   320,   321,   258, 
        274,   282,   314,   403,   277,   144,   280,   384,   278,   279, 
        283,   406,   308,   376,   276,   407,   408,   418,   419,   417, 
        377,   395,   378,   379,   393,   394,   145,   154,    76,   149, 
         98,    99,   158,   159,   146,    77,    78,    79,    80,    81, 
         92,   102,    82,   150,   195,   240,   155,   134,   135,    23, 
         24, 
    );
    protected static $yySindex = array(         -268,
          0,     0,  -258,  -203,     0,   137,     0,  -258,    29,    52, 
       -117,    88,     0,     0,     0,     0,     0,     0,     0,     0, 
        -70,     0,     0,   278,     0,  -203,     0,   116,  -203,    84, 
        135,     0,     0,     0,     0,     0,   -38,   144,   278,    88, 
       -203,  -203,  -203,     0,   140,   139,  1950,     0,     0,   147, 
       -100,   -98,  -100,   -38,     0,  1950,  1950,     0,  1950,  1950, 
       1950,  1950,   162,     0,     0,     0,     0,     0,     0,  1950, 
       1950,  -196,   279,   175,   192,     0,     0,     0,     0,     0, 
          0,   209,   -49,  -203,   -43,  -203,   149,   -43,     0,   333, 
        333,  1950,   333,   333,   333,   333,     0,   -90,  -203,   279, 
          0,   145,   349,     0,  1950,  1950,  1950,  1950,  1950,  1950, 
       1950,  1950,  1950,  1950,  1950,  1950,  1950,  1950,  1950,     0, 
          0,  1950,  1950,  1950,  1950,  1950,  1950,  1950,     0,     0, 
       1950,   -36,     0,   213,   232,     0,  -203,   154,   234,     0, 
          0,   157,   404,   189,     0,  1950,     0,    21,     0,   -90, 
         97,     0,   244,   -90,     0,     0,     0,   -55,    26,   333, 
        333,   333,   333,   333,   333,   980,   229,   333,   333,   333, 
        333,   333,   333,   333,   333,     0,     0,     0,     0,     0, 
          0,   980,     0,  -203,     0,   -49,     0,     0,  -203,   657, 
         38,  1950,     0,   249,  1950,   251,   -90,   210,  1950,     0, 
        -90,   268,  1950,     0,     0,   794,     0,   181,     0,  -253, 
          0,     0,     0,     0,   185,   258,   276,     0,   -90,   238, 
          0,   204,   294,     0,  1950,   333,     0,  2602,   169,     3, 
        105,  -206,   214,   296,     0,     0,    38,     0,     0,  1950, 
       1950,   214,   303,     0,   226,     0,     0,     0,     0,     0, 
        293,     0,     0,     0,   231,   459,     0,  2602,     0,    94, 
        266,   320,     5,   300,     0,     0,  1950,   188,     0,   321, 
        240,     0,   -90,  1950,     0,  1950,   326,   327,  2636,   344, 
          0,   345,   348,     0,     0,     0,  -203,  -115,    94,     0, 
          0,     0,     0,     0,     0,     0,   -77,     0,   357,  1950, 
        339,   873,   510,     0,     0,     0,   582,  2602,   658,  1950, 
       1950,  2602,     0,    39,  1950,  1950,  1950,   -40,   358,     0, 
        359,   362,     0,  2602,     0,   347,  -203,     0,   311,     0, 
        980,     0,     0,   214,     0,   282,     0,   354,   725,   291, 
        252,   395,   780,   835,   886,   103,   300,   124,  -203,   411, 
        329,     0,   414,     0,  -203,     0,  -280,  1950,  2636,     0, 
       1950,   120,  2636,   340,     0,     0,  -203,   -10,     0,     0, 
          0,   124,   415,     0,     0,     0,   117,     0,   133,   428, 
          0,   913,    81,   462,   129,  -114,     0,     0,  2602,     0, 
        -10,   124,   465,   384,     0,     0,     0,  1950,     0,   168, 
       2636,     0,     0,     0,     0,   386,     0,  -114,   387,     0, 
        -10,  -203,  2602,   468,     0,     0,  2636,  1950,   455,     0, 
          0,     0,     0,   177,   390,  2636,     0,   958,  2602,   475, 
          0,     0,  2602,     0,   400,     0,  2602,   399,     0, 
    );
    protected static $yyRindex= array(          548,
          0,     0,   495,     0,     0,   -59,     0,   748,   104,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,  -101,     0,     0,     0,     0,     0,     0, 
        432,     0,     0,     0,     0,     0,     0,    12,   197,     0, 
          0,     0,     0,     0,   467,     0,   487,     0,     0,    47, 
       -106,   406,  -106,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    78,     0,     0,     0,     0,     0,     0,   416, 
          0,     0,   507,     0,     0,     0,     0,     0,     0,     0, 
          0,   -18,     0,     0,   426,     0,     0,   426,     0,  1049, 
       1104,   457,  1159,  1214,  1356,  1379,     0,   131,     0,     0, 
          0,     0,     0,  -205,     0,     0,     0,     0,     0,     0, 
        496,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   494,     0,     0,     0,     4,     0, 
          0,     0,    17,     0,     0,   524,     0,     0,     0,   176, 
        526,     0,     0,   131,     0,     0,     0,     0,     0,  1432, 
       1487,  1540,  1593,  1616,  1647,   -15,     0,  1686,  1760,  1813, 
       1866,  1923,  2022,  2067,  2090,     0,     0,     0,     0,     0, 
          0,    -8,     0,     0,     0,     0,     0,     0,     0,  -228, 
        443,     0,     0,     0,   476,   -32,   203,     0,   524,     0, 
        131,     0,     0,     0,     0,  -228,     0,   838,     0,     0, 
          0,     0,     0,     1,     0,   449,    33,     0,   131,     0, 
          0,   535,     0,     0,   524,  2143,     0,   469,    13,     0, 
         -2,     0,    30,     0,     0,     0,     0,     0,     0,   524, 
        470,    25,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,  -122,     0,     0, 
          0,     0,     0,   533,     0,     0,     0,  -104,     0,     0, 
          0,     0,   131,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   552,     0,   537,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,  -228,     0,     0,     0,     0,     0,   469,     0,   538, 
          0,   469,     0,     0,     0,     0,     0,     0,     0,     0, 
        557,     0,     0,     0,     0,     0,   552,     0,     0,     0, 
        417,     0,     0,    30,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    56,    31,     0,     0, 
          0,     0,     0,     0,   552,     0,     0,   538,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    31,     0,     0,     0,     0,  2480,     0,  2361,     0, 
          0,     0,   558,     0,  2548,   477,     0,     0,   469,     0, 
          0,    31,     0,     0,     0,     0,     0,   524,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   488,     0,     0, 
          0,     0,   469,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,  -119,     0, 
          0,     0,  -119,     0,     0,     0,   469,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   592,     0,     0,   547,   606, 
        264,     0,   567,   534,  -135,     0,     0,     0,     0,  -118, 
       -222,     0,     0,     0,   578,   389,     0,     0,     0,  2252, 
        -81,   274,   334,     0,  -155,  -195,     0,  -225,  -230,     0, 
          0,     0,   588,   591,     0,   -87,    -3,   283,   336,   -92, 
          0,     0,   -71,     0,     0,   489,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   230,     0,     0,     0,     0, 
        255,     0,   260,     0,     0,     0,   448,     0,     0,  -120, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   -99,     0,     0,     0,   460,     0,   623, 
          0, 
    );
    protected static $yyTable = array(10,
        147,   346,    86,    44,   205,    84,   229,   324,   205,   205, 
        205,   205,   205,   132,   205,   328,    22,   153,   187,   272, 
         35,    36,   172,   167,    38,   205,   205,   205,   205,   205, 
        205,   220,   174,   200,     1,   174,    50,    50,    50,   211, 
         42,   296,   139,    75,    40,     5,   294,   292,   388,   293, 
        197,   295,   206,   262,   149,    63,     9,   136,   205,    40, 
        205,    28,   218,   374,   375,    28,    28,    28,    28,    28, 
        207,    28,    14,    28,    26,   136,   230,   139,    50,    50, 
        224,    50,    28,    28,    28,    28,    28,    28,    28,    74, 
        211,    38,   205,   205,   151,   297,    51,   197,   238,    51, 
        268,   220,   286,    14,    63,   211,   172,   220,   211,   136, 
         27,   356,   389,   263,   162,    28,   174,    28,   162,   162, 
        162,   162,   162,    40,   162,    40,   218,   183,   232,   302, 
        298,   353,    50,   264,   147,   162,   162,   162,   162,   162, 
        162,   136,    28,    14,   322,    14,   391,    14,    51,    28, 
         28,    29,   306,    74,    28,   220,    83,    38,   222,   373, 
        410,    37,    14,    14,    83,    14,   411,   201,   351,   211, 
        162,   201,   201,   201,   201,   201,    39,   201,    40,   204, 
        423,    50,     9,    47,    50,    54,   313,   198,   201,   201, 
        201,   201,   201,   201,    14,   261,    14,    55,   222,   222, 
        222,    97,   162,   162,    22,   231,    83,    26,   259,    84, 
          9,    86,   202,   104,    26,   129,   202,   202,   202,   202, 
        202,    45,   202,   201,   323,   220,    14,    12,   222,    32, 
         33,    34,   130,   202,   202,   202,   202,   202,   202,   208, 
        220,   220,   220,   208,   208,   208,   208,   208,   387,   208, 
         86,    86,   131,    84,    84,   201,   201,   211,   404,   405, 
        208,   208,   208,   208,   208,   208,   313,   137,   202,   156, 
        313,   141,    14,   184,   185,   186,   188,   189,    12,   191, 
        196,   193,   231,   199,   201,   202,   203,   381,   110,   219, 
        221,   385,   231,   108,   106,   208,   107,   214,   109,   347, 
        202,   202,   222,   228,    51,    52,    53,   225,   313,   235, 
        285,   122,   105,   123,   111,   110,   236,   211,   148,   237, 
        108,   106,   231,   107,   313,   109,   241,   208,   208,   416, 
        239,   205,    14,   313,   242,   267,   265,   211,   122,   105, 
        123,   111,   260,   273,   231,   427,   133,   136,   275,   139, 
        231,   281,    14,   288,   432,   284,   211,   211,   290,   291, 
        300,   304,    50,    14,   305,   310,   311,   205,   205,   205, 
        205,   205,   205,   205,   205,   205,   205,   119,   205,   205, 
        205,   205,   205,   315,   316,   110,   211,   317,    28,   157, 
        108,   106,   122,   107,   123,   109,   330,   332,   348,   342, 
        139,   350,   349,   354,   119,   352,   357,    50,   122,   105, 
        123,   111,   358,    14,    14,   360,    13,    14,    15,    16, 
         17,    18,    19,    14,    28,    28,    28,    28,    28,    28, 
         28,    28,    28,    28,   361,    28,    28,    28,    28,    28, 
        110,   162,   365,    14,   367,   108,   106,   192,   107,   133, 
        109,   370,   139,   371,   372,   392,   220,    52,   119,   383, 
         52,   375,   386,   122,   105,   123,   111,    13,    14,    15, 
        208,    17,    18,    19,   119,    52,   374,   162,   162,   162, 
        162,   162,   162,   162,   162,   162,   398,    14,   162,   162, 
        162,   162,   162,   400,   201,   110,   220,   220,   220,   402, 
        108,   106,   401,   107,   412,   109,   413,   415,   426,    52, 
        420,   422,   429,    14,   431,   435,   430,   285,   122,   105, 
        123,   111,   437,   439,    61,    11,   220,   138,    26,   119, 
        201,   201,   201,   201,   201,   201,   201,   201,   201,   202, 
        170,   201,   201,   201,   201,   201,   110,   139,    24,   134, 
        334,   108,   106,   138,   107,   214,   109,    13,    14,    15, 
         16,    17,    18,    19,   134,   211,   208,    37,   138,   122, 
        105,   123,   111,    36,   213,   202,   202,   202,   202,   202, 
        202,   202,   202,   202,   119,     5,   202,   202,   202,   202, 
        202,    51,    68,    84,   134,    46,   134,    70,   118,    25, 
         89,   109,   208,   208,   208,   208,   208,   208,   208,   208, 
        208,    21,   111,   208,   208,   208,   208,   208,   110,    88, 
        366,   142,   325,   108,   106,   269,   107,    49,   109,    48, 
        139,   369,   329,   397,   194,   119,   396,   421,     2,   218, 
        335,   122,   105,   123,   111,   205,    35,     0,     0,     0, 
          0,   125,   124,   120,   121,   112,   113,   114,   115,   116, 
          0,     0,   126,   127,   128,   117,   118,     0,     0,     0, 
          0,     0,     0,     0,     0,   424,     0,     0,   125,   124, 
        120,   121,   112,   113,   114,   115,   116,   223,     0,   126, 
        127,   128,   117,   118,   110,     0,     0,     0,     0,   108, 
        106,     0,   107,     0,   109,     0,     0,   119,     0,     0, 
          0,     0,     0,   243,     0,     0,   337,   122,   105,   123, 
        111,     0,     0,     0,     0,     0,     0,     0,   270,   271, 
          0,     0,   125,   124,   120,   121,     0,     0,     0,     0, 
          0,     0,     0,   126,   127,     0,     0,    12,   125,   124, 
        120,   121,   112,   113,   114,   115,   116,     0,     0,   126, 
        127,   110,   117,   118,     0,   359,   108,   106,     0,   107, 
          0,   109,     0,     0,     5,     5,     5,     5,     5,     5, 
          5,   209,     0,   119,   122,   105,   123,   111,     0,     0, 
          0,     0,     0,     0,     5,     5,     5,     0,   338,     0, 
          0,     0,     0,   125,   124,   120,   121,   112,   113,   114, 
        115,   116,     0,     0,   126,   127,   110,   117,   118,     0, 
          0,   108,   106,     0,   107,     0,   109,     2,     2,     2, 
          2,     2,     2,     2,     0,     0,     0,     0,     7,   122, 
        105,   123,   111,     0,     0,     0,   380,     2,     2,     2, 
        119,     2,     0,     0,     0,     0,     0,     0,   125,   124, 
        120,   121,   112,   113,   114,   115,   116,     0,     0,   126, 
        127,   110,   117,   118,     0,   363,   108,   106,     0,   107, 
          0,   109,     0,     0,    12,   336,   414,     0,     0,   340, 
          0,     0,     0,     0,   122,   105,   123,   111,     0,     0, 
          0,     0,     0,     0,     0,   119,     0,     0,     0,   125, 
        124,   120,   121,   112,   113,   114,   115,   116,   227,     0, 
        126,   127,   110,   117,   118,     0,   364,   108,   106,     0, 
        107,     0,   109,     0,     0,     0,    13,    14,    15,   208, 
         17,    18,    19,     0,     0,   122,   105,   123,   111,   110, 
          0,     0,     0,   399,   108,   106,     0,   107,     0,   109, 
        119,     0,     0,    12,     0,     0,   409,     0,     0,     0, 
          0,     0,   122,   105,   123,   111,     0,     0,     0,     0, 
          0,   125,   124,   120,   121,   112,   113,   114,   115,   116, 
        425,     0,   126,   127,   110,   117,   118,   333,     0,   108, 
        106,     0,   107,     0,   109,     0,   434,     0,     0,     0, 
        436,   119,     0,     0,   438,   433,   110,   122,   105,   123, 
        111,   108,   106,     0,   107,     0,   109,     7,     7,     7, 
          7,     7,     7,     7,     0,     0,     0,     0,   119,   122, 
        105,   123,   111,     0,     0,     0,     0,     7,     7,     7, 
          0,     0,     0,     0,     0,     0,     0,   125,   124,   120, 
        121,   112,   113,   114,   115,   116,     0,     0,   126,   127, 
          0,   117,   118,    13,    14,    15,   208,    17,    18,    19, 
          0,     0,     0,   119,     0,   195,     0,     0,     0,   195, 
        195,   195,   195,   195,     0,   195,     0,   227,     0,     0, 
          0,     0,     0,     0,     0,   119,   195,   195,     0,   195, 
          0,   195,     0,     0,     0,     0,     0,   227,   227,   227, 
        227,   227,   227,   227,   125,   124,   120,   121,   112,   113, 
        114,   115,   116,     0,     0,   126,   127,     0,   117,   118, 
        196,   195,     0,   362,   196,   196,   196,   196,   196,     0, 
        196,     0,    13,    14,    15,   208,    17,    18,    19,     0, 
          0,   196,   196,     0,   196,     0,   196,   227,     0,     0, 
          0,     0,     0,   195,     0,     0,     0,     0,     0,   125, 
        124,   120,   121,   112,   113,   114,   115,   116,     0,     0, 
        126,   127,     0,   117,   118,   193,   196,     0,     0,   193, 
        193,   193,   193,   193,     0,   193,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   193,   193,     0,   193, 
          0,   193,     0,     0,     0,     0,     0,     0,   196,     0, 
          0,     0,     0,     0,   125,   124,   120,   121,   112,   113, 
        114,   115,   116,     0,     0,   126,   127,     0,   117,   118, 
        194,   193,     0,     0,   194,   194,   194,   194,   194,     0, 
        194,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   194,   194,     0,   194,     0,   194,     0,     0,     0, 
          0,     0,     0,   193,     0,   125,   124,   120,   121,   112, 
        113,   114,   115,   116,     0,     0,   126,   127,     0,   117, 
        118,     0,     0,     0,     0,     0,   194,     0,     0,     0, 
          0,     0,   125,   124,   120,   121,   112,   113,   114,   115, 
        116,     0,     0,   126,   127,     0,   117,   118,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   194,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   125,   124,   120, 
        121,   112,   113,   114,   115,   116,     0,     0,   126,   127, 
          0,   117,   118,     0,     0,     0,     0,     0,     0,   125, 
        124,   120,   121,   112,   113,   114,   115,   116,     0,     0, 
        126,   127,   197,   117,   118,     0,   197,   197,   197,   197, 
        197,     0,   197,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   195,   197,   197,   198,   197,     0,   197,   198, 
        198,   198,   198,   198,     0,   198,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   198,   198,     0,   198, 
          0,   198,     0,     0,     0,     0,     0,     0,   197,     0, 
          0,     0,   195,   195,   195,   195,   195,     0,     0,     0, 
          0,   195,   195,   195,     0,     0,     0,   196,   175,     0, 
          0,   198,   175,   175,   175,   175,   175,     0,   175,     0, 
        197,     0,     0,     0,     0,     0,     0,     0,     0,   175, 
        175,     0,   175,     0,   175,     0,     0,     0,     0,     0, 
          0,     0,     0,   198,     0,     0,     0,   196,   196,   196, 
        196,   196,     0,     0,     0,     0,   196,   196,   196,     0, 
          0,     0,   193,   187,   175,     0,     0,   187,   187,   187, 
        187,   187,     0,   187,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   187,   187,     0,   187,     0,   187, 
          0,     0,     0,     0,     0,     0,   175,     0,     0,     0, 
          0,     0,   193,   193,   193,   193,   193,     0,     0,     0, 
          0,   193,   193,   193,     0,     0,   188,   194,     0,   187, 
        188,   188,   188,   188,   188,     0,   188,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   188,   188,     0, 
        188,     0,   188,     0,     0,     0,     0,     0,     0,     0, 
          0,   187,     0,     0,     0,     0,     0,   194,   194,   194, 
        194,   194,     0,     0,     0,     0,   194,   194,   194,   189, 
          0,     0,   188,   189,   189,   189,   189,   189,     0,   189, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        189,   189,   190,   189,     0,   189,   190,   190,   190,   190, 
        190,     0,   190,     0,   188,     0,     0,     0,     0,     0, 
          0,     0,     0,   190,   190,     0,   190,     0,   190,     0, 
          0,     0,     0,   191,     0,   189,     0,   191,   191,   191, 
        191,   191,     0,   191,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   191,   191,     0,   191,   190,   191, 
          0,     0,     0,     0,     0,     0,     0,   189,     0,   197, 
          0,     0,   176,     0,     0,     0,   176,   176,   176,   176, 
        176,     0,   176,     0,     0,     0,     0,     0,     0,   191, 
        190,     0,   198,   176,   176,     0,   176,     0,   176,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   197, 
        197,   197,   197,   197,     0,     0,     0,     0,   197,   197, 
        197,   191,     0,     0,     0,     0,     0,     0,   176,     0, 
          0,     0,   198,   198,   198,   198,   198,     0,     0,     0, 
          0,   198,   198,   198,     0,   175,   177,     0,     0,     0, 
        177,   177,   177,   177,   177,     0,   177,     0,     0,     0, 
        176,     0,     0,     0,     0,     0,     0,   177,   177,     0, 
        177,     0,   177,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   175,   175,   175,   175,   175, 
          0,     0,     0,     0,   175,   175,   175,     0,     0,   178, 
        187,     0,   177,   178,   178,   178,   178,   178,     0,   178, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        178,   178,     0,   178,     0,   178,     0,     0,     0,     0, 
          0,     0,     0,     0,   177,     0,     0,     0,     0,     0, 
        187,   187,   187,   187,   187,     0,     0,     0,     0,   187, 
        187,   187,   179,   188,     0,   178,   179,   179,   179,   179, 
        179,     0,   179,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   179,   179,     0,   179,     0,   179,     0, 
          0,     0,     0,     0,     0,     0,     0,   178,     0,     0, 
          0,     0,     0,   188,   188,   188,   188,   188,     0,     0, 
          0,     0,   188,   188,   188,     0,   189,     0,   179,   180, 
          0,     0,     0,   180,   180,   180,   180,   180,     0,   180, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   190, 
        180,   180,    59,   180,     0,   180,     0,     0,     0,    71, 
        179,     0,    56,     0,    57,     0,   189,   189,   189,   189, 
        189,     0,     0,     0,     0,   189,   189,   189,     0,     0, 
        191,     0,     0,     0,     0,   180,     0,     0,     0,   190, 
        190,   190,   190,   190,     0,     0,     0,     0,   190,   190, 
        190,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         58,     0,     0,     0,     0,     0,     0,   180,     0,   176, 
        191,   191,   191,   191,   191,     0,     0,     0,   160,   191, 
        191,   191,   160,   160,   160,   160,   160,     0,   160,     0, 
          0,     0,    70,     0,     0,    60,     0,     0,     0,   160, 
        160,     0,   160,     0,   160,     0,     0,     0,     0,   176, 
        176,   176,   176,   176,     0,     0,     0,     0,   176,   176, 
        176,     0,     0,   161,     0,     0,     0,   161,   161,   161, 
        161,   161,     0,   161,   160,     0,     0,     0,     0,     0, 
          0,     0,     0,   177,   161,   161,   192,   161,     0,   161, 
        192,   192,   192,   192,   192,     0,   192,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   160,   192,   192,     0, 
        192,     0,   192,     0,     0,     0,     0,     0,     0,   161, 
          0,     0,     0,   177,   177,   177,   177,   177,     0,     0, 
          0,     0,   177,   177,   177,     0,   178,     0,     0,   159, 
          0,     0,   192,   159,   159,   159,   159,   159,     0,   159, 
          0,   161,     0,     0,     0,     0,     0,     0,     0,     0, 
        159,   159,     0,   159,     0,   159,     0,     0,     0,    63, 
         64,    65,    66,    67,   192,     0,   178,   178,   178,   178, 
        178,     0,     0,     0,     0,   178,   178,   178,     0,   179, 
          0,     0,     0,     0,     0,   159,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   159,     0,   179, 
        179,   179,   179,   179,     0,     0,     0,     0,   179,   179, 
        179,     0,     0,     0,     0,     0,   180,     0,     0,    68, 
          0,     0,     0,     0,     0,    69,     0,     0,    73,     0, 
          0,     0,     0,     0,     0,     0,     0,    90,    91,     0, 
         93,    94,    95,    96,     0,     0,     0,     0,     0,     0, 
          0,   100,   103,     0,     0,     0,   180,   180,   180,   180, 
        180,     0,     0,     0,     0,   180,   180,   180,     0,     0, 
          0,     0,     0,   143,     0,     0,     0,     0,     0,     0, 
          0,    61,    62,     0,     0,     0,   160,   161,   162,   163, 
        164,   165,   166,   168,   169,   170,   171,   172,   173,   174, 
        175,     0,     0,   176,   177,   178,   179,   180,   181,   182, 
          0,     0,   100,     0,     0,   160,     0,     0,     0,     0, 
          0,     0,     0,   126,     0,     0,     0,   143,     0,     0, 
        126,     0,     0,   126,     0,   126,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   126, 
          0,     0,     0,     0,     0,   160,   160,   160,   160,   160, 
        161,     0,     0,     0,   160,   160,   160,     0,     0,     0, 
          0,     0,     0,   143,     0,     0,   166,     0,     0,     0, 
        143,   126,     0,   192,   226,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        161,   161,   161,   161,   161,     0,   143,     0,     0,   161, 
        161,   161,     0,   126,     0,   126,   126,     0,     0,     0, 
          0,   143,   143,   192,   192,   192,   192,   192,     0,     0, 
          0,     0,   192,   192,   192,     0,   159,     0,     0,     0, 
          0,     0,   130,     0,     0,     0,     0,     0,   303,   130, 
          0,     0,   130,     0,   130,   307,     0,   309,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   130,     0, 
          0,     0,     0,     0,     0,     0,   159,   159,   159,   159, 
        159,   331,     0,     0,     0,   159,   159,   159,     0,     0, 
          0,   143,   339,   341,     0,     0,   343,   344,   345,     0, 
        130,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        121,     0,     0,     0,     0,     0,     0,   121,     0,     0, 
        121,     0,   121,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   130,     0,   130,   130,   121,     0,     0,   143, 
          0,     0,   382,     0,     0,     0,     0,     0,     0,     0, 
        126,   126,   126,   126,   126,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    59,     0,     0,     0,   121,     0, 
          0,    71,     0,     0,    56,     0,    57,     0,     0,   143, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        254,     0,     0,     0,     0,     0,     0,     0,    59,   428, 
        121,     0,   121,   121,     0,    71,     0,     0,    56,     0, 
         57,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    58,     0,   254,     0,     0,     0,     0,     0, 
        126,   126,   126,   126,     0,   126,   126,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        126,   126,   126,   126,    70,   126,    58,    60,     0,     0, 
        126,   126,   126,   126,   126,     0,     0,     0,     0,   130, 
        130,   130,   130,   130,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   312,     0, 
          0,    60,   126,   126,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   121,   121,   121, 
        121,   121,     0,     0,     0,     0,     0,     0,     0,   130, 
        130,   130,   130,     0,     0,   130,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   130, 
        130,   130,   130,     0,   130,     0,     0,     0,     0,   130, 
        130,   130,   130,   130,     0,     0,     0,     0,     0,     0, 
          0,    63,    64,    65,    66,    67,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   130,   130,     0,     0,     0,     0,   121,   121,   121, 
        121,     0,     0,   121,     0,    63,    64,    65,    66,    67, 
          0,     0,     0,     0,     0,     0,     0,   121,   121,   121, 
        121,     0,   121,     0,     0,     0,     0,   121,     0,   121, 
        121,   121,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    68,   244,   245,   246,     0,     0,    69,     0,   121, 
        121,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   247,   248,   249,   250,     0,   251,     0,     0,     0, 
          0,   252,     0,   253,     0,    68,   244,   245,   246,     0, 
          0,    69,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   247,   248,   249,   250,     0, 
        251,     0,     0,    61,    62,   252,     0,   253,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    61,    62, 
    );
    protected static $yyCheck = array(4,
         91,    42,   125,    42,    37,   125,   260,   123,    41,    42, 
         43,    44,    45,    63,    47,    93,   123,    99,   137,   242, 
        125,    26,    41,   111,    29,    58,    59,    60,    61,    62, 
         63,   260,    41,   154,   303,    44,    41,    42,    43,    42, 
         40,    37,    58,    47,    44,   304,    42,    43,    59,    45, 
        150,    47,   188,   260,   260,    44,   260,    41,    91,    59, 
         93,    37,    59,   344,   345,    41,    42,    43,    44,    45, 
        189,    47,    60,    44,    46,    59,   330,    93,    83,    84, 
        201,    86,    58,    59,    60,    61,    62,    63,    59,    59, 
         44,    59,   125,   126,    99,    91,    41,   197,   219,    44, 
        236,   330,   258,    91,    93,    59,   125,   195,    62,    93, 
         59,   334,   123,   320,    37,    91,   125,    93,    41,    42, 
         43,    44,    45,   123,    47,   125,   123,   131,   210,   265, 
        126,   327,   137,   340,   340,    58,    59,    60,    61,    62, 
         63,   125,   260,    40,   260,    42,   372,    44,    93,   125, 
        126,    64,   273,   123,   125,   260,    60,   125,   260,   355, 
        391,    46,    59,    60,    60,    62,   392,    37,   324,   123, 
         93,    41,    42,    43,    44,    45,    93,    47,    44,   184, 
        411,   186,   260,    40,   189,    46,   279,    91,    58,    59, 
         60,    61,    62,    63,    91,    91,    93,    59,   300,   301, 
        302,    40,   125,   126,   311,   210,    60,    46,    40,   310, 
        260,   310,    37,   410,    46,    41,    41,    42,    43,    44, 
         45,   260,    47,    93,   340,   330,   123,    91,   330,   300, 
        301,   302,    41,    58,    59,    60,    61,    62,    63,    37, 
        300,   301,   302,    41,    42,    43,    44,    45,   367,    47, 
        373,   374,    44,   373,   374,   125,   126,   260,   373,   374, 
         58,    59,    60,    61,    62,    63,   359,   311,    93,   125, 
        363,   123,   260,   310,    62,    44,   123,    44,    91,   123, 
        260,    93,   287,    40,   340,   260,    58,   359,    37,    41, 
         40,   363,   297,    42,    43,    93,    45,   260,    47,   340, 
        125,   126,    93,   123,    41,    42,    43,    40,   401,   125, 
         59,    60,    61,    62,    63,    37,    59,   320,   409,    44, 
         42,    43,   327,    45,   417,    47,   123,   125,   126,   401, 
         93,   364,   320,   426,    41,    40,   123,   340,    60,    61, 
         62,    63,   340,    41,   349,   417,    83,    84,   123,    86, 
        355,    59,   340,   260,   426,   125,   310,   311,    93,    40, 
         61,    41,   367,   260,   125,    40,    40,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   409,   126,   411,   412, 
        413,   414,   415,    40,    40,    37,   340,    40,   364,    41, 
         42,    43,    60,    45,    62,    47,    40,    59,    41,   361, 
        137,    40,    44,    93,   126,    59,   125,   412,    60,    61, 
         62,    63,    59,   310,   311,   125,   280,   281,   282,   283, 
        284,   285,   286,   320,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,   409,    40,   411,   412,   413,   414,   415, 
         37,   364,   340,   340,   321,    42,    43,    44,    45,   186, 
         47,    41,   189,   125,    41,    41,   260,    41,   126,   340, 
         44,   345,   123,    60,    61,    62,    63,   280,   281,   282, 
        283,   284,   285,   286,   126,    59,   344,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    59,   410,   411,   412, 
        413,   414,   415,   413,   364,    37,   300,   301,   302,   371, 
         42,    43,    41,    45,    40,    47,   123,   340,    41,    93, 
        125,   125,    58,   410,   125,    41,   340,    59,    60,    61, 
         62,    63,   123,   125,    93,    59,   330,    41,   123,   126, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   364, 
        125,   411,   412,   413,   414,   415,    37,    41,   123,    93, 
         41,    42,    43,    58,    45,    62,    47,   280,   281,   282, 
        283,   284,   285,   286,    41,    40,   364,   125,    93,    60, 
         61,    62,    63,   125,    40,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   126,    91,   411,   412,   413,   414, 
        415,    59,    41,   125,   125,    59,    59,    41,    41,     8, 
         54,   125,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,     6,   125,   411,   412,   413,   414,   415,    37,    53, 
        347,    88,   289,    42,    43,   237,    45,    40,    47,    39, 
        367,   349,   297,   379,   146,   126,   377,   408,    91,   192, 
         59,    60,    61,    62,    63,   186,    24,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,   413,   414,   415,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   412,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   199,    -1,   411, 
        412,   413,   414,   415,    37,    -1,    -1,    -1,    -1,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,   126,    -1,    -1, 
         -1,    -1,    -1,   225,    -1,    -1,    59,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,   241, 
         -1,    -1,   400,   401,   402,   403,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   411,   412,    -1,    -1,    91,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    37,   414,   415,    -1,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,   280,   281,   282,   283,   284,   285, 
        286,   125,    -1,   126,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,   300,   301,   302,    -1,   310,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    37,   414,   415,    -1, 
         -1,    42,    43,    -1,    45,    -1,    47,   280,   281,   282, 
        283,   284,   285,   286,    -1,    -1,    -1,    -1,    91,    60, 
         61,    62,    63,    -1,    -1,    -1,   358,   300,   301,   302, 
        126,   304,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    37,   414,   415,    -1,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    91,   308,   398,    -1,    -1,   312, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   125,    -1, 
        411,   412,    37,   414,   415,    -1,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,    -1,   280,   281,   282,   283, 
        284,   285,   286,    -1,    -1,    60,    61,    62,    63,    37, 
         -1,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47, 
        126,    -1,    -1,    91,    -1,    -1,   389,    -1,    -1,    -1, 
         -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
        413,    -1,   411,   412,    37,   414,   415,   125,    -1,    42, 
         43,    -1,    45,    -1,    47,    -1,   429,    -1,    -1,    -1, 
        433,   126,    -1,    -1,   437,    58,    37,    60,    61,    62, 
         63,    42,    43,    -1,    45,    -1,    47,   280,   281,   282, 
        283,   284,   285,   286,    -1,    -1,    -1,    -1,   126,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,   300,   301,   302, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   280,   281,   282,   283,   284,   285,   286, 
         -1,    -1,    -1,   126,    -1,    37,    -1,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,   260,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   126,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,   280,   281,   282, 
        283,   284,   285,   286,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
         37,    93,    -1,   364,    41,    42,    43,    44,    45,    -1, 
         47,    -1,   280,   281,   282,   283,   284,   285,   286,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,   330,    -1,    -1, 
         -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,    37,    93,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
         37,    93,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,   125,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    37,   414,   415,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   364,    58,    59,    37,    61,    -1,    63,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,    -1,    -1,    -1,   364,    37,    -1, 
         -1,    93,    41,    42,    43,    44,    45,    -1,    47,    -1, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   125,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,    -1, 
         -1,    -1,   364,    37,    93,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,    -1,    -1,    37,   364,    -1,    93, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   125,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,    37, 
         -1,    -1,    93,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    37,    61,    -1,    63,    41,    42,    43,    44, 
         45,    -1,    47,    -1,   125,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    37,    -1,    93,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    -1,    61,    93,    63, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,   364, 
         -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    93, 
        125,    -1,   364,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,   125,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,    -1,   364,    37,    -1,    -1,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,    -1,    -1,    37, 
        364,    -1,    93,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,   413, 
        414,   415,    37,   364,    -1,    93,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,   414,   415,    -1,   364,    -1,    93,    37, 
         -1,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364, 
         58,    59,    33,    61,    -1,    63,    -1,    -1,    -1,    40, 
        125,    -1,    43,    -1,    45,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,   414,   415,    -1,    -1, 
        364,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         91,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,   364, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    37,   413, 
        414,   415,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,   123,    -1,    -1,   126,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,    -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    93,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   364,    58,    59,    37,    61,    -1,    63, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   125,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    93, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,   414,   415,    -1,   364,    -1,    -1,    37, 
         -1,    -1,    93,    41,    42,    43,    44,    45,    -1,    47, 
         -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,   125,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,   414,   415,    -1,   364, 
         -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,    -1,    -1,    -1,    -1,    -1,   364,    -1,    -1,   340, 
         -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    57,    -1, 
         59,    60,    61,    62,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    70,    71,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,   414,   415,    -1,    -1, 
         -1,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403,    -1,    -1,    -1,   105,   106,   107,   108, 
        109,   110,   111,   112,   113,   114,   115,   116,   117,   118, 
        119,    -1,    -1,   122,   123,   124,   125,   126,   127,   128, 
         -1,    -1,   131,    -1,    -1,   364,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    33,    -1,    -1,    -1,   146,    -1,    -1, 
         40,    -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
        364,    -1,    -1,    -1,   413,   414,   415,    -1,    -1,    -1, 
         -1,    -1,    -1,   192,    -1,    -1,   195,    -1,    -1,    -1, 
        199,    91,    -1,   364,   203,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,   225,    -1,    -1,   413, 
        414,   415,    -1,   123,    -1,   125,   126,    -1,    -1,    -1, 
         -1,   240,   241,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,   414,   415,    -1,   364,    -1,    -1,    -1, 
         -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,   267,    40, 
         -1,    -1,    43,    -1,    45,   274,    -1,   276,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,   300,    -1,    -1,    -1,   413,   414,   415,    -1,    -1, 
         -1,   310,   311,   312,    -1,    -1,   315,   316,   317,    -1, 
         91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1, 
         43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   123,    -1,   125,   126,    59,    -1,    -1,   358, 
         -1,    -1,   361,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        260,   261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    91,    -1, 
         -1,    40,    -1,    -1,    43,    -1,    45,    -1,    -1,   398, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,   418, 
        123,    -1,   125,   126,    -1,    40,    -1,    -1,    43,    -1, 
         45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    91,    -1,    59,    -1,    -1,    -1,    -1,    -1, 
        340,   341,   342,   343,    -1,   345,   346,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        360,   361,   362,   363,   123,   365,    91,   126,    -1,    -1, 
        370,   371,   372,   373,   374,    -1,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1, 
         -1,   126,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,   261,   262, 
        263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340, 
        341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360, 
        361,   362,   363,    -1,   365,    -1,    -1,    -1,    -1,   370, 
        371,   372,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   260,   261,   262,   263,   264,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403,    -1,    -1,    -1,    -1,   340,   341,   342, 
        343,    -1,    -1,   346,    -1,   260,   261,   262,   263,   264, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361,   362, 
        363,    -1,   365,    -1,    -1,    -1,    -1,   370,    -1,   372, 
        373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   340,   341,   342,   343,    -1,    -1,   346,    -1,   402, 
        403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   360,   361,   362,   363,    -1,   365,    -1,    -1,    -1, 
         -1,   370,    -1,   372,    -1,   340,   341,   342,   343,    -1, 
         -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363,    -1, 
        365,    -1,    -1,   402,   403,   370,    -1,   372,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 
      'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 
      'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 
      'T_FOREACH', 'T_AS', 'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 
      'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      'T_OBJECT_OPERATOR', 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
      'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 'T_BOOLEAN_AND', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 125 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 136 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 136 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 147 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 148 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 152 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 152 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 13:  #line 160 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 15:  #line 165 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 16:  #line 171 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 171 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 18:  #line 180 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 19:  #line 180 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 189 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 21:  #line 189 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 22:  #line 200 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 201 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 205 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 25:  #line 206 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 210 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 211 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 215 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 216 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 30:  #line 220 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 31:  #line 221 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 225 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 33:  #line 226 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 227 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 35:  #line 231 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 232 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 233 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 237 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 39:  #line 238 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 40:  #line 242 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 41:  #line 242 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 42:  #line 245 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 245 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 255 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 45:  #line 262 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop][0];
      $yyVal->annotations= $yyVals[-5+$yyTop][1];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 46:  #line 273 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 48:  #line 278 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 49:  #line 279 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 50:  #line 280 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 51:  #line 284 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 285 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 291 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 54:  #line 291 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 55:  #line 301 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 56:  #line 301 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 57:  #line 309 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 58:  #line 309 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 59:  #line 322 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 60:  #line 323 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 61:  #line 327 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 62:  #line 328 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 63:  #line 332 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 64:  #line 336 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVals[-1+$yyTop] && $yyVal->parameters= array('default' => $yyVals[-1+$yyTop]);
    } break;

    case 65:  #line 341 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 66:  #line 349 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 67:  #line 350 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 68:  #line 354 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 69:  #line 355 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 70:  #line 359 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 71:  #line 360 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 72:  #line 364 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 73:  #line 365 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 74:  #line 369 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 75:  #line 370 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 82:  #line 382 "grammar/xp.jay"
    { $yyVal= '[]'; } break;

    case 83:  #line 383 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 84:  #line 391 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 86:  #line 396 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 87:  #line 397 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 88:  #line 401 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 89:  #line 401 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 90:  #line 404 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 91:  #line 404 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 92:  #line 409 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 93:  #line 409 "grammar/xp.jay"
    {
      $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 94:  #line 415 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 95:  #line 415 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      /* $1->assignment= $6; XX FIXME XX*/
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 96:  #line 420 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 97:  #line 420 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 98:  #line 424 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 99:  #line 424 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 100:  #line 428 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 101:  #line 428 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 102:  #line 432 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 103:  #line 432 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 104:  #line 437 "grammar/xp.jay"
    { } break;

    case 105:  #line 438 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 106:  #line 438 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
    } break;

    case 109:  #line 446 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 111:  #line 451 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 112:  #line 452 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 113:  #line 456 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 114:  #line 456 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 115:  #line 460 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 116:  #line 460 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 117:  #line 466 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 118:  #line 467 "grammar/xp.jay"
    { $yyVal= array(NULL, $yyVals[0+$yyTop]); } break;

    case 119:  #line 471 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 120:  #line 472 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 121:  #line 476 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 122:  #line 477 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 123:  #line 477 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 124:  #line 482 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 125:  #line 483 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 126:  #line 487 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 127:  #line 488 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 128:  #line 492 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 129:  #line 492 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 130:  #line 500 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 132:  #line 505 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 133:  #line 505 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 134:  #line 513 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 136:  #line 518 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 137:  #line 519 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 138:  #line 523 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 140:  #line 528 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 141:  #line 534 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 143:  #line 543 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 144:  #line 543 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 145:  #line 546 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 146:  #line 546 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 147:  #line 551 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 148:  #line 551 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 149:  #line 556 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 150:  #line 556 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 151:  #line 562 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 152:  #line 562 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 153:  #line 568 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 154:  #line 569 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 155:  #line 572 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 156:  #line 575 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 157:  #line 578 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 158:  #line 581 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 159:  #line 585 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 160:  #line 591 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 161:  #line 597 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 162:  #line 606 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 163:  #line 607 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 164:  #line 607 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 165:  #line 611 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 166:  #line 616 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 167:  #line 617 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 168:  #line 618 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 169:  #line 619 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 170:  #line 623 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 172:  #line 628 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 173:  #line 629 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 174:  #line 633 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 175:  #line 637 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 176:  #line 638 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 177:  #line 639 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 178:  #line 640 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 179:  #line 641 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 180:  #line 642 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 181:  #line 646 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 182:  #line 647 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 183:  #line 648 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 184:  #line 649 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 185:  #line 650 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 651 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 655 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 188:  #line 656 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 189:  #line 657 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 190:  #line 658 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 191:  #line 659 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 192:  #line 660 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 193:  #line 664 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 194:  #line 665 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 195:  #line 666 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 196:  #line 667 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 197:  #line 668 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 198:  #line 669 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 199:  #line 673 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 200:  #line 674 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 201:  #line 679 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 203:  #line 684 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 204:  #line 684 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 205:  #line 687 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 206:  #line 691 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 207:  #line 691 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 208:  #line 695 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 211:  #line 706 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 212:  #line 707 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 213:  #line 711 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 214:  #line 715 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 215:  #line 716 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 217:  #line 721 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 218:  #line 725 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 219:  #line 726 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 220:  #line 732 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 221:  #line 733 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 222:  #line 737 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 223:  #line 738 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 224:  #line 742 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 225:  #line 743 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 226:  #line 744 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 227:  #line 745 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 228:  #line 746 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 229:  #line 747 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 230:  #line 748 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1950 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
