<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 52 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_DECIMAL',  263);
  define('TOKEN_T_HEX',  264);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_PACKAGE',  303);
  define('TOKEN_T_IMPORT',  304);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_T_DOUBLE_ARROW',  413);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          9,     9,     9,     4,     4,    12,     3,    16,     3,    18, 
          3,    13,    13,    14,    14,    19,    19,    21,    21,    15, 
         15,    22,    22,    22,    17,    17,    17,    26,    26,    28, 
         27,    29,    27,    23,    23,    34,    34,    33,    33,    33, 
         32,    32,    37,    24,    40,    24,    42,    24,    10,    10, 
         43,    43,    45,    45,    45,    39,    39,    36,    36,    48, 
         48,    49,    49,    38,    38,    41,    41,    41,    41,    41, 
         41,    25,    25,    35,    35,    51,    50,    52,    50,    55, 
         50,    57,    50,    59,    50,    60,    50,    61,    50,    63, 
         50,    50,    50,    58,    58,    53,    53,    54,    64,    54, 
         62,    62,    65,    65,    69,    68,    66,    66,    70,    67, 
         56,    56,    71,    71,    46,    46,    72,    72,    30,    75, 
         30,    76,    30,    77,    30,    78,    30,    79,    30,    30, 
         30,    30,    30,    30,    30,    30,    73,    85,    73,    73, 
         73,    73,    73,    73,    86,    86,    47,    47,    87,    80, 
         80,    80,    80,    80,    80,    81,    81,    81,    81,    81, 
         81,    82,    82,    82,    82,    82,    82,    83,    83,    83, 
         83,    83,    83,    84,    84,    74,    74,    89,    88,    88, 
         90,    88,    88,    31,    31,    11,    11,    91,    92,    92, 
         93,    93,    20,    20,    44,    44,    94,    94,    95,    95, 
         95,    95,    95,    95,    95, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     6, 
          1,     1,     3,     1,     3,     0,     9,     0,     9,     0, 
          8,     0,     2,     0,     2,     0,     2,     0,     3,     2, 
          0,     1,     1,     4,     3,     1,     0,     1,     3,     0, 
          3,     0,     6,     5,     6,     0,     1,     2,     4,     4, 
          0,     2,     0,     9,     0,     8,     0,     9,     4,     1, 
          1,     3,     2,     5,     5,     1,     3,     0,     1,     1, 
          3,     3,     3,     0,     2,     1,     1,     1,     1,     1, 
          1,     0,     1,     1,     2,     0,     4,     0,     7,     0, 
         10,     0,     8,     0,     6,     0,     7,     0,     6,     0, 
          4,     2,     1,     3,     1,     1,     3,     0,     0,     3, 
          2,     1,     1,     2,     0,     9,     0,     1,     0,     5, 
          0,     1,     1,     3,     0,     1,     5,     6,     1,     0, 
          3,     0,     4,     0,     5,     0,     8,     0,     6,     3, 
          1,     1,     1,     1,     1,     5,     1,     0,     4,     3, 
          1,     1,     1,     1,     0,     1,     1,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     2,     2,     2, 
          2,     2,     2,     2,     2,     0,     1,     0,     4,     2, 
          0,     6,     2,     1,     1,     1,     4,     3,     1,     3, 
          1,     3,     1,     3,     0,     1,     1,     2,     1,     1, 
          1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   209,   211,   210,   212,   214,   213,   215,     1, 
          0,    60,   206,     0,     8,     0,     4,     0,     0,     0, 
          0,    16,    20,    18,   208,    15,     0,     0,     0,     0, 
          0,     0,     0,    12,     0,     0,     0,    59,    62,     0, 
          0,     0,     0,     0,    10,     0,     0,   148,     0,     0, 
          0,     0,     0,   154,   151,   153,   152,   130,   132,     0, 
          0,     0,     0,     0,     0,   129,   141,   142,   143,   144, 
        145,     0,     0,     0,     0,     0,     0,     0,    13,     0, 
          0,     0,     0,     0,     0,     0,   138,     0,     0,     0, 
        156,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   184,   185,     0, 
          0,     0,     0,     0,     0,     0,    64,    65,     0,     0, 
        201,     0,     0,    23,     0,     0,     0,    27,    31,     0, 
          0,     0,   122,     0,   188,     0,   131,     0,     0,   194, 
          0,     0,   195,   150,   140,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        166,   167,   168,   169,   170,   171,     0,   158,     0,   197, 
          0,    25,    31,     0,     0,     0,     0,   149,     0,     0, 
          0,     0,     0,     0,   133,     0,     0,     0,   202,   200, 
          0,   204,     0,    21,     0,    30,    32,    33,     0,     0, 
          0,     0,   124,     0,     0,     0,   191,     0,     0,   135, 
          0,     0,    17,     0,     0,     0,     0,     0,     0,     0, 
          0,    19,    31,     0,   139,   189,     0,     0,     0,     0, 
         86,     0,   100,    90,    94,    96,    92,    88,   103,     0, 
          0,    83,     0,    55,    76,    77,    78,    79,    80,    81, 
          0,     0,     0,     0,     0,    31,    41,     0,     0,    39, 
          0,     0,   127,     0,     0,    98,     0,     0,     0,     0, 
          0,     0,    34,   102,    85,     0,    57,     0,     0,   198, 
         53,     0,     0,     0,     0,   192,   128,   137,     0,     0, 
          0,     0,     0,     0,   106,     0,     0,     0,     0,     0, 
         69,     0,     0,     0,    48,     0,    47,     0,     0,     0, 
         44,    29,     0,    87,     0,   101,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         45,     0,    43,     0,     0,     0,   107,     0,     0,     0, 
         73,    72,     0,     0,    71,     0,    49,    50,     0,   115, 
        119,    99,     0,   112,     0,     0,    95,     0,     0,     0, 
          0,    75,    66,     0,    56,     0,     0,     0,     0,   111, 
        118,   114,     0,    97,     0,     0,   109,    89,     0,    58, 
         54,     0,     0,     0,   104,    93,     0,    67,     0,     0, 
          0,   110,     0,   120,    91,     0,     0,     0,   116, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    20,    72,     4,     7,     8,    11,    46,   205, 
        150,    41,    85,   136,   185,    43,   210,    42,    87,   138, 
        267,   206,   207,   208,   250,   211,   212,   230,   231,   251, 
        309,   293,   289,   318,   252,   310,   319,   354,   375,   286, 
        261,   313,    30,    22,    31,    74,   101,   311,   312,   253, 
        275,   282,   306,   388,   278,   142,   281,   370,   279,   280, 
        300,   362,   277,   397,   363,   380,   364,   365,   378,   379, 
        143,   152,    76,   147,    98,    99,   156,   157,   144,    77, 
         78,    79,    80,    81,    92,   102,    82,   148,   190,   237, 
        153,   132,   133,    23,    24, 
    );
    protected static $yySindex = array(         -268,
          0,     0,  -262,  -202,     0,   175,     0,  -262,    46,    17, 
       -156,    64,     0,     0,     0,     0,     0,     0,     0,     0, 
        -33,     0,     0,   423,     0,  -202,     0,    68,  -202,    81, 
        132,     0,     0,     0,     0,     0,   -26,   148,   423,    64, 
       -202,  -202,  -202,     0,   144,   139,  2016,     0,     0,   140, 
       -108,  -103,  -108,   -26,     0,  2016,  2016,     0,  2016,  2016, 
       2016,  2016,   106,     0,     0,     0,     0,     0,     0,  2016, 
       2016,  -179,   274,   192,   201,     0,     0,     0,     0,     0, 
          0,   202,   -31,  -202,   -57,  -202,   134,   -57,     0,     3, 
          3,  2016,     3,     3,     3,     3,     0,   -85,  -202,   274, 
          0,   133,  1110,     0,  2016,  2016,  2016,  2016,  2016,  2016, 
       2016,  2016,  2016,  2016,  2016,  2016,  2016,     0,     0,  2016, 
       2016,  2016,  2016,  2016,  2016,  2016,     0,     0,  2016,   -51, 
          0,   212,   220,     0,  -202,   160,   240,     0,     0,   162, 
       1263,   200,     0,  2016,     0,    34,     0,   -85,    72,     0, 
        256,   -85,     0,     0,     0,   -42,    58,     3,     3,     3, 
          3,     3,     3,  1302,     3,     3,     3,     3,     3,     3, 
          0,     0,     0,     0,     0,     0,  1598,     0,  -202,     0, 
        -31,     0,     0,  -202,   137,    60,  2016,     0,   282,  2016, 
        285,   -85,   236,  2016,     0,   -85,   288,  2016,     0,     0, 
        213,     0,   216,     0,  -220,     0,     0,     0,     0,   215, 
        283,   297,     0,   -85,  1598,   250,     0,   225,   304,     0, 
       2016,     3,     0,  2005,   107,   309,    10,    98,  -205,   232, 
        317,     0,     0,    60,     0,     0,  2016,  2016,   232,   318, 
          0,   237,     0,     0,     0,     0,     0,     0,     0,   233, 
       1349,     0,  2005,     0,     0,     0,     0,     0,     0,     0, 
        322,   103,   271,   326,   323,     0,     0,  2016,   235,     0, 
        342,   260,     0,   -85,  2016,     0,  2016,   346,   356,  2071, 
        358,   359,     0,     0,     0,  -202,     0,   -99,   103,     0, 
          0,  2016,   331,   222,  1382,     0,     0,     0,  1409,  2005, 
       1482,  2016,  2016,  2005,     0,    49,  2016,  2016,   -41,   366, 
          0,   380,  -202,   399,     0,  2005,     0,   381,  -202,  1598, 
          0,     0,   232,     0,   316,     0,   386,  1516,   321,   218, 
        422,  1570,  1674,   124,   323,   126,  -202,   426,   428,   338, 
          0,   430,     0,  -196,  2016,  2071,     0,  2016,   136,  2071, 
          0,     0,  -202,    39,     0,   126,     0,     0,   126,     0, 
          0,     0,   127,     0,   129,   415,     0,  1781,    79,   436, 
        130,     0,     0,  2005,     0,    39,    39,   469,   387,     0, 
          0,     0,  2016,     0,   171,  2071,     0,     0,   388,     0, 
          0,  -202,  2005,   471,     0,     0,  2071,     0,   182,   408, 
       2071,     0,   496,     0,     0,   416,  2005,   413,     0, 
    );
    protected static $yyRindex= array(            6,
          0,     0,   311,     0,     0,   -29,     0,   362,  1312,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   339,     0,     0,     0,     0,     0,     0, 
        447,     0,     0,     0,     0,     0,     0,    37,   400,     0, 
          0,     0,     0,     0,   483,     0,   502,     0,     0,   -10, 
       -105,   424,  -105,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    78,     0,     0,     0,     0,     0,     0,   420, 
          0,     0,   505,     0,     0,     0,     0,     0,     0,     0, 
          0,   -22,     0,     0,   425,     0,     0,   425,     0,   350, 
        407,   456,   591,   652,   680,   725,     0,   123,     0,     0, 
          0,     0,     0,  -161,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   497,     0,     0,     0,    50,     0,     0,     0, 
         19,     0,     0,   519,     0,     0,     0,   150,   531,     0, 
          0,   123,     0,     0,     0,     0,     0,   780,   811,   834, 
        865,   888,   924,     0,   977,  1053,  1076,  1162,  1190,  1221, 
          0,     0,     0,     0,     0,     0,     2,     0,     0,     0, 
          0,     0,     0,     0,  -219,   448,     0,     0,     0,   479, 
        -32,   177,     0,   519,     0,   123,     0,     0,     0,     0, 
       -219,     0,   284,     0,     0,     0,     0,     0,    31,     0, 
        449,   -23,     0,   123,   482,     0,     0,   536,     0,     0, 
        519,  1275,     0,   461,   -43,     0,     0,   -35,     0,    30, 
          0,     0,     0,     0,     0,     0,   519,   462,    25,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   473,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   541,     0,     0,     0,    -8,     0, 
          0,     0,     0,   123,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   560,     0,     0,   543,     0, 
          0,     0,     0,  -219,     0,     0,     0,     0,     0,   461, 
          0,   544,     0,   461,     0,     0,     0,     0,     0,     0, 
          0,   564,   560,     0,     0,     0,     0,     0,   560,   186, 
          0,     0,    30,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    12,   100,     0,     0,     0,     0, 
          0,     0,     0,     0,   544,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   100,     0,     0,   100,     0, 
          0,     0,  1893,     0,  1806,     0,     0,     0,   565,     0, 
       1980,     0,     0,   461,     0,     0,     0,     0,     0,     0, 
          0,     0,   519,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   461,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   461,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   599,     0,     0,   554,   603, 
        -39,     0,   557,   527,  -160,     0,     0,     0,     0,  -127, 
       -218,     0,     0,     0,  -250,   382,     0,     0,     0,  2383, 
        -79,   292,   328,     0,   -84,  -114,     0,  -112,  -126,     0, 
          0,     0,   597,   612,     0,   463,     4,   319,     0,    15, 
          0,     0,   -19,     0,     0,  -130,     0,     0,     0,     0, 
          0,     0,     0,     0,   290,     0,   294,     0,     0,     0, 
        474,     0,     0,   -18,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,  -115,     0,     0, 
          0,   477,     0,   641,     0, 
    );
    protected static $yyTable = array(10,
        334,    51,    52,    53,   190,   145,   196,   182,   190,   190, 
        190,   190,   190,   189,   190,    44,    14,    22,   157,   151, 
        273,    36,   201,   316,    38,   190,   190,   190,   190,   190, 
        190,   130,   192,   196,     1,    38,    50,    50,    50,   225, 
        205,     5,   159,   131,   134,   159,   137,    14,   196,   325, 
         75,   196,    51,   329,   264,    51,   202,     9,   190,   123, 
        190,    28,   120,   219,   121,    28,    28,    28,    28,    28, 
         42,    28,   269,    28,    40,    27,   192,   123,    50,    50, 
         63,    50,    28,    28,    28,    28,    28,    28,    28,    40, 
        240,    26,   190,   190,   149,   137,     2,   373,   136,   226, 
        205,    38,   157,    28,   343,   294,   271,   272,   203,   227, 
        205,   123,   196,    37,   147,    28,    35,    28,   147,   147, 
        147,   147,   147,   389,   147,   229,   159,    29,   117,    63, 
         50,    83,   178,   195,   265,   147,   147,   147,   147,   147, 
        147,   131,   400,   123,   137,    97,   254,   360,   361,    28, 
         28,    26,    26,    40,    28,    40,   408,    83,    74,   186, 
        314,   374,   193,   186,   186,   186,   186,   186,   285,   186, 
        147,   327,   203,    39,   199,    40,    50,   220,   134,    50, 
        186,   186,   186,   186,   186,   186,   187,    47,   263,    54, 
        187,   187,   187,   187,   187,   235,   187,    55,   338,    83, 
        228,    84,   147,   147,   342,    22,    86,   187,   187,   187, 
        187,   187,   187,   193,   366,   186,    14,   193,   193,   193, 
        193,   193,    74,   193,   196,   372,    52,    12,     9,    52, 
        104,   340,   127,    45,   193,   193,   193,   193,   193,   193, 
        315,   128,   187,   376,    52,   129,   377,   186,   186,   390, 
        391,   205,   394,   135,   110,   298,   139,   154,   179,   108, 
        106,   204,   107,   181,   109,    12,    32,    33,    34,   193, 
        205,   205,   205,   180,   187,   187,   284,   120,   105,   121, 
        111,   228,   183,   184,   186,     2,     2,     2,     2,     2, 
          2,     2,   188,   191,   305,   194,    14,   196,   335,   196, 
        196,   193,   193,    12,   196,     2,     2,     2,   228,     2, 
        110,   205,    12,   137,   228,   108,   106,   197,   107,   209, 
        109,   205,   214,   146,   217,    12,   367,   221,   218,   196, 
        371,   190,   228,   120,   105,   121,   111,   223,   224,   232, 
        234,   233,   236,   117,   239,   259,   322,   238,    50,   262, 
        257,   255,   399,   256,   266,   258,   268,   283,   274,   276, 
        305,   287,   288,   290,   305,   291,   396,   190,   190,   190, 
        190,   190,   190,   190,   190,   190,   190,   402,   190,   190, 
        190,   405,   296,   292,   297,   302,   180,    50,    28,   321, 
        180,   180,   180,   180,   180,   303,   180,   307,   308,   117, 
        305,     5,   123,   122,   118,   119,   336,   180,   180,   331, 
        180,   305,   180,   124,   125,   305,    13,    14,    15,   203, 
         17,    18,    19,   337,    28,    28,    28,    28,    28,    28, 
         28,    28,    28,    28,   260,    28,    28,    28,   339,   341, 
        344,   147,   180,   181,   345,   347,   353,   181,   181,   181, 
        181,   181,     7,   181,    13,    14,    15,    16,    17,    18, 
         19,   348,   358,   351,   181,   181,   356,   181,   357,   181, 
        359,   361,   360,   383,   180,   369,   386,   147,   147,   147, 
        147,   147,   147,   147,   147,   147,   186,    14,   147,   147, 
        147,   385,    13,    14,    15,   203,    17,    18,    19,   181, 
        387,    13,    14,    15,   203,    17,    18,    19,   392,   393, 
        395,   401,   398,   187,    13,    14,    15,   203,    17,    18, 
         19,   403,   186,   186,   186,   186,   186,   186,   186,   186, 
        186,   181,   404,   186,   186,   186,   406,   409,   407,    61, 
        193,    11,   125,   212,   155,   126,    26,    24,   121,   187, 
        187,   187,   187,   187,   187,   187,   187,   187,   199,   121, 
        187,   187,   187,   212,   212,   212,   212,   212,   212,   212, 
        196,   125,    37,    36,   126,   198,   193,   193,   193,   193, 
        193,   193,   193,   193,   193,    82,   121,   193,   193,   193, 
          5,     5,     5,     5,     5,     5,     5,    84,   207,    51, 
         68,    46,   121,   212,    70,   105,    25,    89,    21,    88, 
          5,     5,     5,   212,   140,   270,   317,   123,   122,   118, 
        119,   112,   113,   114,   115,   116,   352,   178,   124,   125, 
        126,   178,   178,   178,   178,   178,    49,   178,   207,   207, 
        207,     7,     7,     7,     7,     7,     7,     7,   178,   178, 
         48,   178,   216,   178,   382,   355,   381,   200,   207,   205, 
        213,     7,     7,     7,    35,     0,     0,     0,   207,     0, 
          0,     0,     0,   123,   122,   118,   119,   112,   113,   114, 
        115,   116,     0,   178,   124,   125,   126,     0,   179,     0, 
          0,     0,   179,   179,   179,   179,   179,     0,   179,   205, 
        205,   205,    13,    14,    15,    16,    17,    18,    19,   179, 
        179,     0,   179,   180,   179,   178,   182,     0,     0,   205, 
        182,   182,   182,   182,   182,     0,   182,     0,     0,   205, 
          0,     0,     0,     0,     0,     0,     0,   182,   182,     0, 
        182,     0,   182,     0,   179,     0,     0,     0,     0,     0, 
          0,     0,     0,   180,   180,   180,   180,   180,     0,     0, 
          0,   183,   180,     0,     0,   183,   183,   183,   183,   183, 
        181,   183,   182,     0,     0,     0,   179,     0,     0,     0, 
          0,     0,   183,   183,     0,   183,     0,   183,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   182,     0,     0,     0,     0,     0, 
        181,   181,   181,   181,   181,     0,   160,   183,     0,   181, 
        160,   160,   160,   160,   160,     0,   160,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   160,   160,     0, 
        160,     0,   160,     0,     0,     0,     0,   172,     0,   183, 
          0,   172,   172,   172,   172,   172,     0,   172,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   172,   172, 
        173,   172,   160,   172,   173,   173,   173,   173,   173,     0, 
        173,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   173,   173,     0,   173,     0,   173,     0,     0,     0, 
          0,   174,     0,   172,   160,   174,   174,   174,   174,   174, 
          0,   174,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   174,   174,   175,   174,   173,   174,   175,   175, 
        175,   175,   175,     0,   175,   172,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   175,   175,     0,   175,     0, 
        175,     0,     0,     0,   178,     0,     0,   174,   173,     0, 
        176,     0,     0,     0,   176,   176,   176,   176,   176,     0, 
        176,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        175,   176,   176,     0,   176,     0,   176,     0,     0,   174, 
          0,     0,     0,     0,   178,   178,   178,   178,   178,     0, 
          0,     0,     0,   178,     0,     0,     0,     0,     0,     0, 
          0,     0,   175,   161,     0,   179,   176,   161,   161,   161, 
        161,   161,     0,   161,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   161,   161,     0,   161,     0,   161, 
          0,     0,     0,   182,     0,     0,     0,     0,   176,     0, 
          0,     0,     0,     0,     0,   179,   179,   179,   179,   179, 
          0,     0,     0,     0,   179,     0,     0,     0,     0,   161, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   182,   182,   182,   182,   182,   183,   162, 
          0,     0,   182,   162,   162,   162,   162,   162,     0,   162, 
          0,   161,     0,     0,     0,     0,     0,     0,     0,     0, 
        162,   162,   163,   162,     0,   162,   163,   163,   163,   163, 
        163,     0,   163,     0,     0,     0,     0,     0,   183,   183, 
        183,   183,   183,   163,   163,     0,   163,   183,   163,     0, 
          0,     0,     0,   160,     0,   162,   110,     0,     0,     0, 
        155,   108,   106,     0,   107,     0,   109,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   163,   120, 
        105,   121,   111,     0,   172,     0,     0,   162,     0,     0, 
          0,     0,     0,   160,   160,   160,   160,   160,     0,     0, 
          0,     0,   160,     0,     0,     0,     0,   173,   164,     0, 
        163,     0,   164,   164,   164,   164,   164,     0,   164,     0, 
          0,     0,     0,     0,   172,   172,   172,   172,   172,   164, 
        164,     0,   164,   172,   164,     0,   165,     0,   174,     0, 
        165,   165,   165,   165,   165,   117,   165,   173,   173,   173, 
        173,   173,     0,     0,     0,     0,   173,   165,   165,     0, 
        165,   175,   165,     0,   164,     0,     0,   177,     0,     0, 
          0,   177,   177,   177,   177,   177,     0,   177,   174,   174, 
        174,   174,   174,     0,     0,     0,     0,   174,   177,   177, 
          0,   177,   165,   177,     0,     0,   164,   176,     0,     0, 
          0,   175,   175,   175,   175,   175,     0,     0,     0,   110, 
        175,     0,     0,     0,   108,   106,   187,   107,     0,   109, 
          0,   146,     0,   177,   165,   146,   146,   146,   146,   146, 
          0,   146,   120,   105,   121,   111,     0,   176,   176,   176, 
        176,   176,   146,   146,     0,   146,   176,   146,   110,     0, 
        161,     0,     0,   108,   106,   177,   107,     0,   109,     0, 
          0,    14,     0,    14,     0,    14,     0,     0,     0,   198, 
          0,   120,   105,   121,   111,     0,     0,   146,     0,     0, 
         14,    14,     0,    14,     0,     0,     0,     0,     0,     0, 
        161,   161,   161,   161,   161,   110,     0,     0,   117,   161, 
        108,   106,     0,   107,     0,   109,     0,     0,     0,   146, 
          0,     0,    14,     0,    14,     0,     0,   284,   120,   105, 
        121,   111,     0,     0,     0,     0,   162,     0,   110,     0, 
          0,     0,   323,   108,   106,     0,   107,   117,   109,     0, 
          0,     0,     0,     0,    14,     0,     0,     0,     0,   163, 
          0,   120,   105,   121,   111,   110,     0,     0,     0,     0, 
        108,   106,     0,   107,     0,   109,   162,   162,   162,   162, 
        162,     0,     0,     0,     0,   162,     0,   324,   120,   105, 
        121,   111,     0,     0,   117,     0,     0,     0,     0,   163, 
        163,   163,   163,   163,     0,     0,     0,     0,   163,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   117,     0,   123, 
        122,   118,   119,   112,   113,   114,   115,   116,   110,     0, 
        124,   125,     0,   108,   106,   164,   107,     0,   109,     0, 
          0,     0,     0,     0,   117,     0,     0,     0,     0,     0, 
        326,   120,   105,   121,   111,     0,     0,     0,     0,     0, 
          0,     0,   110,   165,     0,     0,   346,   108,   106,     0, 
        107,     0,   109,     0,     0,   164,   164,   164,   164,   164, 
          0,    14,     0,     0,   164,   120,   105,   121,   111,     0, 
          0,     0,     0,     0,   177,     0,     0,     0,     0,     0, 
          0,     0,     0,   165,   165,   165,   165,   165,     0,     0, 
          0,     0,   165,     0,     0,     0,   110,   117,     0,     0, 
          0,   108,   106,     0,   107,     0,   109,     0,     0,     0, 
          0,    14,    14,     0,   177,   177,   177,   177,   177,   120, 
        105,   121,   111,   177,   110,     0,     0,     0,   146,   108, 
        106,   117,   107,     0,   109,     0,     0,     0,     0,     0, 
          0,    14,     0,     0,     0,     0,     0,   120,   105,   121, 
        111,     0,   123,   122,   118,   119,   112,   113,   114,   115, 
        116,     0,     0,   124,   125,     0,     0,     0,   146,   146, 
        146,   146,   146,     0,     0,     0,     0,   146,     0,     0, 
          0,     0,     0,     0,     0,   117,     0,     0,     0,     0, 
          0,   123,   122,   118,   119,   112,   113,   114,   115,   116, 
        110,     0,   124,   125,   350,   108,   106,     0,   107,     0, 
        109,    14,     0,   117,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   120,   105,   121,   111,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   123,   122, 
        118,   119,   112,   113,   114,   115,   116,     0,     0,   124, 
        125,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   123,   122,   118,   119,   112,   113,   114,   115,   116, 
          0,     0,   124,   125,     0,     0,     0,     0,     0,   117, 
          0,     0,     0,     0,     0,     0,     0,     0,   123,   122, 
        118,   119,   112,   113,   114,   115,   116,   110,     0,   124, 
        125,   384,   108,   106,     0,   107,     0,   109,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   113,     0, 
        120,   105,   121,   111,     0,   113,     0,     0,   113,     0, 
        113,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   113,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   123,   122,   118,   119,   112,   113,   114,   115,   116, 
          0,     0,   124,   125,     0,     0,   113,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   117,     0,     0,     0, 
          0,     0,     0,     0,     0,   123,   122,   118,   119,   112, 
        113,   114,   115,   116,     0,   117,   124,   125,   113,     0, 
        113,   113,   117,   349,     0,   117,     0,   117,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   117,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   123, 
        122,   118,   119,   112,   113,   114,   115,   116,     0,     0, 
        124,   125,     0,   117,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   123,   122,   118, 
        119,   112,   113,   114,   115,   116,     0,     0,   124,   125, 
          0,     0,   108,     0,     0,   117,     0,   117,   117,   108, 
          0,     0,   108,     0,   108,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    59,   108,     0, 
          0,     0,     0,     0,    71,     0,     0,    56,    59,    57, 
          0,     0,     0,     0,     0,    71,     0,     0,    56,     0, 
         57,     0,     0,   249,     0,   113,   113,   113,   113,   113, 
        108,     0,     0,   123,   122,   118,   119,   112,   113,   114, 
        115,   116,     0,     0,   124,   125,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    58,     0,     0,     0,     0, 
          0,     0,   108,    59,   108,   108,    58,     0,     0,     0, 
         71,     0,     0,    56,     0,    57,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    70,     0,   249, 
         60,     0,     0,     0,     0,     0,     0,     0,    70,     0, 
          0,    60,     0,     0,     0,   113,   113,   113,   113,     0, 
        113,   113,   117,   117,   117,   117,   117,     0,     0,     0, 
          0,    58,     0,     0,     0,   113,   113,   113,   113,     0, 
          0,     0,     0,     0,     0,   113,   113,     0,     0,     0, 
        123,   122,   118,   119,   112,   113,   114,   115,   116,     0, 
          0,   124,   125,   304,     0,     0,    60,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   113,   113,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   117,   117,   117,   117,     0,     0,   117,   108, 
        108,   108,   108,   108,     0,     0,     0,     0,     0,     0, 
          0,     0,   117,   117,   117,   117,     0,     0,     0,     0, 
          0,     0,   117,   117,    63,    64,    65,    66,    67,     0, 
          0,     0,     0,     0,     0,    63,    64,    65,    66,    67, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   117,   117,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   108, 
        108,   108,   108,     0,     0,   108,     0,     0,     0,     0, 
         63,    64,    65,    66,    67,     0,     0,     0,     0,   108, 
        108,   108,   108,     0,    68,   241,   242,   243,     0,   108, 
         69,     0,     0,     0,     0,    68,     0,     0,     0,     0, 
          0,    69,     0,     0,   244,   245,   246,   247,     0,     0, 
          0,     0,     0,     0,   248,     0,     0,     0,     0,     0, 
          0,   108,   108,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    61,    62,     0,     0, 
         68,   241,   242,   243,     0,     0,    69,    61,    62,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    73, 
        244,   245,   246,   247,     0,     0,     0,     0,    90,    91, 
        248,    93,    94,    95,    96,     0,     0,     0,     0,     0, 
          0,     0,   100,   103,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    61,    62,   141,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   158,   159,   160, 
        161,   162,   163,   164,   165,   166,   167,   168,   169,   170, 
          0,     0,   171,   172,   173,   174,   175,   176,   177,     0, 
          0,   100,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   141,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   141, 
          0,     0,   215,     0,     0,     0,   141,     0,     0,     0, 
        222,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   141,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   141, 
        141,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        295,     0,     0,     0,     0,     0,     0,   299,     0,   301, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   320,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   141,   328,   330,     0,     0,   332, 
        333,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   141,     0,     0, 
        368,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   141, 
    );
    protected static $yyCheck = array(4,
         42,    41,    42,    43,    37,    91,    42,   135,    41,    42, 
         43,    44,    45,   144,    47,    42,    60,   123,    41,    99, 
        239,    26,   183,   123,    29,    58,    59,    60,    61,    62, 
         63,    63,   148,    44,   303,    59,    41,    42,    43,   260, 
        260,   304,    41,    83,    84,    44,    86,    91,    59,   300, 
         47,    62,    41,   304,   260,    44,   184,   260,    91,    41, 
         93,    37,    60,   194,    62,    41,    42,    43,    44,    45, 
         40,    47,   233,    44,    44,    59,   192,    59,    83,    84, 
         44,    86,    58,    59,    60,    61,    62,    63,    59,    59, 
        221,    46,   125,   126,    99,   135,    91,    59,   260,   320, 
        320,   125,   125,   260,   323,   266,   237,   238,    59,   330, 
        330,    93,   123,    46,    37,    91,   125,    93,    41,    42, 
         43,    44,    45,   374,    47,   205,   125,    64,   126,    93, 
        135,    60,   129,   152,   340,    58,    59,    60,    61,    62, 
         63,   181,   393,   125,   184,    40,    40,   344,   345,   125, 
        126,    46,    46,   123,   125,   125,   407,    60,    59,    37, 
        260,   123,    91,    41,    42,    43,    44,    45,   253,    47, 
         93,   302,   123,    93,   179,    44,   181,   196,   340,   184, 
         58,    59,    60,    61,    62,    63,    37,    40,    91,    46, 
         41,    42,    43,    44,    45,   214,    47,    59,   313,    60, 
        205,   310,   125,   126,   319,   311,   310,    58,    59,    60, 
         61,    62,    63,    37,   345,    93,   260,    41,    42,    43, 
         44,    45,   123,    47,   260,   353,    41,    91,   260,    44, 
        410,   316,    41,   260,    58,    59,    60,    61,    62,    63, 
        340,    41,    93,   356,    59,    44,   359,   125,   126,   376, 
        377,   260,   383,   311,    37,   274,   123,   125,   310,    42, 
         43,   125,    45,    44,    47,    91,   300,   301,   302,    93, 
        300,   301,   302,    62,   125,   126,    59,    60,    61,    62, 
         63,   286,   123,    44,   123,   280,   281,   282,   283,   284, 
        285,   286,    93,   260,   280,    40,   340,   340,   340,   310, 
        311,   125,   126,    91,   340,   300,   301,   302,   313,   304, 
         37,   320,    91,   353,   319,    42,    43,   260,    45,   260, 
         47,   330,    41,   409,    40,    91,   346,    40,    93,   340, 
        350,   364,   337,    60,    61,    62,    63,   125,   123,   125, 
         44,    59,    93,   126,    41,    37,   125,   123,   353,   340, 
         42,    43,   392,    45,   123,    47,    40,   125,    41,   123, 
        346,    40,   260,    93,   350,    40,   386,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   409,   397,   411,   412, 
        413,   401,    41,    61,   125,    40,    37,   392,   364,    59, 
         41,    42,    43,    44,    45,    40,    47,    40,    40,   126, 
        386,    91,   400,   401,   402,   403,    41,    58,    59,   361, 
         61,   397,    63,   411,   412,   401,   280,   281,   282,   283, 
        284,   285,   286,    44,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,   409,   126,   411,   412,   413,    40,    59, 
        125,   364,    93,    37,    59,   125,   321,    41,    42,    43, 
         44,    45,    91,    47,   280,   281,   282,   283,   284,   285, 
        286,    40,   125,   340,    58,    59,    41,    61,    41,    63, 
         41,   345,   344,    59,   125,   340,    41,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   364,   410,   411,   412, 
        413,   413,   280,   281,   282,   283,   284,   285,   286,    93, 
        371,   280,   281,   282,   283,   284,   285,   286,    40,   123, 
        340,    41,   125,   364,   280,   281,   282,   283,   284,   285, 
        286,   340,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   125,   125,   411,   412,   413,    41,   125,   123,    93, 
        364,    59,    41,   260,   125,    41,   123,   123,    93,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    62,    41, 
        411,   412,   413,   280,   281,   282,   283,   284,   285,   286, 
         40,    93,   125,   125,    93,    40,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   125,   125,   411,   412,   413, 
        280,   281,   282,   283,   284,   285,   286,   125,   260,    59, 
         41,    59,    59,   320,    41,    41,     8,    54,     6,    53, 
        300,   301,   302,   330,    88,   234,   289,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   335,    37,   411,   412, 
        413,    41,    42,    43,    44,    45,    40,    47,   300,   301, 
        302,   280,   281,   282,   283,   284,   285,   286,    58,    59, 
         39,    61,   190,    63,   365,   337,   363,   181,   320,   260, 
        187,   300,   301,   302,    24,    -1,    -1,    -1,   330,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    93,   411,   412,   413,    -1,    37,    -1, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,   300, 
        301,   302,   280,   281,   282,   283,   284,   285,   286,    58, 
         59,    -1,    61,   364,    63,   125,    37,    -1,    -1,   320, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,   330, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    93,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    37,   413,    -1,    -1,    41,    42,    43,    44,    45, 
        364,    47,    93,    -1,    -1,    -1,   125,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    37,    93,    -1,   413, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,    37,    -1,   125, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         37,    61,    93,    63,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    37,    -1,    93,   125,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    37,    61,    93,    63,    41,    42, 
         43,    44,    45,    -1,    47,   125,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,   364,    -1,    -1,    93,   125,    -1, 
         37,    -1,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         93,    58,    59,    -1,    61,    -1,    63,    -1,    -1,   125, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   125,    37,    -1,   364,    93,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,   364,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,    93, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,   364,    37, 
         -1,    -1,   413,    41,    42,    43,    44,    45,    -1,    47, 
         -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    37,    61,    -1,    63,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    58,    59,    -1,    61,   413,    63,    -1, 
         -1,    -1,    -1,   364,    -1,    93,    37,    -1,    -1,    -1, 
         41,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    60, 
         61,    62,    63,    -1,   364,    -1,    -1,   125,    -1,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,    -1,    -1,    -1,    -1,   364,    37,    -1, 
        125,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    58, 
         59,    -1,    61,   413,    63,    -1,    37,    -1,   364,    -1, 
         41,    42,    43,    44,    45,   126,    47,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,    58,    59,    -1, 
         61,   364,    63,    -1,    93,    -1,    -1,    37,    -1,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,    58,    59, 
         -1,    61,    93,    63,    -1,    -1,   125,   364,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    37, 
        413,    -1,    -1,    -1,    42,    43,    44,    45,    -1,    47, 
         -1,    37,    -1,    93,   125,    41,    42,    43,    44,    45, 
         -1,    47,    60,    61,    62,    63,    -1,   404,   405,   406, 
        407,   408,    58,    59,    -1,    61,   413,    63,    37,    -1, 
        364,    -1,    -1,    42,    43,   125,    45,    -1,    47,    -1, 
         -1,    40,    -1,    42,    -1,    44,    -1,    -1,    -1,    58, 
         -1,    60,    61,    62,    63,    -1,    -1,    93,    -1,    -1, 
         59,    60,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    37,    -1,    -1,   126,   413, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,   125, 
         -1,    -1,    91,    -1,    93,    -1,    -1,    59,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,   364,    -1,    37,    -1, 
         -1,    -1,    41,    42,    43,    -1,    45,   126,    47,    -1, 
         -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,   364, 
         -1,    60,    61,    62,    63,    37,    -1,    -1,    -1,    -1, 
         42,    43,    -1,    45,    -1,    47,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,    -1,    59,    60,    61, 
         62,    63,    -1,    -1,   126,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    37,    -1, 
        411,   412,    -1,    42,    43,   364,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1, 
         59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    37,   364,    -1,    -1,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,   260,    -1,    -1,   413,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,    -1,   364,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,    -1,    -1,    -1,    37,   126,    -1,    -1, 
         -1,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,   310,   311,    -1,   404,   405,   406,   407,   408,    60, 
         61,    62,    63,   413,    37,    -1,    -1,    -1,   364,    42, 
         43,   126,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,   340,    -1,    -1,    -1,    -1,    -1,    60,    61,    62, 
         63,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         37,    -1,   411,   412,    41,    42,    43,    -1,    45,    -1, 
         47,   410,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    37,    -1,   411, 
        412,    41,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1, 
         60,    61,    62,    63,    -1,    40,    -1,    -1,    43,    -1, 
         45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,    -1,    91,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    33,   411,   412,   123,    -1, 
        125,   126,    40,   364,    -1,    43,    -1,    45,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,    -1,    33,    -1,    -1,   123,    -1,   125,   126,    40, 
         -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    59,    -1, 
         -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    33,    45, 
         -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1, 
         45,    -1,    -1,    59,    -1,   260,   261,   262,   263,   264, 
         91,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1, 
         -1,    -1,   123,    33,   125,   126,    91,    -1,    -1,    -1, 
         40,    -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    59, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1, 
         -1,   126,    -1,    -1,    -1,   340,   341,   342,   343,    -1, 
        345,   346,   260,   261,   262,   263,   264,    -1,    -1,    -1, 
         -1,    91,    -1,    -1,    -1,   360,   361,   362,   363,    -1, 
         -1,    -1,    -1,    -1,    -1,   370,   371,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,   123,    -1,    -1,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   340,   341,   342,   343,    -1,    -1,   346,   260, 
        261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,    -1, 
         -1,    -1,   370,   371,   260,   261,   262,   263,   264,    -1, 
         -1,    -1,    -1,    -1,    -1,   260,   261,   262,   263,   264, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   402,   403,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340, 
        341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
        260,   261,   262,   263,   264,    -1,    -1,    -1,    -1,   360, 
        361,   362,   363,    -1,   340,   341,   342,   343,    -1,   370, 
        346,    -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,    -1, 
         -1,   346,    -1,    -1,   360,   361,   362,   363,    -1,    -1, 
         -1,    -1,    -1,    -1,   370,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   402,   403,    -1,    -1, 
        340,   341,   342,   343,    -1,    -1,   346,   402,   403,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47, 
        360,   361,   362,   363,    -1,    -1,    -1,    -1,    56,    57, 
        370,    59,    60,    61,    62,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   402,   403,    92,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107, 
        108,   109,   110,   111,   112,   113,   114,   115,   116,   117, 
         -1,    -1,   120,   121,   122,   123,   124,   125,   126,    -1, 
         -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   187, 
         -1,    -1,   190,    -1,    -1,    -1,   194,    -1,    -1,    -1, 
        198,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   221,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237, 
        238,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        268,    -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,   277, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   302,   303,   304,    -1,    -1,   307, 
        308,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   345,    -1,    -1, 
        348,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   383, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 
      'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 
      'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 
      'T_FOREACH', 'T_AS', 'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 
      'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      'T_OBJECT_OPERATOR', 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
      'T_DOUBLE_ARROW', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 118 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 129 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 129 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 140 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 141 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 145 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 145 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 13:  #line 153 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 15:  #line 158 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 16:  #line 164 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 164 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 18:  #line 173 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 19:  #line 173 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 182 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 21:  #line 182 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 22:  #line 193 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 194 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 198 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 25:  #line 199 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 203 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 204 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 208 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 209 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 30:  #line 213 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 31:  #line 214 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 218 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 33:  #line 219 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 220 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 35:  #line 224 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 225 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 226 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 230 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 39:  #line 231 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 40:  #line 235 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 41:  #line 235 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 42:  #line 238 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 238 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 248 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 45:  #line 255 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop][0];
      $yyVal->annotations= $yyVals[-5+$yyTop][1];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 46:  #line 266 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 48:  #line 271 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 49:  #line 272 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 50:  #line 273 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 51:  #line 277 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 278 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 284 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 54:  #line 284 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 55:  #line 294 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 56:  #line 294 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 57:  #line 302 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 58:  #line 302 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 59:  #line 314 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 60:  #line 315 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 61:  #line 319 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 62:  #line 320 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 63:  #line 324 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 64:  #line 328 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= array('default' => $yyVals[-2+$yyTop]);
    } break;

    case 65:  #line 333 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-2+$yyTop];
    } break;

    case 66:  #line 341 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 67:  #line 342 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 68:  #line 346 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 69:  #line 347 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 70:  #line 351 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 71:  #line 352 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 72:  #line 356 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 73:  #line 357 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 74:  #line 361 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 75:  #line 362 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 82:  #line 381 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 84:  #line 386 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 85:  #line 387 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 86:  #line 391 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 87:  #line 391 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 88:  #line 394 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 89:  #line 394 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 90:  #line 399 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 91:  #line 399 "grammar/xp.jay"
    {
      $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 92:  #line 405 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 93:  #line 405 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      /* $1->assignment= $6; XX FIXME XX*/
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 94:  #line 410 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 95:  #line 410 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 96:  #line 414 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 97:  #line 414 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 98:  #line 418 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 99:  #line 418 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 100:  #line 423 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 101:  #line 423 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
    } break;

    case 104:  #line 431 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 105:  #line 432 "grammar/xp.jay"
    { $yyVal= array(NULL, $yyVals[0+$yyTop]); } break;

    case 106:  #line 436 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 107:  #line 437 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 108:  #line 441 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 109:  #line 442 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 110:  #line 442 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 111:  #line 447 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 112:  #line 448 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 113:  #line 452 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 114:  #line 453 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 115:  #line 457 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 116:  #line 457 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
  } break;

    case 117:  #line 465 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 119:  #line 470 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 120:  #line 470 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
  } break;

    case 121:  #line 478 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 123:  #line 483 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 124:  #line 484 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 125:  #line 488 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 127:  #line 493 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 128:  #line 499 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 130:  #line 508 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 131:  #line 508 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 132:  #line 511 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 133:  #line 511 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 134:  #line 516 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 135:  #line 516 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 136:  #line 521 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 137:  #line 521 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 138:  #line 527 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 139:  #line 527 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 140:  #line 533 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 141:  #line 534 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); } break;

    case 142:  #line 535 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); } break;

    case 143:  #line 536 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); } break;

    case 144:  #line 537 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); } break;

    case 145:  #line 538 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); $yyVal->postfix= TRUE; } break;

    case 146:  #line 539 "grammar/xp.jay"
    { /* XXX Ternary */ } break;

    case 147:  #line 543 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 148:  #line 544 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 149:  #line 544 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 150:  #line 548 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 151:  #line 553 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 152:  #line 554 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 153:  #line 555 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 154:  #line 556 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 155:  #line 560 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 157:  #line 565 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 158:  #line 566 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 159:  #line 570 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 160:  #line 574 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 161:  #line 575 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 162:  #line 576 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 163:  #line 577 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 164:  #line 578 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 165:  #line 579 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 166:  #line 583 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 167:  #line 584 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 168:  #line 585 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 169:  #line 586 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 170:  #line 587 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 171:  #line 588 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 172:  #line 592 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 173:  #line 593 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 174:  #line 594 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 175:  #line 595 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 176:  #line 596 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 177:  #line 597 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 178:  #line 601 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 179:  #line 602 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 180:  #line 603 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 181:  #line 604 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 182:  #line 605 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 183:  #line 606 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 184:  #line 610 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 185:  #line 611 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 186:  #line 616 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 188:  #line 621 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 189:  #line 621 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 190:  #line 624 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 191:  #line 628 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 192:  #line 628 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 193:  #line 632 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 196:  #line 643 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 197:  #line 644 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 198:  #line 648 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 199:  #line 652 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 200:  #line 653 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 202:  #line 658 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 203:  #line 662 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 204:  #line 663 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 205:  #line 669 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 206:  #line 670 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 207:  #line 674 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 208:  #line 675 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 209:  #line 679 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 210:  #line 680 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 211:  #line 681 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 212:  #line 682 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 213:  #line 683 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 214:  #line 684 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 215:  #line 685 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1799 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
