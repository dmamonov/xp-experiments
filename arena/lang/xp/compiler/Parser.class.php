<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 54 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_BOOLEAN_OR',  414);
  define('TOKEN_T_BOOLEAN_AND',  415);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_DECIMAL',  263);
  define('TOKEN_T_HEX',  264);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_PACKAGE',  303);
  define('TOKEN_T_IMPORT',  304);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_T_DOUBLE_ARROW',  413);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          9,     9,     9,     4,     4,    12,     3,    16,     3,    18, 
          3,    13,    13,    14,    14,    19,    19,    21,    21,    15, 
         15,    22,    22,    22,    17,    17,    17,    26,    26,    28, 
         27,    29,    27,    23,    23,    34,    34,    33,    33,    33, 
         32,    32,    37,    24,    40,    24,    42,    24,    10,    10, 
         43,    43,    45,    45,    45,    39,    39,    36,    36,    48, 
         48,    49,    49,    38,    38,    41,    41,    41,    41,    41, 
         41,    41,    25,    25,    35,    35,    51,    50,    52,    50, 
         55,    50,    57,    50,    59,    50,    60,    50,    61,    50, 
         63,    50,    50,    50,    58,    58,    53,    53,    54,    64, 
         54,    62,    62,    65,    65,    69,    68,    66,    66,    70, 
         67,    56,    56,    71,    71,    46,    46,    72,    72,    30, 
         75,    30,    76,    30,    77,    30,    78,    30,    79,    30, 
         30,    30,    30,    30,    30,    30,    30,    30,    30,    73, 
         85,    73,    73,    73,    73,    73,    73,    86,    86,    47, 
         47,    87,    80,    80,    80,    80,    80,    80,    81,    81, 
         81,    81,    81,    81,    82,    82,    82,    82,    82,    82, 
         83,    83,    83,    83,    83,    83,    84,    84,    74,    74, 
         89,    88,    88,    90,    88,    88,    31,    31,    11,    11, 
         91,    92,    92,    93,    93,    20,    20,    44,    44,    94, 
         94,    95,    95,    95,    95,    95,    95,    95, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     6, 
          1,     1,     3,     1,     3,     0,     9,     0,     9,     0, 
          8,     0,     2,     0,     2,     0,     2,     0,     3,     2, 
          0,     1,     1,     4,     3,     1,     0,     1,     3,     0, 
          3,     0,     6,     5,     6,     0,     1,     2,     4,     4, 
          0,     2,     0,     9,     0,     8,     0,    10,     4,     1, 
          1,     3,     2,     5,     5,     1,     3,     0,     1,     1, 
          3,     3,     3,     0,     2,     1,     1,     1,     1,     1, 
          1,     2,     0,     1,     1,     2,     0,     4,     0,     7, 
          0,    10,     0,     8,     0,     6,     0,     7,     0,     6, 
          0,     4,     2,     1,     3,     1,     1,     3,     0,     0, 
          3,     2,     1,     1,     2,     0,     9,     0,     1,     0, 
          5,     0,     1,     1,     3,     0,     1,     5,     6,     1, 
          0,     3,     0,     4,     0,     5,     0,     8,     0,     6, 
          3,     1,     1,     1,     1,     1,     5,     3,     3,     1, 
          0,     4,     3,     1,     1,     1,     1,     0,     1,     1, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          2,     2,     2,     2,     2,     2,     2,     2,     0,     1, 
          0,     4,     2,     0,     6,     2,     1,     1,     1,     4, 
          3,     1,     3,     1,     3,     1,     3,     0,     1,     1, 
          2,     1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   212,   214,   213,   215,   217,   216,   218,     1, 
          0,    60,   209,     0,     8,     0,     4,     0,     0,     0, 
          0,    16,    20,    18,   211,    15,     0,     0,     0,     0, 
          0,     0,     0,    12,     0,     0,     0,    59,    62,     0, 
          0,     0,     0,     0,    10,     0,     0,   151,     0,     0, 
          0,     0,     0,   157,   154,   156,   155,   131,   133,     0, 
          0,     0,     0,     0,     0,   130,   142,   143,   144,   145, 
        146,     0,     0,     0,     0,     0,     0,     0,    13,     0, 
          0,     0,     0,     0,     0,     0,   139,     0,     0,     0, 
        159,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   187, 
        188,     0,     0,     0,     0,     0,     0,     0,    64,    65, 
          0,     0,   204,     0,     0,    23,     0,     0,     0,    27, 
         31,     0,     0,     0,   123,     0,   191,     0,   132,     0, 
          0,   197,     0,     0,   198,   153,   141,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   169,   170,   171,   172,   173, 
        174,     0,   161,     0,   200,     0,    25,    31,     0,     0, 
          0,     0,   152,     0,     0,     0,     0,     0,     0,   134, 
          0,     0,     0,   205,   203,     0,   207,     0,    21,     0, 
         30,    32,    33,     0,     0,     0,     0,   125,     0,     0, 
        194,     0,     0,   136,     0,     0,    17,     0,     0,     0, 
          0,     0,     0,     0,    19,    31,     0,   140,   192,     0, 
          0,     0,     0,    87,     0,   101,    91,    95,    97,    93, 
         89,   104,     0,     0,    84,     0,    55,     0,     0,     0, 
          0,     0,    31,    41,     0,     0,    39,     0,     0,   128, 
          0,     0,    99,     0,     0,     0,     0,     0,     0,    34, 
        103,    86,     0,     0,     0,   201,    53,    76,    77,    78, 
         79,    80,     0,    81,     0,     0,     0,     0,     0,   195, 
        129,   138,     0,     0,     0,     0,     0,     0,   107,     0, 
          0,     0,     0,     0,    69,     0,     0,    48,     0,    47, 
          0,     0,    82,    57,     0,    44,    29,     0,    88,     0, 
        102,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    45,     0,     0,    43,     0,     0, 
          0,   108,     0,     0,     0,    73,    72,     0,     0,    71, 
         49,    50,     0,     0,   116,   120,   100,     0,   113,     0, 
          0,    96,     0,     0,     0,     0,    75,    66,     0,    56, 
          0,     0,     0,     0,   112,   119,   115,     0,    98,     0, 
          0,   110,    90,     0,    54,     0,     0,     0,     0,   105, 
         94,     0,    67,    58,     0,     0,     0,   111,     0,   121, 
         92,     0,     0,     0,   117, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    20,    72,     4,     7,     8,    11,    46,   210, 
        152,    41,    85,   138,   190,    43,   215,    42,    87,   140, 
        264,   211,   212,   213,   253,   216,   217,   233,   234,   254, 
        313,   297,   285,   321,   255,   314,   322,   359,   380,   283, 
        295,   347,    30,    22,    31,    74,   101,   315,   316,   256, 
        272,   279,   310,   393,   275,   144,   278,   375,   276,   277, 
        304,   367,   274,   402,   368,   385,   369,   370,   383,   384, 
        145,   154,    76,   149,    98,    99,   158,   159,   146,    77, 
         78,    79,    80,    81,    92,   102,    82,   150,   195,   240, 
        155,   134,   135,    23,    24, 
    );
    protected static $yySindex = array(         -269,
          0,     0,  -268,  -214,     0,   314,     0,  -268,    28,    -2, 
       -169,    49,     0,     0,     0,     0,     0,     0,     0,     0, 
        -42,     0,     0,   172,     0,  -214,     0,   109,  -214,    67, 
        121,     0,     0,     0,     0,     0,   -38,   137,   172,    49, 
       -214,  -214,  -214,     0,   133,   125,   650,     0,     0,   128, 
       -114,   -98,  -114,   -38,     0,   650,   650,     0,   650,   650, 
        650,   650,   161,     0,     0,     0,     0,     0,     0,   650, 
        650,  -205,   261,   175,   190,     0,     0,     0,     0,     0, 
          0,   197,   -60,  -214,   -79,  -214,   120,   -79,     0,   148, 
        148,   650,   148,   148,   148,   148,     0,   -90,  -214,   261, 
          0,   129,   349,     0,   650,   650,   650,   650,   650,   650, 
        650,   650,   650,   650,   650,   650,   650,   650,   650,     0, 
          0,   650,   650,   650,   650,   650,   650,   650,     0,     0, 
        650,   -30,     0,   206,   226,     0,  -214,   153,   234,     0, 
          0,   159,   297,   214,     0,   650,     0,    39,     0,   -90, 
        123,     0,   269,   -90,     0,     0,     0,   -29,    55,   148, 
        148,   148,   148,   148,   148,   911,   258,   148,   148,   148, 
        148,   148,   148,   148,   148,     0,     0,     0,     0,     0, 
          0,   911,     0,  -214,     0,   -60,     0,     0,  -214,   369, 
         57,   650,     0,   279,   650,   285,   -90,   233,   650,     0, 
        -90,   287,   650,     0,     0,   603,     0,   207,     0,  -220, 
          0,     0,     0,     0,   208,   286,   302,     0,   -90,   254, 
          0,   225,   308,     0,   650,   148,     0,  2309,   209,    12, 
        139,  -208,   232,   313,     0,     0,    57,     0,     0,   650, 
        650,   232,   321,     0,   244,     0,     0,     0,     0,     0, 
          0,     0,   259,   404,     0,  2309,     0,   135,   292,   338, 
         61,   327,     0,     0,   650,   635,     0,   356,   281,     0, 
        -90,   650,     0,   650,   367,   368,  2334,   373,   376,     0, 
          0,     0,  -214,  -107,   135,     0,     0,     0,     0,     0, 
          0,     0,   324,     0,   381,   650,   384,   657,   459,     0, 
          0,     0,   673,  2309,   725,   650,   650,  2309,     0,    74, 
        650,   650,   -40,   409,     0,   401,   419,     0,  2309,     0, 
        402,  -214,     0,     0,   911,     0,     0,   232,     0,   337, 
          0,   417,   780,   352,   230,   447,   835,   862,   157,   327, 
        177,  -214,   458,   378,     0,   464,  -214,     0,  -321,   650, 
       2334,     0,   650,   167,  2334,     0,     0,  -214,   -26,     0, 
          0,     0,   177,   467,     0,     0,     0,   164,     0,   166, 
        452,     0,   889,    99,   472,   144,     0,     0,  2309,     0, 
        -26,   177,   476,   394,     0,     0,     0,   650,     0,   183, 
       2334,     0,     0,   399,     0,   -26,  -214,  2309,   484,     0, 
          0,  2334,     0,     0,   186,   403,  2334,     0,   486,     0, 
          0,   406,  2309,   416,     0, 
    );
    protected static $yyRindex= array(          118,
          0,     0,   272,     0,     0,   -14,     0,   548,   104,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   -49,     0,     0,     0,     0,     0,     0, 
        454,     0,     0,     0,     0,     0,     0,   105,    35,     0, 
          0,     0,     0,     0,   502,     0,   521,     0,     0,   -27, 
       -109,   440,  -109,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    78,     0,     0,     0,     0,     0,     0,   439, 
          0,     0,   524,     0,     0,     0,     0,     0,     0,     0, 
          0,    17,     0,     0,   443,     0,     0,   443,     0,   923, 
        977,   475,  1049,  1104,  1159,  1302,     0,   131,     0,     0, 
          0,     0,     0,  -240,     0,     0,     0,     0,     0,     0, 
        511,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   508,     0,     0,     0,    -9,     0, 
          0,     0,     6,     0,     0,   530,     0,     0,     0,   176, 
        269,     0,     0,   131,     0,     0,     0,     0,     0,  1356, 
       1379,  1432,  1485,  1538,  1561,    -3,     0,  1597,  1630,  1687, 
       1758,  1811,  1870,  2005,  2062,     0,     0,     0,     0,     0, 
          0,    10,     0,     0,     0,     0,     0,     0,     0,  -219, 
        450,     0,     0,     0,   493,   -32,   203,     0,   530,     0, 
        131,     0,     0,     0,     0,  -219,     0,   188,     0,     0, 
          0,     0,     0,     4,     0,   468,   -16,     0,   131,     0, 
          0,   552,     0,     0,   530,  2095,     0,   477,    11,     0, 
        -35,     0,   103,     0,     0,     0,     0,     0,     0,   530, 
        487,    25,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   488,     0,     0,     0,     0, 
          0,   542,     0,     0,     0,  -104,     0,     0,     0,     0, 
        131,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   578,     0,   561,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,  -219,     0,     0, 
          0,     0,     0,   477,     0,   562,     0,   477,     0,     0, 
          0,     0,     0,     0,     0,   581,     0,     0,     0,     0, 
          0,   578,     0,     0,   253,     0,     0,   103,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    34, 
          5,     0,     0,     0,     0,     0,   578,     0,     0,   562, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     5,     0,     0,     0,     0,  2190,     0,  1948, 
          0,     0,     0,   582,     0,  2262,     0,     0,   477,     0, 
          0,     5,     0,     0,     0,     0,     0,   530,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   477,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   477,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   616,     0,     0,   571,   620, 
        605,     0,   574,   541,   -21,     0,     0,     0,     0,  -129, 
       -223,     0,     0,     0,  -255,   391,     0,     0,     0,  2646, 
        -93,   300,   371,     0,  -238,  -246,     0,  -237,  -227,     0, 
          0,     0,   617,   619,     0,   -34,    26,   317,     0,  -221, 
          0,     0,   -41,     0,     0,   540,     0,     0,     0,     0, 
          0,     0,     0,     0,   290,     0,   303,     0,     0,     0, 
        478,     0,     0,  -112,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,  -105,     0,     0, 
          0,   491,     0,   654,     0, 
    );
    protected static $yyTable = array(10,
        147,   339,   132,    44,   193,   153,   199,   187,   193,   193, 
        193,   193,   193,    22,   193,   319,   199,   282,   270,   137, 
         35,    36,   365,   366,    38,   193,   193,   193,   193,   193, 
        193,   199,   378,     1,   199,     5,    50,    50,    50,   229, 
        208,   200,    38,    42,   197,     9,   124,    40,   330,   206, 
        162,   260,   334,   162,   127,   309,    27,   160,   193,   207, 
        193,    28,    40,    74,   124,    28,    28,    28,    28,    28, 
         14,    28,    75,    26,    51,   346,   167,    51,    50,    50, 
        344,    50,    28,    28,    28,    28,    28,    28,   224,   127, 
         28,   197,   193,   193,   151,   199,   379,   292,   124,   135, 
        364,    14,   290,   288,   348,   289,   238,   291,    38,   230, 
        208,   261,    29,   206,   150,    28,   232,    28,   150,   150, 
        150,   150,   150,   394,   150,   381,    40,    74,    40,   309, 
        124,   262,    50,   309,   162,   150,   150,   150,   150,   150, 
        150,   160,   406,    14,   396,    14,    28,    14,    63,    28, 
         28,   293,   317,   395,    37,   208,   183,   414,   302,    39, 
        220,    28,    14,    14,    40,    14,   206,   189,   404,   309, 
        150,   189,   189,   189,   189,   189,    47,   189,    54,   204, 
        309,    50,    83,    55,    50,   309,   294,    83,   189,   189, 
        189,   189,   189,   189,    14,    84,    14,    63,    83,     9, 
         97,    22,   150,   150,   104,   231,    26,   122,     2,   123, 
        210,    86,   190,   198,   266,   129,   190,   190,   190,   190, 
        190,    45,   190,   189,   199,   208,    14,    28,   377,   259, 
        130,   137,   318,   190,   190,   190,   190,   190,   190,   196, 
        131,   298,   141,   196,   196,   196,   196,   196,   257,   196, 
        210,   210,   210,   156,    26,   189,   189,    32,    33,    34, 
        196,   196,   196,   196,   196,   196,   110,   185,   190,   186, 
         14,   108,   106,   119,   107,   188,   109,   189,   231,   184, 
        210,   191,   199,   199,   199,   208,   208,   208,   281,   122, 
        105,   123,   111,    52,   208,   196,    52,   110,   196,   340, 
        190,   190,   108,   106,   199,   107,   193,   109,   199,   372, 
        201,    52,   199,   376,   202,   203,   214,   231,   148,   219, 
        122,   105,   123,   111,   221,   222,   225,   196,   196,   228, 
         14,   193,   235,   110,   208,   208,   208,   231,   108,   106, 
        192,   107,   231,   109,   236,   237,   239,   241,   242,   401, 
         14,   258,   265,    50,   263,   119,   122,   105,   123,   111, 
        408,   271,     5,    14,   208,   411,   273,   193,   193,   193, 
        193,   193,   193,   193,   193,   193,   193,   287,   193,   193, 
        193,   193,   193,   280,   286,   110,   119,   296,    28,   157, 
        108,   106,    50,   107,   284,   109,   300,     2,     2,     2, 
          2,     2,     2,     2,    12,   301,   306,   307,   122,   105, 
        123,   111,   311,    14,    14,   312,   323,     2,     2,     2, 
        324,     2,   119,    14,    28,    28,    28,    28,    28,    28, 
         28,    28,    28,    28,   336,    28,    28,    28,    28,    28, 
        110,   150,   326,    14,   342,   108,   106,   215,   107,   341, 
        109,    13,    14,    15,    16,    17,    18,    19,   343,    12, 
        345,   349,   281,   122,   105,   123,   111,   215,   215,   215, 
        215,   215,   215,   215,   119,   350,   352,   150,   150,   150, 
        150,   150,   150,   150,   150,   150,   353,    14,   150,   150, 
        150,   150,   150,   209,   189,   110,   356,   358,   361,   328, 
        108,   106,   362,   107,   363,   109,   374,   382,   366,   365, 
        388,   390,   391,    14,   392,   397,   398,   215,   122,   105, 
        123,   111,   400,   403,   407,   409,   412,   410,   413,   119, 
        189,   189,   189,   189,   189,   189,   189,   189,   189,   190, 
        415,   189,   189,   189,   189,   189,    61,   125,   124,   120, 
        121,     5,     5,     5,     5,     5,     5,     5,   126,   127, 
         11,   126,    26,   158,   127,    24,   196,   122,   126,   202, 
        122,     5,     5,     5,    37,   190,   190,   190,   190,   190, 
        190,   190,   190,   190,   119,   126,   190,   190,   190,   190, 
        190,   201,    36,    13,    14,    15,    16,    17,    18,    19, 
         51,    83,   196,   196,   196,   196,   196,   196,   196,   196, 
        196,   122,    85,   196,   196,   196,   196,   196,    68,    46, 
        122,    70,   106,    25,    89,    21,    88,   267,   142,   125, 
        124,   120,   121,   112,   113,   114,   115,   116,     7,   357, 
        126,   127,   128,   117,   118,    51,    52,    53,    13,    14, 
         15,   208,    17,    18,    19,   320,    49,    48,   360,   387, 
        125,   124,   120,   121,   112,   113,   114,   115,   116,   218, 
        386,   126,   127,   128,   117,   118,   205,    35,     0,     0, 
          0,     0,    59,     0,     0,   194,     0,   133,   136,    71, 
        139,     0,    56,    12,    57,     0,   125,   124,   120,   121, 
        112,   113,   114,   115,   116,     0,     0,   126,   127,   110, 
        117,   118,     0,     0,   108,   106,     0,   107,     0,   109, 
          0,     0,     0,     0,     0,    12,     0,   227,     0,     0, 
          0,   329,   122,   105,   123,   111,     0,     0,   223,     0, 
         58,   139,     0,     0,     0,     0,     0,    12,   125,   124, 
        120,   121,   112,   113,   114,   115,   116,     0,     0,   126, 
        127,   110,   117,   118,   243,     0,   108,   106,     0,   107, 
          0,   109,    70,     0,     0,    60,     0,     0,     0,   268, 
        269,   327,     0,   331,   122,   105,   123,   111,     0,     0, 
        133,     0,     0,   139,     0,     0,     0,     0,   119,     0, 
          0,     0,     0,   125,   124,   120,   121,   112,   113,   114, 
        115,   116,     0,     0,   126,   127,   110,   117,   118,     0, 
        351,   108,   106,     0,   107,     0,   109,     7,     7,     7, 
          7,     7,     7,     7,     0,     0,     0,     0,     0,   122, 
        105,   123,   111,     0,     0,   332,     0,     7,     7,     7, 
        119,     0,     0,     0,     0,     0,     0,     0,   125,   124, 
        120,   121,   112,   113,   114,   115,   116,     0,     0,   126, 
        127,   110,   117,   118,     0,     0,   108,   106,     0,   107, 
          0,   109,    13,    14,    15,   208,    17,    18,    19,   371, 
          0,     0,     0,     0,   122,   105,   123,   111,   110,     0, 
          0,     0,   355,   108,   106,   119,   107,     0,   109,    63, 
         64,    65,    66,    67,    13,    14,    15,   208,    17,    18, 
         19,   122,   105,   123,   111,   110,     0,   399,     0,   389, 
        108,   106,     0,   107,     0,   109,    13,    14,    15,   208, 
         17,    18,    19,     0,     0,     0,     0,   110,   122,   105, 
        123,   111,   108,   106,     0,   107,     0,   109,     0,   183, 
        119,     0,   139,   183,   183,   183,   183,   183,     0,   183, 
        122,   105,   123,   111,     0,     0,     0,     0,     0,     0, 
        183,   183,     0,   183,     0,   183,     0,   119,     0,    68, 
          0,     0,     0,     0,     0,    69,     0,     0,     0,     0, 
          0,   405,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   184,   119,   183,     0,   184,   184,   184, 
        184,   184,     0,   184,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   184,   184,   119,   184,     0,   184, 
          0,     0,     0,     0,     0,     0,     0,   183,     0,     0, 
          0,    61,    62,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   184, 
          0,     0,   125,   124,   120,   121,   112,   113,   114,   115, 
        116,     0,     0,   126,   127,   181,   117,   118,     0,   181, 
        181,   181,   181,   181,     0,   181,     0,     0,     0,     0, 
          0,   184,     0,     0,     0,     0,   181,   181,     0,   181, 
          0,   181,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   125,   124,   120,   121,   112,   113, 
        114,   115,   116,     0,     0,   126,   127,     0,   117,   118, 
        182,   181,     0,     0,   182,   182,   182,   182,   182,     0, 
        182,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   182,   182,     0,   182,     0,   182,     0,     0,     0, 
          0,     0,     0,   181,     0,     0,     0,     0,     0,   125, 
        124,   120,   121,   112,   113,   114,   115,   116,     0,     0, 
        126,   127,     0,   117,   118,   185,   182,     0,   354,   185, 
        185,   185,   185,   185,     0,   185,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   185,   185,     0,   185, 
          0,   185,     0,     0,     0,     0,     0,     0,   182,     0, 
          0,     0,     0,     0,   125,   124,   120,   121,   112,   113, 
        114,   115,   116,     0,     0,   126,   127,     0,   117,   118, 
          0,   185,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   125,   124,   120,   121,   112,   113,   114,   115,   116, 
          0,     0,   126,   127,     0,   117,   118,     0,     0,     0, 
          0,     0,     0,   185,     0,     0,   183,     0,   125,   124, 
        120,   121,   112,   113,   114,   115,   116,     0,     0,   126, 
        127,     0,   117,   118,     0,     0,     0,     0,     0,     0, 
        125,   124,   120,   121,   112,   113,   114,   115,   116,     0, 
          0,   126,   127,     0,   117,   118,   183,   183,   183,   183, 
        183,     0,     0,     0,     0,   183,   183,   183,   186,     0, 
        184,     0,   186,   186,   186,   186,   186,     0,   186,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   186, 
        186,     0,   186,     0,   186,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        184,   184,   184,   184,   184,     0,     0,     0,     0,   184, 
        184,   184,   163,     0,   186,     0,   163,   163,   163,   163, 
        163,     0,   163,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   181,   163,   163,   175,   163,     0,   163,   175, 
        175,   175,   175,   175,     0,   175,   186,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   175,   175,     0,   175, 
          0,   175,     0,     0,     0,     0,     0,     0,   163,     0, 
          0,     0,   181,   181,   181,   181,   181,     0,     0,     0, 
          0,   181,   181,   181,     0,     0,     0,   182,   176,     0, 
          0,   175,   176,   176,   176,   176,   176,     0,   176,     0, 
        163,     0,     0,     0,     0,     0,     0,     0,     0,   176, 
        176,     0,   176,     0,   176,     0,     0,     0,     0,     0, 
          0,     0,     0,   175,     0,     0,     0,   182,   182,   182, 
        182,   182,     0,     0,     0,     0,   182,   182,   182,     0, 
          0,   177,   185,     0,   176,   177,   177,   177,   177,   177, 
          0,   177,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   177,   177,     0,   177,     0,   177,     0,     0, 
          0,     0,     0,     0,     0,     0,   176,     0,     0,     0, 
          0,     0,   185,   185,   185,   185,   185,     0,     0,     0, 
          0,   185,   185,   185,   178,     0,     0,   177,   178,   178, 
        178,   178,   178,     0,   178,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   178,   178,   179,   178,     0, 
        178,   179,   179,   179,   179,   179,     0,   179,     0,   177, 
          0,     0,     0,     0,     0,     0,     0,     0,   179,   179, 
          0,   179,     0,   179,     0,     0,     0,     0,     0,     0, 
        178,     0,     0,   164,     0,     0,     0,   164,   164,   164, 
        164,   164,     0,   164,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   179,   164,   164,     0,   164,     0,   164, 
          0,     0,   178,     0,     0,   186,   165,     0,     0,     0, 
        165,   165,   165,   165,   165,     0,   165,     0,     0,     0, 
          0,     0,     0,     0,     0,   179,     0,   165,   165,   164, 
        165,     0,   165,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   186,   186,   186,   186,   186, 
          0,     0,     0,     0,   186,   186,   186,     0,     0,   163, 
          0,   164,   165,   166,     0,     0,     0,   166,   166,   166, 
        166,   166,     0,   166,     0,     0,     0,     0,     0,     0, 
          0,     0,   175,     0,   166,   166,     0,   166,     0,   166, 
          0,     0,     0,     0,   165,     0,     0,     0,     0,   163, 
        163,   163,   163,   163,     0,     0,     0,     0,   163,   163, 
        163,     0,     0,     0,     0,     0,     0,     0,     0,   166, 
          0,     0,   175,   175,   175,   175,   175,     0,     0,     0, 
          0,   175,   175,   175,   167,   176,     0,     0,   167,   167, 
        167,   167,   167,     0,   167,     0,     0,     0,     0,     0, 
          0,   166,     0,     0,     0,   167,   167,     0,   167,     0, 
        167,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   176,   176,   176,   176,   176, 
          0,     0,     0,     0,   176,   176,   176,   168,   177,     0, 
        167,   168,   168,   168,   168,   168,     0,   168,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   168,   168, 
          0,   168,     0,   168,     0,     0,     0,     0,     0,     0, 
          0,     0,   167,     0,     0,     0,     0,     0,   177,   177, 
        177,   177,   177,     0,     0,     0,     0,   177,   177,   177, 
          0,   178,     0,   168,     0,     0,   148,     0,     0,     0, 
        148,   148,   148,   148,   148,     0,   148,     0,     0,     0, 
          0,     0,     0,     0,   179,     0,     0,   148,   148,     0, 
        148,     0,   148,     0,     0,   168,     0,     0,     0,     0, 
          0,   178,   178,   178,   178,   178,     0,     0,     0,     0, 
        178,   178,   178,     0,     0,     0,     0,     0,     0,     0, 
        164,     0,   148,     0,   179,   179,   179,   179,   179,     0, 
          0,     0,     0,   179,   179,   179,     0,     0,     0,     0, 
        114,     0,     0,     0,     0,     0,     0,   114,     0,     0, 
        114,     0,   114,   165,   148,     0,     0,     0,     0,     0, 
        164,   164,   164,   164,   164,     0,   114,     0,     0,   164, 
        164,   164,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   165,   165,   165,   165,   165,   114,     0, 
          0,   149,   165,   165,   165,   149,   149,   149,   149,   149, 
        166,   149,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   149,   149,     0,   149,     0,   149,     0,     0, 
        114,     0,   114,   114,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        166,   166,   166,   166,   166,     0,     0,   149,   180,   166, 
        166,   166,   180,   180,   180,   180,   180,     0,   180,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   180, 
        180,   167,   180,     0,   180,     0,     0,     0,     0,   149, 
          0,   147,     0,     0,     0,   147,   147,   147,   147,   147, 
          0,   147,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   147,   147,   180,   147,     0,   147,     0,     0, 
          0,   167,   167,   167,   167,   167,     0,     0,     0,     0, 
        167,   167,   167,     0,   168,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   180,   147,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   114,   114,   114, 
        114,   114,     0,     0,   168,   168,   168,   168,   168,   147, 
          0,     0,   118,   168,   168,   168,     0,     0,     0,   118, 
          0,     0,   118,   148,   118,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   118,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   148,   148,   148,   148,   148,     0,     0, 
        118,     0,   148,   148,   148,     0,     0,   114,   114,   114, 
        114,     0,   114,   114,   109,     0,     0,     0,     0,     0, 
          0,   109,     0,     0,   109,     0,   109,   114,   114,   114, 
        114,     0,   118,     0,   118,   118,     0,   114,   114,     0, 
        109,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    59,     0,     0,     0,     0,     0,     0,    71,   114, 
        114,    56,   109,    57,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    59,   252,   149,     0, 
          0,     0,     0,    71,     0,     0,    56,     0,    57,     0, 
          0,     0,     0,     0,   109,     0,   109,   109,     0,     0, 
          0,     0,   252,     0,     0,     0,     0,     0,     0,    58, 
          0,     0,     0,     0,     0,     0,     0,     0,   149,   149, 
        149,   149,   149,     0,     0,     0,     0,   149,   149,   149, 
          0,     0,     0,     0,    58,   180,     0,     0,     0,     0, 
          0,    70,     0,     0,    60,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   118, 
        118,   118,   118,   118,     0,     0,   308,     0,   147,    60, 
          0,     0,     0,     0,     0,   180,   180,   180,   180,   180, 
          0,     0,     0,     0,   180,   180,   180,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   147,   147, 
        147,   147,   147,     0,     0,     0,     0,   147,   147,   147, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   109,   109,   109,   109,   109,     0,     0,     0,   118, 
        118,   118,   118,     0,     0,   118,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   118, 
        118,   118,   118,     0,     0,     0,     0,     0,     0,   118, 
        118,     0,     0,     0,     0,     0,     0,     0,    63,    64, 
         65,    66,    67,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   118,   118,    63,    64,    65,    66,    67,     0,     0, 
          0,   109,   109,   109,   109,     0,     0,   109,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   109,   109,   109,   109,     0,     0,     0,     0,     0, 
          0,   109,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    68,   244, 
        245,   246,     0,     0,    69,     0,     0,     0,     0,     0, 
          0,     0,     0,   109,   109,     0,     0,     0,   247,   248, 
        249,   250,     0,    68,   244,   245,   246,     0,   251,    69, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    73,   247,   248,   249,   250,     0,     0,     0, 
          0,    90,    91,   251,    93,    94,    95,    96,     0,     0, 
         61,    62,     0,     0,     0,   100,   103,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    61,    62,   143,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        160,   161,   162,   163,   164,   165,   166,   168,   169,   170, 
        171,   172,   173,   174,   175,     0,     0,   176,   177,   178, 
        179,   180,   181,   182,     0,     0,   100,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   143,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   143,     0,     0, 
        166,     0,     0,     0,   143,     0,     0,     0,   226,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        143,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   143,   143,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        299,     0,     0,     0,     0,     0,     0,   303,     0,   305, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   325,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   143,   333,   335,     0,     0,   337,   338,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   143,     0,     0,   373,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   143, 
    );
    protected static $yyCheck = array(4,
         91,    42,    63,    42,    37,    99,    42,   137,    41,    42, 
         43,    44,    45,   123,    47,   123,    44,   256,   242,   260, 
        125,    26,   344,   345,    29,    58,    59,    60,    61,    62, 
         63,    59,    59,   303,    62,   304,    41,    42,    43,   260, 
        260,   154,    59,    40,   150,   260,    41,    44,   304,    59, 
         41,   260,   308,    44,    58,   277,    59,    41,    91,   189, 
         93,    37,    59,    59,    59,    41,    42,    43,    44,    45, 
         60,    47,    47,    46,    41,   322,   111,    44,    83,    84, 
        319,    86,    58,    59,    60,    61,    62,    63,   201,    93, 
        260,   197,   125,   126,    99,   123,   123,    37,    93,   340, 
        347,    91,    42,    43,   328,    45,   219,    47,   125,   330, 
        330,   320,    64,   123,    37,    91,   210,    93,    41,    42, 
         43,    44,    45,   379,    47,   363,   123,   123,   125,   351, 
        125,   340,   137,   355,   125,    58,    59,    60,    61,    62, 
         63,   125,   398,    40,   382,    42,    44,    44,    44,   125, 
        126,    91,   260,   381,    46,   260,   131,   413,   271,    93, 
        195,    59,    59,    60,    44,    62,   188,    37,   396,   391, 
         93,    41,    42,    43,    44,    45,    40,    47,    46,   184, 
        402,   186,    60,    59,   189,   407,   126,    60,    58,    59, 
         60,    61,    62,    63,    91,   310,    93,    93,    60,   260, 
         40,   311,   125,   126,   410,   210,    46,    60,    91,    62, 
        260,   310,    37,    91,   236,    41,    41,    42,    43,    44, 
         45,   260,    47,    93,   260,   330,   123,   125,   358,    91, 
         41,   311,   340,    58,    59,    60,    61,    62,    63,    37, 
         44,   263,   123,    41,    42,    43,    44,    45,    40,    47, 
        300,   301,   302,   125,    46,   125,   126,   300,   301,   302, 
         58,    59,    60,    61,    62,    63,    37,    62,    93,    44, 
        260,    42,    43,   126,    45,   123,    47,    44,   283,   310, 
        330,   123,   310,   311,   320,   300,   301,   302,    59,    60, 
         61,    62,    63,    41,   260,    93,    44,    37,   260,   340, 
        125,   126,    42,    43,   340,    45,    93,    47,    40,   351, 
        340,    59,   340,   355,   260,    58,   260,   322,   409,    41, 
         60,    61,    62,    63,    40,    93,    40,   125,   126,   123, 
        320,   364,   125,    37,   300,   301,   302,   342,    42,    43, 
         44,    45,   347,    47,    59,    44,    93,   123,    41,   391, 
        340,   340,    40,   358,   123,   126,    60,    61,    62,    63, 
        402,    41,    91,   260,   330,   407,   123,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   409,    40,   411,   412, 
        413,   414,   415,   125,    93,    37,   126,    61,   364,    41, 
         42,    43,   397,    45,   260,    47,    41,   280,   281,   282, 
        283,   284,   285,   286,    91,   125,    40,    40,    60,    61, 
         62,    63,    40,   310,   311,    40,    93,   300,   301,   302, 
         40,   304,   126,   320,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,   409,   361,   411,   412,   413,   414,   415, 
         37,   364,    59,   340,    44,    42,    43,   260,    45,    41, 
         47,   280,   281,   282,   283,   284,   285,   286,    40,    91, 
         59,   125,    59,    60,    61,    62,    63,   280,   281,   282, 
        283,   284,   285,   286,   126,    59,   125,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    40,   410,   411,   412, 
        413,   414,   415,   125,   364,    37,   340,   321,    41,    41, 
         42,    43,   125,    45,    41,    47,   340,    41,   345,   344, 
         59,   413,    41,   410,   371,    40,   123,   330,    60,    61, 
         62,    63,   340,   125,    41,   340,    41,   125,   123,   126, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   364, 
        125,   411,   412,   413,   414,   415,    93,   400,   401,   402, 
        403,   280,   281,   282,   283,   284,   285,   286,   411,   412, 
         59,    41,   123,   125,    41,   123,   364,    93,    58,    62, 
         41,   300,   301,   302,   125,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   126,    93,   411,   412,   413,   414, 
        415,    40,   125,   280,   281,   282,   283,   284,   285,   286, 
         59,   125,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   125,   125,   411,   412,   413,   414,   415,    41,    59, 
         59,    41,    41,     8,    54,     6,    53,   237,    88,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    91,   340, 
        411,   412,   413,   414,   415,    41,    42,    43,   280,   281, 
        282,   283,   284,   285,   286,   285,    40,    39,   342,   370, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   192, 
        368,   411,   412,   413,   414,   415,   186,    24,    -1,    -1, 
         -1,    -1,    33,    -1,    -1,   146,    -1,    83,    84,    40, 
         86,    -1,    43,    91,    45,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    37, 
        414,   415,    -1,    -1,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    91,    -1,   125,    -1,    -1, 
         -1,    59,    60,    61,    62,    63,    -1,    -1,   199,    -1, 
         91,   137,    -1,    -1,    -1,    -1,    -1,    91,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    37,   414,   415,   225,    -1,    42,    43,    -1,    45, 
         -1,    47,   123,    -1,    -1,   126,    -1,    -1,    -1,   240, 
        241,   125,    -1,    59,    60,    61,    62,    63,    -1,    -1, 
        186,    -1,    -1,   189,    -1,    -1,    -1,    -1,   126,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    37,   414,   415,    -1, 
         41,    42,    43,    -1,    45,    -1,    47,   280,   281,   282, 
        283,   284,   285,   286,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    -1,    -1,   306,    -1,   300,   301,   302, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    37,   414,   415,    -1,    -1,    42,    43,    -1,    45, 
         -1,    47,   280,   281,   282,   283,   284,   285,   286,   350, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    37,    -1, 
         -1,    -1,    41,    42,    43,   126,    45,    -1,    47,   260, 
        261,   262,   263,   264,   280,   281,   282,   283,   284,   285, 
        286,    60,    61,    62,    63,    37,    -1,   388,    -1,    41, 
         42,    43,    -1,    45,    -1,    47,   280,   281,   282,   283, 
        284,   285,   286,    -1,    -1,    -1,    -1,    37,    60,    61, 
         62,    63,    42,    43,    -1,    45,    -1,    47,    -1,    37, 
        126,    -1,   358,    41,    42,    43,    44,    45,    -1,    47, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,   126,    -1,   340, 
         -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,   397,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    37,   126,    93,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,   126,    61,    -1,    63, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1, 
         -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    37,   414,   415,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,   125,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
         37,    93,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,    37,    93,    -1,   364,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
         -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,    -1,    -1,    -1, 
         -1,    -1,    -1,   125,    -1,    -1,   364,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,   414,   415,    37,    -1, 
        364,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,   413, 
        414,   415,    37,    -1,    93,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   364,    58,    59,    37,    61,    -1,    63,    41, 
         42,    43,    44,    45,    -1,    47,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,    -1,    -1,    -1,   364,    37,    -1, 
         -1,    93,    41,    42,    43,    44,    45,    -1,    47,    -1, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   125,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,    -1, 
         -1,    37,   364,    -1,    93,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,    37,    -1,    -1,    93,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    37,    61,    -1, 
         63,    41,    42,    43,    44,    45,    -1,    47,    -1,   125, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         93,    -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,   125,    -1,    -1,   364,    37,    -1,    -1,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   125,    -1,    58,    59,    93, 
         61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,    -1,    -1,   364, 
         -1,   125,    93,    37,    -1,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   364,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,    37,   364,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,   125,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,    37,   364,    -1, 
         93,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
         -1,   364,    -1,    93,    -1,    -1,    37,    -1,    -1,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   364,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,   125,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        364,    -1,    93,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,    -1,    -1,    -1,    -1, 
         33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1, 
         43,    -1,    45,   364,   125,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    59,    -1,    -1,   413, 
        414,   415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    91,    -1, 
         -1,    37,   413,   414,   415,    41,    42,    43,    44,    45, 
        364,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
        123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    93,    37,   413, 
        414,   415,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,   364,    61,    -1,    63,    -1,    -1,    -1,    -1,   125, 
         -1,    37,    -1,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    93,    61,    -1,    63,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,    -1,   364,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   125,    93,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,   261,   262, 
        263,   264,    -1,    -1,   404,   405,   406,   407,   408,   125, 
         -1,    -1,    33,   413,   414,   415,    -1,    -1,    -1,    40, 
         -1,    -1,    43,   364,    45,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         91,    -1,   413,   414,   415,    -1,    -1,   340,   341,   342, 
        343,    -1,   345,   346,    33,    -1,    -1,    -1,    -1,    -1, 
         -1,    40,    -1,    -1,    43,    -1,    45,   360,   361,   362, 
        363,    -1,   123,    -1,   125,   126,    -1,   370,   371,    -1, 
         59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,   402, 
        403,    43,    91,    45,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    33,    59,   364,    -1, 
         -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    45,    -1, 
         -1,    -1,    -1,    -1,   123,    -1,   125,   126,    -1,    -1, 
         -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    91, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
         -1,    -1,    -1,    -1,    91,   364,    -1,    -1,    -1,    -1, 
         -1,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,    -1,    -1,   123,    -1,   364,   126, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   260,   261,   262,   263,   264,    -1,    -1,    -1,   340, 
        341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360, 
        361,   362,   363,    -1,    -1,    -1,    -1,    -1,    -1,   370, 
        371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,   261, 
        262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403,   260,   261,   262,   263,   264,    -1,    -1, 
         -1,   340,   341,   342,   343,    -1,    -1,   346,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   360,   361,   362,   363,    -1,    -1,    -1,    -1,    -1, 
         -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341, 
        342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   402,   403,    -1,    -1,    -1,   360,   361, 
        362,   363,    -1,   340,   341,   342,   343,    -1,   370,   346, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    47,   360,   361,   362,   363,    -1,    -1,    -1, 
         -1,    56,    57,   370,    59,    60,    61,    62,    -1,    -1, 
        402,   403,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   402,   403,    92,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        105,   106,   107,   108,   109,   110,   111,   112,   113,   114, 
        115,   116,   117,   118,   119,    -1,    -1,   122,   123,   124, 
        125,   126,   127,   128,    -1,    -1,   131,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,    -1, 
        195,    -1,    -1,    -1,   199,    -1,    -1,    -1,   203,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        265,    -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,   274, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   296,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   306,   307,   308,    -1,    -1,   311,   312,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   350,    -1,    -1,   353,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   388, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 
      'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 
      'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 
      'T_FOREACH', 'T_AS', 'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 
      'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      'T_OBJECT_OPERATOR', 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
      'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 'T_BOOLEAN_AND', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 122 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 133 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 133 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 144 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 145 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 149 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 149 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 13:  #line 157 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 15:  #line 162 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 16:  #line 168 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 168 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 18:  #line 177 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 19:  #line 177 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 186 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 21:  #line 186 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 22:  #line 197 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 198 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 202 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 25:  #line 203 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 207 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 208 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 212 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 213 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 30:  #line 217 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 31:  #line 218 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 222 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 33:  #line 223 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 224 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 35:  #line 228 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 229 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 230 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 234 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 39:  #line 235 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 40:  #line 239 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 41:  #line 239 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 42:  #line 242 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 242 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 252 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 45:  #line 259 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop][0];
      $yyVal->annotations= $yyVals[-5+$yyTop][1];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 46:  #line 270 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 48:  #line 275 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 49:  #line 276 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 50:  #line 277 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 51:  #line 281 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 282 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 288 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 54:  #line 288 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 55:  #line 298 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 56:  #line 298 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 57:  #line 306 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 58:  #line 306 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 59:  #line 319 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 60:  #line 320 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 61:  #line 324 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 62:  #line 325 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 63:  #line 329 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 64:  #line 333 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= array('default' => $yyVals[-2+$yyTop]);
    } break;

    case 65:  #line 338 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-2+$yyTop];
    } break;

    case 66:  #line 346 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 67:  #line 347 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 68:  #line 351 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 69:  #line 352 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 70:  #line 356 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 71:  #line 357 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 72:  #line 361 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 73:  #line 362 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 74:  #line 366 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 75:  #line 367 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 82:  #line 379 "grammar/xp.jay"
    { $yyVal= '[]'; } break;

    case 83:  #line 387 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 85:  #line 392 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 86:  #line 393 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 87:  #line 397 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 88:  #line 397 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 89:  #line 400 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 90:  #line 400 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 91:  #line 405 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 92:  #line 405 "grammar/xp.jay"
    {
      $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 93:  #line 411 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 94:  #line 411 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      /* $1->assignment= $6; XX FIXME XX*/
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 95:  #line 416 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 96:  #line 416 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 97:  #line 420 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 98:  #line 420 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 99:  #line 424 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 100:  #line 424 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 101:  #line 429 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 102:  #line 429 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
    } break;

    case 105:  #line 437 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 106:  #line 438 "grammar/xp.jay"
    { $yyVal= array(NULL, $yyVals[0+$yyTop]); } break;

    case 107:  #line 442 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 108:  #line 443 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 109:  #line 447 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 110:  #line 448 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 111:  #line 448 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 112:  #line 453 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 113:  #line 454 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 114:  #line 458 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 115:  #line 459 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 116:  #line 463 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 117:  #line 463 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
  } break;

    case 118:  #line 471 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 120:  #line 476 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 121:  #line 476 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
  } break;

    case 122:  #line 484 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 124:  #line 489 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 125:  #line 490 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 126:  #line 494 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 128:  #line 499 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 129:  #line 505 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 131:  #line 514 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 132:  #line 514 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 133:  #line 517 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 134:  #line 517 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 135:  #line 522 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 136:  #line 522 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 137:  #line 527 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 138:  #line 527 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 139:  #line 533 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 140:  #line 533 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 141:  #line 539 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 142:  #line 540 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 143:  #line 543 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 144:  #line 546 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 145:  #line 549 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 146:  #line 552 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 147:  #line 556 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 148:  #line 562 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new BinaryOpNode()); $yyVal->lhs= $yyVals[-2+$yyTop]; $yyVal->rhs= $yyVals[0+$yyTop]; $yyVal->op= '||'; } break;

    case 149:  #line 563 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new BinaryOpNode()); $yyVal->lhs= $yyVals[-2+$yyTop]; $yyVal->rhs= $yyVals[0+$yyTop]; $yyVal->op= '&&'; } break;

    case 150:  #line 567 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 151:  #line 568 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 152:  #line 568 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 153:  #line 572 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 154:  #line 577 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 155:  #line 578 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 156:  #line 579 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 157:  #line 580 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 158:  #line 584 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 160:  #line 589 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 161:  #line 590 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 162:  #line 594 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 163:  #line 598 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 164:  #line 599 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 165:  #line 600 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 166:  #line 601 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 167:  #line 602 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 168:  #line 603 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 169:  #line 607 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 170:  #line 608 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 171:  #line 609 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 172:  #line 610 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 173:  #line 611 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 174:  #line 612 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 175:  #line 616 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 176:  #line 617 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 177:  #line 618 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 178:  #line 619 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 179:  #line 620 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 180:  #line 621 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 181:  #line 625 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 182:  #line 626 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 183:  #line 627 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 184:  #line 628 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 185:  #line 629 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 630 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 634 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 188:  #line 635 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 189:  #line 640 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 191:  #line 645 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 192:  #line 645 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 193:  #line 648 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 194:  #line 652 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 195:  #line 652 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 196:  #line 656 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 199:  #line 667 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 200:  #line 668 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 201:  #line 672 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 202:  #line 676 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 203:  #line 677 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 205:  #line 682 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 206:  #line 686 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 207:  #line 687 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 208:  #line 693 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 209:  #line 694 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 210:  #line 698 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 211:  #line 699 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 212:  #line 703 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 213:  #line 704 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 214:  #line 705 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 215:  #line 706 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 216:  #line 707 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 217:  #line 708 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 218:  #line 709 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1886 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
