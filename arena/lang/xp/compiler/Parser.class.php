<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.SwitchNode',
    'xp.compiler.ast.CaseNode',
    'xp.compiler.ast.DefaultNode',
    'xp.compiler.ast.BreakNode',
    'xp.compiler.ast.ContinueNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 59 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_BOOLEAN_OR',  414);
  define('TOKEN_T_BOOLEAN_AND',  415);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_DECIMAL',  263);
  define('TOKEN_T_HEX',  264);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_PACKAGE',  303);
  define('TOKEN_T_IMPORT',  304);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_T_DOUBLE_ARROW',  413);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          9,     9,     9,     4,     4,    12,     3,    16,     3,    18, 
          3,    13,    13,    14,    14,    19,    19,    21,    21,    15, 
         15,    22,    22,    22,    17,    17,    17,    26,    26,    28, 
         27,    29,    27,    23,    23,    34,    34,    33,    33,    33, 
         32,    32,    37,    24,    40,    24,    42,    24,    10,    10, 
         43,    43,    45,    45,    45,    39,    39,    36,    36,    48, 
         48,    49,    49,    38,    38,    41,    41,    41,    41,    41, 
         41,    41,    41,    25,    25,    35,    35,    51,    50,    52, 
         50,    55,    50,    57,    50,    59,    50,    60,    50,    61, 
         50,    63,    50,    65,    50,    66,    50,    67,    50,    50, 
         50,    62,    62,    68,    68,    70,    69,    71,    69,    58, 
         58,    53,    53,    54,    72,    54,    64,    64,    73,    73, 
         77,    76,    74,    74,    78,    75,    56,    56,    79,    79, 
         46,    46,    80,    80,    30,    83,    30,    84,    30,    85, 
         30,    86,    30,    87,    30,    30,    30,    30,    30,    30, 
         30,    30,    30,    30,    81,    93,    81,    81,    81,    81, 
         81,    81,    94,    94,    47,    47,    95,    88,    88,    88, 
         88,    88,    88,    89,    89,    89,    89,    89,    89,    90, 
         90,    90,    90,    90,    90,    91,    91,    91,    91,    91, 
         91,    92,    92,    82,    82,    97,    96,    96,    98,    96, 
         96,    31,    31,    11,    11,    99,   100,   100,   101,   101, 
         20,    20,    44,    44,   102,   102,   103,   103,   103,   103, 
        103,   103,   103, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     6, 
          1,     1,     3,     1,     3,     0,     9,     0,     9,     0, 
          8,     0,     2,     0,     2,     0,     2,     0,     3,     2, 
          0,     1,     1,     4,     3,     1,     0,     1,     3,     0, 
          3,     0,     6,     5,     6,     0,     1,     2,     4,     4, 
          0,     2,     0,     9,     0,     8,     0,    10,     4,     1, 
          1,     3,     2,     5,     5,     1,     3,     0,     1,     1, 
          3,     3,     3,     0,     2,     1,     1,     1,     1,     1, 
          1,     2,     3,     0,     1,     1,     2,     0,     4,     0, 
          7,     0,    10,     0,     8,     0,     6,     0,     7,     0, 
          8,     0,     6,     0,     3,     0,     3,     0,     4,     2, 
          1,     0,     1,     1,     2,     0,     5,     0,     4,     3, 
          1,     1,     3,     0,     0,     3,     2,     1,     1,     2, 
          0,     9,     0,     1,     0,     5,     0,     1,     1,     3, 
          0,     1,     5,     6,     1,     0,     3,     0,     4,     0, 
          5,     0,     8,     0,     6,     3,     1,     1,     1,     1, 
          1,     5,     3,     3,     1,     0,     4,     3,     1,     1, 
          1,     1,     0,     1,     1,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     2,     2,     2,     2,     2, 
          2,     2,     2,     0,     1,     0,     4,     2,     0,     6, 
          2,     1,     1,     1,     4,     3,     1,     3,     1,     3, 
          1,     3,     0,     1,     1,     2,     1,     1,     1,     1, 
          1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   227,   229,   228,   230,   232,   231,   233,     1, 
          0,    60,   224,     0,     8,     0,     4,     0,     0,     0, 
          0,    16,    20,    18,   226,    15,     0,     0,     0,     0, 
          0,     0,     0,    12,     0,     0,     0,    59,    62,     0, 
          0,     0,     0,     0,    10,     0,     0,   166,     0,     0, 
          0,     0,     0,   172,   169,   171,   170,   146,   148,     0, 
          0,     0,     0,     0,     0,   145,   157,   158,   159,   160, 
        161,     0,     0,     0,     0,     0,     0,     0,    13,     0, 
          0,     0,     0,     0,     0,     0,   154,     0,     0,     0, 
        174,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   202, 
        203,     0,     0,     0,     0,     0,     0,     0,    64,    65, 
          0,     0,   219,     0,     0,    23,     0,     0,     0,    27, 
         31,     0,     0,     0,   138,     0,   206,     0,   147,     0, 
          0,   212,     0,     0,   213,   168,   156,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   184,   185,   186,   187,   188, 
        189,     0,   176,     0,   215,     0,    25,    31,     0,     0, 
          0,     0,   167,     0,     0,     0,     0,     0,     0,   149, 
          0,     0,     0,   220,   218,     0,   222,     0,    21,     0, 
         30,    32,    33,     0,     0,     0,     0,   140,     0,     0, 
        209,     0,     0,   151,     0,     0,    17,     0,     0,     0, 
          0,     0,     0,     0,    19,    31,     0,   155,   207,     0, 
          0,     0,     0,    88,     0,   108,    92,    96,    98,    94, 
        104,   106,    90,   100,   111,     0,     0,    85,     0,    55, 
          0,     0,     0,     0,     0,    31,    41,     0,     0,    39, 
          0,     0,   143,     0,     0,   102,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    34,   110,    87,     0,     0, 
          0,   216,    53,    76,    77,    78,    79,    80,     0,    81, 
          0,     0,     0,     0,     0,   210,   144,   153,     0,     0, 
          0,     0,     0,     0,   122,     0,     0,   105,   107,     0, 
          0,     0,     0,    69,     0,     0,    48,     0,    47,     0, 
          0,    82,     0,    57,     0,    44,    29,     0,    89,     0, 
        109,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    45,     0,    83,     0,    43, 
          0,     0,     0,   123,     0,     0,     0,     0,    73,    72, 
          0,     0,    71,    49,    50,     0,     0,   131,   135,   103, 
          0,   128,     0,     0,    97,     0,     0,     0,     0,     0, 
         75,    66,     0,    56,     0,     0,     0,     0,   127,   134, 
        130,     0,    99,     0,     0,   125,    91,   116,   118,     0, 
        113,     0,     0,    54,     0,     0,     0,     0,   120,    95, 
          0,     0,     0,   101,   115,    67,    58,     0,     0,     0, 
        126,     0,     0,     0,   136,    93,     0,   119,     0,   117, 
          0,     0,   132, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    20,    72,     4,     7,     8,    11,    46,   210, 
        152,    41,    85,   138,   190,    43,   215,    42,    87,   140, 
        267,   211,   212,   213,   256,   216,   217,   233,   234,   257, 
        322,   303,   291,   330,   258,   323,   331,   372,   394,   289, 
        301,   359,    30,    22,    31,    74,   101,   324,   325,   259, 
        275,   284,   316,   407,   278,   144,   281,   388,   279,   280, 
        285,   410,   310,   380,   282,   283,   277,   411,   412,   422, 
        423,   421,   381,   399,   382,   383,   397,   398,   145,   154, 
         76,   149,    98,    99,   158,   159,   146,    77,    78,    79, 
         80,    81,    92,   102,    82,   150,   195,   240,   155,   134, 
        135,    23,    24, 
    );
    protected static $yySindex = array(         -238,
          0,     0,  -205,   -99,     0,   312,     0,  -205,    85,   110, 
        -77,   115,     0,     0,     0,     0,     0,     0,     0,     0, 
       -102,     0,     0,   397,     0,   -99,     0,   138,   -99,    95, 
        157,     0,     0,     0,     0,     0,   -38,   162,   397,   115, 
        -99,   -99,   -99,     0,   168,   166,   758,     0,     0,   156, 
        -78,   -67,   -78,   -38,     0,   758,   758,     0,   758,   758, 
        758,   758,   141,     0,     0,     0,     0,     0,     0,   758, 
        758,  -161,   261,   187,   229,     0,     0,     0,     0,     0, 
          0,   224,   -49,   -99,   -35,   -99,   160,   -35,     0,   148, 
        148,   758,   148,   148,   148,   148,     0,   -90,   -99,   261, 
          0,   146,   297,     0,   758,   758,   758,   758,   758,   758, 
        758,   758,   758,   758,   758,   758,   758,   758,   758,     0, 
          0,   758,   758,   758,   758,   758,   758,   758,     0,     0, 
        758,   -26,     0,   225,   242,     0,   -99,   165,   250,     0, 
          0,   182,   348,   206,     0,   758,     0,    47,     0,   -90, 
        -13,     0,   274,   -90,     0,     0,     0,   -28,    55,   148, 
        148,   148,   148,   148,   148,   966,   258,   148,   148,   148, 
        148,   148,   148,   148,   148,     0,     0,     0,     0,     0, 
          0,   966,     0,   -99,     0,   -49,     0,     0,   -99,   116, 
         57,   758,     0,   284,   758,   286,   -90,   237,   758,     0, 
        -90,   295,   758,     0,     0,   369,     0,   213,     0,  -219, 
          0,     0,     0,     0,   212,   288,   299,     0,   -90,   252, 
          0,   239,   307,     0,   758,   148,     0,  2488,   169,    13, 
        105,  -214,   243,   325,     0,     0,    57,     0,     0,   758, 
        758,   243,   337,     0,   263,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   259,   404,     0,  2488,     0, 
        134,   313,   367,     6,   355,     0,     0,   758,   406,     0, 
        376,   296,     0,   -90,   758,     0,   758,   380,   382,  2532, 
        403,   386,   391,   412,   413,     0,     0,     0,   -99,  -107, 
        134,     0,     0,     0,     0,     0,     0,     0,   -74,     0, 
        415,   758,   399,   605,   459,     0,     0,     0,   673,  2488, 
        724,   758,   758,  2488,     0,    98,   758,     0,     0,   758, 
        758,   -40,   420,     0,   418,   416,     0,  2488,     0,   409, 
        -99,     0,   377,     0,   966,     0,     0,   243,     0,   344, 
          0,   414,   780,   346,   230,   432,   835,   862,   889,   147, 
        355,   177,   -99,   458,   378,     0,   474,     0,   -99,     0, 
       -289,   758,  2532,     0,   758,   178,  2532,   393,     0,     0, 
        -99,   -14,     0,     0,     0,   177,   476,     0,     0,     0, 
        179,     0,   181,   464,     0,   917,   113,   500,   190,  -300, 
          0,     0,  2488,     0,   -14,   177,   507,   439,     0,     0, 
          0,   758,     0,   223,  2532,     0,     0,     0,     0,   440, 
          0,  -300,   441,     0,   -14,   -99,  2488,   523,     0,     0, 
       2532,   758,   510,     0,     0,     0,     0,   231,   444,  2532, 
          0,   939,  2488,   529,     0,     0,  2488,     0,   452,     0, 
       2488,   461,     0, 
    );
    protected static $yyRindex= array(          689,
          0,     0,   227,     0,     0,   -42,     0,   272,   104,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   175,     0,     0,     0,     0,     0,     0, 
        506,     0,     0,     0,     0,     0,     0,    54,   528,     0, 
          0,     0,     0,     0,   542,     0,   561,     0,     0,   108, 
       -106,   489,  -106,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    78,     0,     0,     0,     0,     0,     0,   488, 
          0,     0,   578,     0,     0,     0,     0,     0,     0,     0, 
          0,   -20,     0,     0,   504,     0,     0,   504,     0,   993, 
       1052,   535,  1105,  1159,  1368,  1391,     0,   131,     0,     0, 
          0,     0,     0,  -227,     0,     0,     0,     0,     0,     0, 
        571,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   584,     0,     0,     0,     4,     0, 
          0,     0,    -1,     0,     0,   606,     0,     0,     0,   176, 
        608,     0,     0,   131,     0,     0,     0,     0,     0,  1436, 
       1489,  1534,  1557,  1588,  1611,    52,     0,  1642,  1665,  1701, 
       1766,  1819,  1864,  2040,  2076,     0,     0,     0,     0,     0, 
          0,   -21,     0,     0,     0,     0,     0,     0,     0,  -216, 
        531,     0,     0,     0,   564,   -32,   203,     0,   606,     0, 
        131,     0,     0,     0,     0,  -216,     0,   340,     0,     0, 
          0,     0,     0,    31,     0,   533,   -23,     0,   131,     0, 
          0,   619,     0,     0,   606,  2105,     0,   546,    21,     0, 
         -7,     0,    32,     0,     0,     0,     0,     0,     0,   606, 
        560,    25,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,  -122,     0, 
          0,     0,     0,     0,   601,     0,     0,     0,  -118,     0, 
          0,     0,     0,   131,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   652,     0, 
        635,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,  -216,     0,     0,     0,     0,     0,   546, 
          0,   636,     0,   546,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   665,     0,     0,     0,     0,     0, 
        652,     0,     0,     0,   238,     0,     0,    32,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        185,    37,     0,     0,     0,     0,     0,     0,   652,     0, 
          0,   636,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    37,     0,     0,     0,     0, 
       2291,     0,  1999,     0,     0,     0,   666,     0,  2341,   588, 
          0,     0,   546,     0,     0,    37,     0,     0,     0,     0, 
          0,   606,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   589,     0,     0,     0,     0,   546,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,  -119,     0,     0,     0,  -119,     0,     0,     0, 
        546,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   709,     0,     0,   667,   713, 
        268,     0,   669,   637,  -136,     0,     0,     0,     0,  -129, 
       -210,     0,     0,     0,   630,   487,     0,     0,     0,  2184, 
        -81,   375,   437,     0,  -225,  -182,     0,  -319,  -260,     0, 
          0,     0,   691,   690,     0,   -87,     3,   384,   442,   360, 
          0,     0,   -17,     0,     0,   -82,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   326,     0,     0, 
          0,     0,   356,     0,   359,     0,     0,     0,   550,     0, 
          0,  -112,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   -96,     0,     0,     0,   557, 
          0,   720,     0, 
    );
    protected static $yyTable = array(10,
        147,   350,    86,    44,   208,    84,    35,   187,   208,   208, 
        208,   208,   208,   132,   208,   328,    22,   153,   332,   177, 
        175,    36,   177,   167,    38,   208,   208,   208,   208,   208, 
        208,   273,   152,   288,   214,    38,    50,    50,    50,   139, 
        229,   200,   298,   223,   392,   263,    83,   296,   294,    75, 
        295,   206,   297,   197,   378,   379,   395,   139,   208,   207, 
        208,    28,   221,   194,     1,    28,    28,    28,    28,    28, 
         42,    28,   408,   409,    40,    28,   415,   198,    50,    50, 
         14,    50,    28,    28,    28,    28,    28,    28,   224,    40, 
         28,   139,   208,   208,   151,    74,   299,    63,     5,   269, 
        197,    38,   355,   177,   175,   264,   238,   220,   393,   142, 
        230,    14,   150,   223,   165,    28,   223,    28,   165,   165, 
        165,   165,   165,   139,   165,   265,   221,   360,   232,   304, 
         26,   300,    50,   183,   414,   165,   165,   165,   165,   165, 
        165,   223,   243,    14,   142,    14,    63,    14,   357,    28, 
         28,   214,   326,    40,   427,    40,    28,   271,   272,    74, 
          9,   308,    14,    14,    83,    14,   214,   204,    27,   214, 
        165,   204,   204,   204,   204,   204,   377,   204,    29,   204, 
         97,    50,    28,    37,    50,     9,    26,    39,   204,   204, 
        204,   204,   204,   204,    14,   262,    14,    32,    33,    34, 
         40,    47,   165,   165,    22,   231,    12,   122,   260,   123, 
          9,   223,   205,    54,    26,    83,   205,   205,   205,   205, 
        205,    45,   205,   204,    55,    51,    14,   129,    51,   342, 
        214,    84,   327,   205,   205,   205,   205,   205,   205,   211, 
        209,   391,    86,   211,   211,   211,   211,   211,   104,   211, 
         86,    86,   214,    84,    84,   204,   204,   223,   223,   223, 
        211,   211,   211,   211,   211,   211,   110,   131,   205,   130, 
        156,   108,   106,   119,   107,   137,   109,    51,    52,   384, 
         14,    52,   141,   184,   231,   186,   185,   188,   287,   122, 
        105,   123,   111,   189,   231,   211,    52,   110,   193,   351, 
        205,   205,   108,   106,   191,   107,   196,   109,    51,    52, 
         53,   201,   214,   199,   202,   203,   214,     5,   148,   418, 
        122,   105,   123,   111,   219,   221,   231,   211,   211,   222, 
         52,   208,   214,   110,   225,   228,   235,   157,   108,   106, 
         14,   107,   237,   109,   239,   385,   236,   242,   231,   389, 
        133,   136,   261,   139,   231,   119,   122,   105,   123,   111, 
         14,   241,     7,    14,   268,   266,    50,   208,   208,   208, 
        208,   208,   208,   208,   208,   208,   208,   274,   208,   208, 
        208,   208,   208,   286,   110,   276,   119,   420,    28,   108, 
        106,   192,   107,   290,   109,    13,    14,    15,   208,    17, 
         18,    19,    12,   431,   139,   292,   293,   122,   105,   123, 
        111,    50,   436,    14,    14,   302,   306,   214,   214,   312, 
        307,   313,   119,    14,    28,    28,    28,    28,    28,    28, 
         28,    28,    28,    28,   225,    28,    28,    28,    28,    28, 
        110,   165,   317,    14,   318,   108,   106,   214,   107,   319, 
        109,   320,   321,   133,   334,   354,   139,   336,   346,    12, 
        352,   353,   287,   122,   105,   123,   111,   356,   361,   358, 
        364,   365,   362,   119,   225,   225,   225,   165,   165,   165, 
        165,   165,   165,   165,   165,   165,   369,    14,   165,   165, 
        165,   165,   165,   227,   204,   110,    12,   371,   374,   338, 
        108,   106,   375,   107,   225,   109,     5,     5,     5,     5, 
          5,     5,     5,    14,   376,   390,   396,   387,   122,   105, 
        123,   111,   402,   379,   378,   404,     5,     5,     5,   119, 
        204,   204,   204,   204,   204,   204,   204,   204,   204,   205, 
        405,   204,   204,   204,   204,   204,   416,   125,   124,   120, 
        121,     7,     7,     7,     7,     7,     7,     7,   126,   127, 
        406,   417,   419,   430,   424,   426,   211,   433,   435,   439, 
        434,     7,     7,     7,   441,   205,   205,   205,   205,   205, 
        205,   205,   205,   205,   119,   443,   205,   205,   205,   205, 
        205,    13,    14,    15,    16,    17,    18,    19,    61,   230, 
         11,   141,   211,   211,   211,   211,   211,   211,   211,   211, 
        211,    26,   173,   211,   211,   211,   211,   211,   142,   230, 
        230,   230,   230,   230,   230,   230,    24,   137,   141,   125, 
        124,   120,   121,   112,   113,   114,   115,   116,   139,   315, 
        126,   127,   128,   117,   118,   217,   137,   214,    13,    14, 
         15,   208,    17,    18,    19,    37,   141,    36,   216,    51, 
        125,   124,   120,   121,   112,   113,   114,   115,   116,   230, 
         84,   126,   127,   128,   117,   118,    13,    14,    15,    16, 
         17,    18,    19,   428,   137,    13,    14,    15,   208,    17, 
         18,    19,    68,    46,   137,    12,   125,   124,   120,   121, 
        112,   113,   114,   115,   116,    70,   121,   126,   127,   110, 
        117,   118,   112,   114,   108,   106,    25,   107,    21,   109, 
         89,    88,   315,   270,   142,   370,   315,   329,    48,   337, 
         49,   339,   122,   105,   123,   111,   373,   425,   401,   400, 
        333,   218,   205,    35,     0,     0,     0,   125,   124,   120, 
        121,   112,   113,   114,   115,   116,     0,     0,   126,   127, 
        110,   117,   118,     0,   315,   108,   106,     0,   107,     0, 
        109,     0,     0,     0,     0,     0,     0,     0,     0,     2, 
        315,     0,   341,   122,   105,   123,   111,   223,     0,   315, 
         59,     0,     0,     0,     0,     0,     0,    71,   119,     0, 
         56,     0,    57,   125,   124,   120,   121,   112,   113,   114, 
        115,   116,     0,     0,   126,   127,   110,   117,   118,     0, 
        363,   108,   106,     0,   107,     0,   109,   223,   223,   223, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   122, 
        105,   123,   111,     0,     0,     0,     0,     0,    58,   119, 
          0,     0,     0,     0,     0,     0,     0,   223,   125,   124, 
        120,   121,   112,   113,   114,   115,   116,     0,     0,   126, 
        127,   110,   117,   118,     0,     0,   108,   106,     0,   107, 
         70,   109,     0,    60,    13,    14,    15,   208,    17,    18, 
         19,     0,     0,     0,   122,   105,   123,   111,   110,     0, 
          0,     0,   367,   108,   106,   119,   107,     0,   109,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   122,   105,   123,   111,   110,     0,     0,     0,   368, 
        108,   106,     0,   107,     0,   109,     0,     0,     0,   340, 
          0,     0,     0,   344,     0,     0,     0,     0,   122,   105, 
        123,   111,     0,   110,     0,     0,     0,   403,   108,   106, 
        119,   107,     0,   109,     0,     0,     0,     0,     2,     2, 
          2,     2,     2,     2,     2,   110,   122,   105,   123,   111, 
        108,   106,     0,   107,     0,   109,     0,   119,     2,     2, 
          2,     0,     2,     0,     0,     0,   437,     0,   122,   105, 
        123,   111,   110,     0,     0,     0,     0,   108,   106,     0, 
        107,     0,   109,     0,   119,     0,     0,    63,    64,    65, 
         66,    67,   413,     0,     0,   122,   105,   123,   111,   198, 
          0,     0,     0,   198,   198,   198,   198,   198,     0,   198, 
          0,     0,   119,     0,     0,     0,   429,     0,     0,     0, 
        198,   198,     0,   198,     0,   198,     0,     0,     0,     0, 
          0,     0,   438,     0,   119,     0,   440,     0,     0,     0, 
        442,     0,   125,   124,   120,   121,   112,   113,   114,   115, 
        116,     0,     0,   126,   127,   198,   117,   118,   199,     0, 
          0,   119,   199,   199,   199,   199,   199,    68,   199,     0, 
          0,     0,     0,    69,     0,     0,     0,     0,     0,   199, 
        199,     0,   199,     0,   199,     0,     0,   198,     0,     0, 
          0,     0,     0,   125,   124,   120,   121,   112,   113,   114, 
        115,   116,     0,     0,   126,   127,     0,   117,   118,     0, 
          0,   196,     0,     0,   199,   196,   196,   196,   196,   196, 
          0,   196,     0,     0,     0,     0,     0,     0,     0,    61, 
         62,     0,   196,   196,     0,   196,     0,   196,     0,     0, 
          0,     0,     0,     0,     0,     0,   199,     0,     0,   125, 
        124,   120,   121,   112,   113,   114,   115,   116,     0,     0, 
        126,   127,     0,   117,   118,   197,     0,   196,   366,   197, 
        197,   197,   197,   197,     0,   197,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   197,   197,     0,   197, 
          0,   197,     0,     0,     0,     0,     0,     0,     0,   196, 
          0,     0,     0,     0,   125,   124,   120,   121,   112,   113, 
        114,   115,   116,     0,     0,   126,   127,     0,   117,   118, 
          0,   197,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   125,   124,   120,   121,   112,   113,   114,   115,   116, 
          0,     0,   126,   127,     0,   117,   118,     0,     0,     0, 
          0,     0,     0,   197,     0,     0,     0,     0,   125,   124, 
        120,   121,   112,   113,   114,   115,   116,     0,     0,   126, 
        127,     0,   117,   118,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   125,   124,   120,   121, 
        112,   113,   114,   115,   116,     0,     0,   126,   127,     0, 
        117,   118,     0,     0,     0,     0,     0,     0,   125,   124, 
        120,   121,   112,   113,   114,   115,   116,     0,     0,   126, 
        127,     0,   117,   118,     0,     0,   198,     0,     0,     0, 
          0,     0,     0,     0,     0,   125,   124,   120,   121,   112, 
        113,   114,   115,   116,     0,     0,   126,   127,     0,   117, 
        118,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   198,   198,   198,   198, 
        198,     0,     0,     0,   200,   198,   198,   198,   200,   200, 
        200,   200,   200,     0,   200,   199,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   200,   200,   201,   200,     0, 
        200,   201,   201,   201,   201,   201,     0,   201,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   201,   201, 
          0,   201,     0,   201,     0,   199,   199,   199,   199,   199, 
        200,     0,     0,     0,   199,   199,   199,     0,   196,     0, 
          0,     0,   178,     0,     0,     0,   178,   178,   178,   178, 
        178,     0,   178,   201,     0,     0,     0,     0,     0,     0, 
          0,     0,   200,   178,   178,     0,   178,     0,   178,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   196,   196, 
        196,   196,   196,     0,     0,   201,     0,   196,   196,   196, 
          0,     0,   197,     0,     0,   190,     0,     0,   178,   190, 
        190,   190,   190,   190,     0,   190,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   190,   190,     0,   190, 
          0,   190,     0,     0,     0,     0,     0,     0,     0,     0, 
        178,     0,   197,   197,   197,   197,   197,     0,     0,     0, 
        191,   197,   197,   197,   191,   191,   191,   191,   191,     0, 
        191,   190,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   191,   191,   192,   191,     0,   191,   192,   192,   192, 
        192,   192,     0,   192,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   190,   192,   192,     0,   192,     0,   192, 
          0,     0,     0,     0,   193,     0,   191,     0,   193,   193, 
        193,   193,   193,     0,   193,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   193,   193,   194,   193,   192, 
        193,   194,   194,   194,   194,   194,     0,   194,   191,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   194,   194, 
          0,   194,     0,   194,     0,     0,     0,     0,   179,     0, 
        193,   192,   179,   179,   179,   179,   179,     0,   179,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   179, 
        179,   180,   179,   194,   179,   180,   180,   180,   180,   180, 
          0,   180,   193,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   180,   180,     0,   180,     0,   180,     0,     0, 
          0,   200,     0,     0,   179,   194,     0,   181,     0,     0, 
          0,   181,   181,   181,   181,   181,     0,   181,     0,     0, 
          0,     0,     0,     0,   201,     0,     0,   180,   181,   181, 
          0,   181,     0,   181,     0,     0,   179,     0,     0,     0, 
          0,   200,   200,   200,   200,   200,     0,     0,     0,     0, 
        200,   200,   200,     0,     0,     0,     0,     0,     0,   180, 
          0,     0,     0,   181,   201,   201,   201,   201,   201,   178, 
          0,     0,   182,   201,   201,   201,   182,   182,   182,   182, 
        182,     0,   182,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   182,   182,   181,   182,     0,   182,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   178, 
        178,   178,   178,   178,     0,     0,     0,     0,   178,   178, 
        178,     0,   190,     0,     0,   183,     0,     0,   182,   183, 
        183,   183,   183,   183,     0,   183,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   183,   183,     0,   183, 
          0,   183,     0,     0,     0,     0,     0,     0,     0,     0, 
        182,     0,   190,   190,   190,   190,   190,   191,     0,     0, 
        163,   190,   190,   190,   163,   163,   163,   163,   163,     0, 
        163,   183,     0,     0,     0,     0,     0,     0,     0,     0, 
        192,   163,   163,     0,   163,     0,   163,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   191,   191,   191, 
        191,   191,     0,   183,     0,     0,   191,   191,   191,     0, 
          0,   193,     0,     0,     0,     0,   163,     0,     0,     0, 
        192,   192,   192,   192,   192,     0,     0,     0,     0,   192, 
        192,   192,     0,     0,   194,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   163,     0, 
          0,   193,   193,   193,   193,   193,     0,     0,     0,     0, 
        193,   193,   193,     0,     0,   179,     0,     0,     0,     0, 
          0,     0,     0,     0,   194,   194,   194,   194,   194,     0, 
          0,     0,     0,   194,   194,   194,     0,     0,   180,     0, 
          0,   129,     0,     0,     0,     0,     0,     0,   129,     0, 
          0,   129,     0,   129,     0,   179,   179,   179,   179,   179, 
          0,     0,     0,     0,   179,   179,   179,   129,     0,     0, 
          0,     0,     0,     0,   181,     0,     0,     0,   180,   180, 
        180,   180,   180,     0,     0,     0,   164,   180,   180,   180, 
        164,   164,   164,   164,   164,     0,   164,     0,     0,   129, 
          0,     0,     0,     0,     0,     0,     0,   164,   164,     0, 
        164,     0,   164,     0,   181,   181,   181,   181,   181,     0, 
          0,     0,   195,   181,   181,   181,   195,   195,   195,   195, 
        195,   129,   195,   129,   129,     0,     0,     0,     0,   182, 
          0,     0,   164,   195,   195,     0,   195,     0,   195,     0, 
          0,   162,     0,     0,     0,   162,   162,   162,   162,   162, 
          0,   162,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   162,   162,   164,   162,     0,   162,   195,   182, 
        182,   182,   182,   182,     0,     0,     0,     0,   182,   182, 
        182,     0,   183,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   162,     0,     0, 
        195,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   183,   183,   183,   183,   183,   163,     0,   162, 
         73,   183,   183,   183,     0,     0,     0,     0,     0,    90, 
         91,     0,    93,    94,    95,    96,     0,     0,     0,     0, 
          0,     0,     0,   100,   103,     0,     0,     0,   129,   129, 
        129,   129,   129,     0,     0,     0,     0,   163,   163,   163, 
        163,   163,     0,     0,     0,   143,   163,   163,   163,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   160,   161, 
        162,   163,   164,   165,   166,   168,   169,   170,   171,   172, 
        173,   174,   175,     0,     0,   176,   177,   178,   179,   180, 
        181,   182,     0,     0,   100,     0,     0,     0,     0,     0, 
          0,     0,     0,   133,     0,     0,     0,     0,     0,   143, 
        133,     0,     0,   133,     0,   133,     0,     0,   129,   129, 
        129,   129,     0,   129,   129,     0,     0,     0,     0,   133, 
          0,     0,     0,     0,     0,     0,     0,     0,   129,   129, 
        129,   129,     0,   129,   129,     0,     0,     0,   129,   129, 
        129,   129,   129,   124,     0,   143,     0,     0,   166,     0, 
        124,   133,   143,   124,     0,   124,   226,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   124, 
        129,   129,     0,   164,     0,     0,     0,     0,   143,     0, 
          0,     0,     0,   133,     0,   133,   133,     0,     0,     0, 
          0,     0,     0,   143,   143,     0,     0,     0,     0,     0, 
          0,   124,     0,     0,     0,     0,     0,     0,     0,   195, 
          0,     0,     0,   164,   164,   164,   164,   164,     0,     0, 
          0,   305,   164,   164,   164,     0,     0,     0,   309,     0, 
        311,     0,     0,   124,     0,   124,   124,     0,   162,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   195, 
        195,   195,   195,   195,     0,   335,     0,     0,   195,   195, 
        195,     0,     0,     0,     0,   143,   343,   345,     0,     0, 
        347,     0,     0,   348,   349,     0,     0,     0,   162,   162, 
        162,   162,   162,     0,     0,     0,     0,   162,   162,   162, 
         59,     0,     0,     0,     0,     0,     0,    71,     0,     0, 
         56,     0,    57,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   143,   255,     0,   386,     0, 
        133,   133,   133,   133,   133,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    59,     0,     0,     0,     0,     0, 
          0,    71,     0,     0,    56,     0,    57,     0,    58,     0, 
          0,     0,     0,     0,     0,   143,     0,     0,     0,     0, 
        255,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        124,   124,   124,   124,   124,   432,     0,     0,     0,     0, 
         70,     0,     0,    60,     0,     0,     0,     0,     0,     0, 
          0,     0,    58,     0,     0,     0,     0,     0,     0,     0, 
        133,   133,   133,   133,     0,     0,   133,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        133,   133,   133,   133,   314,   133,   133,    60,     0,     0, 
        133,   133,   133,   133,   133,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        124,   124,   124,   124,     0,     0,   124,     0,     0,     0, 
          0,     0,   133,   133,     0,     0,     0,     0,     0,     0, 
        124,   124,   124,   124,     0,   124,   124,     0,     0,     0, 
        124,     0,   124,   124,   124,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   124,   124,     0,     0,     0,    63,    64,    65, 
         66,    67,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    63,    64,    65,    66,    67,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    68,   244,   245, 
        246,     0,     0,    69,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   247,   248,   249, 
        250,     0,   251,   252,     0,     0,     0,   253,     0,   254, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    68,   244,   245,   246,     0,     0,    69,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    61, 
         62,   247,   248,   249,   250,     0,   251,   252,     0,     0, 
          0,   253,     0,   254,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    61,    62, 
    );
    protected static $yyCheck = array(4,
         91,    42,   125,    42,    37,   125,   125,   137,    41,    42, 
         43,    44,    45,    63,    47,   123,   123,    99,    93,    41, 
         41,    26,    44,   111,    29,    58,    59,    60,    61,    62, 
         63,   242,   260,   259,    42,    59,    41,    42,    43,    41, 
        260,   154,    37,   260,    59,   260,    60,    42,    43,    47, 
         45,   188,    47,   150,   344,   345,   376,    59,    91,   189, 
         93,    37,    59,   146,   303,    41,    42,    43,    44,    45, 
         40,    47,   373,   374,    44,    44,   396,    91,    83,    84, 
         60,    86,    58,    59,    60,    61,    62,    63,   201,    59, 
         59,    93,   125,   126,    99,    59,    91,    44,   304,   236, 
        197,   125,   328,   125,   125,   320,   219,   195,   123,    58, 
        330,    91,   340,   330,    37,    91,   199,    93,    41,    42, 
         43,    44,    45,   125,    47,   340,   123,   338,   210,   266, 
         46,   126,   137,   131,   395,    58,    59,    60,    61,    62, 
         63,   260,   225,    40,    93,    42,    93,    44,   331,   125, 
        126,    44,   260,   123,   415,   125,   125,   240,   241,   123, 
        260,   274,    59,    60,    60,    62,    59,    37,    59,    62, 
         93,    41,    42,    43,    44,    45,   359,    47,    64,   184, 
         40,   186,   260,    46,   189,   260,    46,    93,    58,    59, 
         60,    61,    62,    63,    91,    91,    93,   300,   301,   302, 
         44,    40,   125,   126,   311,   210,    91,    60,    40,    62, 
        260,   330,    37,    46,    46,    60,    41,    42,    43,    44, 
         45,   260,    47,    93,    59,    41,   123,    41,    44,   312, 
        123,   310,   340,    58,    59,    60,    61,    62,    63,    37, 
        125,   371,   310,    41,    42,    43,    44,    45,   410,    47, 
        373,   374,   260,   373,   374,   125,   126,   300,   301,   302, 
         58,    59,    60,    61,    62,    63,    37,    44,    93,    41, 
        125,    42,    43,   126,    45,   311,    47,    93,    41,   362, 
        260,    44,   123,   310,   289,    44,    62,   123,    59,    60, 
         61,    62,    63,    44,   299,    93,    59,    37,    93,   340, 
        125,   126,    42,    43,   123,    45,   260,    47,    41,    42, 
         43,   340,   320,    40,   260,    58,   260,    91,   409,   402, 
         60,    61,    62,    63,    41,    40,   331,   125,   126,    93, 
         93,   364,   340,    37,    40,   123,   125,    41,    42,    43, 
        320,    45,    44,    47,    93,   363,    59,    41,   353,   367, 
         83,    84,   340,    86,   359,   126,    60,    61,    62,    63, 
        340,   123,    91,   260,    40,   123,   371,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   409,    41,   411,   412, 
        413,   414,   415,   125,    37,   123,   126,   405,   364,    42, 
         43,    44,    45,   260,    47,   280,   281,   282,   283,   284, 
        285,   286,    91,   421,   137,    93,    40,    60,    61,    62, 
         63,   416,   430,   310,   311,    61,    41,   310,   311,    40, 
        125,    40,   126,   320,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,   409,   260,   411,   412,   413,   414,   415, 
         37,   364,    40,   340,    59,    42,    43,   340,    45,    59, 
         47,    40,    40,   186,    40,    40,   189,    59,   361,    91, 
         41,    44,    59,    60,    61,    62,    63,    59,   125,    93, 
        125,    40,    59,   126,   300,   301,   302,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   340,   410,   411,   412, 
        413,   414,   415,   125,   364,    37,    91,   321,    41,    41, 
         42,    43,   125,    45,   330,    47,   280,   281,   282,   283, 
        284,   285,   286,   410,    41,   123,    41,   340,    60,    61, 
         62,    63,    59,   345,   344,   413,   300,   301,   302,   126, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   364, 
         41,   411,   412,   413,   414,   415,    40,   400,   401,   402, 
        403,   280,   281,   282,   283,   284,   285,   286,   411,   412, 
        371,   123,   340,    41,   125,   125,   364,    58,   125,    41, 
        340,   300,   301,   302,   123,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   126,   125,   411,   412,   413,   414, 
        415,   280,   281,   282,   283,   284,   285,   286,    93,   260, 
         59,    41,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   123,   125,   411,   412,   413,   414,   415,    41,   280, 
        281,   282,   283,   284,   285,   286,   123,    93,    58,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   371,   280, 
        411,   412,   413,   414,   415,    62,    41,    40,   280,   281, 
        282,   283,   284,   285,   286,   125,    93,   125,    40,    59, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   330, 
        125,   411,   412,   413,   414,   415,   280,   281,   282,   283, 
        284,   285,   286,   416,   125,   280,   281,   282,   283,   284, 
        285,   286,    41,    59,    59,    91,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    41,    41,   411,   412,    37, 
        414,   415,   125,   125,    42,    43,     8,    45,     6,    47, 
         54,    53,   363,   237,    88,   351,   367,   291,    39,   125, 
         40,    59,    60,    61,    62,    63,   353,   412,   383,   381, 
        299,   192,   186,    24,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         37,   414,   415,    -1,   405,    42,    43,    -1,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91, 
        421,    -1,    59,    60,    61,    62,    63,   260,    -1,   430, 
         33,    -1,    -1,    -1,    -1,    -1,    -1,    40,   126,    -1, 
         43,    -1,    45,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    37,   414,   415,    -1, 
         41,    42,    43,    -1,    45,    -1,    47,   300,   301,   302, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    91,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   330,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    37,   414,   415,    -1,    -1,    42,    43,    -1,    45, 
        123,    47,    -1,   126,   280,   281,   282,   283,   284,   285, 
        286,    -1,    -1,    -1,    60,    61,    62,    63,    37,    -1, 
         -1,    -1,    41,    42,    43,   126,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    60,    61,    62,    63,    37,    -1,    -1,    -1,    41, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,   310, 
         -1,    -1,    -1,   314,    -1,    -1,    -1,    -1,    60,    61, 
         62,    63,    -1,    37,    -1,    -1,    -1,    41,    42,    43, 
        126,    45,    -1,    47,    -1,    -1,    -1,    -1,   280,   281, 
        282,   283,   284,   285,   286,    37,    60,    61,    62,    63, 
         42,    43,    -1,    45,    -1,    47,    -1,   126,   300,   301, 
        302,    -1,   304,    -1,    -1,    -1,    58,    -1,    60,    61, 
         62,    63,    37,    -1,    -1,    -1,    -1,    42,    43,    -1, 
         45,    -1,    47,    -1,   126,    -1,    -1,   260,   261,   262, 
        263,   264,   393,    -1,    -1,    60,    61,    62,    63,    37, 
         -1,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,   126,    -1,    -1,    -1,   417,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,   433,    -1,   126,    -1,   437,    -1,    -1,    -1, 
        441,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    93,   414,   415,    37,    -1, 
         -1,   126,    41,    42,    43,    44,    45,   340,    47,    -1, 
         -1,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,   125,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,    -1, 
         -1,    37,    -1,    -1,    93,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402, 
        403,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,    37,    -1,    93,   364,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
         -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,    -1,    -1,    -1, 
         -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,    -1,    -1,   364,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    37,   413,   414,   415,    41,    42, 
         43,    44,    45,    -1,    47,   364,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    37,    61,    -1, 
         63,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,   404,   405,   406,   407,   408, 
         93,    -1,    -1,    -1,   413,   414,   415,    -1,   364,    -1, 
         -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    93,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   125,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,   125,    -1,   413,   414,   415, 
         -1,    -1,   364,    -1,    -1,    37,    -1,    -1,    93,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        125,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         37,   413,   414,   415,    41,    42,    43,    44,    45,    -1, 
         47,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    37,    61,    -1,    63,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   125,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,    -1,    37,    -1,    93,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    37,    61,    93, 
         63,    41,    42,    43,    44,    45,    -1,    47,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    37,    -1, 
         93,   125,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    37,    61,    93,    63,    41,    42,    43,    44,    45, 
         -1,    47,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,   364,    -1,    -1,    93,   125,    -1,    37,    -1,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,   364,    -1,    -1,    93,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,   125,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1,   125, 
         -1,    -1,    -1,    93,   404,   405,   406,   407,   408,   364, 
         -1,    -1,    37,   413,   414,   415,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,   125,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,    -1,   364,    -1,    -1,    37,    -1,    -1,    93,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        125,    -1,   404,   405,   406,   407,   408,   364,    -1,    -1, 
         37,   413,   414,   415,    41,    42,    43,    44,    45,    -1, 
         47,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        364,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,   125,    -1,    -1,   413,   414,   415,    -1, 
         -1,   364,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,   413, 
        414,   415,    -1,    -1,   364,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,    -1,    -1,   364,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,    -1,    -1,   364,    -1, 
         -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1, 
         -1,    43,    -1,    45,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,    59,    -1,    -1, 
         -1,    -1,    -1,    -1,   364,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    37,   413,   414,   415, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    91, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    37,   413,   414,   415,    41,    42,    43,    44, 
         45,   123,    47,   125,   126,    -1,    -1,    -1,    -1,   364, 
         -1,    -1,    93,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    37,    -1,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,   125,    61,    -1,    63,    93,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,    -1,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,   364,    -1,   125, 
         47,   413,   414,   415,    -1,    -1,    -1,    -1,    -1,    56, 
         57,    -1,    59,    60,    61,    62,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    70,    71,    -1,    -1,    -1,   260,   261, 
        262,   263,   264,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    92,   413,   414,   415,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106, 
        107,   108,   109,   110,   111,   112,   113,   114,   115,   116, 
        117,   118,   119,    -1,    -1,   122,   123,   124,   125,   126, 
        127,   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,   146, 
         40,    -1,    -1,    43,    -1,    45,    -1,    -1,   340,   341, 
        342,   343,    -1,   345,   346,    -1,    -1,    -1,    -1,    59, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361, 
        362,   363,    -1,   365,   366,    -1,    -1,    -1,   370,   371, 
        372,   373,   374,    33,    -1,   192,    -1,    -1,   195,    -1, 
         40,    91,   199,    43,    -1,    45,   203,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59, 
        402,   403,    -1,   364,    -1,    -1,    -1,    -1,   225,    -1, 
         -1,    -1,    -1,   123,    -1,   125,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,   240,   241,    -1,    -1,    -1,    -1,    -1, 
         -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,   268,   413,   414,   415,    -1,    -1,    -1,   275,    -1, 
        277,    -1,    -1,   123,    -1,   125,   126,    -1,   364,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,   302,    -1,    -1,   413,   414, 
        415,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,    -1, 
        317,    -1,    -1,   320,   321,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
         33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1, 
         43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   362,    59,    -1,   365,    -1, 
        260,   261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1, 
         -1,    40,    -1,    -1,    43,    -1,    45,    -1,    91,    -1, 
         -1,    -1,    -1,    -1,    -1,   402,    -1,    -1,    -1,    -1, 
         59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        260,   261,   262,   263,   264,   422,    -1,    -1,    -1,    -1, 
        123,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        340,   341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        360,   361,   362,   363,   123,   365,   366,   126,    -1,    -1, 
        370,   371,   372,   373,   374,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        340,   341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1, 
         -1,    -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1, 
        360,   361,   362,   363,    -1,   365,   366,    -1,    -1,    -1, 
        370,    -1,   372,   373,   374,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   402,   403,    -1,    -1,    -1,   260,   261,   262, 
        263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   260,   261,   262,   263,   264,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342, 
        343,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361,   362, 
        363,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   340,   341,   342,   343,    -1,    -1,   346,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402, 
        403,   360,   361,   362,   363,    -1,   365,   366,    -1,    -1, 
         -1,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 
      'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 
      'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 
      'T_FOREACH', 'T_AS', 'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 
      'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      'T_OBJECT_OPERATOR', 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
      'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 'T_BOOLEAN_AND', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 127 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 138 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 138 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 149 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 150 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 154 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 154 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 13:  #line 162 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 15:  #line 167 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 16:  #line 173 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 173 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 18:  #line 182 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 19:  #line 182 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 191 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 21:  #line 191 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 22:  #line 202 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 203 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 207 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 25:  #line 208 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 212 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 213 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 217 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 218 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 30:  #line 222 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 31:  #line 223 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 227 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 33:  #line 228 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 229 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 35:  #line 233 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 234 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 235 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 239 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 39:  #line 240 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 40:  #line 244 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 41:  #line 244 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 42:  #line 247 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 247 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 257 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 45:  #line 264 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop][0];
      $yyVal->annotations= $yyVals[-5+$yyTop][1];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 46:  #line 275 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 48:  #line 280 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 49:  #line 281 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 50:  #line 282 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 51:  #line 286 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 287 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 293 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 54:  #line 293 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 55:  #line 303 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 56:  #line 303 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 57:  #line 311 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 58:  #line 311 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 59:  #line 324 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 60:  #line 325 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 61:  #line 329 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 62:  #line 330 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 63:  #line 334 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 64:  #line 338 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVals[-1+$yyTop] && $yyVal->parameters= array('default' => $yyVals[-1+$yyTop]);
    } break;

    case 65:  #line 343 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 66:  #line 351 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 67:  #line 352 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 68:  #line 356 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 69:  #line 357 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 70:  #line 361 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 71:  #line 362 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 72:  #line 366 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 73:  #line 367 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 74:  #line 371 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 75:  #line 372 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 82:  #line 384 "grammar/xp.jay"
    { $yyVal= '[]'; } break;

    case 83:  #line 385 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 84:  #line 393 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 86:  #line 398 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 87:  #line 399 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 88:  #line 403 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 89:  #line 403 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 90:  #line 406 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 91:  #line 406 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 92:  #line 411 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 93:  #line 411 "grammar/xp.jay"
    {
      $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 94:  #line 417 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 95:  #line 417 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      /* $1->assignment= $6; XX FIXME XX*/
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 96:  #line 422 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 97:  #line 422 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 98:  #line 426 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 99:  #line 426 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 100:  #line 430 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 101:  #line 430 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 102:  #line 434 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 103:  #line 434 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 104:  #line 439 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 106:  #line 440 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 108:  #line 441 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 109:  #line 441 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 112:  #line 449 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 114:  #line 454 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 115:  #line 455 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 116:  #line 459 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 117:  #line 459 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 118:  #line 463 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 119:  #line 463 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 120:  #line 469 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 121:  #line 470 "grammar/xp.jay"
    { $yyVal= array(NULL, $yyVals[0+$yyTop]); } break;

    case 122:  #line 474 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 123:  #line 475 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 124:  #line 479 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 125:  #line 480 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 126:  #line 480 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 127:  #line 485 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 128:  #line 486 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 129:  #line 490 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 130:  #line 491 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 131:  #line 495 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 132:  #line 495 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 133:  #line 503 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 135:  #line 508 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 136:  #line 508 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 137:  #line 516 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 139:  #line 521 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 140:  #line 522 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 141:  #line 526 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 143:  #line 531 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 144:  #line 537 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 146:  #line 546 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 147:  #line 546 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 148:  #line 549 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 149:  #line 549 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 150:  #line 554 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 151:  #line 554 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 152:  #line 559 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 153:  #line 559 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 154:  #line 565 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 155:  #line 565 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 156:  #line 571 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 157:  #line 572 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 158:  #line 575 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 159:  #line 578 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 160:  #line 581 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 161:  #line 584 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 162:  #line 588 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 163:  #line 594 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 164:  #line 600 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 165:  #line 609 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 166:  #line 610 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 167:  #line 610 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 168:  #line 614 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 169:  #line 619 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 170:  #line 620 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 171:  #line 621 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 172:  #line 622 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 173:  #line 626 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 175:  #line 631 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 176:  #line 632 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 177:  #line 636 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 178:  #line 640 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 179:  #line 641 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 180:  #line 642 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 181:  #line 643 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 182:  #line 644 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 183:  #line 645 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 184:  #line 649 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 185:  #line 650 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 651 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 652 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 188:  #line 653 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 189:  #line 654 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 190:  #line 658 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 191:  #line 659 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 192:  #line 660 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 193:  #line 661 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 194:  #line 662 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 195:  #line 663 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 196:  #line 667 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 197:  #line 668 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 198:  #line 669 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 199:  #line 670 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 200:  #line 671 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 201:  #line 672 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 202:  #line 676 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 203:  #line 677 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 204:  #line 682 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 206:  #line 687 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 207:  #line 687 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 208:  #line 690 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 209:  #line 694 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 210:  #line 694 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 211:  #line 698 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 214:  #line 709 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 215:  #line 710 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 216:  #line 714 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 217:  #line 718 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 218:  #line 719 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 220:  #line 724 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 221:  #line 728 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 222:  #line 729 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 223:  #line 735 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 224:  #line 736 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 225:  #line 740 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 226:  #line 741 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 227:  #line 745 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 228:  #line 746 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 229:  #line 747 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 230:  #line 748 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 231:  #line 749 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 232:  #line 750 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 233:  #line 751 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1940 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
