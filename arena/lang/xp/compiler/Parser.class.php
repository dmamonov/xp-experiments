<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 42 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     8,     1,     3,     3,     5,     5,     6,     6, 
          9,     9,    11,    11,     7,     7,     7,    12,    12,    14, 
         14,    17,    17,    16,    16,    16,    15,    15,    13,    13, 
         22,    20,    26,    20,    24,    24,    21,    21,    28,    28, 
         29,    29,    23,    23,    25,    25,    25,    25,    25,    27, 
         27,    18,    18,    31,    30,    32,    30,    35,    30,    37, 
         30,    38,    30,    39,    30,    40,    30,    42,    30,    30, 
         33,    33,    34,    43,    34,    41,    41,    44,    44,    48, 
         47,    45,    45,    49,    46,    19,    19,    19,    51,    19, 
         52,    19,    53,    19,    54,    19,    55,    19,    19,    19, 
         19,    19,    19,    19,    19,    19,    56,    56,    56,    56, 
         56,    56,    57,    57,    57,    57,    57,    57,    58,    58, 
         58,    58,    58,    59,    59,    59,    59,    59,    59,    50, 
         50,    61,    60,    60,    62,    60,    60,    36,    36,    63, 
         63,     4,     4,     4,    64,    64,    10,    10,     2,     2, 
         65,    65,    66,    66,    66,    66,    66,    66,    66, 
    );
    protected static $yyLen= array(2,
          1,     8,     0,     8,     1,     1,     0,     2,     0,     2, 
          0,     2,     0,     3,     0,     1,     1,     1,     2,     5, 
          6,     0,     1,     2,     4,     4,     0,     2,     1,     2, 
          0,     9,     0,     9,     1,     3,     0,     1,     1,     3, 
          2,     3,     0,     2,     1,     1,     1,     1,     1,     0, 
          1,     1,     2,     0,     4,     0,     7,     0,    10,     0, 
         11,     0,     6,     0,     7,     0,     6,     0,     4,     2, 
          1,     3,     0,     0,     3,     2,     1,     1,     2,     0, 
          9,     0,     1,     0,     5,     1,     1,     1,     0,     3, 
          0,     8,     0,     5,     0,     8,     0,     6,     3,     3, 
          3,     3,     2,     2,     2,     5,     1,     1,     1,     1, 
          1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
          1,     1,     1,     1,     1,     1,     1,     1,     1,     0, 
          1,     0,     4,     2,     0,     6,     2,     0,     1,     1, 
          3,     1,     4,     3,     1,     3,     1,     3,     0,     1, 
          1,     2,     1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
        153,   155,   154,   156,   158,   157,   159,     0,     1,     0, 
        150,     0,     5,     3,     6,     0,   152,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   146, 
          8,     0,     0,   144,     0,     0,    12,     0,    10,     0, 
          0,   143,     0,     0,    16,    17,     0,     0,     0,   148, 
          0,     0,     0,     4,     0,    19,     0,    30,     2,    45, 
         46,    47,    48,    49,     0,     0,     0,     0,     0,     0, 
         33,     0,     0,    31,     0,     0,     0,     0,    24,     0, 
         23,     0,     0,   126,   127,   124,   125,   128,   129,     0, 
         88,    87,    89,    91,     0,     0,     0,     0,    20,     0, 
          0,    38,     0,     0,    54,     0,    68,    58,    62,    64, 
         60,    56,     0,     0,     0,    21,     0,    97,     0,     0, 
          0,     0,   107,   119,   120,   121,   122,   123,     0,   108, 
        109,   110,   111,   112,   104,   105,   113,   114,   115,   116, 
        117,   118,     0,     0,     0,     0,     0,    41,     0,     0, 
         25,     0,    66,     0,     0,     0,     0,     0,     0,    26, 
         70,    53,     0,     0,   132,     0,    90,     0,     0,    99, 
          0,     0,     0,     0,     0,     0,    42,     0,     0,    40, 
          0,     0,     0,     0,     0,     0,    71,     0,     0,     0, 
          0,     0,     0,   139,     0,     0,     0,     0,     0,     0, 
          0,    44,     0,    35,    34,    55,    51,     0,    69,     0, 
          0,     0,     0,     0,     0,    32,     0,     0,     0,   135, 
          0,    94,     0,     0,     0,     0,     0,     0,    72,     0, 
          0,     0,   141,    98,   133,     0,     0,     0,    36,    80, 
         84,    67,     0,    77,     0,     0,    63,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    76,    83,    79,     0, 
         65,     0,    74,    57,   136,     0,    92,    96,     0,     0, 
          0,     0,     0,    14,     0,     0,     0,     0,    75,     0, 
         85,    59,     0,     0,    61,     0,     0,    81, 
    );
    protected static $yyDgoto= array(8,
          9,    43,    16,    96,    25,    33,    44,    18,    29,    36, 
        253,    45,    46,    47,    76,    73,    82,   207,   114,    48, 
        101,    83,   179,   205,    65,    77,   208,   102,   103,   115, 
        152,   159,   188,   264,   155,   193,   158,   156,   157,   182, 
        242,   154,   273,   243,   257,   244,   245,   255,   256,   167, 
        119,   120,   171,   172,   164,   143,   144,   145,    98,   168, 
        195,   236,   194,    21,    11,    12, 
    );
    protected static $yySindex = array(          -49,
          0,     0,     0,     0,     0,     0,     0,     0,     0,  -182, 
          0,   -49,     0,     0,     0,  -215,     0,  -215,    25,  -248, 
          6,  -218,  -215,  -215,  -201,    28,  -215,  -215,   -54,     0, 
          0,  -215,    -7,     0,    49,    61,     0,   -49,     0,   -49, 
       -215,     0,  -241,     1,     0,     0,   -49,   -49,    27,     0, 
        134,  -216,  -244,     0,  -230,     0,  -221,     0,     0,     0, 
          0,     0,     0,     0,    87,  -107,   114,   103,  -167,   -86, 
          0,  -110,  -107,     0,   653,   116,  -215,   138,     0,   961, 
          0,   123,  -215,     0,     0,     0,     0,     0,     0,    24, 
          0,     0,     0,     0,   653,  -220,   757,   653,     0,   -41, 
        160,     0,   149,   161,     0,    80,     0,     0,     0,     0, 
          0,     0,    84,   152,   961,     0,   169,     0,   -79,  -215, 
        179,     0,     0,     0,     0,     0,     0,     0,   653,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   653,   653,   653,   757,  -117,     0,  -104,  -215, 
          0,   653,     0,   653,   185,   188,   850,   189,   205,     0, 
          0,     0,  -104,   653,     0,   -13,     0,   -79,   209,     0, 
        -90,    -8,   201,   757,   757,   757,     0,  -215,    -1,     0, 
        223,   961,   250,   653,   653,   961,     0,  -142,   653,   653, 
         -1,   277,   212,     0,   653,   214,   -79,   653,   -79,   216, 
        653,     0,   961,     0,     0,     0,     0,   132,     0,   199, 
        363,   142,   229,   299,   671,     0,   653,   -79,   693,     0, 
        230,     0,   653,   -24,   148,  -267,   653,   850,     0,   653, 
        -65,   850,     0,     0,     0,   653,   154,   237,     0,     0, 
          0,     0,   -66,     0,   -64,   222,     0,   735,   227,   -82, 
        249,   -49,   -79,   -79,   262,   180,     0,     0,     0,   653, 
          0,   242,     0,     0,     0,   182,     0,     0,  -215,   961, 
        264,   -32,   850,     0,   -23,   193,   850,   282,     0,   284, 
          0,     0,   850,   203,     0,   961,   204,     0, 
    );
    protected static $yyRindex= array(         -154,
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    83,     0,     0,     0,     0,     0,     0,   699,  -106, 
        232,   208,     0,     0,   210,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   -15,     0,     0,  -122,     0,  -122, 
          0,     0,     0,     0,     0,     0,  -123,  -116,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   269,     0,     0, 
          0,     0,   273,     0,     0,     0,   294,     0,     0,     0, 
          0,     0,   294,     0,     0,     0,     0,     0,     0,   -37, 
          0,     0,     0,     0,     0,     0,   286,     0,     0,     0, 
          0,     0,   306,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   224,     0,     0,     0,    70,     0, 
          0,  -242,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   -30,     0,     0,     2,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     2,   307,     0,     0,     0,    98,     0,     0, 
          0,     0,     0,    16,   257,   373,     0,     0,     0,     0, 
          0,   226,     0,   293,     0,   226,     0,     0,     0,     0, 
          0,    32,     0,     0,     0,   -10,   125,   307,    70,     0, 
          0,     0,   226,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    70,     0,     0, 
          0,     0,   307,   766,     0,     0,   293,     0,     0,     0, 
          0,     0,     0,     0,     0,   307,    43,     0,     0,     0, 
          0,     0,   626,     0,   600,     0,     0,     0,     0,   888, 
          0,  -122,    70,    70,     0,     0,     0,     0,     0,   307, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   226, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   226,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,    20,     0,  1003,     0,     0,   -25,     0,     0,    14, 
          0,   309,   305,     0,     0,   308,     0,   -39,  1144,     0, 
        274,     0,   195,   181,     0,     0,  -121,   236,     0,    23, 
          0,     0,   -77,     0,     0,   285,     0,     0,     0,     0, 
          0,     0,     0,   137,     0,   146,     0,     0,     0,  -159, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,  -125, 
          0,     0,   192,   388,   400,     0, 
    );
    protected static $yyTable = array(86,
        147,    18,    15,    86,    86,    86,    86,    86,    29,    86, 
        103,   165,    80,   103,    49,    67,     7,    95,    19,    10, 
         86,    86,    86,    86,    86,    86,   134,   103,   103,    19, 
        134,   134,   134,   134,   134,   137,   134,   138,    19,   222, 
        113,    37,   197,   147,    19,    39,   147,   134,   134,   134, 
        134,   134,   134,   145,    50,    86,   100,   204,   234,   100, 
         43,    24,   103,   118,   212,    27,    55,    57,    38,    23, 
         23,   197,   140,   100,   100,   162,   240,   241,    51,    13, 
        134,   225,   134,    13,    13,    13,    13,    13,    52,    13, 
        140,    28,    41,   267,   268,    68,    26,    93,    51,    52, 
         13,    13,    13,    13,    13,    13,   130,   147,   100,    32, 
        130,   130,   130,   130,   130,    40,   130,    13,    14,    15, 
         34,   203,    42,    66,    43,    54,    71,   130,   130,   130, 
        130,   130,   130,    13,   131,    13,   149,   149,   131,   131, 
        131,   131,   131,   149,   131,   149,   149,   149,   276,    78, 
        247,    59,    72,    74,   250,   131,   131,   131,   131,   131, 
        131,   137,   130,    75,   287,   137,   137,   137,   137,   137, 
         64,   137,    68,    67,    99,    62,    60,   104,    61,   187, 
         63,   116,   137,   137,   137,   137,   137,   137,   128,   122, 
        131,   202,   150,   126,   124,   279,   125,   149,   127,   282, 
        149,   151,   153,   149,     7,   285,   149,   149,   160,   163, 
        161,   137,   123,   138,   129,   128,   178,   137,   213,   170, 
        126,   124,   177,   125,   184,   127,   266,   185,   189,    79, 
          1,     2,     3,     4,     5,     6,     7,   128,   137,   123, 
        138,   129,   126,   124,   190,   125,   196,   127,   198,   199, 
        187,   200,   218,   220,   187,   223,   226,   227,   201,   128, 
        137,   123,   138,   129,   126,   124,   229,   125,   230,   127, 
        237,   142,   239,   142,   249,   142,   252,   254,   241,   240, 
        260,   206,   137,   123,   138,   129,   128,   262,   263,   265, 
        142,   126,   124,   142,   125,   187,   127,   101,   148,   187, 
        101,   269,   270,   272,   277,   187,   274,   278,   209,   137, 
        123,   138,   129,   128,   101,   101,   280,   281,   126,   124, 
        217,   125,   283,   127,   284,   286,    86,    27,   288,   166, 
         11,    22,     9,   103,    37,   128,   137,   123,   138,   129, 
        126,   124,   151,   125,    28,   127,    39,   138,    52,   101, 
         50,   138,    58,   134,   142,    56,   117,   191,   137,   123, 
        138,   129,    86,    86,    86,    86,    86,    86,    86,    86, 
         86,   216,   145,    86,    86,   140,   139,   135,   136,   100, 
         81,   259,   151,   151,   151,   180,   141,   142,   258,   134, 
        134,   134,   134,   134,   134,   134,   134,   134,   134,   128, 
        134,   134,   151,   228,   126,   124,    13,   125,   233,   127, 
         30,    17,   151,   102,     0,     0,   102,     0,     0,     0, 
          0,     0,   137,   123,   138,   129,     0,     0,     0,     0, 
        102,   102,     0,   130,     0,     0,     0,     0,     0,     0, 
          0,     0,    13,    13,    13,    13,    13,    13,    13,    13, 
         13,    13,     0,    13,    13,     0,     0,     0,     0,     0, 
          0,   131,     0,     0,     0,   102,     0,     0,   210,   130, 
        130,   130,   130,   130,   130,   130,   130,   130,     0,     0, 
        130,   130,   221,     0,     0,     0,     0,     0,   137,     0, 
          0,   142,     0,     0,     0,     0,     0,   131,   131,   131, 
        131,   131,   131,   131,   131,   131,     0,   238,   131,   131, 
          0,   246,     0,     0,     0,     0,     0,     0,     0,     0, 
        251,     0,     0,     0,   137,   137,   137,   137,   137,   137, 
        137,   137,   137,     0,     0,   137,   137,     0,     0,     0, 
          0,   142,   142,     0,   271,     0,     0,     0,     0,     0, 
          0,   140,   139,   135,   136,   130,   131,   132,   133,   134, 
          0,     0,   141,   142,     0,     0,     0,     0,     0,     0, 
          0,   142,     0,     0,     0,     0,     0,     0,   140,   139, 
        135,   136,   130,   131,   132,   133,   134,     0,     0,   141, 
        142,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        140,   139,   135,   136,   130,   131,   132,   133,   134,     0, 
          0,   141,   142,     0,     0,     0,     0,     0,     0,     0, 
        101,     0,   140,   139,   135,   136,   130,   131,   132,   133, 
        134,     0,    78,   141,   142,     0,     0,     0,     0,    78, 
          0,   142,    78,     0,    78,     0,     0,     0,     0,   140, 
        139,   135,   136,   130,   131,   132,   133,   134,    82,     0, 
        141,   142,   231,     0,     0,    82,     0,     0,    82,     0, 
         82,     0,     0,     0,     0,     0,   140,   139,   135,   136, 
        130,   131,   132,   133,   134,    86,     0,   141,   142,     0, 
          0,     0,    95,     0,     0,    84,     0,    85,   140,   139, 
        135,   136,   130,   131,   132,   133,   134,   128,     0,   141, 
        142,   232,   126,   124,     0,   125,     0,   127,     0,     0, 
          0,     0,     0,     0,    78,    78,     0,     0,     0,   128, 
        137,   123,   138,   129,   126,   124,   102,   125,   145,   127, 
        145,     0,   145,     0,     0,     0,     0,     0,     0,     0, 
         82,    82,   137,   123,   138,   129,     0,   145,   145,     0, 
        145,     0,   140,   139,   135,   136,   130,   131,   132,   133, 
        134,   128,     0,   141,   142,   261,   126,   124,    87,   125, 
          0,   127,     0,     0,     0,   235,     0,     0,     0,   145, 
          0,     0,     0,   128,   137,   123,   138,   129,   126,   124, 
          0,   125,   106,   127,     0,     0,   106,   106,   106,   106, 
        106,     0,   106,     0,     0,     0,   137,   123,   138,   129, 
          0,   145,     0,   106,   106,     0,   106,     0,   106,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   106,    78, 
         78,    78,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    86,     0,     0,    82,    82,    82,     0,    95, 
          0,     0,    84,     0,    85,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    90,    91,    92,     0,     0,     0,     0,     0, 
         73,     0,     0,     0,     0,     0,     0,    73,     0,     0, 
         73,     0,    73,     0,     0,     0,     0,     0,     0,    78, 
         78,    78,    78,     0,    78,    78,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   145,    78, 
         78,    78,    78,     0,     0,    82,    82,    82,    82,    78, 
         78,    82,   186,     0,     0,    87,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    82,    82,    82,    82,     0, 
          0,     0,    93,    86,     0,    82,    82,     0,    94,     0, 
         95,    78,    78,    84,     0,    85,     0,     0,   145,   145, 
          0,     0,    73,    73,     0,     0,     0,     0,    20,     0, 
         22,     0,     0,     0,     0,     0,    31,    82,    82,    35, 
         35,     0,     0,     0,    35,     0,     0,     0,   145,     0, 
          0,     0,     0,    35,     0,    53,     0,     0,     0,     0, 
          0,     0,     0,     0,    88,    89,     0,    69,     0,    70, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        140,   139,   135,   136,   130,   131,   132,   133,   134,   100, 
          0,   141,   142,     0,     0,   100,    87,     0,     0,     0, 
          0,     0,   140,   139,   135,   136,   130,   131,   132,   133, 
        134,     0,     0,   141,   142,     0,     0,     0,   145,    90, 
         91,    92,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   169,     0,     0,     0,     0,     0,     0,   106, 
          0,     0,     0,     0,   140,   139,   135,   136,   130,   131, 
        132,   133,   134,     0,     0,   141,   142,    73,    73,    73, 
          0,     0,   100,     0,     0,     0,   140,   139,   135,   136, 
        130,   131,   132,   133,   134,     0,     0,   141,   142,   106, 
        106,   106,   106,   106,     0,     0,     0,     0,     0,     0, 
         35,     0,     0,     0,     0,     0,     0,     0,     0,    93, 
        105,   106,   107,     0,     0,    94,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   108, 
        109,   110,   111,     0,     0,     0,     0,     0,    97,   112, 
         90,    91,    92,     0,     0,     0,     0,    73,    73,    73, 
         73,     0,     0,    73,     0,     0,     0,     0,   121,     0, 
          0,   146,     0,     0,     0,     0,     0,    73,    73,    73, 
         73,    88,    89,     0,     0,     0,     0,    73,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   275,   173,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   174,   175,   176,    73, 
         73,     0,     0,     0,     0,   181,     0,   183,     0,     0, 
         93,   105,   106,   107,     0,     0,    94,   192,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        108,   109,   110,   111,     0,     0,     0,   192,   211,     0, 
        112,     0,   214,   215,     0,     0,     0,     0,   219,     0, 
          0,   192,     0,     0,   224,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        192,     0,    88,    89,     0,     0,   192,     0,     0,     0, 
        192,     0,     0,   248,     0,     0,     0,     0,     0,   192, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   192, 
    );
    protected static $yyCheck = array(37,
         42,   125,   125,    41,    42,    43,    44,    45,   125,    47, 
         41,    91,   123,    44,    40,   260,   123,   260,   260,     0, 
         58,    59,    60,    61,    62,    63,    37,    58,    59,   260, 
         41,    42,    43,    44,    45,    60,    47,    62,   260,   199, 
         80,    28,   168,    59,   260,    32,    62,    58,    59,    60, 
         61,    62,    63,    91,    41,    93,    41,    59,   218,    44, 
         59,   310,    93,    40,   186,    60,    47,    48,   123,    46, 
         46,   197,    41,    58,    59,   115,   344,   345,   320,    37, 
         91,   203,    93,    41,    42,    43,    44,    45,   330,    47, 
         59,   310,    44,   253,   254,   340,    91,   340,   320,   330, 
         58,    59,    60,    61,    62,    63,    37,   123,    93,   311, 
         41,    42,    43,    44,    45,   123,    47,   300,   301,   302, 
         93,   123,    62,   340,   123,   125,    40,    58,    59,    60, 
         61,    62,    63,    91,    37,    93,   260,   260,    41,    42, 
         43,    44,    45,   260,    47,   300,   301,   302,   270,   260, 
        228,   125,   260,    40,   232,    58,    59,    60,    61,    62, 
         63,    37,    93,    61,   286,    41,    42,    43,    44,    45, 
         37,    47,   340,   260,    59,    42,    43,    40,    45,   157, 
         47,    59,    58,    59,    60,    61,    62,    63,    37,   410, 
         93,   178,    44,    42,    43,   273,    45,   320,    47,   277, 
         41,    41,   123,   320,   311,   283,   330,   330,   125,    41, 
         59,    60,    61,    62,    63,    37,   321,    93,   361,    41, 
         42,    43,   340,    45,    40,    47,   252,    40,    40,   340, 
        280,   281,   282,   283,   284,   285,   286,    37,    60,    61, 
         62,    63,    42,    43,    40,    45,   260,    47,    40,   340, 
        228,   260,    41,    40,   232,    40,   125,    59,    58,    37, 
         60,    61,    62,    63,    42,    43,   125,    45,    40,    47, 
         41,    40,   125,    42,   340,    44,   123,    41,   345,   344, 
         59,    59,    60,    61,    62,    63,    37,    61,   371,    41, 
         59,    42,    43,    62,    45,   273,    47,    41,   340,   277, 
         44,    40,   123,    62,    41,   283,   125,   340,    59,    60, 
         61,    62,    63,    37,    58,    59,   340,   125,    42,    43, 
         44,    45,    41,    47,    41,   123,   364,    59,   125,   409, 
        123,    59,   123,   364,    41,    37,    60,    61,    62,    63, 
         42,    43,   260,    45,    59,    47,    41,    41,   125,    93, 
        125,    59,    48,   364,   123,    47,    83,   163,    60,    61, 
         62,    63,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   191,   410,   411,   412,   400,   401,   402,   403,   364, 
         73,   245,   300,   301,   302,   150,   411,   412,   243,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   409,    37, 
        411,   412,   320,    41,    42,    43,   364,    45,   217,    47, 
         23,    12,   330,    41,    -1,    -1,    44,    -1,    -1,    -1, 
         -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         58,    59,    -1,   364,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   409,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1, 
         -1,   364,    -1,    -1,    -1,    93,    -1,    -1,   184,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,   198,    -1,    -1,    -1,    -1,    -1,   364,    -1, 
         -1,   260,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,   223,   411,   412, 
         -1,   227,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        236,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,    -1,    -1, 
         -1,   310,   311,    -1,   260,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   340,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        364,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    33,   411,   412,    -1,    -1,    -1,    -1,    40, 
         -1,   410,    43,    -1,    45,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    33,    -1, 
        411,   412,   364,    -1,    -1,    40,    -1,    -1,    43,    -1, 
         45,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    33,    -1,   411,   412,    -1, 
         -1,    -1,    40,    -1,    -1,    43,    -1,    45,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    37,    -1,   411, 
        412,    41,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1,    37, 
         60,    61,    62,    63,    42,    43,   364,    45,    40,    47, 
         42,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        125,   126,    60,    61,    62,    63,    -1,    59,    60,    -1, 
         62,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    37,    -1,   411,   412,    41,    42,    43,   126,    45, 
         -1,    47,    -1,    -1,    -1,    93,    -1,    -1,    -1,    91, 
         -1,    -1,    -1,    37,    60,    61,    62,    63,    42,    43, 
         -1,    45,    37,    47,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    60,    61,    62,    63, 
         -1,   123,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,   260, 
        261,   262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    33,    -1,    -1,   260,   261,   262,    -1,    40, 
         -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   260,   261,   262,    -1,    -1,    -1,    -1,    -1, 
         33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1, 
         43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,   340, 
        341,   342,   343,    -1,   345,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,   360, 
        361,   362,   363,    -1,    -1,   340,   341,   342,   343,   370, 
        371,   346,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363,    -1, 
         -1,    -1,   340,    33,    -1,   370,   371,    -1,   346,    -1, 
         40,   402,   403,    43,    -1,    45,    -1,    -1,   310,   311, 
         -1,    -1,   125,   126,    -1,    -1,    -1,    -1,    16,    -1, 
         18,    -1,    -1,    -1,    -1,    -1,    24,   402,   403,    27, 
         28,    -1,    -1,    -1,    32,    -1,    -1,    -1,   340,    -1, 
         -1,    -1,    -1,    41,    -1,    43,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   402,   403,    -1,    55,    -1,    57, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    77, 
         -1,   411,   412,    -1,    -1,    83,   126,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,    -1,    -1,   410,   260, 
        261,   262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,   364, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,   260,   261,   262, 
         -1,    -1,   150,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,    -1,    -1, 
        178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340, 
        341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360, 
        361,   362,   363,    -1,    -1,    -1,    -1,    -1,    75,   370, 
        260,   261,   262,    -1,    -1,    -1,    -1,   340,   341,   342, 
        343,    -1,    -1,   346,    -1,    -1,    -1,    -1,    95,    -1, 
         -1,    98,    -1,    -1,    -1,    -1,    -1,   360,   361,   362, 
        363,   402,   403,    -1,    -1,    -1,    -1,   370,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   269,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   143,   144,   145,   402, 
        403,    -1,    -1,    -1,    -1,   152,    -1,   154,    -1,    -1, 
        340,   341,   342,   343,    -1,    -1,   346,   164,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        360,   361,   362,   363,    -1,    -1,    -1,   184,   185,    -1, 
        370,    -1,   189,   190,    -1,    -1,    -1,    -1,   195,    -1, 
         -1,   198,    -1,    -1,   201,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        217,    -1,   402,   403,    -1,    -1,   223,    -1,    -1,    -1, 
        227,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,   236, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   260, 
    );
    protected static $yyFinal= 8;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 'T_FINAL', 
      'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_EXTENDS', 'T_IMPLEMENTS', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PROPERTY', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_AS', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 'T_OBJECT_OPERATOR', 
      'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 2:  #line 108 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
        $yyVals[-6+$yyTop]->name= $yyVals[-5+$yyTop];
        $yyVals[-6+$yyTop]->parent= $yyVals[-4+$yyTop];
        $yyVals[-6+$yyTop]->implements= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
        $yyVal= $yyVals[-6+$yyTop];
      } break;

    case 3:  #line 116 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 4:  #line 116 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
        $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
        $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
        $yyVal= $yyVals[-6+$yyTop];
      } break;

    case 5:  #line 126 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ClassNode()); } break;

    case 6:  #line 127 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new EnumNode()); } break;

    case 7:  #line 131 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 8:  #line 132 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 9:  #line 136 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 10:  #line 137 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 11:  #line 141 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 12:  #line 142 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 13:  #line 146 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 14:  #line 147 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 15:  #line 151 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 16:  #line 152 "grammar/xp.jay"
    { $yyVal['fields']= $yyVals[0+$yyTop]; } break;

    case 17:  #line 153 "grammar/xp.jay"
    { $yyVal['methods']= $yyVals[0+$yyTop]; } break;

    case 18:  #line 159 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 19:  #line 160 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 20:  #line 164 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
        $yyVal->modifiers= $yyVals[-4+$yyTop];
        $yyVal->type= $yyVals[-3+$yyTop];
        $yyVal->name= $yyVals[-2+$yyTop];
        $yyVal->initialization= $yyVals[-1+$yyTop];
      } break;

    case 21:  #line 170 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
        $yyVal->modifiers= $yyVals[-5+$yyTop];
        $yyVal->name= $yyVals[-3+$yyTop];
        $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
        $yyVal->get= $gs['get'];
        $yyVal->set= $gs['set'];
      } break;

    case 22:  #line 180 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 24:  #line 185 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 25:  #line 186 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 26:  #line 187 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 27:  #line 191 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 28:  #line 192 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 29:  #line 198 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 30:  #line 199 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 31:  #line 203 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 32:  #line 203 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
        $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
      } break;

    case 33:  #line 212 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 34:  #line 212 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 35:  #line 223 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 36:  #line 224 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 37:  #line 228 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 229 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 39:  #line 233 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 40:  #line 234 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 41:  #line 238 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-1+$yyTop]); } break;

    case 42:  #line 239 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 43:  #line 243 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 44:  #line 244 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 50:  #line 260 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 265 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 53:  #line 266 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 54:  #line 270 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 55:  #line 270 "grammar/xp.jay"
    { 
        $yyVal->expression= $yyVals[-1+$yyTop];
      } break;

    case 56:  #line 273 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 57:  #line 273 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
      } break;

    case 58:  #line 278 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 59:  #line 278 "grammar/xp.jay"
    {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
        $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
        $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 60:  #line 284 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 61:  #line 284 "grammar/xp.jay"
    {
        $yyVals[-10+$yyTop]->expression= $yyVals[-7+$yyTop];
        $yyVals[-10+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 62:  #line 288 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 63:  #line 288 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
        $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 64:  #line 292 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 65:  #line 292 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
      } break;

    case 66:  #line 296 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 67:  #line 296 "grammar/xp.jay"
    { 
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
        $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-4+$yyTop]; 
      } break;

    case 68:  #line 301 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 69:  #line 301 "grammar/xp.jay"
    { /* Throw statement */ 
        $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
      } break;

    case 71:  #line 308 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 72:  #line 309 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 73:  #line 313 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 74:  #line 314 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 75:  #line 314 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 76:  #line 319 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 77:  #line 320 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 78:  #line 324 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 79:  #line 325 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 80:  #line 329 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 81:  #line 329 "grammar/xp.jay"
    {
        $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
        $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
        $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
      } break;

    case 82:  #line 337 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 84:  #line 342 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 85:  #line 342 "grammar/xp.jay"
    {
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      } break;

    case 86:  #line 350 "grammar/xp.jay"
    { /* XXX Constant */ } break;

    case 87:  #line 351 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 88:  #line 352 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 89:  #line 353 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 90:  #line 353 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 91:  #line 356 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InstanceCreationNode()); } break;

    case 92:  #line 356 "grammar/xp.jay"
    { 
      $yyVals[-7+$yyTop]->type= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-7+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 93:  #line 361 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= $yyVals[-1+$yyTop]; } break;

    case 94:  #line 361 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 95:  #line 366 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= $yyVals[-1+$yyTop]; } break;

    case 96:  #line 366 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 97:  #line 372 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 98:  #line 372 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 99:  #line 378 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 100:  #line 379 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode()); 
      $yyVal->variable= $yyVals[-2+$yyTop]; 
      $yyVal->expression= $yyVals[0+$yyTop]; 
      $yyVal->op= $yyVals[-1+$yyTop];
    } break;

    case 101:  #line 385 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= $yyVals[-1+$yyTop]; 
    } break;

    case 102:  #line 391 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= $yyVals[-1+$yyTop]; 
    } break;

    case 103:  #line 397 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new UnaryOpNode()); 
      $yyVal->expression= $yyVals[0+$yyTop];
      $yyVal->op= $yyVals[-1+$yyTop]; 
    } break;

    case 104:  #line 402 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new UnaryOpNode()); 
      $yyVal->expression= $yyVals[-1+$yyTop];
      $yyVal->op= $yyVals[0+$yyTop]; 
      $yyVal->postfix= TRUE;
    } break;

    case 105:  #line 408 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new UnaryOpNode()); 
      $yyVal->expression= $yyVals[-1+$yyTop];
      $yyVal->op= $yyVals[0+$yyTop]; 
      $yyVal->postfix= TRUE;
    } break;

    case 106:  #line 414 "grammar/xp.jay"
    { /* XXX Ternary */ } break;

    case 130:  #line 453 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 132:  #line 458 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 133:  #line 458 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 134:  #line 461 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 135:  #line 465 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 136:  #line 465 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 137:  #line 469 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 138:  #line 473 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 140:  #line 477 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 141:  #line 478 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 142:  #line 484 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 143:  #line 485 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 144:  #line 486 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 145:  #line 490 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 146:  #line 491 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 147:  #line 495 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 148:  #line 496 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 149:  #line 502 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 150:  #line 503 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 151:  #line 507 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 152:  #line 508 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 153:  #line 512 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 154:  #line 513 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 155:  #line 514 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 156:  #line 515 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 157:  #line 516 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 158:  #line 517 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 159:  #line 518 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1225 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
