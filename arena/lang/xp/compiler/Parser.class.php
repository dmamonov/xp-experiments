<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.StaticImportNode',
    'xp.compiler.ast.NativeImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.InstanceOfNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.SwitchNode',
    'xp.compiler.ast.CaseNode',
    'xp.compiler.ast.DefaultNode',
    'xp.compiler.ast.BreakNode',
    'xp.compiler.ast.ContinueNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 62 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_MOD_EQUAL= 408;
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_INSTANCEOF= 312;
    const T_INC= 402;
    const T_DEC= 403;
    const T_SE= 401;
    const T_GE= 400;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_PROPERTY= 330;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_NEW= 346;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     9,     7, 
          8,     8,     8,    10,    10,    10,     4,     4,    13,     3, 
         17,     3,    19,     3,    14,    14,    15,    15,    20,    20, 
         22,    22,    16,    16,    23,    23,    23,    18,    18,    18, 
         27,    27,    29,    28,    30,    28,    24,    24,    35,    35, 
         34,    34,    34,    33,    33,    38,    25,    41,    25,    43, 
         25,    11,    11,    44,    44,    46,    46,    46,    40,    40, 
         37,    37,    49,    49,    50,    50,    39,    39,    42,    42, 
         42,    42,    42,    42,    42,    42,    26,    26,    36,    36, 
         52,    51,    53,    51,    56,    51,    58,    51,    59,    51, 
         60,    51,    61,    51,    63,    51,    65,    51,    66,    51, 
         67,    51,    51,    51,    62,    62,    68,    68,    70,    69, 
         71,    69,    54,    54,    55,    72,    55,    64,    64,    73, 
         73,    77,    76,    74,    74,    78,    75,    57,    57,    79, 
         79,    47,    47,    80,    80,    81,    81,    81,    31,    84, 
         31,    85,    31,    86,    31,    87,    31,    31,    31,    31, 
         31,    31,    31,    31,    31,    31,    31,    82,    82,    93, 
         82,    82,    82,    82,    82,    82,    94,    94,    48,    48, 
         95,    88,    88,    88,    88,    88,    88,    89,    89,    89, 
         89,    89,    89,    90,    90,    90,    90,    90,    90,    91, 
         91,    91,    91,    91,    91,    92,    92,    83,    83,    96, 
         96,    98,    97,    97,    99,    97,    32,    32,    12,    12, 
        100,   101,   101,   102,   102,    21,    21,    45,    45,   103, 
        103,   104,   104,   104,   104,   104,   104,   104,   104, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     7, 
          0,     1,     1,     1,     1,     3,     1,     3,     0,     9, 
          0,     9,     0,     8,     0,     2,     0,     2,     0,     2, 
          0,     3,     2,     0,     1,     1,     4,     3,     1,     0, 
          1,     3,     0,     3,     0,     6,     5,     6,     0,     1, 
          2,     4,     4,     0,     2,     0,     9,     0,     8,     0, 
         10,     4,     1,     1,     3,     2,     5,     5,     1,     3, 
          0,     1,     1,     3,     3,     3,     0,     2,     1,     1, 
          1,     1,     1,     1,     2,     3,     0,     1,     1,     2, 
          0,     4,     0,     7,     0,    10,     0,     8,     0,     6, 
          0,     7,     0,     8,     0,     6,     0,     3,     0,     3, 
          0,     4,     2,     1,     0,     1,     1,     2,     0,     5, 
          0,     4,     1,     3,     0,     0,     3,     2,     1,     1, 
          2,     0,     9,     0,     1,     0,     5,     0,     1,     1, 
          3,     0,     1,     5,     6,     1,     1,     4,     1,     0, 
          3,     0,     4,     0,     5,     0,     6,     3,     1,     1, 
          1,     1,     1,     5,     3,     3,     3,     1,     3,     0, 
          4,     3,     1,     1,     1,     1,     0,     1,     1,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     2, 
          2,     2,     2,     2,     2,     2,     2,     0,     1,     1, 
          2,     0,     4,     2,     0,     6,     1,     1,     1,     4, 
          3,     1,     3,     1,     3,     1,     3,     0,     1,     1, 
          2,     1,     1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   232,   234,   233,   235,   237,   236,   238,   239, 
          1,     0,    63,   229,     0,     8,     0,     4,    12,    13, 
          0,     0,     0,     0,    19,    23,    21,   231,    18,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    62,    65, 
          0,     0,     0,     0,    15,     0,     0,     0,     0,   170, 
          0,     0,     0,     0,     0,   176,   173,   175,   174,   150, 
        152,     0,     0,     0,     0,     0,     0,   149,   159,   160, 
        161,   162,   163,     0,     0,     0,     0,     0,     0,     0, 
          0,    10,     0,     0,     0,     0,     0,     0,     0,   156, 
          0,     0,     0,   178,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   206,   207,     0,     0,     0,     0,     0, 
          0,     0,    67,    68,     0,     0,     0,   217,   224,   218, 
          0,     0,    26,     0,     0,     0,    30,    34,     0,    16, 
          0,     0,   139,     0,   212,     0,   151,   209,     0,     0, 
          0,     0,   172,   158,   169,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   167,     0,     0, 
          0,     0,     0,   188,   189,   190,   191,   192,   193,     0, 
        180,     0,     0,   220,     0,    28,    34,     0,     0,     0, 
          0,   171,     0,     0,     0,   211,     0,     0,   153,     0, 
        147,     0,     0,   225,   221,   223,     0,   227,     0,    24, 
          0,    33,    35,    36,     0,     0,     0,     0,   141,     0, 
          0,   215,     0,     0,     0,   155,     0,    20,     0,     0, 
          0,     0,     0,     0,    22,    34,     0,   157,   213,     0, 
          0,     0,     0,    91,     0,   111,    95,    99,   101,    97, 
        107,   109,    93,   103,   114,     0,     0,    88,     0,    58, 
          0,     0,     0,     0,    34,    44,     0,     0,    42,     0, 
          0,   144,   148,     0,   105,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    37,   113,    90,     0,     0,     0, 
         56,    83,    79,    80,    81,    82,     0,    84,     0,     0, 
          0,     0,     0,   216,   145,     0,     0,     0,     0,     0, 
          0,   123,     0,     0,   108,   110,     0,     0,     0,     0, 
         72,     0,     0,    51,     0,    50,     0,     0,    85,     0, 
         60,     0,    47,    32,     0,    92,     0,   112,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    48,     0,    86,     0,    46,     0,     0,     0, 
        124,     0,     0,     0,     0,    76,    75,     0,     0,    74, 
         52,    53,     0,     0,   132,   136,   106,     0,   129,     0, 
          0,   100,     0,     0,     0,     0,    78,    69,     0,    59, 
          0,     0,     0,     0,   128,   135,   131,     0,   102,     0, 
        126,    94,   119,   121,     0,   116,     0,     0,    57,     0, 
          0,     0,     0,    98,     0,     0,     0,   104,   118,    70, 
         61,     0,     0,     0,   127,     0,     0,     0,   137,    96, 
          0,   122,     0,   120,     0,     0,   133, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    21,    74,     4,     7,     8,    31,    11,    57, 
        221,   138,    44,    87,   145,   199,    46,   226,    45,    89, 
        147,   276,   222,   223,   224,   266,   227,   228,   243,   244, 
        267,   329,   311,   300,   337,   268,   330,   338,   379,   400, 
        298,   309,   366,    33,    23,    34,    76,   104,   331,   332, 
        269,   284,   293,   323,   412,   287,   152,   290,   288,   289, 
        294,   415,   317,   387,   291,   292,   286,   416,   417,   426, 
        427,   425,   388,   405,   389,   390,   403,   404,   153,   162, 
        212,    78,   157,   101,   102,   166,   154,    79,    80,    81, 
         82,    83,    95,   105,    84,   158,   159,   204,   250,   140, 
        141,   142,    24,    25, 
    );
    protected static $yySindex = array(         -251,
          0,     0,  -250,  -165,     0,   400,     0,  -250,    66,    71, 
       -111,    98,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   -66,     0,     0,   318,     0,  -165,     0,     0,     0, 
        -77,  -165,    93,   160,     0,     0,     0,     0,     0,   163, 
        166,   318,    98,  -165,  -165,  -165,   -29,  2271,     0,     0, 
        152,   -92,   -78,   -92,     0,   169,   188,  2271,  2271,     0, 
       2271,  2271,  2271,  2271,   161,     0,     0,     0,     0,     0, 
          0,  2271,  2271,  -162,   757,   209,   213,     0,     0,     0, 
          0,     0,     0,   220,   -58,  -165,   -37,  -165,   154,   -37, 
        -29,     0,   210,   210,  2271,   -59,   -59,   -59,   -59,     0, 
        -12,  -165,   757,     0,   156,   816,    -5,  2271,  2271,  2271, 
       2271,  2271,  2271,  2271,  2271,  2271,  2271,  -165,  2271,  2271, 
       2271,  2271,  2271,     0,     0,  2271,  2271,  2271,  2271,  2271, 
       2271,  2271,     0,     0,  2271,   -19,    85,     0,     0,     0, 
        239,   258,     0,  -165,   183,   265,     0,     0,   187,     0, 
        843,   218,     0,  2271,     0,    52,     0,     0,   -12,    96, 
        274,   -12,     0,     0,     0,  -215,   -33,   -33,  1453,   255, 
        -33,   -33,   -33,   -33,   -33,   -33,   -33,     0,   210,   210, 
        -59,   -59,   -59,     0,     0,     0,     0,     0,     0,  1453, 
          0,  -165,   226,     0,   -58,     0,     0,  -165,   284,    58, 
       2271,     0,   279,  2271,   281,     0,   230,  2271,     0,   293, 
          0,   -12,  2271,     0,     0,     0,   481,     0,   212,     0, 
       -223,     0,     0,     0,     0,   214,   278,   294,     0,   -12, 
        247,     0,   231,   314,  2271,     0,   -33,     0,  2611,   165, 
         20,  -217,   238,   323,     0,     0,    58,     0,     0,  2271, 
       2271,   238,   330,     0,   249,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   248,   865,     0,  2611,     0, 
        116,   349,    13,   319,     0,     0,  2271,   428,     0,   350, 
        267,     0,     0,  2271,     0,  2271,   353,   355,  2658,   356, 
        331,   345,   365,   366,     0,     0,     0,  -165,   -50,   116, 
          0,     0,     0,     0,     0,     0,   -67,     0,   368,  2271, 
        354,   489,   893,     0,     0,   367,  2611,   923,  2271,  2271, 
       2611,     0,    54,    87,     0,     0,  2271,  2271,   -36,   384, 
          0,   388,   394,     0,  2611,     0,   382,  -165,     0,   351, 
          0,  1453,     0,     0,   238,     0,   317,     0,   386,  1040, 
        325,   660,   403,    89,  1069,  1137,   111,   319,   133,  -165, 
        414,   334,     0,   415,     0,  -165,     0,  -123,  2271,  2658, 
          0,  2271,  2271,  2658,   337,     0,     0,  -165,    -2,     0, 
          0,     0,   133,   420,     0,     0,     0,   117,     0,   119, 
        410,     0,  1299,  1327,   100,  -136,     0,     0,  2611,     0, 
         -2,   133,   432,   352,     0,     0,     0,  2271,     0,  2658, 
          0,     0,     0,     0,   348,     0,  -136,   360,     0,    -2, 
       -165,  2611,   445,     0,  2658,  2271,   429,     0,     0,     0, 
          0,   148,   364,  2658,     0,  1356,  2611,   449,     0,     0, 
       2611,     0,   378,     0,  2611,   379,     0, 
    );
    protected static $yyRindex= array(          225,
          0,     0,    45,     0,     0,    -3,     0,   273,   137,     0, 
        253,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,  -224,     0,     0,     0,     0,     0, 
          0,     0,     0,   421,     0,     0,     0,     0,     0,     0, 
         97,   128,     0,     0,     0,     0,     0,   474,     0,     0, 
        182,  -103,   393,  -103,     0,   458,     0,     0,     0,     0, 
          0,     0,     0,     0,   224,     0,     0,     0,     0,     0, 
          0,   395,     0,     0,   477,     0,     0,     0,     0,     0, 
          0,     0,     0,   -17,     0,     0,   398,     0,     0,   398, 
          0,     0,  1749,  1782,   430,  1149,  1465,  1524,  1551,     0, 
        603,     0,     0,     0,     0,     0,  -214,     0,     0,   466, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   -40,     0,     0,     0, 
          0,   469,     0,     0,     0,    15,     0,     0,     0,     0, 
        -10,     0,     0,   491,     0,     0,     0,     0,   632,   493, 
          0,   603,     0,     0,     0,     0,  1860,  1997,   200,     0, 
       2009,  2022,  2045,  2068,  2157,  2185,  2235,     0,  1847,  1959, 
       1584,  1622,  1737,     0,     0,     0,     0,     0,     0,    -9, 
          0,     0,     0,     0,     0,     0,     0,     0,  -221,   409, 
          0,     0,     0,   442,   340,     0,     0,   491,     0,   377, 
          0,   603,     0,     0,     0,     0,  -221,     0,   541,     0, 
          0,     0,     0,     0,     4,     0,   436,     3,     0,   603, 
          0,     0,   506,     0,   491,     0,  2282,     0,   451,   -44, 
          0,     0,     7,     0,     0,     0,     0,     0,     0,   491, 
        452,   437,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,  -118,     0, 
          0,     0,     0,   519,     0,     0,     0,  -117,     0,     0, 
          0,     0,     0,   520,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   540,     0,   532, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,  -221,     0,     0,     0,     0,   451,     0,   533,     0, 
        451,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   566,     0,     0,     0,     0,     0,   540,     0,     0, 
          0,    31,     0,     0,     7,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    44,    21,     0, 
          0,     0,     0,     0,     0,   540,     0,     0,   533,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    21,     0,     0,     0,     0,  2451,     0,  2398, 
          0,     0,     0,     0,  2542,   483,     0,     0,   451,     0, 
          0,    21,     0,     0,     0,     0,     0,   491,     0,     0, 
          0,     0,     0,     0,     0,     0,   484,     0,     0,     0, 
          0,   451,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   -95,     0,     0,     0, 
        -95,     0,     0,     0,   451,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   607,     0,     0,     0,   525, 
        611,   -27,     0,   564,   529,  -133,     0,     0,     0,     0, 
       -129,  -227,     0,     0,     0,   476,   373,     0,     0,     0, 
         38,   -32,   275,   341,     0,  -204,  -244,     0,  -315,  -187, 
          0,     0,     0,   580,   600,     0,   -99,   -15,   283,   342, 
        523,     0,     0,    42,     0,     0,  -116,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   234,     0,     0, 
          0,     0,   263,     0,   266,     0,     0,     0,   454,     0, 
          0,     0,  -141,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   497,     0,     0,     0,     0, 
        462,     0,   633,     0, 
    );
    protected static $yyTable = array(10,
        126,   219,   127,   219,   136,   357,    89,    38,   121,   119, 
        170,   120,    55,   122,   196,    17,    52,    53,    54,    25, 
        209,   219,    39,   179,   282,   339,   126,    41,   127,    87, 
        140,   181,    77,   156,   181,   230,   240,   203,   228,    51, 
         51,    51,   272,    45,   210,   154,    17,    43,   140,   302, 
         31,     1,   139,     5,   305,   303,   398,   304,   143,   306, 
        146,    41,    43,   217,   297,    31,   123,   401,   218,   161, 
        236,    55,   335,   226,    55,   230,   230,   230,   155,    77, 
        137,    51,   140,    51,    54,    75,   420,    54,   248,    55, 
        178,   234,   123,   364,     9,    93,    94,   160,    96,    97, 
         98,    99,   273,   307,   231,   230,   241,   179,   228,   103, 
        106,    27,   278,    51,   140,   181,   146,   367,   253,   191, 
        399,   384,   274,    55,   211,   154,    43,    41,    43,    28, 
        362,    31,   151,   280,   281,     5,    54,   226,   308,    51, 
         66,   312,   228,    77,    85,   167,   168,   169,   171,   172, 
        173,   174,   175,   176,   177,    85,   179,   180,   181,   182, 
        183,    32,   139,   184,   185,   186,   187,   188,   189,   190, 
        146,    29,   103,    17,    30,   193,    17,    17,    17,    17, 
         17,    17,    40,    17,   316,    42,   207,   214,   242,    66, 
        137,   151,     9,    51,    17,    17,    17,    17,    17,    17, 
        100,     9,   349,    43,   270,    48,    27,    25,    47,   333, 
         27,    85,   228,   419,    91,    17,   137,    86,   219,   219, 
        385,   386,   219,   219,   219,   219,   219,    17,   219,    17, 
         56,    88,   431,    35,    36,    37,   413,   414,   151,   219, 
        219,   169,   219,   219,   219,   151,    92,   107,   397,   133, 
        237,   121,   391,   134,    89,    89,   122,   143,   143,    17, 
        168,    17,    17,   135,   168,   168,   168,   168,   168,   126, 
        168,   127,   151,   144,   219,    17,   148,    87,    87,   219, 
        163,   168,   168,   168,   168,   168,   168,   151,   151,   334, 
        192,   423,   143,   137,   165,    17,   228,   228,   228,   219, 
        194,   195,   137,   358,   219,   197,   219,   219,   198,   200, 
        202,   205,   213,   208,   313,     2,   168,   225,   215,   230, 
        232,   169,   233,   318,     5,     5,     5,     5,     5,     5, 
          5,     5,   235,   137,   239,   123,   246,   247,   245,   249, 
        129,   128,   124,   125,     5,     5,     5,   342,   168,   168, 
        146,   130,   131,   251,   252,   137,   151,   350,   352,   271, 
        275,   137,   277,     7,   355,   356,   129,   128,   124,   125, 
        283,   285,   295,    51,    12,   299,   214,   130,   131,   310, 
        214,   214,   214,   214,   214,   214,   214,   228,   301,   325, 
        314,   315,   319,   432,   320,   324,    17,   214,   214,   214, 
        214,   214,   214,   326,   327,   328,   151,   341,   220,   393, 
        394,   392,   343,   146,   353,   395,    51,   146,   146,   146, 
        146,   146,   146,   146,   359,   346,   354,   228,   228,   228, 
        214,   360,   214,   361,   146,   146,   146,   146,   146,   146, 
        363,   368,   372,   365,   369,   151,    17,    17,    17,   371, 
        376,   424,   373,   378,   381,   383,    17,   228,   382,   396, 
        402,   386,   385,   436,   214,   214,   435,   146,   408,   146, 
        411,   421,   428,    31,   422,   440,    17,    31,    31,    31, 
         31,    31,    31,    31,   430,   434,   437,   438,   439,   443, 
         12,   219,   219,   219,    31,    31,    31,    31,    31,    31, 
        445,   146,   146,   447,     2,     2,     2,     2,     2,     2, 
          2,     2,    11,    64,   142,    29,    14,   143,    12,   177, 
         27,   219,   138,   142,     2,     2,     2,    31,     2,    31, 
        222,   138,   219,    40,   142,   168,    17,    17,    17,    17, 
         17,    17,    17,    17,    17,   221,    17,    17,    17,    17, 
         17,    17,     7,     7,     7,     7,     7,     7,     7,     7, 
         39,    31,    31,    13,    14,    15,   219,    17,    18,    19, 
         20,    12,     7,     7,     7,    87,   138,    54,   142,    12, 
         71,   219,   219,   219,   219,   219,   219,   219,   219,   219, 
         49,   138,   219,   219,   219,   219,   219,    13,    14,    15, 
         16,    17,    18,    19,    20,   238,    73,   115,   117,   129, 
        128,   124,   125,   344,    26,   150,    22,    90,   149,   279, 
        130,   131,    50,   168,   168,   168,   168,   168,   168,   168, 
        168,   168,   377,    17,   168,   168,   168,   168,   168,   208, 
        336,    49,   380,   208,   208,   208,   208,   208,   340,   208, 
        429,   214,   407,   406,   229,   206,   216,    38,     0,     0, 
        208,   208,   208,   208,   208,   208,     0,     0,   210,     0, 
          0,     0,   210,   210,   210,   210,   210,     0,   210,    13, 
         14,    15,    16,    17,    18,    19,    20,     0,   146,   210, 
        210,   210,   210,   210,   210,   208,   109,     0,     0,     0, 
          0,   121,   119,     0,   120,     0,   122,    13,    14,    15, 
        219,    17,    18,    19,    20,     0,     0,     0,   296,   126, 
        108,   127,   110,     0,   210,     0,     0,   208,   208,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   214, 
        214,   214,   214,   214,   214,   214,   214,   214,    31,     0, 
        214,   214,   214,   214,   214,     0,   210,   210,     0,     0, 
         13,    14,    15,   219,    17,    18,    19,    20,    13,    14, 
         15,   219,    17,    18,    19,    20,   146,   146,   146,   146, 
        146,   146,   146,   146,   146,   123,     0,   146,   146,   146, 
        146,   146,   347,   109,     0,     0,   351,     0,   121,   119, 
        235,   120,     0,   122,     0,     0,     0,     0,     0,     0, 
          0,   322,     0,     0,     0,     0,   126,   108,   127,   110, 
        235,   235,   235,   235,   235,   235,   235,   235,     0,     0, 
          0,     0,     0,     0,     0,     0,    31,    31,    31,    31, 
         31,    31,    31,    31,    31,     0,     0,    31,    31,    31, 
         31,    31,   109,     0,     0,     0,   164,   121,   119,     0, 
        120,     0,   122,     0,     0,     0,     0,     0,     0,     0, 
        235,     0,     0,     0,   418,   126,   108,   127,   110,   109, 
          0,     0,   123,     0,   121,   119,   201,   120,     0,   122, 
          0,     0,   322,     0,     0,     0,   322,   433,     0,     0, 
          0,   109,   126,   108,   127,   110,   121,   119,     0,   120, 
          0,   122,   442,     0,   208,     0,   444,     0,     0,     0, 
        446,     0,     0,   296,   126,   108,   127,   110,     0,   109, 
          0,     0,   322,   345,   121,   119,     0,   120,     0,   122, 
          0,   123,     0,   210,     0,     0,     0,   322,     0,     0, 
          0,     0,   126,   108,   127,   110,   322,     0,     0,   109, 
          0,     0,     0,     0,   121,   119,     0,   120,   123,   122, 
          0,   118,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   348,   126,   108,   127,   110,     0,     0,     0,     0, 
        123,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   208,   208,   208,   208,   208,   208,   208,   208, 
        208,     0,     0,   208,   208,   208,   208,   208,   123,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   210,   210,   210,   210,   210,   210,   210,   210,   210, 
          0,     0,   210,   210,   210,   210,   210,     0,   123,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   129, 
        128,   124,   125,   111,   112,   113,   114,   115,   118,     0, 
        130,   131,   132,   116,   117,     0,   109,     0,     0,     0, 
        370,   121,   119,     0,   120,     0,   122,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   126, 
        108,   127,   110,     0,     0,   109,     0,     0,     0,   374, 
        121,   119,     0,   120,     0,   122,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   118,   126,   108, 
        127,   110,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   118,     0,   129,   128,   124,   125, 
        111,   112,   113,   114,   115,   123,     0,   130,   131,   132, 
        116,   117,     0,   109,     0,     0,   118,   375,   121,   119, 
          0,   120,     0,   122,     0,   200,     0,     0,     0,   200, 
        200,   200,   200,   200,   123,   200,   126,   108,   127,   110, 
          0,     0,     0,     0,   118,     0,   200,   200,     0,   200, 
          0,   200,     0,     0,     0,   129,   128,   124,   125,   111, 
        112,   113,   114,   115,     0,     0,   130,   131,     0,   116, 
        117,     0,     0,     0,   118,     0,     0,     0,     0,     0, 
          0,   200,   129,   128,   124,   125,   111,   112,   113,   114, 
        115,     0,     0,   130,   131,     0,   116,   117,     0,     0, 
          0,     0,   123,     0,   129,   128,   124,   125,   111,   112, 
        113,   114,   115,   200,     0,   130,   131,     0,   116,   117, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   129,   128,   124,   125,   111,   112,   113,   114, 
        115,     0,     0,   130,   131,     0,   116,   117,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   129,   128,   124,   125,   111,   112,   113,   114, 
        115,     0,     0,   130,   131,   109,   116,   117,     0,   409, 
        121,   119,     0,   120,     0,   122,     0,     0,     0,     0, 
          0,   118,     0,     0,     0,     0,     0,     0,   126,   108, 
        127,   110,     0,   109,     0,     0,     0,   410,   121,   119, 
          0,   120,     0,   122,     0,     0,     0,     0,     0,     0, 
        118,     0,     0,     0,     0,     0,   126,   108,   127,   110, 
          0,     0,   109,     0,     0,     0,     0,   121,   119,     0, 
        120,     0,   122,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   441,     0,   126,   108,   127,   110,     0, 
          0,     0,     0,     0,   123,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   129, 
        128,   124,   125,   111,   112,   113,   114,   115,   118,     0, 
        130,   131,   123,   116,   117,     0,     0,     0,     0,     0, 
        200,     0,     0,     0,     0,     0,     0,     0,   129,   128, 
        124,   125,   111,   112,   113,   114,   115,     0,     0,   130, 
        131,   123,   116,   117,     0,     0,     0,     0,     0,   109, 
          0,     0,     0,     0,   121,   119,     0,   120,     0,   122, 
          0,   201,     0,     0,     0,   201,   201,   201,   201,   201, 
          0,   201,   126,   108,   127,   110,     0,     0,     0,     0, 
          0,     0,   201,   201,     0,   201,     0,   201,     0,     0, 
          0,     0,     0,     0,     0,     0,   129,   128,   124,   125, 
        111,   112,   113,   114,   115,     0,     0,   130,   131,     0, 
        116,   117,   200,   200,   200,   200,   200,   201,     0,     0, 
        204,   200,   200,   200,   204,   204,   204,   204,   204,     0, 
        204,     0,     0,     0,     0,     0,     0,     0,   123,     0, 
          0,   204,   204,     0,   204,     0,   204,   205,     0,   201, 
          0,   205,   205,   205,   205,   205,     0,   205,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   205,   205, 
        118,   205,     0,   205,     0,     0,   204,     0,     0,     0, 
        196,     0,     0,     0,   196,   196,   196,   196,   196,     0, 
        196,     0,     0,     0,     0,     0,     0,     0,   118,     0, 
          0,   196,   196,   205,   196,     0,   196,     0,   204,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   197,     0, 
          0,     0,   197,   197,   197,   197,   197,   118,   197,     0, 
          0,     0,     0,     0,     0,   205,   196,     0,     0,   197, 
        197,     0,   197,     0,   197,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   129,   128, 
        124,   125,   111,   112,   113,   114,   115,     0,   196,   130, 
        131,     0,   116,   117,   197,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   129,   128,   124,   125, 
        111,   112,   113,   114,   115,     0,     0,   130,   131,     0, 
        116,   117,     0,     0,     0,     0,   197,     0,     0,     0, 
          0,     0,     0,     0,     0,   129,   128,   124,   125,   111, 
        112,   113,   114,   115,   118,     0,   130,   131,     0,   116, 
        117,     0,     0,   199,     0,     0,   201,   199,   199,   199, 
        199,   199,     0,   199,     0,   202,     0,     0,     0,   202, 
          0,   202,   202,   202,   199,   199,     0,   199,     0,   199, 
          0,     0,     0,     0,     0,     0,   202,   202,     0,   202, 
          0,   202,     0,     0,     0,     0,     0,     0,   203,     0, 
          0,     0,   203,     0,   203,   203,   203,     0,     0,   199, 
          0,     0,     0,     0,     0,   204,     0,     0,     0,   203, 
        203,   202,   203,     0,   203,     0,     0,     0,     0,     0, 
          0,     0,   129,   128,   124,   125,   111,   112,   113,   114, 
        115,   199,   205,   130,   131,     0,   116,   117,   201,   201, 
        201,   201,   201,   202,   203,     0,     0,   201,   201,   201, 
          0,     0,     0,   194,     0,     0,     0,   194,     0,   194, 
        194,   194,     0,     0,     0,   196,   182,     0,     0,     0, 
        182,     0,     0,   182,   194,   194,   203,   194,     0,   194, 
          0,     0,     0,     0,     0,     0,     0,   182,   182,     0, 
        182,     0,   182,     0,     0,     0,     0,   204,   204,   204, 
        204,   204,     0,   197,     0,     0,   204,   204,   204,   194, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   182,     0,   205,   205,   205,   205,   205,     0, 
          0,     0,     0,   205,   205,   205,     0,     0,     0,     0, 
          0,   194,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   182,     0,     0,   196,   196,   196, 
        196,   196,     0,     0,     0,   195,   196,   196,   196,   195, 
          0,   195,   195,   195,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   195,   195,     0,   195, 
          0,   195,     0,     0,     0,   197,   197,   197,   197,   197, 
          0,     0,     0,   198,   197,   197,   197,   198,     0,     0, 
        198,     0,     0,     0,     0,   183,     0,     0,   199,   183, 
          0,   195,   183,     0,   198,   198,     0,   198,   184,   198, 
        202,     0,   184,     0,     0,   184,   183,   183,     0,   183, 
          0,   183,     0,     0,     0,     0,     0,     0,     0,   184, 
        184,   185,   184,   195,   184,   185,     0,     0,   185,   198, 
          0,     0,     0,   203,     0,     0,     0,     0,     0,     0, 
          0,   183,   185,   185,   186,   185,     0,   185,   186,     0, 
          0,   186,     0,     0,   184,     0,     0,     0,     0,     0, 
          0,   198,     0,     0,     0,   186,   186,     0,   186,     0, 
        186,     0,     0,   183,     0,     0,     0,   185,     0,     0, 
        199,   199,   199,   199,   199,     0,   184,     0,     0,   199, 
        199,   199,   202,   202,   202,   202,   202,     0,   194,     0, 
        186,   202,   202,   202,     0,     0,     0,     0,     0,   185, 
          0,   182,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   203,   203,   203,   203,   203, 
          0,     0,   186,   187,   203,   203,   203,   187,     0,     0, 
        187,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   187,   187,     0,   187,     0,   187, 
          0,   165,     0,     0,     0,   165,     0,     0,   165,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   165,   165,     0,   165,     0,   165,     0,   187, 
        194,   194,   194,   194,   194,     0,     0,     0,     0,   194, 
        194,   194,     0,   182,   182,   182,   182,   182,     0,     0, 
        195,   166,   182,   182,   182,   166,     0,   165,   166,     0, 
          0,   187,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   166,   166,     0,   166,     0,   166,     0,     0, 
          0,     0,     0,    61,     0,     0,     0,     0,   198,   165, 
         73,     0,     0,    58,     0,    59,     0,     0,   164,     0, 
        183,     0,   164,     0,     0,   164,     0,   166,     0,     0, 
          0,     0,     0,   184,     0,     0,     0,     0,     0,   164, 
        164,     0,   164,     0,   164,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   185,     0,     0,   166, 
          0,    60,   195,   195,   195,   195,   195,     0,     0,     0, 
          0,   195,   195,   195,   164,     0,     0,     0,     0,   186, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    72,     0,     0,    62,     0,     0,     0, 
        198,   198,   198,   198,   198,     0,   164,     0,     0,   198, 
        198,   198,   183,   183,   183,   183,   183,     0,     0,     0, 
          0,   183,   183,   183,     0,   184,   184,   184,   184,   184, 
        130,     0,     0,     0,   184,   184,   184,   130,     0,     0, 
        130,     0,   130,     0,     0,     0,     0,     0,   185,   185, 
        185,   185,   185,     0,     0,     0,   130,   185,   185,   185, 
          0,     0,     0,     0,     0,     0,     0,     0,   187,     0, 
          0,   186,   186,   186,   186,   186,     0,     0,     0,     0, 
        186,   186,   186,   134,     0,     0,     0,     0,   130,     0, 
        134,     0,     0,   134,     0,   134,   165,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   134, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        130,     0,   130,   130,     0,     0,     0,     0,     0,     0, 
         65,    66,    67,    68,    69,     0,     0,     0,     0,     0, 
          0,   134,     0,     0,     0,     0,   166,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        187,   187,   187,   187,   187,     0,     0,     0,     0,   187, 
        187,   187,     0,   134,   125,   134,   134,     0,     0,     0, 
          0,   125,     0,     0,   125,     0,   125,     0,   165,   165, 
        165,   165,   165,   164,     0,     0,     0,   165,   165,   165, 
        125,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         70,     0,     0,     0,     0,     0,    71,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   125,     0,     0,     0,     0,     0,   166,   166, 
        166,   166,   166,    61,     0,     0,     0,   166,   166,   166, 
         73,     0,     0,    58,     0,    59,     0,   130,   130,   130, 
        130,   130,     0,     0,   125,     0,   125,   125,     0,   265, 
          0,     0,    63,    64,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   164,   164,   164,   164,   164, 
         61,     0,     0,     0,   164,   164,   164,    73,     0,     0, 
         58,    60,    59,     0,     0,     0,     0,     0,     0,     0, 
        134,   134,   134,   134,   134,     0,   265,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    72,     0,     0,    62,   130,   130,   130, 
        130,     0,   130,   130,     0,     0,     0,     0,    60,     0, 
          0,     0,     0,     0,     0,     0,     0,   130,   130,   130, 
        130,     0,   130,   130,     0,     0,     0,   130,   130,   130, 
        130,   130,     0,     0,     0,     0,     0,     0,     0,     0, 
        321,     0,     0,    62,     0,     0,     0,     0,     0,     0, 
        134,   134,   134,   134,     0,     0,   134,     0,     0,   130, 
        130,   125,   125,   125,   125,   125,     0,     0,     0,     0, 
        134,   134,   134,   134,     0,   134,   134,     0,     0,     0, 
        134,   134,   134,   134,   134,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   134,   134,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         65,    66,    67,    68,    69,     0,     0,     0,     0,     0, 
          0,   125,   125,   125,   125,     0,     0,   125,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   125,   125,   125,   125,     0,   125,   125,     0,     0, 
          0,   125,     0,   125,   125,   125,     0,    65,    66,    67, 
         68,    69,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   125,   125,     0,     0,     0,     0,     0, 
         70,   254,   255,   256,     0,     0,    71,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        257,   258,   259,   260,     0,   261,   262,     0,     0,     0, 
        263,     0,   264,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    70,   254,   255, 
        256,     0,     0,    71,     0,     0,     0,     0,     0,     0, 
          0,     0,    63,    64,     0,     0,     0,   257,   258,   259, 
        260,     0,   261,   262,     0,     0,     0,   263,     0,   264, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    63, 
         64, 
    );
    protected static $yyCheck = array(4,
         60,    42,    62,    44,    63,    42,   125,   125,    42,    43, 
        110,    45,    42,    47,   144,    60,    44,    45,    46,   123, 
        162,    62,    27,    41,   252,    93,    60,    32,    62,   125, 
         41,    41,    48,    46,    44,   260,   260,   154,   260,    44, 
         45,    46,   260,    40,   260,   260,    91,    44,    59,    37, 
         44,   303,    85,   304,    42,    43,    59,    45,    86,    47, 
         88,    59,    59,   197,   269,    59,   126,   383,   198,   102, 
        212,    41,   123,    59,    44,   300,   301,   302,    91,    59, 
         85,    86,    93,    88,    41,    48,   402,    44,   230,    59, 
        118,   208,   126,   338,   260,    58,    59,   102,    61,    62, 
         63,    64,   320,    91,   204,   330,   330,   125,   330,    72, 
         73,    46,   246,   118,   125,   125,   144,   345,   235,   135, 
        123,   366,   340,    93,   340,   340,   123,   125,   125,    59, 
        335,   125,    95,   250,   251,    91,    93,   123,   126,   144, 
         44,   275,   260,   123,    60,   108,   109,   110,   111,   112, 
        113,   114,   115,   116,   117,    60,   119,   120,   121,   122, 
        123,    64,   195,   126,   127,   128,   129,   130,   131,   132, 
        198,   283,   135,    37,   286,    91,    40,    41,    42,    43, 
         44,    45,   260,    47,   284,    93,    91,   192,   221,    93, 
        195,   154,   260,   198,    58,    59,    60,    61,    62,    63, 
         40,   260,   319,    44,    40,    40,    46,   311,    46,   260, 
         46,    60,   330,   401,    46,   260,   221,   310,    37,   260, 
        344,   345,    41,    42,    43,    44,    45,    91,    47,    93, 
        260,   310,   420,   300,   301,   302,   373,   374,   201,    58, 
         59,   204,    61,    62,    63,   208,    59,   410,   378,    41, 
        213,    42,   369,    41,   373,   374,    47,    58,    59,   123, 
         37,   125,   126,    44,    41,    42,    43,    44,    45,    60, 
         47,    62,   235,   311,    93,   320,   123,   373,   374,   320, 
        125,    58,    59,    60,    61,    62,    63,   250,   251,   340, 
        310,   408,    93,   298,   300,   340,   300,   301,   302,   340, 
         62,    44,   307,   340,   123,   123,   125,   126,    44,   123, 
         93,   260,    58,    40,   277,    91,    93,   260,    93,    41, 
         40,   284,    93,   286,   280,   281,   282,   283,   284,   285, 
        286,   287,    40,   338,   123,   126,    59,    44,   125,    93, 
        400,   401,   402,   403,   300,   301,   302,   310,   125,   126, 
        378,   411,   412,   123,    41,   360,   319,   320,   321,   340, 
        123,   366,    40,    91,   327,   328,   400,   401,   402,   403, 
         41,   123,   125,   378,    91,   260,    37,   411,   412,    61, 
         41,    42,    43,    44,    45,    46,    47,   260,    40,    59, 
         41,   125,    40,   421,    40,    40,   260,    58,    59,    60, 
         61,    62,    63,    59,    40,    40,   369,    40,   125,   372, 
        373,   370,    59,    37,   361,   374,   421,    41,    42,    43, 
         44,    45,    46,    47,    41,    59,   340,   300,   301,   302, 
         91,    44,    93,    40,    58,    59,    60,    61,    62,    63, 
         59,   125,    40,    93,    59,   408,   310,   311,   312,   125, 
        340,   410,   364,   321,    41,    41,   320,   330,   125,   123, 
         41,   345,   344,   426,   125,   126,   425,    91,    59,    93, 
        371,    40,   125,    37,   123,   434,   340,    41,    42,    43, 
         44,    45,    46,    47,   125,    41,    58,   340,   125,    41, 
         91,   310,   311,   312,    58,    59,    60,    61,    62,    63, 
        123,   125,   126,   125,   280,   281,   282,   283,   284,   285, 
        286,   287,   260,    93,    41,   123,    59,    41,    91,   125, 
        123,   340,    93,    58,   300,   301,   302,    91,   304,    93, 
         62,    41,    40,   125,    93,   312,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    40,   410,   411,   412,   413, 
        414,   415,   280,   281,   282,   283,   284,   285,   286,   287, 
        125,   125,   126,   280,   281,   282,   283,   284,   285,   286, 
        287,    91,   300,   301,   302,   125,   125,    59,    59,    91, 
         41,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         59,    59,   411,   412,   413,   414,   415,   280,   281,   282, 
        283,   284,   285,   286,   287,   125,    41,   125,   125,   400, 
        401,   402,   403,   125,     8,    91,     6,    54,    90,   247, 
        411,   412,    43,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   358,   410,   411,   412,   413,   414,   415,    37, 
        300,    42,   360,    41,    42,    43,    44,    45,   307,    47, 
        417,   312,   390,   388,   201,   159,   195,    25,    -1,    -1, 
         58,    59,    60,    61,    62,    63,    -1,    -1,    37,    -1, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,   280, 
        281,   282,   283,   284,   285,   286,   287,    -1,   312,    58, 
         59,    60,    61,    62,    63,    93,    37,    -1,    -1,    -1, 
         -1,    42,    43,    -1,    45,    -1,    47,   280,   281,   282, 
        283,   284,   285,   286,   287,    -1,    -1,    -1,    59,    60, 
         61,    62,    63,    -1,    93,    -1,    -1,   125,   126,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   312,    -1, 
        411,   412,   413,   414,   415,    -1,   125,   126,    -1,    -1, 
        280,   281,   282,   283,   284,   285,   286,   287,   280,   281, 
        282,   283,   284,   285,   286,   287,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   126,    -1,   411,   412,   413, 
        414,   415,   317,    37,    -1,    -1,   321,    -1,    42,    43, 
        260,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   289,    -1,    -1,    -1,    -1,    60,    61,    62,    63, 
        280,   281,   282,   283,   284,   285,   286,   287,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,   413, 
        414,   415,    37,    -1,    -1,    -1,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        330,    -1,    -1,    -1,   399,    60,    61,    62,    63,    37, 
         -1,    -1,   126,    -1,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,   370,    -1,    -1,    -1,   374,   422,    -1,    -1, 
         -1,    37,    60,    61,    62,    63,    42,    43,    -1,    45, 
         -1,    47,   437,    -1,   312,    -1,   441,    -1,    -1,    -1, 
        445,    -1,    -1,    59,    60,    61,    62,    63,    -1,    37, 
         -1,    -1,   410,    41,    42,    43,    -1,    45,    -1,    47, 
         -1,   126,    -1,   312,    -1,    -1,    -1,   425,    -1,    -1, 
         -1,    -1,    60,    61,    62,    63,   434,    -1,    -1,    37, 
         -1,    -1,    -1,    -1,    42,    43,    -1,    45,   126,    47, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,   413,   414,   415,   126,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,   413,   414,   415,    -1,   126,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   312,    -1, 
        411,   412,   413,   414,   415,    -1,    37,    -1,    -1,    -1, 
         41,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    -1,    -1,    37,    -1,    -1,    -1,    41, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   312,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   126,    -1,   411,   412,   413, 
        414,   415,    -1,    37,    -1,    -1,   312,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    37,    -1,    -1,    -1,    41, 
         42,    43,    44,    45,   126,    47,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,   312,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,    -1,    -1, 
         -1,    -1,   126,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,   125,    -1,   411,   412,    -1,   414,   415, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    37,   414,   415,    -1,    41, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61, 
         62,    63,    -1,    37,    -1,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
        312,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63, 
         -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    -1,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   312,    -1, 
        411,   412,   126,   414,   415,    -1,    -1,    -1,    -1,    -1, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,   126,   414,   415,    -1,    -1,    -1,    -1,    -1,    37, 
         -1,    -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47, 
         -1,    37,    -1,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   404,   405,   406,   407,   408,    93,    -1,    -1, 
         37,   413,   414,   415,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    37,    -1,   125, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
        312,    61,    -1,    63,    -1,    -1,    93,    -1,    -1,    -1, 
         37,    -1,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1, 
         -1,    58,    59,    93,    61,    -1,    63,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1, 
         -1,    -1,    41,    42,    43,    44,    45,   312,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,   125,    93,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,   125,   411, 
        412,    -1,   414,   415,    93,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   312,    -1,   411,   412,    -1,   414, 
        415,    -1,    -1,    37,    -1,    -1,   312,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    37,    -1,    -1,    -1,    41, 
         -1,    43,    44,    45,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1, 
         -1,    -1,    41,    -1,    43,    44,    45,    -1,    -1,    93, 
         -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    58, 
         59,    93,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   125,   312,   411,   412,    -1,   414,   415,   404,   405, 
        406,   407,   408,   125,    93,    -1,    -1,   413,   414,   415, 
         -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    43, 
         44,    45,    -1,    -1,    -1,   312,    37,    -1,    -1,    -1, 
         41,    -1,    -1,    44,    58,    59,   125,    61,    -1,    63, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,   312,    -1,    -1,   413,   414,   415,    93, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    93,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,    -1,    -1,    -1,    -1, 
         -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   125,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    37,   413,   414,   415,    41, 
         -1,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    37,   413,   414,   415,    41,    -1,    -1, 
         44,    -1,    -1,    -1,    -1,    37,    -1,    -1,   312,    41, 
         -1,    93,    44,    -1,    58,    59,    -1,    61,    37,    63, 
        312,    -1,    41,    -1,    -1,    44,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    37,    61,   125,    63,    41,    -1,    -1,    44,    93, 
         -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    58,    59,    37,    61,    -1,    63,    41,    -1, 
         -1,    44,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1, 
         -1,   125,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,   125,    -1,    -1,    -1,    93,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,   125,    -1,    -1,   413, 
        414,   415,   404,   405,   406,   407,   408,    -1,   312,    -1, 
         93,   413,   414,   415,    -1,    -1,    -1,    -1,    -1,   125, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,   125,    37,   413,   414,   415,    41,    -1,    -1, 
         44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    93, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,   413, 
        414,   415,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
        312,    37,   413,   414,   415,    41,    -1,    93,    44,    -1, 
         -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,   312,   125, 
         40,    -1,    -1,    43,    -1,    45,    -1,    -1,    37,    -1, 
        312,    -1,    41,    -1,    -1,    44,    -1,    93,    -1,    -1, 
         -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,   125, 
         -1,    91,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,    93,    -1,    -1,    -1,    -1,   312, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   123,    -1,    -1,   126,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,   125,    -1,    -1,   413, 
        414,   415,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,    -1,   404,   405,   406,   407,   408, 
         33,    -1,    -1,    -1,   413,   414,   415,    40,    -1,    -1, 
         43,    -1,    45,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    59,   413,   414,   415, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,    33,    -1,    -1,    -1,    -1,    91,    -1, 
         40,    -1,    -1,    43,    -1,    45,   312,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
        260,   261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1, 
         -1,    91,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,   413, 
        414,   415,    -1,   123,    33,   125,   126,    -1,    -1,    -1, 
         -1,    40,    -1,    -1,    43,    -1,    45,    -1,   404,   405, 
        406,   407,   408,   312,    -1,    -1,    -1,   413,   414,   415, 
         59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        340,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    33,    -1,    -1,    -1,   413,   414,   415, 
         40,    -1,    -1,    43,    -1,    45,    -1,   260,   261,   262, 
        263,   264,    -1,    -1,   123,    -1,   125,   126,    -1,    59, 
         -1,    -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         33,    -1,    -1,    -1,   413,   414,   415,    40,    -1,    -1, 
         43,    91,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        260,   261,   262,   263,   264,    -1,    59,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   123,    -1,    -1,   126,   340,   341,   342, 
        343,    -1,   345,   346,    -1,    -1,    -1,    -1,    91,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361,   362, 
        363,    -1,   365,   366,    -1,    -1,    -1,   370,   371,   372, 
        373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        123,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
        340,   341,   342,   343,    -1,    -1,   346,    -1,    -1,   402, 
        403,   260,   261,   262,   263,   264,    -1,    -1,    -1,    -1, 
        360,   361,   362,   363,    -1,   365,   366,    -1,    -1,    -1, 
        370,   371,   372,   373,   374,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        260,   261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1, 
         -1,   340,   341,   342,   343,    -1,    -1,   346,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   360,   361,   362,   363,    -1,   365,   366,    -1,    -1, 
         -1,   370,    -1,   372,   373,   374,    -1,   260,   261,   262, 
        263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   402,   403,    -1,    -1,    -1,    -1,    -1, 
        340,   341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        360,   361,   362,   363,    -1,   365,   366,    -1,    -1,    -1, 
        370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342, 
        343,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   402,   403,    -1,    -1,    -1,   360,   361,   362, 
        363,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402, 
        403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_PROPERTY', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', NULL, 'T_DOUBLE_COLON', 
      'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 
      'T_BOOLEAN_AND', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 133 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 145 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 145 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 156 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 157 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 161 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 10:  #line 161 "grammar/xp.jay"
    {
      $yyVals[-4+$yyTop]->position= $p;
      $yyVals[-4+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 11:  #line 169 "grammar/xp.jay"
    { $yyVal= new ImportNode(); } break;

    case 12:  #line 170 "grammar/xp.jay"
    { $yyVal= new StaticImportNode(); } break;

    case 13:  #line 171 "grammar/xp.jay"
    { $yyVal= new NativeImportNode(); } break;

    case 16:  #line 177 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 18:  #line 182 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 19:  #line 188 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 20:  #line 188 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 21:  #line 197 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 22:  #line 197 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 23:  #line 206 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 24:  #line 206 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 25:  #line 217 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 26:  #line 218 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 27:  #line 222 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 28:  #line 223 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 29:  #line 227 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 30:  #line 228 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 31:  #line 232 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 233 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 33:  #line 237 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 34:  #line 238 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 35:  #line 242 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 36:  #line 243 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 244 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 38:  #line 248 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 39:  #line 249 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 40:  #line 250 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 41:  #line 254 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 42:  #line 255 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 43:  #line 259 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 44:  #line 259 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 45:  #line 262 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 46:  #line 262 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 47:  #line 272 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 48:  #line 279 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop][0];
      $yyVal->annotations= $yyVals[-5+$yyTop][1];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 49:  #line 290 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 51:  #line 295 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 52:  #line 296 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 53:  #line 297 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 54:  #line 301 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 55:  #line 302 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 56:  #line 308 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 57:  #line 308 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 58:  #line 318 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 59:  #line 318 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 60:  #line 326 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 61:  #line 326 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 62:  #line 339 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 63:  #line 340 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 64:  #line 344 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 65:  #line 345 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 66:  #line 349 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 67:  #line 353 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVals[-1+$yyTop] && $yyVal->parameters= array('default' => $yyVals[-1+$yyTop]);
    } break;

    case 68:  #line 358 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 69:  #line 366 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 70:  #line 367 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 71:  #line 371 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 72:  #line 372 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 73:  #line 376 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 74:  #line 377 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 75:  #line 381 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 76:  #line 382 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 77:  #line 386 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 78:  #line 387 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 85:  #line 399 "grammar/xp.jay"
    { $yyVal= '[]'; } break;

    case 86:  #line 400 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 87:  #line 408 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 89:  #line 413 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 90:  #line 414 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 91:  #line 418 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 92:  #line 418 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 93:  #line 421 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 94:  #line 421 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 95:  #line 426 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 96:  #line 426 "grammar/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= array();
        foreach ($yyVals[-6+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->initialization[]= $stmt;
        }
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= array();
        foreach ($yyVals[-2+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->loop[]= $stmt;
        }
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 97:  #line 444 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 98:  #line 444 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 99:  #line 449 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 100:  #line 449 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 101:  #line 453 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 102:  #line 453 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 103:  #line 457 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 104:  #line 457 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 105:  #line 461 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 106:  #line 461 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 107:  #line 466 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 109:  #line 467 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 111:  #line 468 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 112:  #line 468 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 113:  #line 471 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->free= TRUE; } break;

    case 115:  #line 476 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 117:  #line 481 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 118:  #line 482 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 119:  #line 486 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 120:  #line 486 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 121:  #line 490 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 122:  #line 490 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 123:  #line 496 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 124:  #line 497 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 125:  #line 501 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 126:  #line 502 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 127:  #line 502 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 128:  #line 507 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 129:  #line 508 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 130:  #line 512 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 131:  #line 513 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 132:  #line 517 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 133:  #line 517 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 134:  #line 525 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 136:  #line 530 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 137:  #line 530 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 138:  #line 538 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 140:  #line 543 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 141:  #line 544 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 142:  #line 548 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 144:  #line 553 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 145:  #line 559 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 146:  #line 567 "grammar/xp.jay"
    { 
      /* TBI: Constant */ 
    } break;

    case 147:  #line 570 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 148:  #line 573 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new InvocationNode(array('name' => $yyVals[-3+$yyTop]))); 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 150:  #line 581 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 151:  #line 581 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 152:  #line 584 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 153:  #line 584 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 154:  #line 589 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 155:  #line 589 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyVals[-1+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 156:  #line 594 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 157:  #line 594 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 158:  #line 600 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 159:  #line 601 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 160:  #line 604 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 161:  #line 607 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 162:  #line 610 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 163:  #line 613 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 164:  #line 617 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 165:  #line 623 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 166:  #line 629 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 167:  #line 635 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 168:  #line 643 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 169:  #line 644 "grammar/xp.jay"
    { /* XXX class literal */ } break;

    case 170:  #line 645 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 171:  #line 645 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 172:  #line 649 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 173:  #line 654 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 174:  #line 655 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 175:  #line 656 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 176:  #line 657 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 177:  #line 661 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 179:  #line 666 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 180:  #line 667 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 181:  #line 671 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 182:  #line 675 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 183:  #line 676 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 184:  #line 677 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 185:  #line 678 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 679 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 680 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 188:  #line 684 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 189:  #line 685 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 190:  #line 686 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 191:  #line 687 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 192:  #line 688 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 193:  #line 689 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 194:  #line 693 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 195:  #line 694 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 196:  #line 695 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 197:  #line 696 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 198:  #line 697 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 199:  #line 698 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 200:  #line 702 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 201:  #line 703 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 202:  #line 704 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 203:  #line 705 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 204:  #line 706 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 205:  #line 707 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 206:  #line 711 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 207:  #line 712 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 208:  #line 717 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 211:  #line 723 "grammar/xp.jay"
    {  $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 212:  #line 727 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 213:  #line 727 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 214:  #line 730 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 215:  #line 733 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 216:  #line 733 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 219:  #line 747 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 220:  #line 748 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 221:  #line 752 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 222:  #line 756 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 223:  #line 757 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 225:  #line 762 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 226:  #line 766 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 227:  #line 767 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 228:  #line 773 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 229:  #line 774 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 230:  #line 778 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 231:  #line 779 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 232:  #line 783 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 233:  #line 784 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 234:  #line 785 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 235:  #line 786 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 236:  #line 787 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 237:  #line 788 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 238:  #line 789 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;

    case 239:  #line 790 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2010 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
