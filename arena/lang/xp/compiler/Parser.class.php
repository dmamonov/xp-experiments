<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 43 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     8,     1,     3,     3,     5,     5,     6,     6, 
          9,     9,    11,    11,     7,     7,     7,    12,    12,    14, 
         14,    17,    17,    16,    16,    16,    15,    15,    13,    13, 
         22,    20,    26,    20,    24,    24,    21,    21,    28,    28, 
         29,    29,    23,    23,    25,    25,    25,    25,    25,    27, 
         27,    18,    18,    31,    30,    32,    30,    35,    30,    37, 
         30,    38,    30,    39,    30,    40,    30,    42,    30,    30, 
         33,    33,    34,    43,    34,    41,    41,    44,    44,    48, 
         47,    45,    45,    49,    46,    50,    50,    19,    51,    19, 
         53,    19,    19,    19,    55,    19,    56,    19,    57,    19, 
         58,    19,    59,    19,    19,    19,    19,    19,    19,    19, 
         19,    60,    60,    60,    60,    60,    60,    61,    61,    61, 
         61,    61,    61,    62,    62,    62,    62,    62,    63,    63, 
         63,    63,    63,    63,    64,    64,    54,    54,    66,    65, 
         65,    67,    65,    65,    36,    36,    68,    68,     4,     4, 
          4,    52,    52,    10,    10,     2,     2,    69,    69,    70, 
         70,    70,    70,    70,    70,    70, 
    );
    protected static $yyLen= array(2,
          1,     8,     0,     8,     1,     1,     0,     2,     0,     2, 
          0,     2,     0,     3,     0,     1,     1,     1,     2,     5, 
          6,     0,     1,     2,     4,     4,     0,     2,     1,     2, 
          0,     9,     0,     9,     1,     3,     0,     1,     1,     3, 
          2,     3,     0,     2,     1,     1,     1,     1,     1,     0, 
          1,     1,     2,     0,     4,     0,     7,     0,    10,     0, 
         11,     0,     6,     0,     7,     0,     6,     0,     4,     2, 
          1,     3,     0,     0,     3,     2,     1,     1,     2,     0, 
          9,     0,     1,     0,     5,     0,     1,     1,     0,     4, 
          0,     5,     1,     1,     0,     3,     0,     8,     0,     5, 
          0,     8,     0,     6,     3,     1,     1,     1,     1,     1, 
          5,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     2,     2, 
          2,     2,     2,     2,     2,     2,     0,     1,     0,     4, 
          2,     0,     6,     2,     0,     1,     1,     3,     1,     4, 
          3,     1,     3,     1,     3,     0,     1,     1,     2,     1, 
          1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
        160,   162,   161,   163,   165,   164,   166,     0,     1,     0, 
        157,     0,     5,     3,     6,     0,   159,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   153, 
          8,     0,     0,   151,     0,     0,    12,     0,    10,     0, 
          0,   150,     0,     0,    16,    17,     0,     0,     0,   155, 
          0,     0,     0,     4,     0,    19,     0,    30,     2,    45, 
         46,    47,    48,    49,     0,     0,     0,     0,     0,     0, 
         33,     0,     0,    31,     0,     0,     0,     0,    24,     0, 
         23,     0,     0,     0,     0,    89,     0,     0,     0,     0, 
          0,    94,    93,    95,    97,     0,     0,     0,   106,   107, 
        108,   109,   110,    20,     0,     0,    38,     0,     0,    54, 
          0,    68,    58,    62,    64,    60,    56,     0,     0,     0, 
         21,     0,     0,     0,     0,     0,     0,     0,     0,   103, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   135,   136,     0,     0,     0, 
          0,     0,     0,    91,     0,     0,    41,     0,     0,    25, 
          0,    66,     0,     0,     0,     0,     0,     0,    26,    70, 
         53,     0,     0,     0,   146,     0,   139,     0,    96,     0, 
          0,   105,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   118,   119,   120,   121,   122,   123, 
          0,     0,     0,    42,     0,     0,    40,     0,     0,     0, 
          0,     0,     0,    71,     0,     0,     0,     0,     0,    90, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    44, 
          0,    35,    34,    55,    51,     0,    69,     0,     0,     0, 
          0,     0,     0,    32,   148,     0,     0,     0,   142,     0, 
          0,    92,   100,     0,     0,     0,     0,     0,    72,     0, 
          0,     0,   104,   140,     0,     0,     0,    36,    80,    84, 
         67,     0,    77,     0,     0,    63,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    76,    83,    79,     0,    65, 
          0,    74,    57,   143,     0,    98,   102,     0,     0,     0, 
          0,     0,    14,     0,     0,     0,     0,    75,     0,    85, 
         59,     0,     0,    61,     0,     0,    81, 
    );
    protected static $yyDgoto= array(8,
          9,    43,    16,    35,    25,    33,    44,    18,    29,    36, 
        282,    45,    46,    47,    76,    73,    82,   235,   119,    48, 
        106,    83,   206,   233,    65,    77,   236,   107,   108,   120, 
        161,   168,   215,   293,   164,   174,   167,   165,   166,   209, 
        271,   163,   302,   272,   286,   273,   274,   284,   285,   248, 
        125,    98,   201,   179,   131,   132,   202,   203,   176,    99, 
        100,   101,   102,   103,   180,   222,   265,   175,    11,    12, 
    );
    protected static $yySindex = array(           67,
          0,     0,     0,     0,     0,     0,     0,     0,     0,  -260, 
          0,    67,     0,     0,     0,  -195,     0,  -195,    32,  -234, 
        -21,  -219,  -195,  -195,  -193,    -1,  -195,  -195,    -3,     0, 
          0,  -195,    -2,     0,    79,    62,     0,    67,     0,    67, 
       -195,     0,  -231,     1,     0,     0,    67,    67,    13,     0, 
        230,  -215,  -247,     0,  -230,     0,  -243,     0,     0,     0, 
          0,     0,     0,     0,    87,  -116,   106,    90,  -188,  -106, 
          0,  -112,  -116,     0,  1474,    94,  -195,   124,     0,  1123, 
          0,   116,  -195,  1474,  1474,     0,  1474,  1474,  1474,  1474, 
         29,     0,     0,     0,     0,  1474,   735,   -90,     0,     0, 
          0,     0,     0,     0,   -40,   135,     0,   133,   137,     0, 
         56,     0,     0,     0,     0,     0,     0,    55,   152,  1123, 
          0,   141,   -24,   -24,  1474,   -24,   -24,   -24,   -24,     0, 
        -88,  -195,   179,  1474,  1474,  1474,  1474,  1474,  1474,  1474, 
       1474,  1474,  1474,  1474,  1474,     0,     0,  1474,  1474,  1474, 
       1474,  1474,  1474,     0,     0,  -150,     0,  -129,  -195,     0, 
       1474,     0,  1474,   153,   156,  1496,   160,   161,     0,     0, 
          0,  -129,   201,   109,     0,  1474,     0,   -57,     0,   -88, 
        166,     0,   -24,   -24,   -24,   -24,   -24,   -24,   223,   -24, 
        -24,   -24,   -24,   -24,     0,     0,     0,     0,     0,     0, 
       1474,  -132,   -35,     0,  -195,   -14,     0,   245,  1123,   272, 
       1474,  1474,  1123,     0,  -138,  1474,  1474,   -14,  1474,     0, 
        186,  1474,   189,   -88,  1474,  1474,   138,   -88,   190,     0, 
       1123,     0,     0,     0,     0,   107,     0,   174,   299,   111, 
        194,   363,   671,     0,     0,   -88,   735,   144,     0,   211, 
        -24,     0,     0,  1474,   129,  -285,  1474,  1496,     0,  1474, 
        -85,  1496,     0,     0,  1474,   134,   215,     0,     0,     0, 
          0,   -87,     0,   -75,   212,     0,   698,   218,   -91,   248, 
         67,   -88,   -88,   257,   175,     0,     0,     0,  1474,     0, 
        237,     0,     0,     0,   177,     0,     0,  -195,  1123,   262, 
        -30,  1496,     0,   -29,   187,  1496,   275,     0,   277,     0, 
          0,  1496,   199,     0,  1123,   188,     0, 
    );
    protected static $yyRindex= array(         -228,
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    83,     0,     0,     0,     0,     0,     0,   234,  -107, 
       1389,   200,     0,     0,   203,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   -15,     0,     0,  -113,     0,  -113, 
          0,     0,     0,     0,     0,     0,  -111,  -110,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   265,     0,     0, 
          0,     0,   269,     0,     0,     0,   288,     0,     0,     0, 
          0,     0,   288,     0,     0,     0,     0,     0,     0,     0, 
        -37,     0,     0,     0,     0,     0,   271,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   297,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   214, 
          0,     0,   744,   767,   252,   798,   821,   852,   875,     0, 
         70,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,  -242,     0,     0,   -13,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   -13,     2,     0,     0,   314,     0,     0,     0,    98, 
          0,     0,   906,   929,   960,   987,   996,  1149,     0,  1203, 
       1257,  1284,  1312,  1369,     0,     0,     0,     0,     0,     0, 
        252,     0,     0,     0,     0,     0,     0,     0,   231,     0, 
        313,     0,   231,     0,     0,     0,     0,     0,     0,     0, 
          0,   287,   -10,   125,   314,     0,     0,    70,     0,     0, 
        231,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    70,   289,     0,     0,     0, 
       1378,     0,     0,   314,     0,     0,   313,     0,     0,     0, 
          0,     0,     0,     0,   314,    43,     0,     0,     0,     0, 
          0,  1447,     0,  1409,     0,     0,     0,     0,  1541,     0, 
       -113,    70,    70,     0,     0,     0,     0,     0,   314,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   231,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   231,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,    19,     0,    39,     0,     0,   -31,     0,     0,    30, 
          0,   311,   333,     0,     0,   316,     0,   -52,  1838,     0, 
        303,     0,   232,   191,     0,     0,  -134,   253,     0,   -11, 
          0,     0,   -53,     0,     0,   944,     0,     0,     0,     0, 
          0,     0,     0,   140,     0,   139,     0,     0,     0,     0, 
          0,  1837,     0,  -109,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,  -160,     0,     0,   196,   404,     0, 
    );
    protected static $yyTable = array(88,
        154,   156,   177,    88,    88,    88,    88,    88,    49,    88, 
         80,    15,    67,    18,    29,     7,    19,   101,    10,   224, 
         88,    88,    88,    88,    88,    88,   141,   118,    19,    19, 
        141,   141,   141,   141,   141,   148,   141,   149,    27,    13, 
         14,    15,   147,   154,   232,    43,   154,   141,   141,   141, 
        141,   141,   141,   152,    20,    88,    22,    37,   269,   270, 
        147,    39,    31,   224,    19,    55,    57,   171,   130,    26, 
         50,   156,   156,   156,    23,    24,    51,    23,   240,    13, 
        141,    53,   141,    13,    13,    13,    13,    13,    51,    13, 
         28,    34,    68,    69,   147,    70,   255,    99,    52,    52, 
         13,    13,    13,    13,    13,    13,   137,   154,   231,    43, 
        137,   137,   137,   137,   137,   105,   137,    32,   253,    38, 
         40,   105,    41,    42,    66,    54,    71,   137,   137,   137, 
        137,   137,   137,    13,   138,    13,   263,    59,   138,   138, 
        138,   138,   138,    72,   138,    74,   156,    78,   156,   156, 
         75,    68,   104,    67,   214,   138,   138,   138,   138,   138, 
        138,   144,   137,   109,   305,   144,   144,   144,   144,   144, 
        181,   144,   296,   297,   121,   158,   159,   160,   162,   169, 
        316,   172,   144,   144,   144,   144,   144,   144,   139,   204, 
        138,   205,   211,   137,   135,   212,   136,   105,   138,   216, 
        217,   220,   223,     7,   276,   225,   156,   228,   279,   156, 
        170,   148,   134,   149,   140,   139,   156,   144,   156,   182, 
        137,   135,   241,   136,   229,   138,   246,    79,   249,   254, 
        252,   256,   257,   260,   230,   259,   264,   139,   148,   134, 
        149,   140,   137,   135,   219,   136,   214,   138,   308,   295, 
        214,   266,   311,   268,   278,   283,   281,   270,   314,   139, 
        148,   134,   149,   140,   137,   135,    64,   136,   269,   138, 
        289,    62,    60,   152,    61,   152,    63,   152,   291,   292, 
        226,   139,   148,   134,   149,   140,   137,   135,   294,   136, 
        214,   138,   152,   152,   214,   152,   298,   299,   301,   157, 
        214,   303,   306,   234,   148,   134,   149,   140,   139,   307, 
        309,   310,   317,   137,   135,   312,   136,   313,   138,   155, 
        178,   315,    11,    27,   152,     9,    88,    22,    37,    28, 
        237,   148,   134,   149,   140,   139,   304,    39,    52,   258, 
        137,   135,   158,   136,   145,   138,     1,     2,     3,     4, 
          5,     6,     7,   141,   145,    50,   152,    56,   148,   134, 
        149,   140,    88,    88,    88,    88,    88,    88,    88,    88, 
         88,   145,   152,    88,    88,   151,   150,   146,   147,    86, 
         58,    87,   158,   158,   158,   122,   152,   153,    81,   141, 
        141,   141,   141,   141,   141,   141,   141,   141,   141,   139, 
        141,   141,   158,   218,   137,   135,    13,   136,   244,   138, 
        287,   207,   158,   288,   245,    17,     0,     0,     0,     0, 
          0,     0,   148,   134,   149,   140,     0,     0,     0,     0, 
          0,     0,     0,   137,     0,     0,     0,     0,     0,     0, 
          0,     0,    13,    13,    13,    13,    13,    13,    13,    13, 
         13,    13,     0,    13,    13,     0,     0,     0,     0,     0, 
          0,   138,     0,     0,     0,     0,     0,     0,     0,   137, 
        137,   137,   137,   137,   137,   137,   137,   137,     0,     0, 
        137,   137,     0,     0,     0,     0,     0,     0,   144,     0, 
          0,     0,     0,   152,     0,     0,     0,   138,   138,   138, 
        138,   138,   138,   138,   138,   138,     0,     0,   138,   138, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   144,   144,   144,   144,   144,   144, 
        144,   144,   144,     0,     0,   144,   144,     0,     0,     0, 
          0,     0,     0,   152,   152,     0,     0,     0,     0,     0, 
          0,   151,   150,   146,   147,   141,   142,   143,   144,   145, 
          0,     0,   152,   153,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   152,     0,     0,     0,     0,   151,   150, 
        146,   147,   141,   142,   143,   144,   145,     0,     0,   152, 
        153,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        151,   150,   146,   147,   141,   142,   143,   144,   145,     0, 
          0,   152,   153,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   151,   150,   146,   147,   141,   142,   143,   144, 
        145,     0,     0,   152,   153,     0,     0,     0,     0,     0, 
          0,     0,     0,   152,   151,   150,   146,   147,   141,   142, 
        143,   144,   145,     0,     0,   152,   153,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   151,   150,   146,   147,   141,   142,   143,   144,   145, 
          0,     0,   152,   153,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   151,   150, 
        146,   147,   141,   142,   143,   144,   145,   139,     0,   152, 
        153,   262,   137,   135,     0,   136,     0,   138,     0,     0, 
          0,     0,     0,     0,     0,     0,   261,     0,     0,     0, 
        148,   134,   149,   140,   139,     0,     0,     0,   290,   137, 
        135,     0,   136,     0,   138,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   148,   134,   149, 
        140,     0,   151,   150,   146,   147,   141,   142,   143,   144, 
        145,   139,     0,   152,   153,     0,   137,   135,     0,   136, 
        131,   138,     0,     0,   131,   131,   131,   131,   131,     0, 
        131,     0,     0,     0,   148,   134,   149,   140,     0,     0, 
          0,   131,   131,   132,   131,     0,   131,   132,   132,   132, 
        132,   132,     0,   132,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   132,   132,     0,   132,     0,   132, 
          0,     0,     0,     0,   129,     0,   131,     0,   129,   129, 
        129,   129,   129,     0,   129,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   129,   129,   130,   129,   132, 
        129,   130,   130,   130,   130,   130,     0,   130,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   130,   130, 
          0,   130,     0,   130,     0,     0,     0,     0,   133,     0, 
        129,     0,   133,   133,   133,   133,   133,     0,   133,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   133, 
        133,   134,   133,   130,   133,   134,   134,   134,   134,   134, 
          0,   134,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   134,   134,     0,   134,     0,   134,     0,     0, 
          0,     0,   112,     0,   133,     0,   112,   112,   112,   112, 
        112,     0,   112,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   112,   112,   124,   112,   134,   112,   124, 
        124,   124,   124,   124,     0,   124,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   124,   124,     0,   124, 
          0,   124,     0,     0,     0,     0,   125,     0,   112,     0, 
        125,   125,   125,   125,   125,     0,   125,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   125,   125,     0, 
        125,   124,   125,   126,     0,     0,     0,   126,   126,   126, 
        126,   126,   127,   126,     0,     0,   127,   127,   127,   127, 
        127,     0,   127,     0,   126,   126,     0,   126,     0,   126, 
          0,     0,   125,   127,   127,     0,   127,     0,   127,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        151,   150,   146,   147,   141,   142,   143,   144,   145,   126, 
          0,   152,   153,     0,     0,     0,     0,     0,   127,     0, 
          0,     0,     0,     0,     0,     0,     0,   151,   150,   146, 
        147,   141,   142,   143,   144,   145,     0,   131,   152,   153, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   221, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        132,     0,     0,     0,   151,   150,   146,   147,   141,   142, 
        143,   144,   145,     0,   227,   152,   153,   131,   131,   131, 
        131,   131,     0,     0,   238,    87,     0,     0,     0,     0, 
          0,   129,    96,     0,     0,    84,     0,    85,   250,     0, 
        132,   132,   132,   132,   132,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   130,   128,     0,     0,     0,   128, 
        128,   128,   128,   128,     0,   128,     0,   267,     0,     0, 
        275,   129,   129,   129,   129,   129,   128,   128,   280,   128, 
          0,   128,     0,    86,     0,   133,     0,     0,     0,     0, 
          0,     0,     0,     0,   130,   130,   130,   130,   130,     0, 
          0,     0,   300,     0,     0,     0,     0,     0,   134,   113, 
          0,   128,     0,   113,   113,   113,   113,   113,    88,   113, 
          0,     0,     0,     0,     0,   133,   133,   133,   133,   133, 
        113,   113,     0,   113,     0,   113,     0,     0,     0,   112, 
          0,     0,     0,     0,     0,     0,     0,     0,   134,   134, 
        134,   134,   134,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   124,   114,     0,   113,     0,   114,   114,   114, 
        114,   114,     0,   114,     0,     0,     0,     0,     0,   112, 
        112,   112,   112,   112,   114,   114,     0,   114,     0,   114, 
        115,     0,     0,   125,   115,   115,   115,   115,   115,     0, 
        115,     0,   124,   124,   124,   124,   124,     0,     0,     0, 
          0,   115,   115,     0,   115,     0,   115,     0,   116,   114, 
        126,     0,   116,   116,   116,   116,   116,     0,   116,   127, 
          0,     0,     0,   125,   125,   125,   125,   125,     0,   116, 
        116,     0,   116,     0,   116,     0,   115,     0,     0,     0, 
          0,     0,    91,    92,    93,     0,     0,     0,     0,     0, 
        126,   126,   126,   126,   126,     0,     0,     0,     0,   127, 
        127,   127,   127,   127,   116,   117,     0,     0,     0,   117, 
        117,   117,   117,   117,   111,   117,     0,     0,   111,   111, 
        111,   111,   111,     0,   111,     0,   117,   117,   149,   117, 
        149,   117,   149,     0,     0,   111,   111,     0,   111,     0, 
        111,    78,     0,     0,     0,     0,     0,   149,    78,     0, 
        149,    78,     0,    78,     0,     0,     0,     0,     0,     0, 
          0,   117,    94,   110,   111,   112,     0,     0,    95,     0, 
        111,     0,     0,     0,     0,     0,     0,     0,     0,    82, 
          0,     0,   113,   114,   115,   116,    82,     0,     0,    82, 
          0,    82,   117,     0,     0,     0,     0,     0,     0,    78, 
          0,     0,     0,     0,     0,     0,    87,     0,     0,     0, 
          0,   149,   128,    96,     0,     0,    84,     0,    85,     0, 
          0,     0,     0,     0,    89,    90,     0,     0,    87,     0, 
          0,     0,     0,    78,    78,    96,     0,    82,    84,     0, 
         85,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   128,   128,   128,   128,   128,     0,     0,     0, 
          0,     0,     0,     0,    86,     0,   113,     0,     0,     0, 
          0,    82,    82,    73,     0,     0,     0,     0,     0,     0, 
         73,     0,     0,    73,     0,    73,    86,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    88, 
          0,     0,     0,     0,     0,     0,   113,   113,   113,   113, 
        113,     0,     0,     0,     0,     0,     0,     0,   213,     0, 
        114,    88,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    73,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   115,   149,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        114,   114,   114,   114,   114,    73,    73,     0,    78,    78, 
         78,     0,     0,     0,     0,   116,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   115,   115,   115, 
        115,   115,     0,     0,     0,     0,     0,     0,   149,   149, 
          0,     0,     0,     0,     0,     0,    82,    82,    82,     0, 
          0,     0,     0,     0,     0,   116,   116,   116,   116,   116, 
          0,     0,     0,     0,     0,     0,     0,     0,   149,     0, 
          0,     0,   117,    91,    92,    93,     0,     0,     0,     0, 
          0,   111,     0,     0,     0,     0,     0,     0,    78,    78, 
         78,    78,     0,    78,    78,    91,    92,    93,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    78,    78, 
         78,    78,   117,   117,   117,   117,   117,     0,    78,    78, 
          0,   111,   111,   111,   111,   111,    82,    82,    82,    82, 
          0,     0,    82,     0,     0,     0,     0,     0,     0,     0, 
         73,    73,    73,     0,     0,     0,    82,    82,    82,    82, 
         78,    78,     0,    94,     0,     0,    82,    82,     0,    95, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    94,   110,   111,   112,     0, 
          0,    95,     0,     0,     0,     0,     0,     0,    82,    82, 
          0,     0,    21,     0,    21,   113,   114,   115,   116,    30, 
         21,     0,     0,    21,    21,   117,     0,     0,    21,     0, 
          0,     0,     0,     0,     0,    89,    90,    21,     0,    21, 
         73,    73,    73,    73,     0,     0,    73,     0,     0,     0, 
          0,    21,     0,    21,     0,     0,     0,    89,    90,     0, 
         73,    73,    73,    73,     0,     0,     0,     0,     0,     0, 
         73,     0,    97,    21,     0,     0,     0,     0,     0,    21, 
          0,   123,   124,     0,   126,   127,   128,   129,     0,     0, 
          0,     0,     0,   133,     0,     0,     0,     0,     0,     0, 
          0,     0,    73,    73,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   173,     0,     0,     0,     0,     0,    21,     0, 
          0,   183,   184,   185,   186,   187,   188,   189,   190,   191, 
        192,   193,   194,     0,     0,   195,   196,   197,   198,   199, 
        200,     0,     0,     0,     0,    21,     0,     0,   208,     0, 
        210,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   173,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   173,     0, 
          0,    21,     0,     0,     0,     0,     0,     0,   173,   239, 
          0,     0,     0,   242,   243,     0,   173,     0,     0,   247, 
          0,     0,   173,   251,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   173,     0,     0,   173,     0,     0,   277,     0,     0, 
          0,     0,   173,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   173,     0,     0,     0, 
          0,     0,     0,     0,    21, 
    );
    protected static $yyCheck = array(37,
         91,    42,    91,    41,    42,    43,    44,    45,    40,    47, 
        123,   125,   260,   125,   125,   123,   260,   260,     0,   180, 
         58,    59,    60,    61,    62,    63,    37,    80,   260,   260, 
         41,    42,    43,    44,    45,    60,    47,    62,    60,   300, 
        301,   302,    41,    59,    59,    59,    62,    58,    59,    60, 
         61,    62,    63,    91,    16,    93,    18,    28,   344,   345, 
         59,    32,    24,   224,   260,    47,    48,   120,    40,    91, 
         41,   300,   301,   302,    46,   310,   320,    46,   213,    37, 
         91,    43,    93,    41,    42,    43,    44,    45,   320,    47, 
        310,    93,   340,    55,    93,    57,   231,   340,   330,   330, 
         58,    59,    60,    61,    62,    63,    37,   123,   123,   123, 
         41,    42,    43,    44,    45,    77,    47,   311,   228,   123, 
        123,    83,    44,    62,   340,   125,    40,    58,    59,    60, 
         61,    62,    63,    91,    37,    93,   246,   125,    41,    42, 
         43,    44,    45,   260,    47,    40,   260,   260,   260,   260, 
         61,   340,    59,   260,   166,    58,    59,    60,    61,    62, 
         63,    37,    93,    40,   299,    41,    42,    43,    44,    45, 
        132,    47,   282,   283,    59,    41,    44,    41,   123,   125, 
        315,    41,    58,    59,    60,    61,    62,    63,    37,   340, 
         93,   321,    40,    42,    43,    40,    45,   159,    47,    40, 
         40,    93,   260,   311,   258,    40,   320,   340,   262,   320, 
         59,    60,    61,    62,    63,    37,   330,    93,   330,    41, 
         42,    43,   361,    45,   260,    47,    41,   340,    40,    40, 
         93,   125,    59,    40,   205,   125,    93,    37,    60,    61, 
         62,    63,    42,    43,    44,    45,   258,    47,   302,   281, 
        262,    41,   306,   125,   340,    41,   123,   345,   312,    37, 
         60,    61,    62,    63,    42,    43,    37,    45,   344,    47, 
         59,    42,    43,    40,    45,    42,    47,    44,    61,   371, 
         58,    37,    60,    61,    62,    63,    42,    43,    41,    45, 
        302,    47,    59,    60,   306,    62,    40,   123,    62,   340, 
        312,   125,    41,    59,    60,    61,    62,    63,    37,   340, 
        340,   125,   125,    42,    43,    41,    45,    41,    47,   410, 
        409,   123,   123,    59,    91,   123,   364,    59,    41,    59, 
         59,    60,    61,    62,    63,    37,   298,    41,   125,    41, 
         42,    43,   260,    45,    93,    47,   280,   281,   282,   283, 
        284,   285,   286,   364,    41,   125,   123,    47,    60,    61, 
         62,    63,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    59,   410,   411,   412,   400,   401,   402,   403,    93, 
         48,    93,   300,   301,   302,    83,   411,   412,    73,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   409,    37, 
        411,   412,   320,   172,    42,    43,   364,    45,   218,    47, 
        272,   159,   330,   274,   219,    12,    -1,    -1,    -1,    -1, 
         -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   364,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   409,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1, 
         -1,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,    -1,    -1,    -1,    -1,    -1,   364,    -1, 
         -1,    -1,    -1,   260,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,    -1,    -1, 
         -1,    -1,    -1,   310,   311,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   410,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    37,    -1,   411, 
        412,    41,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   364,    -1,    -1,    -1, 
         60,    61,    62,    63,    37,    -1,    -1,    -1,    41,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62, 
         63,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    37,    -1,   411,   412,    -1,    42,    43,    -1,    45, 
         37,    47,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1, 
         -1,    58,    59,    37,    61,    -1,    63,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,    -1,    37,    -1,    93,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    37,    61,    93, 
         63,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    37,    -1, 
         93,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    37,    61,    93,    63,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    37,    -1,    93,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    37,    61,    93,    63,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    37,    -1,    93,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    93,    63,    37,    -1,    -1,    -1,    41,    42,    43, 
         44,    45,    37,    47,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    93,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    93, 
         -1,   411,   412,    -1,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,   364,   411,   412, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        364,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,   201,   411,   412,   404,   405,   406, 
        407,   408,    -1,    -1,   211,    33,    -1,    -1,    -1,    -1, 
         -1,   364,    40,    -1,    -1,    43,    -1,    45,   225,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   364,    37,    -1,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,   254,    -1,    -1, 
        257,   404,   405,   406,   407,   408,    58,    59,   265,    61, 
         -1,    63,    -1,    91,    -1,   364,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,   364,    37, 
         -1,    93,    -1,    41,    42,    43,    44,    45,   126,    47, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,   364, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   364,    37,    -1,    93,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    58,    59,    -1,    61,    -1,    63, 
         37,    -1,    -1,   364,    41,    42,    43,    44,    45,    -1, 
         47,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    37,    93, 
        364,    -1,    41,    42,    43,    44,    45,    -1,    47,   364, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    93,    -1,    -1,    -1, 
         -1,    -1,   260,   261,   262,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    93,    37,    -1,    -1,    -1,    41, 
         42,    43,    44,    45,    37,    47,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    58,    59,    40,    61, 
         42,    63,    44,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    33,    -1,    -1,    -1,    -1,    -1,    59,    40,    -1, 
         62,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,   340,   341,   342,   343,    -1,    -1,   346,    -1, 
         93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33, 
         -1,    -1,   360,   361,   362,   363,    40,    -1,    -1,    43, 
         -1,    45,   370,    -1,    -1,    -1,    -1,    -1,    -1,    91, 
         -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1, 
         -1,   123,   364,    40,    -1,    -1,    43,    -1,    45,    -1, 
         -1,    -1,    -1,    -1,   402,   403,    -1,    -1,    33,    -1, 
         -1,    -1,    -1,   125,   126,    40,    -1,    91,    43,    -1, 
         45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    91,    -1,   364,    -1,    -1,    -1, 
         -1,   125,   126,    33,    -1,    -1,    -1,    -1,    -1,    -1, 
         40,    -1,    -1,    43,    -1,    45,    91,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1, 
        364,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,   260,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,   125,   126,    -1,   260,   261, 
        262,    -1,    -1,    -1,    -1,   364,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,    -1,    -1,   310,   311, 
         -1,    -1,    -1,    -1,    -1,    -1,   260,   261,   262,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,    -1, 
         -1,    -1,   364,   260,   261,   262,    -1,    -1,    -1,    -1, 
         -1,   364,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341, 
        342,   343,    -1,   345,   346,   260,   261,   262,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361, 
        362,   363,   404,   405,   406,   407,   408,    -1,   370,   371, 
         -1,   404,   405,   406,   407,   408,   340,   341,   342,   343, 
         -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        260,   261,   262,    -1,    -1,    -1,   360,   361,   362,   363, 
        402,   403,    -1,   340,    -1,    -1,   370,   371,    -1,   346, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   340,   341,   342,   343,    -1, 
         -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403, 
         -1,    -1,    16,    -1,    18,   360,   361,   362,   363,    23, 
         24,    -1,    -1,    27,    28,   370,    -1,    -1,    32,    -1, 
         -1,    -1,    -1,    -1,    -1,   402,   403,    41,    -1,    43, 
        340,   341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1, 
         -1,    55,    -1,    57,    -1,    -1,    -1,   402,   403,    -1, 
        360,   361,   362,   363,    -1,    -1,    -1,    -1,    -1,    -1, 
        370,    -1,    75,    77,    -1,    -1,    -1,    -1,    -1,    83, 
         -1,    84,    85,    -1,    87,    88,    89,    90,    -1,    -1, 
         -1,    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,   132,    -1, 
         -1,   134,   135,   136,   137,   138,   139,   140,   141,   142, 
        143,   144,   145,    -1,    -1,   148,   149,   150,   151,   152, 
        153,    -1,    -1,    -1,    -1,   159,    -1,    -1,   161,    -1, 
        163,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,    -1, 
         -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,   211,   212, 
         -1,    -1,    -1,   216,   217,    -1,   219,    -1,    -1,   222, 
         -1,    -1,   225,   226,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   254,    -1,    -1,   257,    -1,    -1,   260,    -1,    -1, 
         -1,    -1,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   298, 
    );
    protected static $yyFinal= 8;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 'T_FINAL', 
      'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_EXTENDS', 'T_IMPLEMENTS', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PROPERTY', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_AS', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 'T_OBJECT_OPERATOR', 
      'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 2:  #line 109 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
        $yyVals[-6+$yyTop]->name= $yyVals[-5+$yyTop];
        $yyVals[-6+$yyTop]->parent= $yyVals[-4+$yyTop];
        $yyVals[-6+$yyTop]->implements= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
        $yyVal= $yyVals[-6+$yyTop];
      } break;

    case 3:  #line 117 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 4:  #line 117 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
        $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
        $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
        $yyVal= $yyVals[-6+$yyTop];
      } break;

    case 5:  #line 127 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ClassNode()); } break;

    case 6:  #line 128 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new EnumNode()); } break;

    case 7:  #line 132 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 8:  #line 133 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 9:  #line 137 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 10:  #line 138 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 11:  #line 142 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 12:  #line 143 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 13:  #line 147 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 14:  #line 148 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 15:  #line 152 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 16:  #line 153 "grammar/xp.jay"
    { $yyVal['fields']= $yyVals[0+$yyTop]; } break;

    case 17:  #line 154 "grammar/xp.jay"
    { $yyVal['methods']= $yyVals[0+$yyTop]; } break;

    case 18:  #line 160 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 19:  #line 161 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 20:  #line 165 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
        $yyVal->modifiers= $yyVals[-4+$yyTop];
        $yyVal->type= $yyVals[-3+$yyTop];
        $yyVal->name= $yyVals[-2+$yyTop];
        $yyVal->initialization= $yyVals[-1+$yyTop];
      } break;

    case 21:  #line 171 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
        $yyVal->modifiers= $yyVals[-5+$yyTop];
        $yyVal->name= $yyVals[-3+$yyTop];
        $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
        $yyVal->get= $gs['get'];
        $yyVal->set= $gs['set'];
      } break;

    case 22:  #line 181 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 24:  #line 186 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 25:  #line 187 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 26:  #line 188 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 27:  #line 192 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 28:  #line 193 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 29:  #line 199 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 30:  #line 200 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 31:  #line 204 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 32:  #line 204 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
        $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
      } break;

    case 33:  #line 213 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 34:  #line 213 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 35:  #line 224 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 36:  #line 225 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 37:  #line 229 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 230 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 39:  #line 234 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 40:  #line 235 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 41:  #line 239 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-1+$yyTop]); } break;

    case 42:  #line 240 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 43:  #line 244 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 44:  #line 245 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 50:  #line 261 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 266 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 53:  #line 267 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 54:  #line 271 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 55:  #line 271 "grammar/xp.jay"
    { 
        $yyVal->expression= $yyVals[-1+$yyTop];
      } break;

    case 56:  #line 274 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 57:  #line 274 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
      } break;

    case 58:  #line 279 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 59:  #line 279 "grammar/xp.jay"
    {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
        $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
        $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 60:  #line 285 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 61:  #line 285 "grammar/xp.jay"
    {
        $yyVals[-10+$yyTop]->expression= $yyVals[-7+$yyTop];
        $yyVals[-10+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 62:  #line 289 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 63:  #line 289 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
        $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 64:  #line 293 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 65:  #line 293 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
      } break;

    case 66:  #line 297 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 67:  #line 297 "grammar/xp.jay"
    { 
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
        $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-4+$yyTop]; 
      } break;

    case 68:  #line 302 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 69:  #line 302 "grammar/xp.jay"
    { /* Throw statement */ 
        $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
      } break;

    case 71:  #line 309 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 72:  #line 310 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 73:  #line 314 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 74:  #line 315 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 75:  #line 315 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 76:  #line 320 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 77:  #line 321 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 78:  #line 325 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 79:  #line 326 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 80:  #line 330 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 81:  #line 330 "grammar/xp.jay"
    {
        $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
        $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
        $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
      } break;

    case 82:  #line 338 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 84:  #line 343 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 85:  #line 343 "grammar/xp.jay"
    {
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      } break;

    case 86:  #line 351 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 88:  #line 356 "grammar/xp.jay"
    { /* XXX Constant */ } break;

    case 89:  #line 357 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 90:  #line 357 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 91:  #line 361 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 92:  #line 361 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= new TypeName($yyVals[-4+$yyTop]);
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 93:  #line 366 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 94:  #line 367 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 95:  #line 368 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 96:  #line 368 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 97:  #line 371 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InstanceCreationNode()); } break;

    case 98:  #line 371 "grammar/xp.jay"
    { 
      $yyVals[-7+$yyTop]->type= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-7+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 99:  #line 376 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 100:  #line 376 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 101:  #line 381 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 102:  #line 381 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 103:  #line 387 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 104:  #line 387 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 105:  #line 393 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 106:  #line 394 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); } break;

    case 107:  #line 395 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); } break;

    case 108:  #line 396 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); } break;

    case 109:  #line 397 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); } break;

    case 110:  #line 398 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); $yyVal->postfix= TRUE; } break;

    case 111:  #line 399 "grammar/xp.jay"
    { /* XXX Ternary */ } break;

    case 112:  #line 403 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 113:  #line 404 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 114:  #line 405 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 115:  #line 406 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 116:  #line 407 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 117:  #line 408 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 118:  #line 412 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 119:  #line 413 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 120:  #line 414 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 121:  #line 415 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 122:  #line 416 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 123:  #line 417 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 124:  #line 421 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 125:  #line 422 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 126:  #line 423 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 127:  #line 424 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 128:  #line 425 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 129:  #line 429 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 130:  #line 430 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 131:  #line 431 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 132:  #line 432 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 133:  #line 433 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 134:  #line 434 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 135:  #line 438 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 136:  #line 439 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 137:  #line 444 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 139:  #line 449 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 140:  #line 449 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 141:  #line 452 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 142:  #line 456 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 143:  #line 456 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 144:  #line 460 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 145:  #line 464 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 147:  #line 469 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 148:  #line 470 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 149:  #line 476 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 150:  #line 477 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 151:  #line 478 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 152:  #line 482 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 153:  #line 483 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 154:  #line 487 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 155:  #line 488 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 156:  #line 494 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 157:  #line 495 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 158:  #line 499 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 159:  #line 500 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 160:  #line 504 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 161:  #line 505 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 162:  #line 506 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 163:  #line 507 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 164:  #line 508 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 165:  #line 509 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 166:  #line 510 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1448 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
