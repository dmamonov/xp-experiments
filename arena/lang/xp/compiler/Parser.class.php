<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.InstanceOfNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.SwitchNode',
    'xp.compiler.ast.CaseNode',
    'xp.compiler.ast.DefaultNode',
    'xp.compiler.ast.BreakNode',
    'xp.compiler.ast.ContinueNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 60 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_MOD_EQUAL= 408;
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_INSTANCEOF= 312;
    const T_INC= 402;
    const T_DEC= 403;
    const T_SE= 401;
    const T_GE= 400;
    const T_OBJECT_OPERATOR= 409;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_PROPERTY= 330;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_NEW= 346;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          9,     9,     9,     4,     4,    12,     3,    16,     3,    18, 
          3,    13,    13,    14,    14,    19,    19,    21,    21,    15, 
         15,    22,    22,    22,    17,    17,    17,    26,    26,    28, 
         27,    29,    27,    23,    23,    34,    34,    33,    33,    33, 
         32,    32,    37,    24,    40,    24,    42,    24,    10,    10, 
         43,    43,    45,    45,    45,    39,    39,    36,    36,    48, 
         48,    49,    49,    38,    38,    41,    41,    41,    41,    41, 
         41,    41,    41,    25,    25,    35,    35,    51,    50,    52, 
         50,    55,    50,    57,    50,    58,    50,    59,    50,    60, 
         50,    62,    50,    64,    50,    65,    50,    66,    50,    50, 
         50,    61,    61,    67,    67,    69,    68,    70,    68,    53, 
         53,    54,    71,    54,    63,    63,    72,    72,    76,    75, 
         73,    73,    77,    74,    56,    56,    78,    78,    46,    46, 
         79,    79,    80,    80,    80,    30,    83,    30,    84,    30, 
         85,    30,    86,    30,    30,    30,    30,    30,    30,    30, 
         30,    30,    30,    30,    81,    81,    92,    81,    81,    81, 
         81,    81,    81,    93,    93,    47,    47,    94,    87,    87, 
         87,    87,    87,    87,    88,    88,    88,    88,    88,    88, 
         89,    89,    89,    89,    89,    89,    90,    90,    90,    90, 
         90,    90,    91,    91,    82,    82,    95,    95,    97,    96, 
         96,    98,    96,    31,    31,    11,    11,    99,   100,   100, 
        101,   101,    20,    20,    44,    44,   102,   102,   103,   103, 
        103,   103,   103,   103,   103,   103, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     6, 
          1,     1,     3,     1,     3,     0,     9,     0,     9,     0, 
          8,     0,     2,     0,     2,     0,     2,     0,     3,     2, 
          0,     1,     1,     4,     3,     1,     0,     1,     3,     0, 
          3,     0,     6,     5,     6,     0,     1,     2,     4,     4, 
          0,     2,     0,     9,     0,     8,     0,    10,     4,     1, 
          1,     3,     2,     5,     5,     1,     3,     0,     1,     1, 
          3,     3,     3,     0,     2,     1,     1,     1,     1,     1, 
          1,     2,     3,     0,     1,     1,     2,     0,     4,     0, 
          7,     0,    10,     0,     8,     0,     6,     0,     7,     0, 
          8,     0,     6,     0,     3,     0,     3,     0,     4,     2, 
          1,     0,     1,     1,     2,     0,     5,     0,     4,     1, 
          3,     0,     0,     3,     2,     1,     1,     2,     0,     9, 
          0,     1,     0,     5,     0,     1,     1,     3,     0,     1, 
          5,     6,     1,     1,     4,     1,     0,     3,     0,     4, 
          0,     5,     0,     6,     3,     1,     1,     1,     1,     1, 
          5,     3,     3,     3,     1,     3,     0,     4,     3,     1, 
          1,     1,     1,     0,     1,     1,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     2,     2,     2,     2, 
          2,     2,     2,     2,     0,     1,     1,     2,     0,     4, 
          2,     0,     6,     1,     1,     1,     4,     3,     1,     3, 
          1,     3,     1,     3,     0,     1,     1,     2,     1,     1, 
          1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   229,   231,   230,   232,   234,   233,   235,   236, 
          1,     0,    60,   226,     0,     8,     0,     4,     0,     0, 
          0,     0,    16,    20,    18,   228,    15,     0,     0,     0, 
          0,     0,     0,     0,    12,     0,     0,     0,    59,    62, 
          0,     0,     0,     0,     0,    10,     0,     0,   167,     0, 
          0,     0,     0,     0,   173,   170,   172,   171,   147,   149, 
          0,     0,     0,     0,     0,     0,   146,   156,   157,   158, 
        159,   160,     0,     0,     0,     0,     0,     0,     0,    13, 
          0,     0,     0,     0,     0,     0,     0,   153,     0,     0, 
          0,   175,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   203,   204,     0,     0,     0,     0,     0,     0,     0, 
         64,    65,     0,     0,     0,   214,   221,   215,     0,     0, 
         23,     0,     0,     0,    27,    31,     0,     0,     0,   136, 
          0,   209,     0,   148,   206,     0,     0,     0,     0,   169, 
        155,   166,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   164,     0,     0,     0,     0,     0, 
        185,   186,   187,   188,   189,   190,     0,   177,     0,     0, 
        217,     0,    25,    31,     0,     0,     0,     0,   168,     0, 
          0,     0,   208,     0,     0,   150,     0,   144,     0,     0, 
        222,   218,   220,     0,   224,     0,    21,     0,    30,    32, 
         33,     0,     0,     0,     0,   138,     0,     0,   212,     0, 
          0,     0,   152,     0,    17,     0,     0,     0,     0,     0, 
          0,    19,    31,     0,   154,   210,     0,     0,     0,     0, 
         88,     0,   108,    92,    96,    98,    94,   104,   106,    90, 
        100,   111,     0,     0,    85,     0,    55,     0,     0,     0, 
          0,    31,    41,     0,     0,    39,     0,     0,   141,   145, 
          0,   102,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    34,   110,    87,     0,     0,     0,    53,    80,    76, 
         77,    78,    79,     0,    81,     0,     0,     0,     0,     0, 
        213,   142,     0,     0,     0,     0,     0,     0,   120,     0, 
          0,   105,   107,     0,     0,     0,     0,    69,     0,     0, 
         48,     0,    47,     0,     0,    82,     0,    57,     0,    44, 
         29,     0,    89,     0,   109,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    45, 
          0,    83,     0,    43,     0,     0,     0,   121,     0,     0, 
          0,     0,    73,    72,     0,     0,    71,    49,    50,     0, 
          0,   129,   133,   103,     0,   126,     0,     0,    97,     0, 
          0,     0,     0,    75,    66,     0,    56,     0,     0,     0, 
          0,   125,   132,   128,     0,    99,     0,   123,    91,   116, 
        118,     0,   113,     0,     0,    54,     0,     0,     0,     0, 
         95,     0,     0,     0,   101,   115,    67,    58,     0,     0, 
          0,   124,     0,     0,     0,   134,    93,     0,   119,     0, 
        117,     0,     0,   130, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    21,    73,     4,     7,     8,    11,    47,   218, 
        136,    42,    86,   143,   196,    44,   223,    43,    88,   145, 
        273,   219,   220,   221,   263,   224,   225,   240,   241,   264, 
        326,   308,   297,   334,   265,   327,   335,   376,   397,   295, 
        306,   363,    31,    23,    32,    75,   102,   328,   329,   266, 
        281,   290,   320,   409,   284,   149,   287,   285,   286,   291, 
        412,   314,   384,   288,   289,   283,   413,   414,   423,   424, 
        422,   385,   402,   386,   387,   400,   401,   150,   159,   209, 
         77,   154,    99,   100,   163,   151,    78,    79,    80,    81, 
         82,    93,   103,    83,   155,   156,   201,   247,   138,   139, 
        140,    24,    25, 
    );
    protected static $yySindex = array(         -266,
          0,     0,  -245,  -183,     0,   241,     0,  -245,    41,    40, 
       -131,    95,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,  -240,     0,     0,   174,     0,  -183,     0,   127,  -183, 
         87,   145,     0,     0,     0,     0,     0,   -31,   173,   174, 
         95,  -183,  -183,  -183,     0,   172,   198,    60,     0,     0, 
        203,   -37,   -36,   -37,   -31,     0,    60,    60,     0,    60, 
         60,    60,    60,   163,     0,     0,     0,     0,     0,     0, 
         60,    60,  -152,   585,   234,   239,     0,     0,     0,     0, 
          0,     0,   237,   -56,  -183,   -23,  -183,   166,   -23,     0, 
        107,   107,    60,   102,   102,   102,   102,     0,   -73,  -183, 
        585,     0,   165,   645,    -3,    60,    60,    60,    60,    60, 
         60,    60,    60,    60,    60,  -183,    60,    60,    60,    60, 
         60,     0,     0,    60,    60,    60,    60,    60,    60,    60, 
          0,     0,    60,   -16,    -7,     0,     0,     0,   236,   252, 
          0,  -183,   184,   270,     0,     0,   187,   672,   222,     0, 
         60,     0,    56,     0,     0,   -73,    96,   290,   -73,     0, 
          0,     0,  -206,  1489,  1489,  1269,   282,  1489,  1489,  1489, 
       1489,  1489,  1489,  1489,     0,   107,   107,   102,   102,   102, 
          0,     0,     0,     0,     0,     0,  1269,     0,  -183,   248, 
          0,   -56,     0,     0,  -183,   139,    82,    60,     0,   302, 
         60,   312,     0,   261,    60,     0,   316,     0,   -73,    60, 
          0,     0,     0,   327,     0,   235,     0,  -217,     0,     0, 
          0,     0,   232,   310,   317,     0,   -73,   277,     0,   258, 
        347,    60,     0,  1489,     0,  2657,   216,    49,  -204,   267, 
        354,     0,     0,    82,     0,     0,    60,    60,   267,   355, 
          0,   272,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   273,   700,     0,  2657,     0,   137,   359,    72, 
        340,     0,     0,    60,   415,     0,   361,   278,     0,     0, 
         60,     0,    60,   364,   367,  2704,   368,   350,   351,   371, 
        372,     0,     0,     0,  -183,   -95,   137,     0,     0,     0, 
          0,     0,     0,   -52,     0,   375,    60,   357,   442,   727, 
          0,     0,   377,  2657,   785,    60,    60,  2657,     0,    52, 
         97,     0,     0,    60,    60,   -38,   404,     0,   427,   432, 
          0,  2657,     0,   414,  -183,     0,   381,     0,  1269,     0, 
          0,   267,     0,   352,     0,   416,   813,   353,   266,   436, 
        115,   841,   893,   140,   340,   176,  -183,   457,   376,     0, 
        459,     0,  -183,     0,  -143,    60,  2704,     0,    60,    60, 
       2704,   388,     0,     0,  -183,    43,     0,     0,     0,   176, 
        471,     0,     0,     0,   170,     0,   185,   458,     0,   964, 
       1103,   149,  -139,     0,     0,  2657,     0,    43,   176,   476, 
        407,     0,     0,     0,    60,     0,  2704,     0,     0,     0, 
          0,   419,     0,  -139,   426,     0,    43,  -183,  2657,   511, 
          0,  2704,    60,   495,     0,     0,     0,     0,   219,   437, 
       2704,     0,  1217,  2657,   520,     0,     0,  2657,     0,   440, 
          0,  2657,   439,     0, 
    );
    protected static $yyRindex= array(           64,
          0,     0,  1195,     0,     0,   -33,     0,  1432,   -28,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   -24,     0,     0,     0,     0,     0, 
          0,   472,     0,     0,     0,     0,     0,     0,   155,    33, 
          0,     0,     0,     0,     0,   507,     0,   527,     0,     0, 
         27,  -101,   446,  -101,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   406,     0,     0,     0,     0,     0,     0, 
        445,     0,     0,   536,     0,     0,     0,     0,     0,     0, 
          0,     0,   -17,     0,     0,   466,     0,     0,   466,     0, 
       1513,  1598,   503,  1281,  1340,  1367,  1394,     0,   513,     0, 
          0,     0,     0,     0,  -205,     0,     0,   539,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   -41,     0,     0,     0,     0,   542, 
          0,     0,     0,    45,     0,     0,     0,   -14,     0,     0, 
        557,     0,     0,     0,     0,   558,   575,     0,   513,     0, 
          0,     0,     0,  1753,  1786,    -1,     0,  1811,  1836,  1916, 
       1957,  1984,  2025,  2056,     0,  1666,  1725,  1427,  1501,  1541, 
          0,     0,     0,     0,     0,     0,     5,     0,     0,     0, 
          0,     0,     0,     0,     0,  -209,   498,     0,     0,     0, 
        531,    81,     0,     0,   557,     0,   134,     0,   513,     0, 
          0,     0,     0,  -209,     0,   373,     0,     0,     0,     0, 
          0,     8,     0,   500,    23,     0,   513,     0,     0,   586, 
          0,   557,     0,  2083,     0,   504,   -55,     0,     0,    32, 
          0,     0,     0,     0,     0,     0,   557,   506,   179,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,  -123,     0,     0,     0,     0, 
        576,     0,     0,     0,  -115,     0,     0,     0,     0,     0, 
        577,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   593,     0,   578,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,  -209,     0, 
          0,     0,     0,   504,     0,   581,     0,   504,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   600,     0, 
          0,     0,     0,     0,   593,     0,     0,     0,   202,     0, 
          0,    32,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   208,    88,     0,     0,     0,     0, 
          0,     0,   593,     0,     0,   581,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    88, 
          0,     0,     0,     0,  2542,     0,  2257,     0,     0,     0, 
          0,  2610,   517,     0,     0,   504,     0,     0,    88,     0, 
          0,     0,     0,     0,   557,     0,     0,     0,     0,     0, 
          0,     0,     0,   518,     0,     0,     0,     0,   504,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,  -119,     0,     0,     0,  -119,     0,     0, 
          0,   504,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   636,     0,     0,   594,   646, 
        275,     0,   607,   573,  -165,     0,     0,     0,     0,  -122, 
       -241,     0,     0,     0,   717,   420,     0,     0,     0,  2444, 
        -34,   308,   378,     0,  -172,  -288,     0,  -168,  -151,     0, 
          0,     0,   624,   649,     0,   -64,    -6,   319,   387,  -261, 
          0,     0,   369,     0,     0,    39,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   271,     0,     0,     0, 
          0,   307,     0,   325,     0,     0,     0,   514,     0,     0, 
          0,   -27,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   548,     0,     0,     0,     0,   521, 
          0,   695,     0, 
    );
    protected static $yyTable = array(10,
        216,    86,   216,   354,    14,    84,   134,   279,    14,    35, 
         45,    14,    14,    14,    14,    14,    14,   152,    14,   193, 
        216,    22,    37,   176,   319,    39,   137,   332,   214,    14, 
         14,    14,    14,    14,    14,    14,     1,    51,    51,    51, 
        336,    76,   237,   167,   137,   178,   361,    42,   178,   137, 
        225,    40,    84,   207,   151,   269,   140,   140,     5,    33, 
         34,    35,    14,   216,    14,   158,    40,   216,   216,   216, 
        216,   216,   215,   216,   381,    28,     9,   275,   137,   135, 
         51,    38,    51,   190,   216,   216,    27,   216,   216,   216, 
         28,   140,    60,   294,    14,   157,    14,    14,    28,    72, 
        364,   395,    57,   223,    58,   319,   309,   176,   299,   319, 
        137,    51,   238,   302,   300,   270,   301,   211,   303,   216, 
        225,   211,   211,   211,   211,   211,   188,   211,    29,   178, 
         40,   206,    40,   208,   151,   271,   228,    51,   211,   211, 
        211,   211,   211,   211,   225,   319,    74,    38,   119,   216, 
         59,   216,   216,   120,     2,    84,    28,   137,    30,   359, 
        319,   124,   304,   125,   330,   396,   124,   223,   125,   319, 
        143,   211,    38,   211,   143,   143,   143,   143,   143,    40, 
        143,   233,    71,   239,   211,    61,   204,   135,    41,   200, 
         51,   143,   143,   143,   143,   143,   143,   305,    63,   245, 
        382,   383,    98,     9,    14,   211,   211,     9,    27,    22, 
         74,   398,    48,   135,   225,    28,   313,    55,   216,    28, 
         28,    28,    28,    28,   143,    28,   143,   121,    46,    12, 
        417,    14,   121,   410,   411,   227,    28,    28,    28,    28, 
         28,    28,    52,   231,   331,    52,   416,    63,    51,    86, 
         86,    51,   394,    84,    84,   267,    56,   105,   143,   143, 
         52,    27,    84,   217,    14,   428,   225,   225,   225,    28, 
        250,    28,    85,    87,   131,   227,   227,   227,   216,   132, 
        133,    14,    14,    14,    14,   277,   278,   142,   146,   160, 
        135,    14,   225,   189,    52,   192,   162,   191,   216,   135, 
         51,   355,   107,    28,    28,   227,   194,   119,   117,   197, 
        118,    14,   120,   195,   199,   202,    52,    53,    54,    64, 
         65,    66,    67,    68,   293,   124,   106,   125,   108,   205, 
        135,    12,   225,   225,   225,   153,   216,   216,   216,   210, 
        212,   222,   227,     2,     2,     2,     2,     2,     2,     2, 
          2,   229,   135,   230,   346,   232,   242,   236,   135,   141, 
        244,   144,   225,     2,     2,     2,   216,     2,   243,   246, 
         51,    14,    14,    14,    14,    14,    14,    14,    14,    14, 
        248,    14,    14,    14,    14,    14,    14,   249,   268,   272, 
        175,   121,   211,   274,   282,   280,   296,   292,   298,    69, 
        307,   311,   312,   316,   388,    70,   317,   321,   322,   323, 
        324,   325,   350,    51,   338,   340,   144,    12,    13,    14, 
         15,   216,    17,    18,    19,    20,   216,   216,   216,   216, 
        216,   216,   216,   216,   216,   343,   351,   216,   216,   216, 
        216,   216,   165,   420,   356,   143,   165,   165,   165,   165, 
        165,   235,   165,    13,    14,    15,    16,    17,    18,    19, 
         20,    62,    63,   165,   165,   165,   165,   165,   165,   144, 
        357,   358,   360,   362,   366,   369,   365,   368,   370,   373, 
        211,   211,   211,   211,   211,   211,   211,   211,   211,   211, 
         28,   211,   211,   211,   211,   211,   375,   378,   165,   380, 
        379,   127,   126,   122,   123,    12,   127,   126,   122,   123, 
        393,   399,   128,   129,   383,   418,   405,   128,   129,   408, 
         13,    14,    15,    16,    17,    18,    19,    20,   382,   419, 
        165,   165,    12,   143,   143,   143,   143,   143,   143,   143, 
        143,   143,   143,   425,   143,   143,   143,   143,   143,   205, 
        427,   431,   434,   205,   205,   205,   205,   205,   435,   205, 
        440,   436,   442,   444,    61,    11,   341,   139,    26,   174, 
        205,   205,   205,   205,   205,   205,   140,   116,    28,    28, 
         28,    28,    28,    28,    28,    28,    28,    28,    24,    28, 
         28,    28,    28,    28,   207,   135,   139,   135,   207,   207, 
        207,   207,   207,   219,   207,   205,    13,    14,    15,   216, 
         17,    18,    19,    20,   216,   207,   207,   207,   207,   207, 
        207,   107,    37,   139,    36,   218,   119,   117,    84,   118, 
        135,   120,   232,    68,    51,   139,    46,   205,   205,   135, 
         70,   112,   114,    26,   124,   106,   125,   108,    90,   144, 
        207,    22,   232,   232,   232,   232,   232,   232,   232,   232, 
         89,   147,   374,   276,    50,   127,   126,   122,   123,   109, 
        110,   111,   112,   113,   333,   377,   128,   129,   130,   114, 
        115,   107,   207,   207,   426,   161,   119,   117,    49,   118, 
        337,   120,   429,   404,    13,    14,    15,   216,    17,    18, 
         19,    20,   232,   203,   124,   106,   125,   108,   107,   403, 
        121,   226,   213,   119,   117,   198,   118,   165,   120,    36, 
          0,    13,    14,    15,   216,    17,    18,    19,    20,     0, 
          0,   124,   106,   125,   108,   389,   107,     0,     0,   392, 
          0,   119,   117,     0,   118,     0,   120,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   293,   124, 
        106,   125,   108,   107,     0,     0,     0,   342,   119,   117, 
        121,   118,     0,   120,     0,   421,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   124,   106,   125,   108, 
        432,     0,     0,     0,     0,     0,     0,   121,     0,   437, 
          0,     0,     0,     0,     0,   165,   165,   165,   165,   165, 
        165,   165,   165,   165,     0,    14,   165,   165,   165,   165, 
        165,   107,     0,     0,   205,   121,   119,   117,     0,   118, 
          0,   120,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   345,   124,   106,   125,   108,     0,   107, 
          0,     0,   121,   367,   119,   117,     0,   118,     0,   120, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   207, 
          0,     0,   124,   106,   125,   108,     0,   107,     0,     0, 
          0,   371,   119,   117,     0,   118,     0,   120,     0,     0, 
          0,     0,     0,     0,     0,     0,   116,     0,     0,     0, 
        124,   106,   125,   108,     0,     0,     0,     0,     0,     0, 
        121,     0,   205,   205,   205,   205,   205,   205,   205,   205, 
        205,     0,     0,   205,   205,   205,   205,   205,     0,   107, 
          0,     0,     0,   372,   119,   117,     0,   118,   121,   120, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   124,   106,   125,   108,   116,   207,   207,   207, 
        207,   207,   207,   207,   207,   207,   121,     0,   207,   207, 
        207,   207,   207,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   116,   127,   126,   122,   123,   109,   110, 
        111,   112,   113,     0,     0,   128,   129,   130,   114,   115, 
        107,     0,     0,     0,   406,   119,   117,     0,   118,     0, 
        120,   116,     0,     0,     0,     0,     0,     0,   121,     0, 
          0,     0,     0,   124,   106,   125,   108,     0,     0,     0, 
        344,     0,     0,     0,   348,     0,     0,     0,   116,     0, 
          0,     0,     0,     0,   127,   126,   122,   123,   109,   110, 
        111,   112,   113,     0,     0,   128,   129,     0,   114,   115, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   127,   126,   122,   123,   109,   110,   111,   112,   113, 
          0,     0,   128,   129,     0,   114,   115,     0,     0,   121, 
          0,     0,     0,     0,     0,     0,   116,     0,     0,   127, 
        126,   122,   123,   109,   110,   111,   112,   113,     0,     0, 
        128,   129,   415,   114,   115,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   116,     0,   127,   126,   122,   123, 
        109,   110,   111,   112,   113,   430,     0,   128,   129,   107, 
        114,   115,     0,   407,   119,   117,     0,   118,     0,   120, 
        439,     0,   116,     0,   441,     0,     0,     0,   443,     0, 
          0,     0,   124,   106,   125,   108,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   127,   126,   122,   123,   109,   110, 
        111,   112,   113,     0,     0,   128,   129,     0,   114,   115, 
          0,     0,     0,     0,   116,     0,     0,     0,     0,     0, 
          0,     0,   127,   126,   122,   123,   109,   110,   111,   112, 
        113,     0,     0,   128,   129,     0,   114,   115,   121,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        127,   126,   122,   123,   109,   110,   111,   112,   113,     0, 
          0,   128,   129,   107,   114,   115,     0,     0,   119,   117, 
          0,   118,     0,   120,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   438,   116,   124,   106,   125,   108, 
          0,     0,     0,     0,     0,     5,     0,     0,     0,     0, 
          0,     0,   127,   126,   122,   123,   109,   110,   111,   112, 
        113,     0,     0,   128,   129,   107,   114,   115,     0,     0, 
        119,   117,     0,   118,     0,   120,     0,   197,     0,     0, 
          0,   197,   197,   197,   197,   197,     0,   197,   124,   106, 
        125,   108,     0,     0,     0,     0,     0,     0,   197,   197, 
          0,   197,   121,   197,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   127,   126,   122,   123,   109,   110,   111, 
        112,   113,     0,   197,   128,   129,   198,   114,   115,     0, 
        198,   198,   198,   198,   198,     0,   198,     0,     0,     0, 
          0,     0,     0,     0,   121,     0,     0,   198,   198,     0, 
        198,     0,   198,   201,     0,   197,     0,   201,   201,   201, 
        201,   201,     0,   201,   116,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   201,   201,     0,   201,     0,   201, 
        202,     0,   198,     0,   202,   202,   202,   202,   202,     0, 
        202,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   202,   202,     0,   202,     0,   202,     0,     0,   201, 
          0,     0,     0,   193,   198,     0,     0,   193,   193,   193, 
        193,   193,     0,   193,     5,     5,     5,     5,     5,     5, 
          5,     5,     0,     0,   193,   193,   202,   193,     0,   193, 
          0,   201,     0,     0,     5,     5,     5,     0,     0,     0, 
          0,     0,   127,   126,   122,   123,   109,   110,   111,   112, 
        113,     0,     0,   128,   129,     0,   114,   115,   202,   193, 
          0,     0,     7,     0,     0,     0,     0,     0,   116,     0, 
        119,   117,     0,   118,     0,   120,     0,   194,     0,     0, 
          0,   194,   194,   194,   194,   194,     0,   194,   124,   199, 
        125,   193,     0,   199,     0,   199,   199,   199,   194,   194, 
          0,   194,     0,   194,     0,     0,     0,     0,     0,     0, 
        199,   199,     0,   199,     0,   199,     0,   196,     0,     0, 
        116,   196,   196,   196,   196,   196,     0,   196,     0,     0, 
          0,     0,   197,   194,     0,     0,     0,     0,   196,   196, 
          0,   196,     0,   196,     0,   199,     0,     0,     0,     0, 
          0,     0,     0,     0,   121,     0,   127,   126,   122,   123, 
        109,   110,   111,   112,   113,   194,     0,   128,   129,     0, 
        114,   115,     0,   196,   200,     0,     0,   199,   200,     0, 
        200,   200,   200,     0,     0,     0,     0,     0,     0,     0, 
          0,   198,     0,     0,     0,   200,   200,     0,   200,     0, 
        200,     0,     0,     0,     0,   196,     0,     0,   127,   126, 
        122,   123,   109,   110,   111,   112,   113,     0,   201,   128, 
        129,     0,   114,   115,   197,   197,   197,   197,   197,     0, 
        200,     0,     0,   197,   197,   197,     0,     0,     0,     0, 
          0,     0,   191,     0,     0,   202,   191,     0,   191,   191, 
        191,     7,     7,     7,     7,     7,     7,     7,     7,     0, 
          0,     0,   200,   191,   191,     0,   191,     0,   191,     0, 
          0,     7,     7,     7,     0,     0,     0,     0,   193,     0, 
          0,     0,     0,   198,   198,   198,   198,   198,     0,     0, 
          0,     0,   198,   198,   198,     0,     0,     0,   191,     0, 
          0,   192,     0,     0,     0,   192,     0,   192,   192,   192, 
        201,   201,   201,   201,   201,     0,     0,     0,     0,   201, 
        201,   201,   192,   192,     0,   192,     0,   192,     0,   179, 
        191,     0,     0,   179,     0,     0,   179,   202,   202,   202, 
        202,   202,     0,     0,     0,     0,   202,   202,   202,     0, 
        179,   179,   194,   179,     0,   179,     0,   192,     0,     0, 
          0,     0,   195,     0,   199,     0,   195,     0,     0,   195, 
        193,   193,   193,   193,   193,     0,     0,     0,     0,   193, 
        193,   193,     0,   195,   195,   179,   195,   180,   195,   192, 
          0,   180,   196,     0,   180,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   180,   180, 
          0,   180,   181,   180,     0,     0,   181,   179,   195,   181, 
          0,     0,     0,     0,     0,     0,     0,     0,   127,   126, 
        122,   123,     0,   181,   181,     0,   181,     0,   181,   128, 
        129,     0,     0,   180,   194,   194,   194,   194,   194,   200, 
        195,     0,     0,   194,   194,   194,   199,   199,   199,   199, 
        199,     0,     0,     0,     0,   199,   199,   199,   181,     0, 
          0,     0,     0,     0,     0,   180,     0,     0,     0,     0, 
          0,     0,     0,     0,   196,   196,   196,   196,   196,     0, 
          0,     0,   182,   196,   196,   196,   182,     0,     0,   182, 
        181,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   182,   182,     0,   182,   191,   182,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   183,     0,     0,     0,   183,     0,     0, 
        183,   200,   200,   200,   200,   200,     0,     0,   182,     0, 
        200,   200,   200,     0,   183,   183,     0,   183,     0,   183, 
        184,     0,     0,     0,   184,     0,     0,   184,     0,     0, 
          0,     0,     0,     0,     0,     0,   192,     0,     0,     0, 
        182,   184,   184,     0,   184,     0,   184,     0,     0,   183, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   162,     0,     0,   179,   162,     0,     0,   162,   191, 
        191,   191,   191,   191,     0,     0,   184,     0,   191,   191, 
        191,   183,   162,   162,     0,   162,     0,   162,     0,     0, 
          0,     0,   163,     0,     0,     0,   163,   195,     0,   163, 
          0,     0,     0,     0,     0,     0,     0,     0,   184,     0, 
          0,     0,     0,   163,   163,     0,   163,   162,   163,   161, 
          0,     0,   180,   161,     0,     0,   161,     0,   192,   192, 
        192,   192,   192,     0,     0,     0,     0,   192,   192,   192, 
        161,   161,     0,   161,     0,   161,     0,   181,   163,   162, 
          0,     0,     0,     0,     0,     0,   179,   179,   179,   179, 
        179,     0,     0,     0,     0,   179,   179,   179,     0,     0, 
          0,     0,     0,     0,     0,   161,     0,     0,     0,     0, 
        163,     0,     0,     0,     0,     0,     0,     0,     0,   195, 
        195,   195,   195,   195,     0,     0,     0,     0,   195,   195, 
        195,     0,     0,     0,     0,     0,     0,   161,     0,     0, 
          0,     0,     0,     0,   180,   180,   180,   180,   180,     0, 
          0,     0,     0,   180,   180,   180,     0,   182,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   181, 
        181,   181,   181,   181,     0,     0,     0,     0,   181,   181, 
        181,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   183,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   127, 
          0,     0,     0,     0,     0,   184,   127,     0,     0,   127, 
          0,   127,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   127,     0,     0,     0,   182, 
        182,   182,   182,   182,     0,     0,     0,     0,   182,   182, 
        182,     0,     0,     0,     0,     0,   162,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   127,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        183,   183,   183,   183,   183,     0,     0,   163,     0,   183, 
        183,   183,     0,     0,     0,     0,     0,     0,     0,   127, 
          0,   127,   127,     0,     0,     0,     0,   184,   184,   184, 
        184,   184,     0,     0,   161,     0,   184,   184,   184,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   162,   162, 
        162,   162,   162,     0,     0,     0,     0,   162,   162,   162, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   163, 
        163,   163,   163,   163,     0,     0,     0,     0,   163,   163, 
        163,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   161,   161,   161,   161, 
        161,    74,     0,     0,     0,   161,   161,   161,     0,     0, 
         91,    92,     0,    94,    95,    96,    97,     0,     0,     0, 
          0,     0,     0,     0,   101,   104,   127,   127,   127,   127, 
        127,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   148,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   164, 
        165,   166,   168,   169,   170,   171,   172,   173,   174,     0, 
        176,   177,   178,   179,   180,     0,     0,   181,   182,   183, 
        184,   185,   186,   187,   131,     0,   101,     0,     0,     0, 
          0,   131,     0,     0,   131,     0,   131,     0,     0,     0, 
          0,     0,     0,     0,   148,     0,   127,   127,   127,   127, 
        131,   127,   127,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   127,   127,   127,   127, 
          0,   127,   127,     0,     0,     0,   127,   127,   127,   127, 
        127,     0,   131,     0,     0,     0,     0,     0,     0,     0, 
          0,   148,   122,     0,   166,     0,     0,     0,   148,   122, 
          0,     0,   122,   234,   122,     0,     0,     0,   127,   127, 
          0,     0,     0,     0,   131,     0,   131,   131,   122,     0, 
          0,     0,     0,     0,     0,   148,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    60, 
        148,   148,     0,     0,     0,     0,    72,     0,     0,    57, 
        122,    58,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   262,     0,   310,     0,     0, 
          0,     0,     0,     0,   166,     0,   315,     0,     0,     0, 
          0,     0,   122,     0,   122,   122,    60,     0,     0,     0, 
          0,     0,     0,    72,     0,     0,    57,    59,    58,     0, 
        339,     0,     0,     0,     0,     0,     0,     0,     0,   148, 
        347,   349,   262,     0,     0,     0,     0,   352,   353,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    71, 
          0,     0,    61,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    59,     0,     0,     0,     0,     0, 
          0,   131,   131,   131,   131,   131,     0,     0,     0,   148, 
          0,     0,   390,   391,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   318,     0,     0,    61, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   148,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   433,     0,     0,   122, 
        122,   122,   122,   122,     0,     0,     0,     0,     0,     0, 
          0,   131,   131,   131,   131,     0,     0,   131,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   131,   131,   131,   131,     0,   131,   131,     0,     0, 
          0,   131,   131,   131,   131,   131,    64,    65,    66,    67, 
         68,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   131,   131,     0,     0,     0,     0,   122, 
        122,   122,   122,     0,     0,   122,     0,     0,     0,     0, 
          0,     0,     0,    64,    65,    66,    67,    68,     0,   122, 
        122,   122,   122,     0,   122,   122,     0,     0,     0,   122, 
          0,   122,   122,   122,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    69,   251,   252,   253, 
          0,     0,    70,     0,     0,     0,     0,     0,     0,     0, 
          0,   122,   122,     0,     0,     0,   254,   255,   256,   257, 
          0,   258,   259,     0,     0,     0,   260,     0,   261,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    69,   251,   252,   253,     0,     0,    70, 
          0,     0,     0,     0,     0,     0,     0,     0,    62,    63, 
          0,     0,     0,   254,   255,   256,   257,     0,   258,   259, 
          0,     0,     0,   260,     0,   261,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    62,    63, 
    );
    protected static $yyCheck = array(4,
         42,   125,    44,    42,    60,   125,    63,   249,    37,   125, 
         42,    40,    41,    42,    43,    44,    45,    91,    47,   142, 
         62,   123,    27,    41,   286,    30,    41,   123,   194,    58, 
         59,    60,    61,    62,    63,    91,   303,    42,    43,    44, 
         93,    48,   260,   108,    59,    41,   335,    40,    44,    84, 
        260,    44,    60,   260,   260,   260,    58,    59,   304,   300, 
        301,   302,    91,    37,    93,   100,    59,    41,    42,    43, 
         44,    45,   195,    47,   363,    44,   260,   243,    93,    84, 
         85,    59,    87,    91,    58,    59,    46,    61,    62,    63, 
         59,    93,    33,   266,   123,   100,   125,   126,    59,    40, 
        342,    59,    43,    59,    45,   367,   272,   125,    37,   371, 
        125,   116,   330,    42,    43,   320,    45,    37,    47,    93, 
        330,    41,    42,    43,    44,    45,   133,    47,   260,   125, 
        123,   159,   125,   340,   340,   340,   201,   142,    58,    59, 
         60,    61,    62,    63,   260,   407,    59,   125,    42,   123, 
         91,   125,   126,    47,    91,    60,   125,   192,    64,   332, 
        422,    60,    91,    62,   260,   123,    60,   123,    62,   431, 
         37,    91,    46,    93,    41,    42,    43,    44,    45,    93, 
         47,   209,   123,   218,   189,   126,    91,   192,    44,   151, 
        195,    58,    59,    60,    61,    62,    63,   126,    44,   227, 
        344,   345,    40,   260,   260,   125,   126,   260,    46,   311, 
        123,   380,    40,   218,   330,    37,   281,    46,   260,    41, 
         42,    43,    44,    45,    91,    47,    93,   126,   260,    91, 
        399,   260,   126,   373,   374,   260,    58,    59,    60,    61, 
         62,    63,    41,   205,   340,    44,   398,    93,    41,   373, 
        374,    44,   375,   373,   374,    40,    59,   410,   125,   126, 
         59,    46,    60,   125,   320,   417,   300,   301,   302,    91, 
        232,    93,   310,   310,    41,   300,   301,   302,   320,    41, 
         44,   310,   311,   312,   340,   247,   248,   311,   123,   125, 
        295,   320,   260,   310,    93,    44,   300,    62,   340,   304, 
         93,   340,    37,   125,   126,   330,   123,    42,    43,   123, 
         45,   340,    47,    44,    93,   260,    42,    43,    44,   260, 
        261,   262,   263,   264,    59,    60,    61,    62,    63,    40, 
        335,    91,   300,   301,   302,   409,   310,   311,   312,    58, 
         93,   260,    41,   280,   281,   282,   283,   284,   285,   286, 
        287,    40,   357,    93,   316,    40,   125,   123,   363,    85, 
         44,    87,   330,   300,   301,   302,   340,   304,    59,    93, 
        375,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
        123,   410,   411,   412,   413,   414,   415,    41,   340,   123, 
        116,   126,   312,    40,   123,    41,   260,   125,    40,   340, 
         61,    41,   125,    40,   366,   346,    40,    40,    59,    59, 
         40,    40,   361,   418,    40,    59,   142,    91,   280,   281, 
        282,   283,   284,   285,   286,   287,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    59,   340,   411,   412,   413, 
        414,   415,    37,   405,    41,   312,    41,    42,    43,    44, 
         45,   125,    47,   280,   281,   282,   283,   284,   285,   286, 
        287,   402,   403,    58,    59,    60,    61,    62,    63,   195, 
         44,    40,    59,    93,    59,    40,   125,   125,   364,   340, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   409, 
        312,   411,   412,   413,   414,   415,   321,    41,    93,    41, 
        125,   400,   401,   402,   403,    91,   400,   401,   402,   403, 
        123,    41,   411,   412,   345,    40,    59,   411,   412,   371, 
        280,   281,   282,   283,   284,   285,   286,   287,   344,   123, 
        125,   126,    91,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   409,   125,   411,   412,   413,   414,   415,    37, 
        125,    41,    58,    41,    42,    43,    44,    45,   340,    47, 
         41,   125,   123,   125,    93,    59,   125,    41,   123,   125, 
         58,    59,    60,    61,    62,    63,    41,   312,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   409,   123,   411, 
        412,   413,   414,   415,    37,    93,    58,    41,    41,    42, 
         43,    44,    45,    62,    47,    93,   280,   281,   282,   283, 
        284,   285,   286,   287,    40,    58,    59,    60,    61,    62, 
         63,    37,   125,    93,   125,    40,    42,    43,   125,    45, 
        125,    47,   260,    41,    59,    59,    59,   125,   126,    59, 
         41,   125,   125,     8,    60,    61,    62,    63,    55,   375, 
         93,     6,   280,   281,   282,   283,   284,   285,   286,   287, 
         54,    89,   355,   244,    41,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   297,   357,   411,   412,   413,   414, 
        415,    37,   125,   126,   414,    41,    42,    43,    40,    45, 
        304,    47,   418,   387,   280,   281,   282,   283,   284,   285, 
        286,   287,   330,   156,    60,    61,    62,    63,    37,   385, 
        126,   198,   192,    42,    43,    44,    45,   312,    47,    25, 
         -1,   280,   281,   282,   283,   284,   285,   286,   287,    -1, 
         -1,    60,    61,    62,    63,   367,    37,    -1,    -1,   371, 
         -1,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60, 
         61,    62,    63,    37,    -1,    -1,    -1,    41,    42,    43, 
        126,    45,    -1,    47,    -1,   407,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63, 
        422,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,   431, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,   410,   411,   412,   413,   414, 
        415,    37,    -1,    -1,   312,   126,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    59,    60,    61,    62,    63,    -1,    37, 
         -1,    -1,   126,    41,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312, 
         -1,    -1,    60,    61,    62,    63,    -1,    37,    -1,    -1, 
         -1,    41,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
        126,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,   413,   414,   415,    -1,    37, 
         -1,    -1,    -1,    41,    42,    43,    -1,    45,   126,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    60,    61,    62,    63,   312,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   126,    -1,   411,   412, 
        413,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   312,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,   413,   414,   415, 
         37,    -1,    -1,    -1,    41,    42,    43,    -1,    45,    -1, 
         47,   312,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1, 
         -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1, 
        314,    -1,    -1,    -1,   318,    -1,    -1,    -1,   312,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,    -1,    -1,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,   396,   414,   415,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   312,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   419,    -1,   411,   412,    37, 
        414,   415,    -1,    41,    42,    43,    -1,    45,    -1,    47, 
        434,    -1,   312,    -1,   438,    -1,    -1,    -1,   442,    -1, 
         -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
         -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   126,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    37,   414,   415,    -1,    -1,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,   312,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    37,   414,   415,    -1,    -1, 
         42,    43,    -1,    45,    -1,    47,    -1,    37,    -1,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,   126,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    93,   411,   412,    37,   414,   415,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   126,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    37,    -1,   125,    -1,    41,    42,    43, 
         44,    45,    -1,    47,   312,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         37,    -1,    93,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    93, 
         -1,    -1,    -1,    37,   125,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,   280,   281,   282,   283,   284,   285, 
        286,   287,    -1,    -1,    58,    59,    93,    61,    -1,    63, 
         -1,   125,    -1,    -1,   300,   301,   302,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   125,    93, 
         -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,   312,    -1, 
         42,    43,    -1,    45,    -1,    47,    -1,    37,    -1,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    60,    37, 
         62,   125,    -1,    41,    -1,    43,    44,    45,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,    37,    -1,    -1, 
        312,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,   312,    93,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    93,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   126,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   125,    -1,   411,   412,    -1, 
        414,   415,    -1,    93,    37,    -1,    -1,   125,    41,    -1, 
         43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   312,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,   125,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,   312,   411, 
        412,    -1,   414,   415,   404,   405,   406,   407,   408,    -1, 
         93,    -1,    -1,   413,   414,   415,    -1,    -1,    -1,    -1, 
         -1,    -1,    37,    -1,    -1,   312,    41,    -1,    43,    44, 
         45,   280,   281,   282,   283,   284,   285,   286,   287,    -1, 
         -1,    -1,   125,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,   300,   301,   302,    -1,    -1,    -1,    -1,   312,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,   414,   415,    -1,    -1,    -1,    93,    -1, 
         -1,    37,    -1,    -1,    -1,    41,    -1,    43,    44,    45, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,   413, 
        414,   415,    58,    59,    -1,    61,    -1,    63,    -1,    37, 
        125,    -1,    -1,    41,    -1,    -1,    44,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,    -1, 
         58,    59,   312,    61,    -1,    63,    -1,    93,    -1,    -1, 
         -1,    -1,    37,    -1,   312,    -1,    41,    -1,    -1,    44, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,   413, 
        414,   415,    -1,    58,    59,    93,    61,    37,    63,   125, 
         -1,    41,   312,    -1,    44,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    37,    63,    -1,    -1,    41,   125,    93,    44, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,    -1,    58,    59,    -1,    61,    -1,    63,   411, 
        412,    -1,    -1,    93,   404,   405,   406,   407,   408,   312, 
        125,    -1,    -1,   413,   414,   415,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,   414,   415,    93,    -1, 
         -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    37,   413,   414,   415,    41,    -1,    -1,    44, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,   312,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1, 
         44,   404,   405,   406,   407,   408,    -1,    -1,    93,    -1, 
        413,   414,   415,    -1,    58,    59,    -1,    61,    -1,    63, 
         37,    -1,    -1,    -1,    41,    -1,    -1,    44,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1, 
        125,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    93, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    37,    -1,    -1,   312,    41,    -1,    -1,    44,   404, 
        405,   406,   407,   408,    -1,    -1,    93,    -1,   413,   414, 
        415,   125,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    37,    -1,    -1,    -1,    41,   312,    -1,    44, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    93,    63,    37, 
         -1,    -1,   312,    41,    -1,    -1,    44,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
         58,    59,    -1,    61,    -1,    63,    -1,   312,    93,   125, 
         -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,   414,   415,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,    -1, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,    -1,   312,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33, 
         -1,    -1,    -1,    -1,    -1,   312,    40,    -1,    -1,    43, 
         -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,   312,    -1,   413, 
        414,   415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123, 
         -1,   125,   126,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,   312,    -1,   413,   414,   415,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    48,    -1,    -1,    -1,   413,   414,   415,    -1,    -1, 
         57,    58,    -1,    60,    61,    62,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    71,    72,   260,   261,   262,   263, 
        264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106, 
        107,   108,   109,   110,   111,   112,   113,   114,   115,    -1, 
        117,   118,   119,   120,   121,    -1,    -1,   124,   125,   126, 
        127,   128,   129,   130,    33,    -1,   133,    -1,    -1,    -1, 
         -1,    40,    -1,    -1,    43,    -1,    45,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   151,    -1,   340,   341,   342,   343, 
         59,   345,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363, 
         -1,   365,   366,    -1,    -1,    -1,   370,   371,   372,   373, 
        374,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   198,    33,    -1,   201,    -1,    -1,    -1,   205,    40, 
         -1,    -1,    43,   210,    45,    -1,    -1,    -1,   402,   403, 
         -1,    -1,    -1,    -1,   123,    -1,   125,   126,    59,    -1, 
         -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33, 
        247,   248,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43, 
         91,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    59,    -1,   274,    -1,    -1, 
         -1,    -1,    -1,    -1,   281,    -1,   283,    -1,    -1,    -1, 
         -1,    -1,   123,    -1,   125,   126,    33,    -1,    -1,    -1, 
         -1,    -1,    -1,    40,    -1,    -1,    43,    91,    45,    -1, 
        307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   316, 
        317,   318,    59,    -1,    -1,    -1,    -1,   324,   325,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123, 
         -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1, 
         -1,   260,   261,   262,   263,   264,    -1,    -1,    -1,   366, 
         -1,    -1,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,   260, 
        261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   340,   341,   342,   343,    -1,    -1,   346,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   360,   361,   362,   363,    -1,   365,   366,    -1,    -1, 
         -1,   370,   371,   372,   373,   374,   260,   261,   262,   263, 
        264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   402,   403,    -1,    -1,    -1,    -1,   340, 
        341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   260,   261,   262,   263,   264,    -1,   360, 
        361,   362,   363,    -1,   365,   366,    -1,    -1,    -1,   370, 
         -1,   372,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342,   343, 
         -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403,    -1,    -1,    -1,   360,   361,   362,   363, 
         -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   340,   341,   342,   343,    -1,    -1,   346, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403, 
         -1,    -1,    -1,   360,   361,   362,   363,    -1,   365,   366, 
         -1,    -1,    -1,   370,    -1,   372,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_PROPERTY', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 'T_OBJECT_OPERATOR', 
      'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 
      'T_BOOLEAN_OR', 'T_BOOLEAN_AND', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 132 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 144 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 144 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 155 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 156 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 160 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 160 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 13:  #line 168 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 15:  #line 173 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 16:  #line 179 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 179 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 18:  #line 188 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 19:  #line 188 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 197 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 21:  #line 197 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 22:  #line 208 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 209 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 213 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 25:  #line 214 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 218 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 219 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 223 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 224 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 30:  #line 228 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 31:  #line 229 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 233 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 33:  #line 234 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 235 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 35:  #line 239 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 240 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 241 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 245 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 39:  #line 246 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 40:  #line 250 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 41:  #line 250 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 42:  #line 253 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 253 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 263 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 45:  #line 270 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop][0];
      $yyVal->annotations= $yyVals[-5+$yyTop][1];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 46:  #line 281 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 48:  #line 286 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 49:  #line 287 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 50:  #line 288 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 51:  #line 292 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 293 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 299 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 54:  #line 299 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 55:  #line 309 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 56:  #line 309 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 57:  #line 317 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 58:  #line 317 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 59:  #line 330 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 60:  #line 331 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 61:  #line 335 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 62:  #line 336 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 63:  #line 340 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 64:  #line 344 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVals[-1+$yyTop] && $yyVal->parameters= array('default' => $yyVals[-1+$yyTop]);
    } break;

    case 65:  #line 349 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 66:  #line 357 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 67:  #line 358 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 68:  #line 362 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 69:  #line 363 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 70:  #line 367 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 71:  #line 368 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 72:  #line 372 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 73:  #line 373 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 74:  #line 377 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 75:  #line 378 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 82:  #line 390 "grammar/xp.jay"
    { $yyVal= '[]'; } break;

    case 83:  #line 391 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 84:  #line 399 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 86:  #line 404 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 87:  #line 405 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 88:  #line 409 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 89:  #line 409 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 90:  #line 412 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 91:  #line 412 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 92:  #line 417 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 93:  #line 417 "grammar/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= array();
        foreach ($yyVals[-6+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->initialization[]= $stmt;
        }
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= array();
        foreach ($yyVals[-2+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->loop[]= $stmt;
        }
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 94:  #line 435 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 95:  #line 435 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 96:  #line 440 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 97:  #line 440 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 98:  #line 444 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 99:  #line 444 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 100:  #line 448 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 101:  #line 448 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 102:  #line 452 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 103:  #line 452 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 104:  #line 457 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 106:  #line 458 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 108:  #line 459 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 109:  #line 459 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 110:  #line 462 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->free= TRUE; } break;

    case 112:  #line 467 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 114:  #line 472 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 115:  #line 473 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 116:  #line 477 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 117:  #line 477 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 118:  #line 481 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 119:  #line 481 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 120:  #line 487 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 121:  #line 488 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 122:  #line 492 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 123:  #line 493 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 124:  #line 493 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 125:  #line 498 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 126:  #line 499 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 127:  #line 503 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 128:  #line 504 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 129:  #line 508 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 130:  #line 508 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 131:  #line 516 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 133:  #line 521 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 134:  #line 521 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 135:  #line 529 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 137:  #line 534 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 138:  #line 535 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 139:  #line 539 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 141:  #line 544 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 142:  #line 550 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 143:  #line 558 "grammar/xp.jay"
    { 
      /* TBI: Constant */ 
    } break;

    case 144:  #line 561 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 145:  #line 564 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new InvocationNode(array('name' => $yyVals[-3+$yyTop]))); 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 147:  #line 572 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 148:  #line 572 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 149:  #line 575 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 150:  #line 575 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 151:  #line 580 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 152:  #line 580 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyVals[-1+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 153:  #line 585 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 154:  #line 585 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 155:  #line 591 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 156:  #line 592 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 157:  #line 595 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 158:  #line 598 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 159:  #line 601 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 160:  #line 604 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 161:  #line 608 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 162:  #line 614 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 163:  #line 620 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 164:  #line 626 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 165:  #line 634 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 166:  #line 635 "grammar/xp.jay"
    { /* XXX class literal */ } break;

    case 167:  #line 636 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 168:  #line 636 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 169:  #line 640 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 170:  #line 645 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 171:  #line 646 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 172:  #line 647 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 173:  #line 648 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 174:  #line 652 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 176:  #line 657 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 177:  #line 658 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 178:  #line 662 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 179:  #line 666 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 180:  #line 667 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 181:  #line 668 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 182:  #line 669 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 183:  #line 670 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 184:  #line 671 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 185:  #line 675 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 676 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 677 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 188:  #line 678 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 189:  #line 679 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 190:  #line 680 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 191:  #line 684 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 192:  #line 685 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 193:  #line 686 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 194:  #line 687 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 195:  #line 688 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 196:  #line 689 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 197:  #line 693 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 198:  #line 694 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 199:  #line 695 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 200:  #line 696 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 201:  #line 697 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 202:  #line 698 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 203:  #line 702 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 204:  #line 703 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 205:  #line 708 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 208:  #line 714 "grammar/xp.jay"
    {  $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 209:  #line 718 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 210:  #line 718 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 211:  #line 721 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 212:  #line 724 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 213:  #line 724 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 216:  #line 738 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 217:  #line 739 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 218:  #line 743 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 219:  #line 747 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 220:  #line 748 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 222:  #line 753 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 223:  #line 757 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 224:  #line 758 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 225:  #line 764 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 226:  #line 765 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 227:  #line 769 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 228:  #line 770 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 229:  #line 774 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 230:  #line 775 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 231:  #line 776 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 232:  #line 777 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 233:  #line 778 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 234:  #line 779 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 235:  #line 780 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;

    case 236:  #line 781 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2006 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
