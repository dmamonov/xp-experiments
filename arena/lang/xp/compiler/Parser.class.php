<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 36 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     8,     1,     3,     3,     5,     5,     6,     6, 
          9,     9,    11,    11,     7,     7,     7,    12,    12,    14, 
         14,    17,    17,    16,    16,    16,    15,    15,    13,    13, 
         22,    20,    26,    20,    24,    24,    21,    21,    28,    28, 
         29,    29,    23,    23,    25,    25,    25,    25,    25,    27, 
         27,    18,    18,    31,    30,    32,    30,    35,    30,    37, 
         30,    38,    30,    39,    30,    40,    30,    42,    30,    30, 
         33,    33,    34,    43,    34,    41,    41,    44,    44,    48, 
         47,    45,    45,    49,    46,    19,    19,    19,    19,    50, 
         19,    51,    19,    19,    19,    19,    19,    19,    19,    19, 
         19,    19,    19,    19,    19,    19,    19,    19,    19,    19, 
         19,    19,    19,    53,    52,    52,    54,    52,    36,    36, 
         55,    55,     4,     4,     4,    56,    56,    10,    10,     2, 
          2,    57,    57,    58,    58,    58,    58,    58,    58,    58, 
    );
    protected static $yyLen= array(2,
          1,     8,     0,     8,     1,     1,     0,     2,     0,     2, 
          0,     2,     0,     3,     0,     1,     1,     1,     2,     5, 
          6,     0,     1,     2,     4,     4,     0,     2,     1,     2, 
          0,     9,     0,     9,     1,     3,     0,     1,     1,     3, 
          2,     3,     0,     2,     1,     1,     1,     1,     1,     0, 
          1,     1,     2,     0,     4,     0,     7,     0,    10,     0, 
         11,     0,     6,     0,     7,     0,     6,     0,     4,     2, 
          1,     3,     0,     0,     3,     2,     1,     1,     2,     0, 
          9,     0,     1,     0,     5,     1,     1,     1,     1,     0, 
          7,     0,     5,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     2, 
          2,     5,     2,     0,     4,     2,     0,     6,     0,     1, 
          1,     3,     1,     4,     3,     1,     3,     1,     3,     0, 
          1,     1,     2,     1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
        134,   136,   135,   137,   139,   138,   140,     0,     1,     0, 
        131,     0,     5,     3,     6,     0,   133,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   127, 
          8,     0,     0,   125,     0,     0,    12,     0,    10,     0, 
          0,   124,     0,     0,    16,    17,     0,     0,     0,   129, 
          0,     0,     0,     4,     0,    19,     0,    30,     2,    45, 
         46,    47,    48,    49,     0,     0,     0,     0,     0,     0, 
         33,     0,     0,    31,     0,     0,     0,     0,    24,     0, 
         23,     0,     0,     0,    88,    87,    89,    90,     0,     0, 
         20,     0,     0,    38,     0,     0,    54,     0,    68,    58, 
         62,    64,    60,    56,     0,     0,     0,    21,     0,    92, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   114,     0,     0,     0,     0,   110, 
        111,     0,   113,     0,    41,     0,     0,    25,     0,    66, 
          0,     0,     0,     0,     0,     0,    26,    70,    53,     0, 
          0,     0,    94,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    42,     0,     0,    40,     0,     0,     0,     0,     0, 
          0,    71,     0,     0,     0,     0,     0,     0,   120,     0, 
          0,     0,   117,    44,     0,    35,    34,    55,    51,     0, 
         69,     0,     0,     0,     0,     0,     0,    32,     0,    93, 
          0,     0,   115,     0,     0,     0,     0,     0,    72,     0, 
          0,     0,   122,     0,     0,    36,    80,    84,    67,     0, 
         77,     0,     0,    63,     0,     0,     0,     0,    91,   118, 
          0,     0,    76,    83,    79,     0,    65,     0,    74,    57, 
          0,     0,     0,     0,     0,     0,    14,     0,     0,     0, 
          0,    75,     0,    85,    59,     0,     0,    61,     0,     0, 
         81, 
    );
    protected static $yyDgoto= array(8,
          9,    43,    16,    35,    25,    33,    44,    18,    29,    36, 
        239,    45,    46,    47,    76,    73,    82,   199,   106,    48, 
         93,    83,   174,   197,    65,    77,   200,    94,    95,   107, 
        139,   146,   183,   250,   142,   188,   145,   143,   144,   177, 
        229,   141,   256,   230,   243,   231,   232,   241,   242,   111, 
        151,   133,   166,   214,   189,    21,    11,    12, 
    );
    protected static $yySindex = array(           -3,
          0,     0,     0,     0,     0,     0,     0,     0,     0,  -132, 
          0,    -3,     0,     0,     0,  -230,     0,  -230,    25,  -274, 
          5,  -264,  -230,  -230,  -229,    33,  -230,  -230,   -25,     0, 
          0,  -230,    -5,     0,    84,    75,     0,    -3,     0,    -3, 
       -230,     0,  -231,    23,     0,     0,    -3,    -3,    29,     0, 
        339,  -185,  -243,     0,  -222,     0,  -247,     0,     0,     0, 
          0,     0,     0,     0,   116,  -101,   131,   111,  -160,   -79, 
          0,  -121,  -101,     0,   -24,   129,  -230,   150,     0,  1006, 
          0,   152,  -230,   169,     0,     0,     0,     0,   -24,   283, 
          0,   -41,   171,     0,   177,   184,     0,   106,     0,     0, 
          0,     0,     0,     0,   102,    32,  1006,     0,   189,     0, 
       -230,    70,   -24,   -24,   -24,   -24,   -24,   -24,   -24,   -24, 
        -24,   -24,   -24,   -24,     0,   -24,   -24,   -24,   -24,     0, 
          0,   -29,     0,  -106,     0,   -89,  -230,     0,   -24,     0, 
        -24,   195,   199,   899,   200,   206,     0,     0,     0,   -89, 
        -24,   208,     0,   -51,   -51,   -51,   -51,   -51,   -51,    82, 
        -51,   -51,   -51,   -51,   -51,   -24,  -339,  -339,  -339,  -339, 
        209,     0,  -230,   -45,     0,   104,  1006,   115,   -24,   -24, 
       1006,     0,  -109,   -24,   -24,   -45,   142,   212,     0,   -24, 
        -24,   154,     0,     0,  1006,     0,     0,     0,     0,   126, 
          0,   198,   181,   143,   214,   213,   224,     0,   -24,     0, 
        249,   -51,     0,   -24,   166,  -278,   -24,   899,     0,   -24, 
        -43,   899,     0,   172,   259,     0,     0,     0,     0,   -40, 
          0,   -42,   247,     0,   251,   256,   -64,    -3,     0,     0, 
        268,   196,     0,     0,     0,   -24,     0,   262,     0,     0, 
        193,  -230,  1006,   280,    -9,   899,     0,    -8,   211,   899, 
        292,     0,   293,     0,     0,   899,   215,     0,  1006,   222, 
          0, 
    );
    protected static $yyRindex= array(         -108,
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   101,     0,     0,     0,     0,     0,     0,  1093,  -104, 
         -1,   217,     0,     0,   225,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    -2,     0,     0,  -122,     0,  -122, 
          0,     0,     0,     0,     0,     0,  -110,  -107,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   276,     0,     0, 
          0,     0,   294,     0,     0,     0,   314,     0,     0,     0, 
          0,     0,   314,   -37,     0,     0,     0,     0,     0,   297, 
          0,     0,     0,     0,   318,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   235,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   -14,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   -14, 
        321,     0,     0,   692,   701,   739,   762,   793,   816,     0, 
        847,   870,   901,   928,   937,     0,   367,   603,   656,   665, 
        -10,     0,     0,     0,     0,     0,   248,     0,   319,     0, 
        248,     0,     0,     0,     0,     0,     3,     0,     0,   321, 
          0,     0,     0,     0,   248,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   990,     0,   321,     0,     0,   319,     0,     0,     0, 
          0,     0,     0,    43,     0,     0,     0,     0,     0,   832, 
          0,   778,     0,     0,     0,     0,   953,  -122,     0,     0, 
          0,     0,     0,     0,     0,   321,     0,     0,     0,     0, 
          0,     0,   248,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   248,     0, 
          0, 
    );
    protected static $yyGindex= array(0,
          0,   135,     0,   246,     0,     0,   -28,     0,     0,    27, 
          0,   330,   332,     0,     0,   315,     0,   -60,  1295,     0, 
        304,     0,   255,   220,     0,     0,  -153,   278,     0,   119, 
          0,     0,  -146,     0,     0,   210,     0,     0,     0,     0, 
          0,     0,     0,   185,     0,   183,     0,     0,     0,     0, 
          0,     0,     0,     0,   207,   395,   407,     0, 
    );
    protected static $yyTable = array(86,
        134,    80,    15,    86,    86,    86,    86,    86,   126,    86, 
        127,    49,    19,   196,    18,    89,    67,    29,     7,   105, 
         86,    86,    86,    86,    86,    86,   116,   204,    19,    19, 
        116,   116,   116,   116,   116,    24,   116,    19,   123,   125, 
        123,   215,   123,   121,    43,    28,   149,   116,   116,   116, 
        116,   116,   116,    86,    37,    86,   128,   123,    39,   128, 
        123,   121,   130,   131,    27,   227,   228,    50,   118,   132, 
         23,   234,    51,   116,   114,   237,   115,   195,   117,    13, 
        116,    32,   116,    13,    13,    13,    13,    13,    51,    13, 
        148,   126,   113,   127,   119,    26,    68,    38,    52,   259, 
         13,    13,    13,    13,    13,    13,   118,    52,    43,   262, 
        153,   116,   114,   265,   115,   270,   117,    40,   118,   268, 
        128,   123,   125,   116,   114,    34,   115,    41,   117,   126, 
        113,   127,   119,    13,    10,    13,    42,   130,    78,   191, 
        118,   126,   113,   127,   119,   116,   114,    54,   115,   130, 
        117,   118,   130,    59,    66,    71,   116,   114,    72,   115, 
        125,   117,   198,   126,   113,   127,   119,    13,    14,    15, 
         74,    75,   125,   201,   126,   113,   127,   119,   118,    68, 
         67,    55,    57,   116,   114,   209,   115,    91,   117,    96, 
        118,   130,   130,   130,   125,   116,   114,   130,   115,   194, 
        117,   126,   113,   127,   119,   125,     7,   130,   110,   251, 
        108,   136,   130,   126,   113,   127,   119,   118,    79,   130, 
        137,   218,   116,   114,   138,   115,   147,   117,   140,   150, 
        171,   173,   125,   172,   179,    84,    85,    86,   180,   184, 
        126,   113,   127,   119,   125,   185,   213,   190,   193,   118, 
        216,   205,   210,   220,   116,   114,   217,   115,   123,   117, 
        118,    20,   182,    22,   222,   116,   114,   219,   115,    31, 
        117,   125,   126,   113,   127,   119,     1,     2,     3,     4, 
          5,     6,     7,   126,   113,   127,   119,   118,    53,   224, 
        226,   247,   116,   114,   238,   115,   236,   117,   135,   240, 
         69,   227,    70,   125,   228,   246,   249,   252,   123,   123, 
        126,   113,   127,   119,   125,    87,   248,   257,   253,   118, 
        260,    88,    92,   255,   116,   114,    86,   115,    92,   117, 
        261,   263,   266,   267,    27,   264,   182,   269,   123,    11, 
        182,   125,   126,   113,   127,   119,   271,     9,   129,   128, 
        130,   131,    22,   116,    37,    28,   152,   132,    39,    52, 
        132,   119,    86,    86,    86,    86,    86,    86,    86,    86, 
         86,    86,    50,   125,   182,    64,    56,   119,   182,    58, 
         62,    60,    92,    61,   182,    63,   109,    81,   202,   116, 
        116,   116,   116,   116,   116,   116,   116,   116,   116,   211, 
        132,   132,   132,   101,   186,   208,    13,   101,   101,   101, 
        101,   101,   244,   101,   175,   223,   245,    30,    17,     0, 
        132,     0,     0,   225,   101,   101,   233,   101,     0,   101, 
        132,   129,   128,   130,   131,   120,   121,   122,   123,   124, 
        132,     0,    13,    13,    13,    13,    13,    13,    13,    13, 
         13,    13,     0,     0,     0,   254,     0,   101,     0,   101, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   129, 
        128,   130,   131,   120,   121,   122,   123,   124,   132,     0, 
          0,   129,   128,   130,   131,   120,   121,   122,   123,   124, 
        132,     0,     0,     0,     0,     0,     0,   258,     0,     0, 
          0,     0,     0,   129,   128,   130,   131,   120,   121,   122, 
        123,   124,   132,     0,   129,   128,   130,   131,   120,   121, 
        122,   123,   124,   132,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   129,   128,   130,   131,   120,   121,   122,   123,   124, 
        132,     0,     0,   129,   128,   130,   131,   120,   121,   122, 
        123,   124,   132,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   221,     0,     0,     0, 
        129,   128,   130,   131,   120,   121,   122,   123,   124,   132, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   129,   128,   130,   131,   120,   121,   122,   123, 
        124,   132,     0,   129,   128,   130,   131,   120,   121,   122, 
        123,   124,   132,     0,     0,     0,     0,     0,     0,   102, 
          0,     0,     0,   102,   102,   102,   102,   102,     0,   102, 
        129,   128,   130,   131,   120,   121,   122,   123,   124,   132, 
        102,   102,     0,   102,     0,   102,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   129,   128,   130,   131,   120,   121,   122,   123, 
        124,   132,   103,   102,     0,   102,   103,   103,   103,   103, 
        103,   104,   103,     0,     0,   104,   104,   104,   104,   104, 
          0,   104,     0,   103,   103,     0,   103,     0,   103,     0, 
          0,     0,   104,   104,     0,   104,     0,   104,    95,     0, 
        101,     0,    95,    95,    95,    95,    95,   105,    95,     0, 
          0,   105,   105,   105,   105,   105,   103,   105,   103,    95, 
         95,     0,    95,     0,    95,   104,     0,   104,   105,   105, 
          0,   105,     0,   105,     0,     0,     0,     0,     0,     0, 
        101,   101,   101,   101,   101,   106,     0,     0,     0,   106, 
        106,   106,   106,   106,    95,   106,     0,     0,     0,     0, 
          0,     0,     0,   105,     0,     0,   106,   106,   107,   106, 
          0,   106,   107,   107,   107,   107,   107,     0,   107,     0, 
          0,     0,     0,     0,     0,     0,     0,    78,     0,   107, 
        107,     0,   107,     0,   107,     0,     0,     0,     0,   108, 
          0,   106,     0,   108,   108,   108,   108,   108,     0,   108, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        108,   108,   109,   108,   107,   108,   109,   109,   109,   109, 
        109,     0,   109,     0,     0,     0,     0,     0,     0,     0, 
          0,    82,     0,   109,   109,     0,   109,     0,   109,     0, 
          0,     0,     0,    96,     0,   108,     0,    96,    96,    96, 
         96,    96,     0,    96,     0,     0,     0,     0,     0,     0, 
          0,     0,    78,     0,    96,    96,    97,    96,   109,    96, 
         97,    97,    97,    97,    97,     0,    97,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    97,    97,     0, 
         97,     0,    97,     0,     0,     0,     0,    98,    89,    96, 
          0,    98,    98,    98,    98,    98,     0,    98,     0,     0, 
          0,     0,     0,     0,     0,     0,    82,     0,    98,    98, 
          0,    98,    97,    98,    99,     0,   102,     0,    99,    99, 
         99,    99,    99,   100,    99,     0,     0,   100,   100,   100, 
        100,   100,     0,   100,     0,    99,    99,     0,    99,     0, 
         99,     0,    73,    98,   100,   100,     0,   100,     0,   100, 
          0,     0,     0,     0,     0,     0,   102,   102,   102,   102, 
        102,     0,     0,     0,     0,     0,     0,     0,     0,   103, 
         99,   181,     0,     0,     0,     0,   112,     0,   104,   100, 
        112,   112,   112,   112,   112,     0,   112,    78,    78,    78, 
          0,     0,     0,     0,     0,    89,     0,   112,   112,     0, 
        112,     0,   112,     0,     0,    95,     0,     0,     0,   103, 
        103,   103,   103,   103,   105,     0,     0,     0,   104,   104, 
        104,   104,   104,     0,     0,     0,     0,    73,     0,     0, 
          0,     0,   112,     0,     0,     0,     0,     0,     0,     0, 
          0,    82,    82,    82,     0,    95,    95,    95,    95,    95, 
          0,     0,   106,     0,   105,   105,   105,   105,   105,     0, 
          0,     0,     0,     0,     0,     0,     0,    78,    78,    78, 
         78,     0,    78,    78,     0,   107,     0,     0,     0,     0, 
          0,     0,   126,     0,   126,     0,   126,    78,    78,    78, 
         78,     0,   106,   106,   106,   106,   106,    78,    78,     0, 
          0,   126,   126,     0,   126,     0,   108,     0,    84,    85, 
         86,     0,     0,     0,     0,   107,   107,   107,   107,   107, 
          0,    82,    82,    82,    82,     0,     0,    82,     0,   109, 
          0,     0,     0,   126,     0,     0,     0,     0,     0,     0, 
          0,    82,    82,    82,    82,     0,   108,   108,   108,   108, 
        108,    82,    82,     0,     0,     0,     0,     0,     0,     0, 
         96,     0,    73,    73,    73,   126,     0,     0,     0,   109, 
        109,   109,   109,   109,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    97,     0,     0,     0,     0,    87,    97, 
         98,    99,     0,     0,    88,     0,     0,     0,     0,     0, 
         96,    96,    96,    96,    96,     0,     0,     0,   100,   101, 
        102,   103,     0,     0,    98,    84,    85,    86,   104,     0, 
          0,     0,     0,    97,    97,    97,    97,    97,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    99,    73,    73,    73,    73,     0,     0,    73,     0, 
        100,     0,     0,     0,    98,    98,    98,    98,    98,     0, 
          0,     0,    73,    73,    73,    73,     0,     0,     0,     0, 
          0,     0,    73,     0,     0,     0,     0,     0,     0,     0, 
          0,    99,    99,    99,    99,    99,     0,     0,     0,     0, 
        100,   100,   100,   100,   100,    87,    97,    98,    99,     0, 
          0,    88,   126,   112,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   100,   101,   102,   103,    90, 
          0,     0,     0,     0,     0,   104,     0,     0,     0,     0, 
          0,     0,     0,   112,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   112,   112,   112,   112,   112,     0,     0, 
          0,     0,   126,   126,     0,     0,     0,   154,   155,   156, 
        157,   158,   159,   160,   161,   162,   163,   164,   165,     0, 
        167,   168,   169,   170,     0,     0,     0,     0,     0,     0, 
          0,     0,   126,   176,     0,   178,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   187,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        192,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   187,   203,     0,     0,     0,   206,   207, 
          0,     0,     0,     0,   187,   212,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   187,     0,     0,     0,     0,   187,     0, 
          0,   187,     0,     0,   235,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        187, 
    );
    protected static $yyCheck = array(37,
         42,   123,   125,    41,    42,    43,    44,    45,    60,    47, 
         62,    40,   260,    59,   125,    40,   260,   125,   123,    80, 
         58,    59,    60,    61,    62,    63,    37,   181,   260,   260, 
         41,    42,    43,    44,    45,   310,    47,   260,    40,    91, 
         42,   195,    44,    41,    59,   310,   107,    58,    59,    60, 
         61,    62,    63,    91,    28,    93,    59,    59,    32,    62, 
         62,    59,   402,   403,    60,   344,   345,    41,    37,   409, 
         46,   218,   320,    42,    43,   222,    45,   123,    47,    37, 
         91,   311,    93,    41,    42,    43,    44,    45,   320,    47, 
         59,    60,    61,    62,    63,    91,   340,   123,   330,   253, 
         58,    59,    60,    61,    62,    63,    37,   330,   123,   256, 
         41,    42,    43,   260,    45,   269,    47,   123,    37,   266, 
        123,   123,    91,    42,    43,    93,    45,    44,    47,    60, 
         61,    62,    63,    91,     0,    93,    62,   260,   260,    58, 
         37,    60,    61,    62,    63,    42,    43,   125,    45,   260, 
         47,    37,   260,   125,   340,    40,    42,    43,   260,    45, 
         91,    47,    59,    60,    61,    62,    63,   300,   301,   302, 
         40,    61,    91,    59,    60,    61,    62,    63,    37,   340, 
        260,    47,    48,    42,    43,    44,    45,    59,    47,    40, 
         37,   300,   301,   302,    91,    42,    43,   320,    45,   173, 
         47,    60,    61,    62,    63,    91,   311,   330,    40,   238, 
         59,    41,   320,    60,    61,    62,    63,    37,   340,   330, 
         44,    41,    42,    43,    41,    45,   125,    47,   123,    41, 
        260,   321,    91,   340,    40,   260,   261,   262,    40,    40, 
         60,    61,    62,    63,    91,    40,    93,    40,    40,    37, 
        125,   361,    41,    40,    42,    43,    59,    45,   260,    47, 
         37,    16,   144,    18,    41,    42,    43,   125,    45,    24, 
         47,    91,    60,    61,    62,    63,   280,   281,   282,   283, 
        284,   285,   286,    60,    61,    62,    63,    37,    43,    41, 
        125,    41,    42,    43,   123,    45,   340,    47,   340,    41, 
         55,   344,    57,    91,   345,    59,   371,    40,   310,   311, 
         60,    61,    62,    63,    91,   340,    61,   125,   123,    37, 
         41,   346,    77,    62,    42,    43,   364,    45,    83,    47, 
        340,   340,    41,    41,    59,   125,   218,   123,   340,   123, 
        222,    91,    60,    61,    62,    63,   125,   123,   400,   401, 
        402,   403,    59,   364,    41,    59,   111,   409,    41,   125, 
        260,    41,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   409,   125,    91,   256,    37,    47,    59,   260,    48, 
         42,    43,   137,    45,   266,    47,    83,    73,   179,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   409,   190, 
        300,   301,   302,    37,   150,   186,   364,    41,    42,    43, 
         44,    45,   230,    47,   137,   209,   232,    23,    12,    -1, 
        320,    -1,    -1,   214,    58,    59,   217,    61,    -1,    63, 
        330,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
        409,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   409,    -1,    -1,    -1,   246,    -1,    91,    -1,    93, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   409,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
        409,    -1,    -1,    -1,    -1,    -1,    -1,   252,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   409,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
        409,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   364,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   409, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   409,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    37, 
         -1,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   409, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   409,    37,    91,    -1,    93,    41,    42,    43,    44, 
         45,    37,    47,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    37,    -1, 
        364,    -1,    41,    42,    43,    44,    45,    37,    47,    -1, 
         -1,    41,    42,    43,    44,    45,    91,    47,    93,    58, 
         59,    -1,    61,    -1,    63,    91,    -1,    93,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    37,    -1,    -1,    -1,    41, 
         42,    43,    44,    45,    93,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    -1,    -1,    58,    59,    37,    61, 
         -1,    63,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    37, 
         -1,    93,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    37,    61,    93,    63,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    40,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    37,    -1,    93,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   125,    -1,    58,    59,    37,    61,    93,    63, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,    37,    40,    93, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    58,    59, 
         -1,    61,    93,    63,    37,    -1,   364,    -1,    41,    42, 
         43,    44,    45,    37,    47,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    40,    93,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364, 
         93,   123,    -1,    -1,    -1,    -1,    37,    -1,   364,    93, 
         41,    42,    43,    44,    45,    -1,    47,   260,   261,   262, 
         -1,    -1,    -1,    -1,    -1,    40,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,   364,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,   364,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   125,    -1,    -1, 
         -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   260,   261,   262,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,   364,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342, 
        343,    -1,   345,   346,    -1,   364,    -1,    -1,    -1,    -1, 
         -1,    -1,    40,    -1,    42,    -1,    44,   360,   361,   362, 
        363,    -1,   404,   405,   406,   407,   408,   370,   371,    -1, 
         -1,    59,    60,    -1,    62,    -1,   364,    -1,   260,   261, 
        262,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,   340,   341,   342,   343,    -1,    -1,   346,    -1,   364, 
         -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   360,   361,   362,   363,    -1,   404,   405,   406,   407, 
        408,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        364,    -1,   260,   261,   262,   123,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   364,    -1,    -1,    -1,    -1,   340,   341, 
        342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,   360,   361, 
        362,   363,    -1,    -1,   364,   260,   261,   262,   370,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   364,   340,   341,   342,   343,    -1,    -1,   346,    -1, 
        364,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,    -1, 
         -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,   340,   341,   342,   343,    -1, 
         -1,   346,   260,   364,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363,    75, 
         -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    89,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   310,   311,    -1,    -1,    -1,   113,   114,   115, 
        116,   117,   118,   119,   120,   121,   122,   123,   124,    -1, 
        126,   127,   128,   129,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   340,   139,    -1,   141,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   151,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        166,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   179,   180,    -1,    -1,    -1,   184,   185, 
         -1,    -1,    -1,    -1,   190,   191,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,   214,    -1, 
         -1,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        246, 
    );
    protected static $yyFinal= 8;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 'T_FINAL', 
      'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_EXTENDS', 'T_IMPLEMENTS', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PROPERTY', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_AS', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 'T_OBJECT_OPERATOR', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 2:  #line 99 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
        $yyVals[-6+$yyTop]->name= $yyVals[-5+$yyTop];
        $yyVals[-6+$yyTop]->parent= $yyVals[-4+$yyTop];
        $yyVals[-6+$yyTop]->implements= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
        $yyVal= $yyVals[-6+$yyTop];
      } break;

    case 3:  #line 107 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 4:  #line 107 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
        $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
        $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
        $yyVal= $yyVals[-6+$yyTop];
      } break;

    case 5:  #line 117 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ClassNode()); } break;

    case 6:  #line 118 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new EnumNode()); } break;

    case 7:  #line 122 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 8:  #line 123 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 9:  #line 127 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 10:  #line 128 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 11:  #line 132 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 12:  #line 133 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 13:  #line 137 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 14:  #line 138 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 15:  #line 142 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 16:  #line 143 "grammar/xp.jay"
    { $yyVal['fields']= $yyVals[0+$yyTop]; } break;

    case 17:  #line 144 "grammar/xp.jay"
    { $yyVal['methods']= $yyVals[0+$yyTop]; } break;

    case 18:  #line 150 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 19:  #line 151 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 20:  #line 155 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
        $yyVal->modifiers= $yyVals[-4+$yyTop];
        $yyVal->type= $yyVals[-3+$yyTop];
        $yyVal->name= $yyVals[-2+$yyTop];
        $yyVal->initialization= $yyVals[-1+$yyTop];
      } break;

    case 21:  #line 161 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
        $yyVal->modifiers= $yyVals[-5+$yyTop];
        $yyVal->name= $yyVals[-3+$yyTop];
        $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
        $yyVal->get= $gs['get'];
        $yyVal->set= $gs['set'];
      } break;

    case 22:  #line 171 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 24:  #line 176 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 25:  #line 177 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 26:  #line 178 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 27:  #line 182 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 28:  #line 183 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 29:  #line 189 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 30:  #line 190 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 31:  #line 194 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 32:  #line 194 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
        $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
      } break;

    case 33:  #line 203 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 34:  #line 203 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 35:  #line 214 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 36:  #line 215 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 37:  #line 219 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 220 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 39:  #line 224 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 40:  #line 225 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 41:  #line 229 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-1+$yyTop]); } break;

    case 42:  #line 230 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 43:  #line 234 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 44:  #line 235 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 50:  #line 251 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 256 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 53:  #line 257 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 54:  #line 261 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 55:  #line 261 "grammar/xp.jay"
    { 
        $yyVal->expression= $yyVals[-1+$yyTop];
      } break;

    case 56:  #line 264 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 57:  #line 264 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
      } break;

    case 58:  #line 269 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 59:  #line 269 "grammar/xp.jay"
    {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
        $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
        $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 60:  #line 275 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 61:  #line 275 "grammar/xp.jay"
    {
        $yyVals[-10+$yyTop]->expression= $yyVals[-7+$yyTop];
        $yyVals[-10+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 62:  #line 279 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 63:  #line 279 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
        $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 64:  #line 283 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 65:  #line 283 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
      } break;

    case 66:  #line 287 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 67:  #line 287 "grammar/xp.jay"
    { 
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
        $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-4+$yyTop]; 
      } break;

    case 68:  #line 292 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 69:  #line 292 "grammar/xp.jay"
    { /* Throw statement */ 
        $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
      } break;

    case 71:  #line 299 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 72:  #line 300 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 73:  #line 304 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 74:  #line 305 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 75:  #line 305 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 76:  #line 310 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 77:  #line 311 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 78:  #line 315 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 79:  #line 316 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 80:  #line 320 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 81:  #line 320 "grammar/xp.jay"
    {
        $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
        $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
        $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
      } break;

    case 82:  #line 328 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 84:  #line 333 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 85:  #line 333 "grammar/xp.jay"
    {
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      } break;

    case 86:  #line 341 "grammar/xp.jay"
    { /* XXX Constant */ } break;

    case 87:  #line 342 "grammar/xp.jay"
    { /* XXX Number */ } break;

    case 88:  #line 343 "grammar/xp.jay"
    { /* XXX String */ } break;

    case 89:  #line 344 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new VariableNode()); $yyVal->name= $yyVals[0+$yyTop]; } break;

    case 90:  #line 345 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InstanceCreationNode()); } break;

    case 91:  #line 345 "grammar/xp.jay"
    { 
      $yyVals[-6+$yyTop]->type= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parameters= $yyVals[-2+$yyTop];
    } break;

    case 92:  #line 349 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 93:  #line 349 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-3+$yyTop]->parameters= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 94:  #line 354 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 95:  #line 355 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode()); $yyVal->variable= $yyVals[-2+$yyTop]; $yyVal->expression= $yyVals[0+$yyTop]; } break;

    case 96:  #line 356 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode()); $yyVal->variable= $yyVals[-2+$yyTop]; $yyVal->expression= $yyVals[0+$yyTop]; } break;

    case 97:  #line 357 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode()); $yyVal->variable= $yyVals[-2+$yyTop]; $yyVal->expression= $yyVals[0+$yyTop]; } break;

    case 98:  #line 358 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode()); $yyVal->variable= $yyVals[-2+$yyTop]; $yyVal->expression= $yyVals[0+$yyTop]; } break;

    case 99:  #line 359 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode()); $yyVal->variable= $yyVals[-2+$yyTop]; $yyVal->expression= $yyVals[0+$yyTop]; } break;

    case 100:  #line 360 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode()); $yyVal->variable= $yyVals[-2+$yyTop]; $yyVal->expression= $yyVals[0+$yyTop]; } break;

    case 101:  #line 361 "grammar/xp.jay"
    { /* XXX SmallerThan */ } break;

    case 102:  #line 362 "grammar/xp.jay"
    { /* XXX GreaterThan */ } break;

    case 103:  #line 363 "grammar/xp.jay"
    { /* XXX S|E */ } break;

    case 104:  #line 364 "grammar/xp.jay"
    { /* XXX G|E */ } break;

    case 105:  #line 365 "grammar/xp.jay"
    { /* XXX Add */ } break;

    case 106:  #line 366 "grammar/xp.jay"
    { /* XXX Subtract */ } break;

    case 107:  #line 367 "grammar/xp.jay"
    { /* XXX Multiply */ } break;

    case 108:  #line 368 "grammar/xp.jay"
    { /* XXX Divide */ } break;

    case 109:  #line 369 "grammar/xp.jay"
    { /* XXX Modulo */ } break;

    case 110:  #line 370 "grammar/xp.jay"
    { /* XXX Post-Increment */ } break;

    case 111:  #line 371 "grammar/xp.jay"
    { /* XXX Post-Decrement */ } break;

    case 112:  #line 372 "grammar/xp.jay"
    { /* XXX Ternary */ } break;

    case 113:  #line 373 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 114:  #line 377 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 115:  #line 377 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 116:  #line 380 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]= $yyLex->create(new VariableNode()); 
      $yyVals[-1+$yyTop]->name= $yyVals[0+$yyTop]; 
    } break;

    case 117:  #line 384 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 118:  #line 384 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 119:  #line 391 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 121:  #line 395 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 122:  #line 396 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 123:  #line 402 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 124:  #line 403 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 125:  #line 404 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 126:  #line 408 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 127:  #line 409 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 128:  #line 413 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 129:  #line 414 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 130:  #line 420 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 131:  #line 421 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 132:  #line 425 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 133:  #line 426 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 134:  #line 430 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 135:  #line 431 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 136:  #line 432 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 137:  #line 433 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 138:  #line 434 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 139:  #line 435 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 140:  #line 436 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1207 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
