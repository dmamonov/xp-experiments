<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 52 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_BOOLEAN_OR',  414);
  define('TOKEN_T_BOOLEAN_AND',  415);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_DECIMAL',  263);
  define('TOKEN_T_HEX',  264);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_PACKAGE',  303);
  define('TOKEN_T_IMPORT',  304);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_T_DOUBLE_ARROW',  413);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          9,     9,     9,     4,     4,    12,     3,    16,     3,    18, 
          3,    13,    13,    14,    14,    19,    19,    21,    21,    15, 
         15,    22,    22,    22,    17,    17,    17,    26,    26,    28, 
         27,    29,    27,    23,    23,    34,    34,    33,    33,    33, 
         32,    32,    37,    24,    40,    24,    42,    24,    10,    10, 
         43,    43,    45,    45,    45,    39,    39,    36,    36,    48, 
         48,    49,    49,    38,    38,    41,    41,    41,    41,    41, 
         41,    25,    25,    35,    35,    51,    50,    52,    50,    55, 
         50,    57,    50,    59,    50,    60,    50,    61,    50,    63, 
         50,    50,    50,    58,    58,    53,    53,    54,    64,    54, 
         62,    62,    65,    65,    69,    68,    66,    66,    70,    67, 
         56,    56,    71,    71,    46,    46,    72,    72,    30,    75, 
         30,    76,    30,    77,    30,    78,    30,    79,    30,    30, 
         30,    30,    30,    30,    30,    30,    30,    30,    73,    85, 
         73,    73,    73,    73,    73,    73,    86,    86,    47,    47, 
         87,    80,    80,    80,    80,    80,    80,    81,    81,    81, 
         81,    81,    81,    82,    82,    82,    82,    82,    82,    83, 
         83,    83,    83,    83,    83,    84,    84,    74,    74,    89, 
         88,    88,    90,    88,    88,    31,    31,    11,    11,    91, 
         92,    92,    93,    93,    20,    20,    44,    44,    94,    94, 
         95,    95,    95,    95,    95,    95,    95, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     6, 
          1,     1,     3,     1,     3,     0,     9,     0,     9,     0, 
          8,     0,     2,     0,     2,     0,     2,     0,     3,     2, 
          0,     1,     1,     4,     3,     1,     0,     1,     3,     0, 
          3,     0,     6,     5,     6,     0,     1,     2,     4,     4, 
          0,     2,     0,     9,     0,     8,     0,     9,     4,     1, 
          1,     3,     2,     5,     5,     1,     3,     0,     1,     1, 
          3,     3,     3,     0,     2,     1,     1,     1,     1,     1, 
          1,     0,     1,     1,     2,     0,     4,     0,     7,     0, 
         10,     0,     8,     0,     6,     0,     7,     0,     6,     0, 
          4,     2,     1,     3,     1,     1,     3,     0,     0,     3, 
          2,     1,     1,     2,     0,     9,     0,     1,     0,     5, 
          0,     1,     1,     3,     0,     1,     5,     6,     1,     0, 
          3,     0,     4,     0,     5,     0,     8,     0,     6,     3, 
          1,     1,     1,     1,     1,     5,     3,     3,     1,     0, 
          4,     3,     1,     1,     1,     1,     0,     1,     1,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     2, 
          2,     2,     2,     2,     2,     2,     2,     0,     1,     0, 
          4,     2,     0,     6,     2,     1,     1,     1,     4,     3, 
          1,     3,     1,     3,     1,     3,     0,     1,     1,     2, 
          1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   211,   213,   212,   214,   216,   215,   217,     1, 
          0,    60,   208,     0,     8,     0,     4,     0,     0,     0, 
          0,    16,    20,    18,   210,    15,     0,     0,     0,     0, 
          0,     0,     0,    12,     0,     0,     0,    59,    62,     0, 
          0,     0,     0,     0,    10,     0,     0,   150,     0,     0, 
          0,     0,     0,   156,   153,   155,   154,   130,   132,     0, 
          0,     0,     0,     0,     0,   129,   141,   142,   143,   144, 
        145,     0,     0,     0,     0,     0,     0,     0,    13,     0, 
          0,     0,     0,     0,     0,     0,   138,     0,     0,     0, 
        158,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   186, 
        187,     0,     0,     0,     0,     0,     0,     0,    64,    65, 
          0,     0,   203,     0,     0,    23,     0,     0,     0,    27, 
         31,     0,     0,     0,   122,     0,   190,     0,   131,     0, 
          0,   196,     0,     0,   197,   152,   140,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   168,   169,   170,   171,   172,   173, 
          0,   160,     0,   199,     0,    25,    31,     0,     0,     0, 
          0,   151,     0,     0,     0,     0,     0,     0,   133,     0, 
          0,     0,   204,   202,     0,   206,     0,    21,     0,    30, 
         32,    33,     0,     0,     0,     0,   124,     0,     0,     0, 
        193,     0,     0,   135,     0,     0,    17,     0,     0,     0, 
          0,     0,     0,     0,     0,    19,    31,     0,   139,   191, 
          0,     0,     0,     0,    86,     0,   100,    90,    94,    96, 
         92,    88,   103,     0,     0,    83,     0,    55,    76,    77, 
         78,    79,    80,    81,     0,     0,     0,     0,     0,    31, 
         41,     0,     0,    39,     0,     0,   127,     0,     0,    98, 
          0,     0,     0,     0,     0,     0,    34,   102,    85,     0, 
         57,     0,     0,   200,    53,     0,     0,     0,     0,   194, 
        128,   137,     0,     0,     0,     0,     0,     0,   106,     0, 
          0,     0,     0,     0,    69,     0,     0,     0,    48,     0, 
         47,     0,     0,     0,    44,    29,     0,    87,     0,   101, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    45,     0,    43,     0,     0,     0, 
        107,     0,     0,     0,    73,    72,     0,     0,    71,     0, 
         49,    50,     0,   115,   119,    99,     0,   112,     0,     0, 
         95,     0,     0,     0,     0,    75,    66,     0,    56,     0, 
          0,     0,     0,   111,   118,   114,     0,    97,     0,     0, 
        109,    89,     0,    58,    54,     0,     0,     0,   104,    93, 
          0,    67,     0,     0,     0,   110,     0,   120,    91,     0, 
          0,     0,   116, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    20,    72,     4,     7,     8,    11,    46,   209, 
        152,    41,    85,   138,   189,    43,   214,    42,    87,   140, 
        271,   210,   211,   212,   254,   215,   216,   234,   235,   255, 
        313,   297,   293,   322,   256,   314,   323,   358,   379,   290, 
        265,   317,    30,    22,    31,    74,   101,   315,   316,   257, 
        279,   286,   310,   392,   282,   144,   285,   374,   283,   284, 
        304,   366,   281,   401,   367,   384,   368,   369,   382,   383, 
        145,   154,    76,   149,    98,    99,   158,   159,   146,    77, 
         78,    79,    80,    81,    92,   102,    82,   150,   194,   241, 
        155,   134,   135,    23,    24, 
    );
    protected static $yySindex = array(         -253,
          0,     0,  -249,  -195,     0,    65,     0,  -249,    52,    44, 
       -147,    66,     0,     0,     0,     0,     0,     0,     0,     0, 
        -70,     0,     0,   172,     0,  -195,     0,    97,  -195,    76, 
        153,     0,     0,     0,     0,     0,   -38,   161,   172,    66, 
       -195,  -195,  -195,     0,   156,   147,   705,     0,     0,   149, 
        -95,   -69,   -95,   -38,     0,   705,   705,     0,   705,   705, 
        705,   705,    14,     0,     0,     0,     0,     0,     0,   705, 
        705,  -194,   261,   202,   208,     0,     0,     0,     0,     0, 
          0,   207,   -60,  -195,   -53,  -195,   137,   -53,     0,   148, 
        148,   705,   148,   148,   148,   148,     0,   -89,  -195,   261, 
          0,   134,   297,     0,   705,   705,   705,   705,   705,   705, 
        705,   705,   705,   705,   705,   705,   705,   705,   705,     0, 
          0,   705,   705,   705,   705,   705,   705,   705,     0,     0, 
        705,   -42,     0,   209,   226,     0,  -195,   155,   235,     0, 
          0,   158,   351,   189,     0,   705,     0,    23,     0,   -89, 
         17,     0,   247,   -89,     0,     0,     0,   -52,    35,   148, 
        148,   148,   148,   148,   148,   404,   148,   148,   148,   148, 
        148,   148,   148,   148,     0,     0,     0,     0,     0,     0, 
        933,     0,  -195,     0,   -60,     0,     0,  -195,   372,    37, 
        705,     0,   259,   705,   267,   -89,   216,   705,     0,   -89, 
        270,   705,     0,     0,   495,     0,   192,     0,  -196,     0, 
          0,     0,     0,   187,   258,   281,     0,   -89,   933,   233, 
          0,   210,   289,     0,   705,   148,     0,  2297,   112,     6, 
         -5,    71,  -228,   213,   301,     0,     0,    37,     0,     0, 
        705,   705,   213,   302,     0,   229,     0,     0,     0,     0, 
          0,     0,     0,   236,   459,     0,  2297,     0,     0,     0, 
          0,     0,     0,     0,   314,    95,   269,   324,   305,     0, 
          0,   705,   312,     0,   326,   253,     0,   -89,   705,     0, 
        705,   344,   345,  2331,   346,   357,     0,     0,     0,  -195, 
          0,  -107,    95,     0,     0,   705,   332,   603,   673,     0, 
          0,     0,   727,  2297,   780,   705,   705,  2297,     0,    38, 
        705,   705,   -41,   359,     0,   358,  -195,   361,     0,  2297, 
          0,   349,  -195,   933,     0,     0,   213,     0,   279,     0, 
        350,   835,   280,   230,   370,   857,   884,    77,   305,    98, 
       -195,   377,   379,   296,     0,   381,     0,  -157,   705,  2331, 
          0,   705,    84,  2331,     0,     0,  -195,    12,     0,    98, 
          0,     0,    98,     0,     0,     0,    90,     0,    99,   385, 
          0,   911,    46,   407,    79,     0,     0,  2297,     0,    12, 
         12,   420,   338,     0,     0,     0,   705,     0,   128,  2331, 
          0,     0,   347,     0,     0,  -195,  2297,   428,     0,     0, 
       2331,     0,   130,   348,  2331,     0,   433,     0,     0,   352, 
       2297,   362,     0, 
    );
    protected static $yyRindex= array(          922,
          0,     0,   227,     0,     0,   -47,     0,   747,   105,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   500,     0,     0,     0,     0,     0,     0, 
        383,     0,     0,     0,     0,     0,     0,     8,   608,     0, 
          0,     0,     0,     0,   435,     0,   457,     0,     0,   -26, 
       -104,   376,  -104,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    78,     0,     0,     0,     0,     0,     0,   375, 
          0,     0,   462,     0,     0,     0,     0,     0,     0,     0, 
          0,   -21,     0,     0,   382,     0,     0,   382,     0,   945, 
        999,   423,  1052,  1106,  1324,  1378,     0,   131,     0,     0, 
          0,     0,     0,  -226,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   455,     0,     0,     0,    19,     0, 
          0,     0,   -18,     0,     0,   482,     0,     0,     0,   176, 
        247,     0,     0,   131,     0,     0,     0,     0,     0,  1431, 
       1485,  1508,  1539,  1562,  1593,     0,  1616,  1652,  1706,  1759, 
       1816,  1991,  2036,  2089,     0,     0,     0,     0,     0,     0, 
        -20,     0,     0,     0,     0,     0,     0,     0,  -160,   400, 
          0,     0,     0,   431,   -32,   203,     0,   482,     0,   131, 
          0,     0,     0,     0,  -160,     0,   399,     0,     0,     0, 
          0,     0,   104,     0,   401,     4,     0,   131,   448,     0, 
          0,   507,     0,     0,   482,  2134,     0,   429,   -46,     0, 
          0,   -35,     0,    30,     0,     0,     0,     0,     0,     0, 
        482,   430,    25,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   432,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   494,     0, 
          0,     0,   -78,     0,     0,     0,     0,   131,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   515, 
          0,     0,   499,     0,     0,     0,     0,  -160,     0,     0, 
          0,     0,     0,   429,     0,   502,     0,   429,     0,     0, 
          0,     0,     0,     0,     0,   521,   515,     0,     0,     0, 
          0,     0,   515,   136,     0,     0,    30,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    32,    31, 
          0,     0,     0,     0,     0,     0,     0,     0,   502,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    31, 
          0,     0,    31,     0,     0,     0,  2210,     0,  1946,     0, 
          0,     0,   522,     0,  2260,     0,     0,   429,     0,     0, 
          0,     0,     0,     0,     0,     0,   482,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   429,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        429,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   556,     0,     0,   511,   560, 
        606,     0,   516,   480,  -179,     0,     0,     0,     0,  -131, 
       -201,     0,     0,     0,  -212,   333,     0,     0,     0,  2648, 
        -82,   231,   282,     0,  -211,  -206,     0,  -177,  -169,     0, 
          0,     0,   532,   534,     0,   380,    -3,   260,     0,  -244, 
          0,     0,   -74,     0,     0,   165,     0,     0,     0,     0, 
          0,     0,     0,     0,   243,     0,   232,     0,     0,     0, 
        409,     0,     0,  -119,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   -94,     0,     0, 
          0,   417,     0,   589,     0, 
    );
    protected static $yyTable = array(10,
        338,   147,   132,    44,   192,   186,   198,   205,   192,   192, 
        192,   192,   192,    14,   192,   320,   153,   198,    22,   159, 
        161,    36,   123,   161,    38,   192,   192,   192,   192,   192, 
        192,   268,   198,   136,   199,   198,    50,    50,    50,   309, 
        123,   277,   263,    75,    14,   289,    35,   261,   259,     1, 
        260,    63,   262,    97,     5,   196,   206,   273,   192,    26, 
        192,    28,    38,   229,     9,    28,    28,    28,    28,    28, 
        377,    28,    51,    28,   123,    51,    83,   205,    50,    50, 
        224,    50,    28,    28,    28,    28,    28,    28,    28,    74, 
        298,   329,   192,   192,   151,   333,   198,    26,   239,   207, 
         63,   196,    27,   159,   161,   309,   123,   197,   344,   309, 
        342,   269,    28,   134,   149,    28,   346,    28,   149,   149, 
        149,   149,   149,   230,   149,   347,   233,   182,    38,    29, 
         83,   264,    50,   231,   378,   149,   149,   149,   149,   149, 
        149,   205,    37,    42,    14,   309,    14,    40,    14,    28, 
         28,   258,   318,    74,    28,    12,   309,    26,   302,   207, 
        309,   267,    40,    14,    14,   393,    14,   188,    39,   207, 
        149,   188,   188,   188,   188,   188,    52,   188,   203,    52, 
         50,   207,   380,    50,   404,   381,   364,   365,   188,   188, 
        188,   188,   188,   188,    52,    14,    40,    14,   412,     9, 
         47,    54,   149,   149,   232,    55,    22,   122,    83,   123, 
        394,   395,   189,    14,    84,   104,   189,   189,   189,   189, 
        189,    45,   189,   188,   198,   376,    40,    14,    40,    32, 
         33,    34,   319,   189,   189,   189,   189,   189,   189,   195, 
         86,   207,   129,   195,   195,   195,   195,   195,   130,   195, 
        131,   207,   207,   207,   207,   188,   188,   137,   156,   141, 
        195,   195,   195,   195,   195,   195,   110,   183,   189,   185, 
        184,   108,   106,   119,   107,   371,   109,   187,   188,   375, 
        190,   192,   195,   198,   198,   232,   198,   200,   288,   122, 
        105,   123,   111,    14,   201,   195,   213,   110,   339,   218, 
        189,   189,   108,   106,   198,   107,   221,   109,   222,   225, 
        193,   236,   232,   198,   228,   400,   237,     5,   232,   148, 
        122,   105,   123,   111,   238,   240,   406,   195,   195,   243, 
        409,   192,   242,   110,   266,   270,   232,   157,   108,   106, 
        272,   107,   278,   109,    13,    14,    15,    16,    17,    18, 
         19,   280,    50,   291,   292,   119,   122,   105,   123,   111, 
        287,   294,   223,   295,    14,   296,   300,   192,   192,   192, 
        192,   192,   192,   192,   192,   192,   192,   301,   192,   192, 
        192,   192,   192,   306,   307,   311,   119,   110,    28,   244, 
        325,    50,   108,   106,   191,   107,   312,   109,   335,   340, 
        343,   341,    12,   348,   351,   275,   276,   345,   349,   352, 
        122,   105,   123,   111,    14,    14,   355,   360,   357,   361, 
        362,   363,   119,   373,    28,    28,    28,    28,    28,    28, 
         28,    28,    28,    28,   365,    28,    28,    28,    28,    28, 
        110,   149,   364,   387,    14,   108,   106,   390,   107,   391, 
        109,    13,    14,    15,    16,    17,    18,    19,   389,   396, 
        397,   202,    12,   122,   105,   123,   111,   399,   405,   407, 
        331,   402,   408,   410,   411,    61,   119,   149,   149,   149, 
        149,   149,   149,   149,   149,   149,   413,    14,   149,   149, 
        149,   149,   149,    11,   188,   110,   208,   125,    26,   157, 
        108,   106,   126,   107,    24,   109,     5,     5,     5,     5, 
          5,     5,     5,   370,    14,   121,   201,   288,   122,   105, 
        123,   111,   121,   125,    37,    36,     5,     5,     5,   119, 
        188,   188,   188,   188,   188,   188,   188,   188,   188,   189, 
        126,   188,   188,   188,   188,   188,   200,   125,   124,   120, 
        121,   398,    51,    82,   121,    68,    84,    46,   126,   127, 
        121,    70,   105,    25,    89,    21,   195,   142,    88,   356, 
        274,    49,    48,   220,   321,   189,   189,   189,   189,   189, 
        189,   189,   189,   189,   119,    12,   189,   189,   189,   189, 
        189,    13,    14,    15,   207,    17,    18,    19,   385,   217, 
        359,   204,   195,   195,   195,   195,   195,   195,   195,   195, 
        195,   386,    35,   195,   195,   195,   195,   195,     0,   227, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   125, 
        124,   120,   121,   112,   113,   114,   115,   116,     0,     0, 
        126,   127,   128,   117,   118,     0,    51,    52,    53,     0, 
          0,    13,    14,    15,   207,    17,    18,    19,   214,     0, 
        125,   124,   120,   121,   112,   113,   114,   115,   116,     0, 
          0,   126,   127,   128,   117,   118,     0,     0,   214,   214, 
        214,   214,   214,   214,   214,     0,     0,     0,   133,   136, 
          0,   139,     0,    12,     0,     0,   125,   124,   120,   121, 
        112,   113,   114,   115,   116,     0,     0,   126,   127,   110, 
        117,   118,     0,   327,   108,   106,     0,   107,   214,   109, 
          0,     0,     0,     0,     0,     0,     0,   326,   214,     0, 
          0,     0,   122,   105,   123,   111,     0,    59,     0,     0, 
          0,     0,   139,     0,    71,     0,     0,    56,     0,    57, 
        125,   124,   120,   121,   112,   113,   114,   115,   116,   209, 
          0,   126,   127,   110,   117,   118,     0,     0,   108,   106, 
          0,   107,     0,   109,    13,    14,    15,   207,    17,    18, 
         19,     0,     0,     0,     0,   328,   122,   105,   123,   111, 
        133,     0,     0,   139,     0,    58,     0,     0,   119,   209, 
        209,   209,     0,   125,   124,   120,   121,   112,   113,   114, 
        115,   116,     0,     0,   126,   127,   110,   117,   118,   209, 
          0,   108,   106,     0,   107,     0,   109,    70,     0,   209, 
         60,     0,     0,     0,     0,     0,     0,     7,   330,   122, 
        105,   123,   111,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   119,     0,     0,     0,     0,     0,   125,   124, 
        120,   121,   112,   113,   114,   115,   116,   207,     0,   126, 
        127,   110,   117,   118,     0,   350,   108,   106,     0,   107, 
          0,   109,    13,    14,    15,   207,    17,    18,    19,     0, 
          0,     0,     0,   110,   122,   105,   123,   111,   108,   106, 
          0,   107,     0,   109,     0,   119,     0,   207,   207,   207, 
          0,     0,     0,     0,     0,     0,   122,   105,   123,   111, 
        110,     0,     0,     0,   354,   108,   106,   207,   107,     0, 
        109,     0,     0,     0,     0,     0,     0,   207,     0,     0, 
          0,     0,     0,   122,   105,   123,   111,   110,     0,     0, 
          0,   388,   108,   106,     0,   107,     0,   109,     0,     0, 
        119,     0,   139,     0,    63,    64,    65,    66,    67,   110, 
        122,   105,   123,   111,   108,   106,     0,   107,     0,   109, 
          0,   182,   119,     0,     0,   182,   182,   182,   182,   182, 
          0,   182,   122,   105,   123,   111,     0,     0,     0,     0, 
          0,   403,   182,   182,     0,   182,     0,   182,     0,   119, 
          0,     0,     2,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     7,     7,     7,     7, 
          7,     7,     7,     0,     0,   183,   119,   182,     0,   183, 
        183,   183,   183,   183,    68,   183,     7,     7,     7,     0, 
         69,     0,     0,     0,     0,     0,   183,   183,   119,   183, 
          0,   183,     0,     0,     0,     0,     0,     0,     0,   182, 
          0,     0,   125,   124,   120,   121,   112,   113,   114,   115, 
        116,     0,     0,   126,   127,     0,   117,   118,   180,     0, 
          0,   183,   180,   180,   180,   180,   180,     0,   180,     0, 
          0,     0,     0,     0,     0,     0,    61,    62,     0,   180, 
        180,     0,   180,     0,   180,     0,     0,     0,     0,     0, 
          0,     0,     0,   183,     0,     0,   125,   124,   120,   121, 
        112,   113,   114,   115,   116,     0,     0,   126,   127,     0, 
        117,   118,   181,     0,   180,     0,   181,   181,   181,   181, 
        181,     0,   181,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   181,   181,     0,   181,     0,   181,     0, 
          0,     0,     0,     0,     0,     0,   180,     0,     0,   125, 
        124,   120,   121,   112,   113,   114,   115,   116,     0,     0, 
        126,   127,     0,   117,   118,     0,     0,     0,   181,     0, 
          0,     2,     2,     2,     2,     2,     2,     2,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        353,     2,     2,     2,     0,     2,     0,     0,     0,     0, 
        181,     0,     0,     0,   125,   124,   120,   121,   112,   113, 
        114,   115,   116,     0,     0,   126,   127,     0,   117,   118, 
          0,     0,     0,     0,     0,     0,   125,   124,   120,   121, 
        112,   113,   114,   115,   116,     0,     0,   126,   127,     0, 
        117,   118,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   125,   124,   120,   121,   112,   113,   114, 
        115,   116,     0,     0,   126,   127,     0,   117,   118,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   182,     0, 
        125,   124,   120,   121,   112,   113,   114,   115,   116,     0, 
          0,   126,   127,     0,   117,   118,     0,     0,     0,     0, 
          0,     0,   125,   124,   120,   121,   112,   113,   114,   115, 
        116,     0,     0,   126,   127,     0,   117,   118,   182,   182, 
        182,   182,   182,     0,     0,     0,     0,   182,   182,   182, 
        184,     0,   183,     0,   184,   184,   184,   184,   184,     0, 
        184,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   184,   184,     0,   184,     0,   184,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   183,   183,   183,   183,   183,     0,     0,     0, 
          0,   183,   183,   183,   185,   180,   184,     0,   185,   185, 
        185,   185,   185,     0,   185,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   185,   185,     0,   185,     0, 
        185,     0,     0,     0,     0,     0,     0,     0,   184,     0, 
          0,     0,     0,     0,     0,   180,   180,   180,   180,   180, 
          0,     0,     0,     0,   180,   180,   180,   162,     0,   181, 
        185,   162,   162,   162,   162,   162,     0,   162,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   162,   162, 
          0,   162,     0,   162,     0,     0,     0,     0,     0,     0, 
          0,     0,   185,     0,     0,     0,     0,     0,     0,   181, 
        181,   181,   181,   181,     0,     0,     0,     0,   181,   181, 
        181,   174,     0,   162,     0,   174,   174,   174,   174,   174, 
          0,   174,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   174,   174,   175,   174,     0,   174,   175,   175, 
        175,   175,   175,     0,   175,   162,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   175,   175,     0,   175,     0, 
        175,     0,     0,     0,     0,   176,     0,   174,     0,   176, 
        176,   176,   176,   176,     0,   176,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   176,   176,   177,   176, 
        175,   176,   177,   177,   177,   177,   177,     0,   177,   174, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   177, 
        177,     0,   177,     0,   177,     0,     0,     0,     0,   178, 
          0,   176,   175,   178,   178,   178,   178,   178,     0,   178, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        178,   178,   163,   178,   177,   178,   163,   163,   163,   163, 
        163,     0,   163,   176,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   163,   163,     0,   163,     0,   163,     0, 
          0,     0,     0,     0,     0,   178,   177,   184,   164,     0, 
          0,     0,   164,   164,   164,   164,   164,     0,   164,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   163,   164, 
        164,     0,   164,     0,   164,     0,     0,   178,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   184,   184,   184, 
        184,   184,     0,     0,     0,     0,   184,   184,   184,     0, 
        163,   185,   165,     0,   164,     0,   165,   165,   165,   165, 
        165,     0,   165,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   165,   165,     0,   165,     0,   165,     0, 
          0,     0,     0,     0,     0,     0,   164,     0,     0,     0, 
          0,   185,   185,   185,   185,   185,     0,     0,     0,     0, 
        185,   185,   185,     0,   162,   166,     0,     0,   165,   166, 
        166,   166,   166,   166,     0,   166,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   166,   166,     0,   166, 
          0,   166,     0,     0,     0,     0,     0,     0,     0,     0, 
        165,     0,     0,     0,   162,   162,   162,   162,   162,     0, 
          0,     0,     0,   162,   162,   162,     0,     0,   174,     0, 
          0,   166,   167,     0,     0,     0,   167,   167,   167,   167, 
        167,     0,   167,     0,     0,     0,     0,     0,     0,     0, 
          0,   175,     0,   167,   167,     0,   167,     0,   167,     0, 
          0,     0,     0,   166,     0,     0,     0,     0,   174,   174, 
        174,   174,   174,     0,     0,     0,     0,   174,   174,   174, 
          0,     0,   176,     0,     0,     0,     0,     0,   167,     0, 
          0,   175,   175,   175,   175,   175,     0,     0,     0,     0, 
        175,   175,   175,     0,     0,   177,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        167,     0,   176,   176,   176,   176,   176,     0,     0,     0, 
          0,   176,   176,   176,     0,     0,   178,     0,     0,     0, 
          0,     0,     0,     0,     0,   177,   177,   177,   177,   177, 
          0,     0,     0,     0,   177,   177,   177,     0,   113,   163, 
          0,     0,     0,     0,     0,   113,     0,     0,   113,     0, 
        113,     0,     0,     0,     0,     0,   178,   178,   178,   178, 
        178,     0,     0,     0,   113,   178,   178,   178,     0,     0, 
          0,     0,     0,     0,     0,   164,     0,     0,     0,   163, 
        163,   163,   163,   163,     0,     0,     0,   147,   163,   163, 
        163,   147,   147,   147,   147,   147,   113,   147,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   147,   147, 
          0,   147,     0,   147,     0,   164,   164,   164,   164,   164, 
          0,     0,     0,     0,   164,   164,   164,     0,   113,   165, 
        113,   113,   148,     0,     0,     0,   148,   148,   148,   148, 
        148,     0,   148,   147,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   148,   148,     0,   148,     0,   148,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   165, 
        165,   165,   165,   165,     0,   147,     0,     0,   165,   165, 
        165,     0,   166,     0,     0,   179,     0,     0,   148,   179, 
        179,   179,   179,   179,     0,   179,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   179,   179,     0,   179, 
          0,   179,     0,     0,     0,     0,     0,     0,     0,     0, 
        148,     0,   166,   166,   166,   166,   166,     0,     0,     0, 
        146,   166,   166,   166,   146,   146,   146,   146,   146,   167, 
        146,   179,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   146,   146,     0,   146,     0,   146,     0,     0,     0, 
          0,     0,     0,     0,     0,   113,   113,   113,   113,   113, 
          0,     0,     0,   179,     0,     0,     0,     0,     0,   167, 
        167,   167,   167,   167,     0,     0,   146,     0,   167,   167, 
        167,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   117,     0,     0,     0,     0,     0,     0,   117, 
          0,     0,   117,     0,   117,     0,     0,     0,   146,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   117,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   113,   113,   113,   113,     0, 
        113,   113,   108,     0,     0,     0,     0,     0,     0,   108, 
        117,     0,   108,     0,   108,   113,   113,   113,   113,     0, 
          0,     0,     0,     0,     0,   113,   113,     0,   108,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    59, 
          0,     0,   117,     0,   117,   117,    71,     0,     0,    56, 
          0,    57,     0,     0,     0,     0,     0,   113,   113,     0, 
        108,     0,     0,     0,   147,   253,     0,     0,     0,     0, 
          0,     0,     0,    59,     0,     0,     0,     0,     0,     0, 
         71,     0,     0,    56,     0,    57,     0,     0,     0,     0, 
          0,     0,   108,     0,   108,   108,     0,    58,     0,   253, 
          0,     0,     0,     0,   147,   147,   147,   147,   147,   148, 
          0,     0,     0,   147,   147,   147,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    70, 
          0,    58,    60,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   148, 
        148,   148,   148,   148,     0,     0,     0,     0,   148,   148, 
        148,     0,   179,   308,     0,     0,    60,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   117, 
        117,   117,   117,   117,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   179,   179,   179,   179,   179,   146,     0,     0, 
          0,   179,   179,   179,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   108, 
        108,   108,   108,   108,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   146,   146,   146, 
        146,   146,     0,     0,     0,     0,   146,   146,   146,   117, 
        117,   117,   117,     0,     0,   117,    63,    64,    65,    66, 
         67,     0,     0,     0,     0,     0,     0,     0,     0,   117, 
        117,   117,   117,     0,     0,     0,     0,     0,     0,   117, 
        117,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         63,    64,    65,    66,    67,     0,     0,     0,     0,   108, 
        108,   108,   108,     0,     0,   108,     0,     0,     0,     0, 
          0,   117,   117,     0,     0,     0,     0,     0,     0,   108, 
        108,   108,   108,     0,     0,     0,     0,     0,     0,   108, 
          0,     0,     0,     0,     0,     0,    68,   245,   246,   247, 
          0,     0,    69,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   248,   249,   250,   251, 
          0,   108,   108,     0,     0,     0,   252,     0,     0,     0, 
         68,   245,   246,   247,     0,     0,    69,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        248,   249,   250,   251,    73,     0,     0,     0,    61,    62, 
        252,     0,     0,    90,    91,     0,    93,    94,    95,    96, 
          0,     0,     0,     0,     0,     0,     0,   100,   103,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    61,    62,     0,     0,     0,     0,     0,   143, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   160,   161,   162,   163,   164,   165,   166,   167, 
        168,   169,   170,   171,   172,   173,   174,     0,     0,   175, 
        176,   177,   178,   179,   180,   181,     0,     0,   100,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   143,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   143,     0, 
          0,   219,     0,     0,     0,   143,     0,     0,     0,   226, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   143,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   143,   143, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   299, 
          0,     0,     0,     0,     0,     0,   303,     0,   305,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   324,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   143,   332,   334,     0,     0,   336,   337, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   143,     0,     0,   372, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   143, 
    );
    protected static $yyCheck = array(4,
         42,    91,    63,    42,    37,   137,    42,   187,    41,    42, 
         43,    44,    45,    60,    47,   123,    99,    44,   123,    41, 
         41,    26,    41,    44,    29,    58,    59,    60,    61,    62, 
         63,   260,    59,   260,   154,    62,    41,    42,    43,   284, 
         59,   243,    37,    47,    91,   257,   125,    42,    43,   303, 
         45,    44,    47,    40,   304,   150,   188,   237,    91,    46, 
         93,    37,    59,   260,   260,    41,    42,    43,    44,    45, 
         59,    47,    41,    44,    93,    44,    60,    59,    83,    84, 
        200,    86,    58,    59,    60,    61,    62,    63,    59,    59, 
        270,   304,   125,   126,    99,   308,   123,    46,   218,   260, 
         93,   196,    59,   125,   125,   350,   125,    91,   320,   354, 
        317,   340,   260,   340,    37,    91,   323,    93,    41,    42, 
         43,    44,    45,   320,    47,   327,   209,   131,   125,    64, 
         60,   126,   137,   330,   123,    58,    59,    60,    61,    62, 
         63,   123,    46,    40,    40,   390,    42,    44,    44,   125, 
        126,    40,   260,   123,   125,    91,   401,    46,   278,   320, 
        405,    91,    59,    59,    60,   378,    62,    37,    93,   330, 
         93,    41,    42,    43,    44,    45,    41,    47,   183,    44, 
        185,   260,   360,   188,   397,   363,   344,   345,    58,    59, 
         60,    61,    62,    63,    59,    91,    44,    93,   411,   260, 
         40,    46,   125,   126,   209,    59,   311,    60,    60,    62, 
        380,   381,    37,   260,   310,   410,    41,    42,    43,    44, 
         45,   260,    47,    93,   260,   357,   123,   123,   125,   300, 
        301,   302,   340,    58,    59,    60,    61,    62,    63,    37, 
        310,   320,    41,    41,    42,    43,    44,    45,    41,    47, 
         44,   330,   300,   301,   302,   125,   126,   311,   125,   123, 
         58,    59,    60,    61,    62,    63,    37,   310,    93,    44, 
         62,    42,    43,   126,    45,   350,    47,   123,    44,   354, 
        123,    93,   260,   310,   311,   290,    40,   340,    59,    60, 
         61,    62,    63,   340,   260,    93,   260,    37,   340,    41, 
        125,   126,    42,    43,   340,    45,    40,    47,    93,    40, 
        146,   125,   317,   340,   123,   390,    59,    91,   323,   409, 
         60,    61,    62,    63,    44,    93,   401,   125,   126,    41, 
        405,   364,   123,    37,   340,   123,   341,    41,    42,    43, 
         40,    45,    41,    47,   280,   281,   282,   283,   284,   285, 
        286,   123,   357,    40,   260,   126,    60,    61,    62,    63, 
        125,    93,   198,    40,   260,    61,    41,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   409,   125,   411,   412, 
        413,   414,   415,    40,    40,    40,   126,    37,   364,   225, 
         59,   396,    42,    43,    44,    45,    40,    47,   361,    41, 
         40,    44,    91,   125,   125,   241,   242,    59,    59,    40, 
         60,    61,    62,    63,   310,   311,   340,    41,   321,    41, 
        125,    41,   126,   340,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,   409,   345,   411,   412,   413,   414,   415, 
         37,   364,   344,    59,   340,    42,    43,    41,    45,   371, 
         47,   280,   281,   282,   283,   284,   285,   286,   413,    40, 
        123,    58,    91,    60,    61,    62,    63,   340,    41,   340, 
        306,   125,   125,    41,   123,    93,   126,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   125,   410,   411,   412, 
        413,   414,   415,    59,   364,    37,   125,    41,   123,   125, 
         42,    43,    41,    45,   123,    47,   280,   281,   282,   283, 
        284,   285,   286,   349,   410,    93,    62,    59,    60,    61, 
         62,    63,    41,    93,   125,   125,   300,   301,   302,   126, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   364, 
         93,   411,   412,   413,   414,   415,    40,   400,   401,   402, 
        403,   387,    59,   125,   125,    41,   125,    59,   411,   412, 
         59,    41,    41,     8,    54,     6,   364,    88,    53,   339, 
        238,    40,    39,   194,   293,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   126,    91,   411,   412,   413,   414, 
        415,   280,   281,   282,   283,   284,   285,   286,   367,   191, 
        341,   185,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   369,    24,   411,   412,   413,   414,   415,    -1,   125, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,   413,   414,   415,    -1,    41,    42,    43,    -1, 
         -1,   280,   281,   282,   283,   284,   285,   286,   260,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,   413,   414,   415,    -1,    -1,   280,   281, 
        282,   283,   284,   285,   286,    -1,    -1,    -1,    83,    84, 
         -1,    86,    -1,    91,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    37, 
        414,   415,    -1,    41,    42,    43,    -1,    45,   320,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   330,    -1, 
         -1,    -1,    60,    61,    62,    63,    -1,    33,    -1,    -1, 
         -1,    -1,   137,    -1,    40,    -1,    -1,    43,    -1,    45, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   260, 
         -1,   411,   412,    37,   414,   415,    -1,    -1,    42,    43, 
         -1,    45,    -1,    47,   280,   281,   282,   283,   284,   285, 
        286,    -1,    -1,    -1,    -1,    59,    60,    61,    62,    63, 
        185,    -1,    -1,   188,    -1,    91,    -1,    -1,   126,   300, 
        301,   302,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    37,   414,   415,   320, 
         -1,    42,    43,    -1,    45,    -1,    47,   123,    -1,   330, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    91,    59,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   260,    -1,   411, 
        412,    37,   414,   415,    -1,    41,    42,    43,    -1,    45, 
         -1,    47,   280,   281,   282,   283,   284,   285,   286,    -1, 
         -1,    -1,    -1,    37,    60,    61,    62,    63,    42,    43, 
         -1,    45,    -1,    47,    -1,   126,    -1,   300,   301,   302, 
         -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63, 
         37,    -1,    -1,    -1,    41,    42,    43,   320,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,   330,    -1,    -1, 
         -1,    -1,    -1,    60,    61,    62,    63,    37,    -1,    -1, 
         -1,    41,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
        126,    -1,   357,    -1,   260,   261,   262,   263,   264,    37, 
         60,    61,    62,    63,    42,    43,    -1,    45,    -1,    47, 
         -1,    37,   126,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,   396,    58,    59,    -1,    61,    -1,    63,    -1,   126, 
         -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   280,   281,   282,   283, 
        284,   285,   286,    -1,    -1,    37,   126,    93,    -1,    41, 
         42,    43,    44,    45,   340,    47,   300,   301,   302,    -1, 
        346,    -1,    -1,    -1,    -1,    -1,    58,    59,   126,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,    37,    -1, 
         -1,    93,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   402,   403,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   125,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,    37,    -1,    93,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,    -1,    -1,    -1,    93,    -1, 
         -1,   280,   281,   282,   283,   284,   285,   286,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        364,   300,   301,   302,    -1,   304,    -1,    -1,    -1,    -1, 
        125,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
         37,    -1,   364,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,    37,   364,    93,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,    37,    -1,   364, 
         93,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,    37,    -1,    93,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    37,    61,    -1,    63,    41,    42, 
         43,    44,    45,    -1,    47,   125,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    37,    -1,    93,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    37,    61, 
         93,    63,    41,    42,    43,    44,    45,    -1,    47,   125, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    37, 
         -1,    93,   125,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    37,    61,    93,    63,    41,    42,    43,    44, 
         45,    -1,    47,   125,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    93,   125,   364,    37,    -1, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,   125,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,    -1, 
        125,   364,    37,    -1,    93,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,    -1,   364,    37,    -1,    -1,    93,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        125,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,    -1,    -1,   364,    -1, 
         -1,    93,    37,    -1,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   364,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
         -1,    -1,   364,    -1,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,    -1,    -1,   364,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        125,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,    -1,    -1,   364,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,    -1,    33,   364, 
         -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1, 
         45,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    59,   413,   414,   415,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   364,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    37,   413,   414, 
        415,    41,    42,    43,    44,    45,    91,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,    -1,   123,   364, 
        125,   126,    37,    -1,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    93,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,   125,    -1,    -1,   413,   414, 
        415,    -1,   364,    -1,    -1,    37,    -1,    -1,    93,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        125,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         37,   413,   414,   415,    41,    42,    43,    44,    45,   364, 
         47,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   260,   261,   262,   263,   264, 
         -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    93,    -1,   413,   414, 
        415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40, 
         -1,    -1,    43,    -1,    45,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   340,   341,   342,   343,    -1, 
        345,   346,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40, 
         91,    -1,    43,    -1,    45,   360,   361,   362,   363,    -1, 
         -1,    -1,    -1,    -1,    -1,   370,   371,    -1,    59,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33, 
         -1,    -1,   123,    -1,   125,   126,    40,    -1,    -1,    43, 
         -1,    45,    -1,    -1,    -1,    -1,    -1,   402,   403,    -1, 
         91,    -1,    -1,    -1,   364,    59,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1, 
         40,    -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1, 
         -1,    -1,   123,    -1,   125,   126,    -1,    91,    -1,    59, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,   364, 
         -1,    -1,    -1,   413,   414,   415,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123, 
         -1,    91,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,    -1,   364,   123,    -1,    -1,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,   364,    -1,    -1, 
         -1,   413,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,   340, 
        341,   342,   343,    -1,    -1,   346,   260,   261,   262,   263, 
        264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360, 
        361,   362,   363,    -1,    -1,    -1,    -1,    -1,    -1,   370, 
        371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        260,   261,   262,   263,   264,    -1,    -1,    -1,    -1,   340, 
        341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1,   360, 
        361,   362,   363,    -1,    -1,    -1,    -1,    -1,    -1,   370, 
         -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342,   343, 
         -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363, 
         -1,   402,   403,    -1,    -1,    -1,   370,    -1,    -1,    -1, 
        340,   341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        360,   361,   362,   363,    47,    -1,    -1,    -1,   402,   403, 
        370,    -1,    -1,    56,    57,    -1,    59,    60,    61,    62, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    92, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112, 
        113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122, 
        123,   124,   125,   126,   127,   128,    -1,    -1,   131,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   146,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1, 
         -1,   194,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   241,   242, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   272, 
         -1,    -1,    -1,    -1,    -1,    -1,   279,    -1,   281,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   296,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   306,   307,   308,    -1,    -1,   311,   312, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   349,    -1,    -1,   352, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   387, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 
      'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 
      'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 
      'T_FOREACH', 'T_AS', 'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 
      'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      'T_OBJECT_OPERATOR', 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
      'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 'T_BOOLEAN_AND', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 120 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 131 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 131 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 142 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 143 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 147 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 147 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 13:  #line 155 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 15:  #line 160 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 16:  #line 166 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 166 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 18:  #line 175 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 19:  #line 175 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 184 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 21:  #line 184 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 22:  #line 195 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 196 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 200 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 25:  #line 201 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 205 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 206 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 210 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 211 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 30:  #line 215 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 31:  #line 216 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 220 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 33:  #line 221 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 222 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 35:  #line 226 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 227 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 228 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 232 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 39:  #line 233 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 40:  #line 237 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 41:  #line 237 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 42:  #line 240 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 240 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 250 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 45:  #line 257 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop][0];
      $yyVal->annotations= $yyVals[-5+$yyTop][1];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 46:  #line 268 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 48:  #line 273 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 49:  #line 274 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 50:  #line 275 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 51:  #line 279 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 280 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 286 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 54:  #line 286 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 55:  #line 296 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 56:  #line 296 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 57:  #line 304 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 58:  #line 304 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 59:  #line 316 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 60:  #line 317 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 61:  #line 321 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 62:  #line 322 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 63:  #line 326 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 64:  #line 330 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= array('default' => $yyVals[-2+$yyTop]);
    } break;

    case 65:  #line 335 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-2+$yyTop];
    } break;

    case 66:  #line 343 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 67:  #line 344 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 68:  #line 348 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 69:  #line 349 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 70:  #line 353 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 71:  #line 354 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 72:  #line 358 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 73:  #line 359 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 74:  #line 363 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 75:  #line 364 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 82:  #line 383 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 84:  #line 388 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 85:  #line 389 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 86:  #line 393 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 87:  #line 393 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 88:  #line 396 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 89:  #line 396 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 90:  #line 401 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 91:  #line 401 "grammar/xp.jay"
    {
      $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 92:  #line 407 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 93:  #line 407 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      /* $1->assignment= $6; XX FIXME XX*/
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 94:  #line 412 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 95:  #line 412 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 96:  #line 416 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 97:  #line 416 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 98:  #line 420 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 99:  #line 420 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 100:  #line 425 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 101:  #line 425 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
    } break;

    case 104:  #line 433 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 105:  #line 434 "grammar/xp.jay"
    { $yyVal= array(NULL, $yyVals[0+$yyTop]); } break;

    case 106:  #line 438 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 107:  #line 439 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 108:  #line 443 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 109:  #line 444 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 110:  #line 444 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 111:  #line 449 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 112:  #line 450 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 113:  #line 454 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 114:  #line 455 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 115:  #line 459 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 116:  #line 459 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
  } break;

    case 117:  #line 467 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 119:  #line 472 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 120:  #line 472 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
  } break;

    case 121:  #line 480 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 123:  #line 485 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 124:  #line 486 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 125:  #line 490 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 127:  #line 495 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 128:  #line 501 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 130:  #line 510 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 131:  #line 510 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 132:  #line 513 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 133:  #line 513 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 134:  #line 518 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 135:  #line 518 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 136:  #line 523 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 137:  #line 523 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 138:  #line 529 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 139:  #line 529 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 140:  #line 535 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 141:  #line 536 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); } break;

    case 142:  #line 537 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); } break;

    case 143:  #line 538 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); } break;

    case 144:  #line 539 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); } break;

    case 145:  #line 540 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); $yyVal->postfix= TRUE; } break;

    case 146:  #line 541 "grammar/xp.jay"
    { /* XXX Ternary */ } break;

    case 149:  #line 547 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 150:  #line 548 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 151:  #line 548 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 152:  #line 552 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 153:  #line 557 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 154:  #line 558 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 155:  #line 559 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 156:  #line 560 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 157:  #line 564 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 159:  #line 569 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 160:  #line 570 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 161:  #line 574 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 162:  #line 578 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 163:  #line 579 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 164:  #line 580 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 165:  #line 581 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 166:  #line 582 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 167:  #line 583 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 168:  #line 587 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 169:  #line 588 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 170:  #line 589 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 171:  #line 590 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 172:  #line 591 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 173:  #line 592 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 174:  #line 596 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 175:  #line 597 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 176:  #line 598 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 177:  #line 599 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 178:  #line 600 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 179:  #line 601 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 180:  #line 605 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 181:  #line 606 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 182:  #line 607 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 183:  #line 608 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 184:  #line 609 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 185:  #line 610 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 614 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 187:  #line 615 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 188:  #line 620 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 190:  #line 625 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 191:  #line 625 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 192:  #line 628 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 193:  #line 632 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 194:  #line 632 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 195:  #line 636 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 198:  #line 647 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 199:  #line 648 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 200:  #line 652 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 201:  #line 656 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 202:  #line 657 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 204:  #line 662 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 205:  #line 666 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 206:  #line 667 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 207:  #line 673 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 208:  #line 674 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 209:  #line 678 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 210:  #line 679 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 211:  #line 683 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 212:  #line 684 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 213:  #line 685 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 214:  #line 686 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 215:  #line 687 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 216:  #line 688 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 217:  #line 689 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1858 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
