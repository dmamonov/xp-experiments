<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.StaticImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.InstanceOfNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.SwitchNode',
    'xp.compiler.ast.CaseNode',
    'xp.compiler.ast.DefaultNode',
    'xp.compiler.ast.BreakNode',
    'xp.compiler.ast.ContinueNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 61 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_MOD_EQUAL= 408;
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_INSTANCEOF= 312;
    const T_INC= 402;
    const T_DEC= 403;
    const T_SE= 401;
    const T_GE= 400;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_PROPERTY= 330;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_NEW= 346;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     9,     7, 
          8,     8,    10,    10,    10,     4,     4,    13,     3,    17, 
          3,    19,     3,    14,    14,    15,    15,    20,    20,    22, 
         22,    16,    16,    23,    23,    23,    18,    18,    18,    27, 
         27,    29,    28,    30,    28,    24,    24,    35,    35,    34, 
         34,    34,    33,    33,    38,    25,    41,    25,    43,    25, 
         11,    11,    44,    44,    46,    46,    46,    40,    40,    37, 
         37,    49,    49,    50,    50,    39,    39,    42,    42,    42, 
         42,    42,    42,    42,    42,    26,    26,    36,    36,    52, 
         51,    53,    51,    56,    51,    58,    51,    59,    51,    60, 
         51,    61,    51,    63,    51,    65,    51,    66,    51,    67, 
         51,    51,    51,    62,    62,    68,    68,    70,    69,    71, 
         69,    54,    54,    55,    72,    55,    64,    64,    73,    73, 
         77,    76,    74,    74,    78,    75,    57,    57,    79,    79, 
         47,    47,    80,    80,    81,    81,    81,    31,    84,    31, 
         85,    31,    86,    31,    87,    31,    31,    31,    31,    31, 
         31,    31,    31,    31,    31,    31,    82,    82,    93,    82, 
         82,    82,    82,    82,    82,    94,    94,    48,    48,    95, 
         88,    88,    88,    88,    88,    88,    89,    89,    89,    89, 
         89,    89,    90,    90,    90,    90,    90,    90,    91,    91, 
         91,    91,    91,    91,    92,    92,    83,    83,    96,    96, 
         98,    97,    97,    99,    97,    32,    32,    12,    12,   100, 
        101,   101,   102,   102,    21,    21,    45,    45,   103,   103, 
        104,   104,   104,   104,   104,   104,   104,   104, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     7, 
          0,     1,     1,     1,     3,     1,     3,     0,     9,     0, 
          9,     0,     8,     0,     2,     0,     2,     0,     2,     0, 
          3,     2,     0,     1,     1,     4,     3,     1,     0,     1, 
          3,     0,     3,     0,     6,     5,     6,     0,     1,     2, 
          4,     4,     0,     2,     0,     9,     0,     8,     0,    10, 
          4,     1,     1,     3,     2,     5,     5,     1,     3,     0, 
          1,     1,     3,     3,     3,     0,     2,     1,     1,     1, 
          1,     1,     1,     2,     3,     0,     1,     1,     2,     0, 
          4,     0,     7,     0,    10,     0,     8,     0,     6,     0, 
          7,     0,     8,     0,     6,     0,     3,     0,     3,     0, 
          4,     2,     1,     0,     1,     1,     2,     0,     5,     0, 
          4,     1,     3,     0,     0,     3,     2,     1,     1,     2, 
          0,     9,     0,     1,     0,     5,     0,     1,     1,     3, 
          0,     1,     5,     6,     1,     1,     4,     1,     0,     3, 
          0,     4,     0,     5,     0,     6,     3,     1,     1,     1, 
          1,     1,     5,     3,     3,     3,     1,     3,     0,     4, 
          3,     1,     1,     1,     1,     0,     1,     1,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     2,     2, 
          2,     2,     2,     2,     2,     2,     0,     1,     1,     2, 
          0,     4,     2,     0,     6,     1,     1,     1,     4,     3, 
          1,     3,     1,     3,     1,     3,     0,     1,     1,     2, 
          1,     1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   231,   233,   232,   234,   236,   235,   237,   238, 
          1,     0,    62,   228,     0,     8,     0,     4,    12,     0, 
          0,     0,     0,    18,    22,    20,   230,    17,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    61,    64,     0, 
          0,     0,     0,    14,     0,     0,     0,     0,   169,     0, 
          0,     0,     0,     0,   175,   172,   174,   173,   149,   151, 
          0,     0,     0,     0,     0,     0,   148,   158,   159,   160, 
        161,   162,     0,     0,     0,     0,     0,     0,     0,     0, 
         10,     0,     0,     0,     0,     0,     0,     0,   155,     0, 
          0,     0,   177,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   205,   206,     0,     0,     0,     0,     0,     0, 
          0,    66,    67,     0,     0,     0,   216,   223,   217,     0, 
          0,    25,     0,     0,     0,    29,    33,     0,    15,     0, 
          0,   138,     0,   211,     0,   150,   208,     0,     0,     0, 
          0,   171,   157,   168,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   166,     0,     0,     0, 
          0,     0,   187,   188,   189,   190,   191,   192,     0,   179, 
          0,     0,   219,     0,    27,    33,     0,     0,     0,     0, 
        170,     0,     0,     0,   210,     0,     0,   152,     0,   146, 
          0,     0,   224,   220,   222,     0,   226,     0,    23,     0, 
         32,    34,    35,     0,     0,     0,     0,   140,     0,     0, 
        214,     0,     0,     0,   154,     0,    19,     0,     0,     0, 
          0,     0,     0,    21,    33,     0,   156,   212,     0,     0, 
          0,     0,    90,     0,   110,    94,    98,   100,    96,   106, 
        108,    92,   102,   113,     0,     0,    87,     0,    57,     0, 
          0,     0,     0,    33,    43,     0,     0,    41,     0,     0, 
        143,   147,     0,   104,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    36,   112,    89,     0,     0,     0,    55, 
         82,    78,    79,    80,    81,     0,    83,     0,     0,     0, 
          0,     0,   215,   144,     0,     0,     0,     0,     0,     0, 
        122,     0,     0,   107,   109,     0,     0,     0,     0,    71, 
          0,     0,    50,     0,    49,     0,     0,    84,     0,    59, 
          0,    46,    31,     0,    91,     0,   111,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    47,     0,    85,     0,    45,     0,     0,     0,   123, 
          0,     0,     0,     0,    75,    74,     0,     0,    73,    51, 
         52,     0,     0,   131,   135,   105,     0,   128,     0,     0, 
         99,     0,     0,     0,     0,    77,    68,     0,    58,     0, 
          0,     0,     0,   127,   134,   130,     0,   101,     0,   125, 
         93,   118,   120,     0,   115,     0,     0,    56,     0,     0, 
          0,     0,    97,     0,     0,     0,   103,   117,    69,    60, 
          0,     0,     0,   126,     0,     0,     0,   136,    95,     0, 
        121,     0,   119,     0,     0,   132, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    21,    73,     4,     7,     8,    30,    11,    56, 
        220,   137,    43,    86,   144,   198,    45,   225,    44,    88, 
        146,   275,   221,   222,   223,   265,   226,   227,   242,   243, 
        266,   328,   310,   299,   336,   267,   329,   337,   378,   399, 
        297,   308,   365,    32,    23,    33,    75,   103,   330,   331, 
        268,   283,   292,   322,   411,   286,   151,   289,   287,   288, 
        293,   414,   316,   386,   290,   291,   285,   415,   416,   425, 
        426,   424,   387,   404,   388,   389,   402,   403,   152,   161, 
        211,    77,   156,   100,   101,   165,   153,    78,    79,    80, 
         81,    82,    94,   104,    83,   157,   158,   203,   249,   139, 
        140,   141,    24,    25, 
    );
    protected static $yySindex = array(         -272,
          0,     0,  -239,  -192,     0,    44,     0,  -239,    32,    27, 
       -156,    67,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     8,     0,     0,   232,     0,  -192,     0,     0,  -124, 
       -192,    68,   130,     0,     0,     0,     0,     0,   129,   149, 
        232,    67,  -192,  -192,  -192,   -28,  2270,     0,     0,   132, 
       -109,  -107,  -109,     0,   164,   162,  2270,  2270,     0,  2270, 
       2270,  2270,  2270,   173,     0,     0,     0,     0,     0,     0, 
       2270,  2270,  -180,   756,   192,   194,     0,     0,     0,     0, 
          0,     0,   203,   -53,  -192,   -63,  -192,   126,   -63,   -28, 
          0,   209,   209,  2270,   -59,   -59,   -59,   -59,     0,     2, 
       -192,   756,     0,   128,   815,   -24,  2270,  2270,  2270,  2270, 
       2270,  2270,  2270,  2270,  2270,  2270,  -192,  2270,  2270,  2270, 
       2270,  2270,     0,     0,  2270,  2270,  2270,  2270,  2270,  2270, 
       2270,     0,     0,  2270,   -31,    11,     0,     0,     0,   211, 
        246,     0,  -192,   171,   252,     0,     0,   174,     0,   842, 
        205,     0,  2270,     0,    39,     0,     0,     2,    17,   261, 
          2,     0,     0,     0,  -235,   -34,   -34,  1452,   247,   -34, 
        -34,   -34,   -34,   -34,   -34,   -34,     0,   209,   209,   -59, 
        -59,   -59,     0,     0,     0,     0,     0,     0,  1452,     0, 
       -192,   218,     0,   -53,     0,     0,  -192,   480,    52,  2270, 
          0,   276,  2270,   273,     0,   229,  2270,     0,   292,     0, 
          2,  2270,     0,     0,     0,   488,     0,   213,     0,  -210, 
          0,     0,     0,     0,   212,   275,   294,     0,     2,   253, 
          0,   216,   299,  2270,     0,   -34,     0,  2610,   191,     5, 
       -199,   228,   314,     0,     0,    52,     0,     0,  2270,  2270, 
        228,   318,     0,   237,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   245,   864,     0,  2610,     0,   102, 
        331,    12,   311,     0,     0,  2270,   283,     0,   334,   254, 
          0,     0,  2270,     0,  2270,   348,   349,  2657,   350,   332, 
        333,   354,   355,     0,     0,     0,  -192,   -51,   102,     0, 
          0,     0,     0,     0,     0,   -74,     0,   363,  2270,   345, 
        525,   892,     0,     0,   346,  2610,   922,  2270,  2270,  2610, 
          0,    46,    72,     0,     0,  2270,  2270,   -37,   373,     0, 
        380,   385,     0,  2610,     0,   367,  -192,     0,   338,     0, 
       1452,     0,     0,   228,     0,   308,     0,   381,  1039,   316, 
        659,   402,    79,  1068,  1136,   104,   311,   131,  -192,   408, 
        325,     0,   412,     0,  -192,     0,  -256,  2270,  2657,     0, 
       2270,  2270,  2657,   335,     0,     0,  -192,    14,     0,     0, 
          0,   131,   413,     0,     0,     0,   110,     0,   115,   401, 
          0,  1298,  1326,    90,  -168,     0,     0,  2610,     0,    14, 
        131,   422,   347,     0,     0,     0,  2270,     0,  2657,     0, 
          0,     0,     0,   343,     0,  -168,   359,     0,    14,  -192, 
       2610,   430,     0,  2657,  2270,   414,     0,     0,     0,     0, 
        134,   360,  2657,     0,  1355,  2610,   445,     0,     0,  2610, 
          0,   364,     0,  2610,   365,     0, 
    );
    protected static $yyRindex= array(          224,
          0,     0,   272,     0,     0,    18,     0,   317,   136,     0, 
        240,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,  -226,     0,     0,     0,     0,     0, 
          0,     0,   395,     0,     0,     0,     0,     0,     0,   -11, 
        127,     0,     0,     0,     0,     0,   448,     0,     0,   181, 
       -103,   397,  -103,     0,   444,     0,     0,     0,     0,     0, 
          0,     0,     0,   223,     0,     0,     0,     0,     0,     0, 
        398,     0,     0,   481,     0,     0,     0,     0,     0,     0, 
          0,     0,    -3,     0,     0,   407,     0,     0,   407,     0, 
          0,  1748,  1781,   438,  1148,  1464,  1523,  1550,     0,   602, 
          0,     0,     0,     0,     0,  -217,     0,     0,   474,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   -40,     0,     0,     0,     0, 
        471,     0,     0,     0,    20,     0,     0,     0,     0,    -6, 
          0,     0,   493,     0,     0,     0,     0,   631,   505,     0, 
        602,     0,     0,     0,     0,  1859,  1996,   199,     0,  2008, 
       2021,  2044,  2067,  2156,  2184,  2234,     0,  1846,  1958,  1583, 
       1621,  1736,     0,     0,     0,     0,     0,     0,     1,     0, 
          0,     0,     0,     0,     0,     0,     0,  -190,   435,     0, 
          0,     0,   482,   339,     0,     0,   493,     0,   376,     0, 
        602,     0,     0,     0,     0,  -190,     0,   399,     0,     0, 
          0,     0,     0,    -8,     0,   451,     4,     0,   602,     0, 
          0,   537,     0,   493,     0,  2281,     0,   453,   -45,     0, 
          0,     3,     0,     0,     0,     0,     0,     0,   493,   455, 
        436,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,  -119,     0,     0, 
          0,     0,   531,     0,     0,     0,  -118,     0,     0,     0, 
          0,     0,   532,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   565,     0,   548,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       -190,     0,     0,     0,     0,   453,     0,   549,     0,   453, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        573,     0,     0,     0,     0,     0,   565,     0,     0,     0, 
        141,     0,     0,     3,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   170,    48,     0,     0, 
          0,     0,     0,     0,   565,     0,     0,   549,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    48,     0,     0,     0,     0,  2450,     0,  2397,     0, 
          0,     0,     0,  2541,   490,     0,     0,   453,     0,     0, 
         48,     0,     0,     0,     0,     0,   493,     0,     0,     0, 
          0,     0,     0,     0,     0,   497,     0,     0,     0,     0, 
        453,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   -96,     0,     0,     0,   -96, 
          0,     0,     0,   453,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   624,     0,     0,     0,   550, 
        635,   -27,     0,   589,   559,   -90,     0,     0,     0,     0, 
       -131,  -230,     0,     0,     0,   476,   406,     0,     0,     0, 
         38,   -32,   296,   356,     0,  -204,  -281,     0,  -257,  -183, 
          0,     0,     0,   612,   615,     0,   -79,   -23,   298,   352, 
        527,     0,     0,    42,     0,     0,  -116,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   250,     0,     0, 
          0,     0,   278,     0,   282,     0,     0,     0,   470,     0, 
          0,     0,  -117,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   513,     0,     0,     0,     0, 
        483,     0,   662,     0, 
    );
    protected static $yyTable = array(10,
        125,   218,   126,   218,   356,    88,    37,   120,   118,   135, 
        119,   195,   121,    54,    16,    51,    52,    53,   338,    24, 
        281,   218,    38,    76,   209,   125,    40,   126,    86,   169, 
          1,    44,    65,   229,   139,    42,   202,   178,    50,    50, 
         50,   180,   153,   208,   180,    16,    30,   155,   301,   239, 
         42,   138,   139,   304,   302,   363,   303,   142,   305,   145, 
        271,    30,    40,   296,     5,   217,   122,     9,   160,   227, 
         84,   334,   397,   229,   229,   229,    84,    27,   225,   136, 
         50,    65,    50,   383,    74,    28,   139,   384,   385,   177, 
        233,   122,   154,   235,    92,    93,   159,    95,    96,    97, 
         98,   192,   306,   229,   210,   216,    76,   206,   102,   105, 
        190,   247,    50,   366,    42,   145,    42,   252,   139,   240, 
        272,   178,   153,   230,   400,   180,    29,    30,    40,   361, 
         31,   150,   279,   280,    12,    39,   398,   307,    50,   227, 
        273,   227,   225,   419,   166,   167,   168,   170,   171,   172, 
        173,   174,   175,   176,   277,   178,   179,   180,   181,   182, 
         41,   138,   183,   184,   185,   186,   187,   188,   189,   145, 
         76,   102,    16,    42,    46,    16,    16,    16,    16,    16, 
         16,    54,    16,   311,    54,     9,   213,   241,    47,   136, 
        150,    84,    50,    16,    16,    16,    16,    16,    16,    54, 
         85,   348,    87,   315,   412,   413,     9,    24,   332,    90, 
         53,   227,    99,    53,    16,   136,   418,   218,    27,   218, 
         91,   218,   218,   218,   218,   218,    16,   218,    16,   106, 
        269,    55,   132,    54,   133,   430,    27,   150,   218,   218, 
        168,   218,   218,   218,   150,   396,   134,   143,   147,   236, 
        120,   390,   162,    88,    88,   121,   142,   142,    16,   167, 
         16,    16,    53,   167,   167,   167,   167,   167,   125,   167, 
        126,   150,   193,   218,    16,   164,    86,    86,   191,   218, 
        167,   167,   167,   167,   167,   167,   150,   150,   333,   194, 
        422,   142,   136,   196,    16,   197,   199,   201,   204,   218, 
        207,   136,   357,   218,   212,   218,   218,    34,    35,    36, 
        214,   224,   231,   312,     2,   167,   229,   227,   227,   227, 
        168,   232,   317,    13,    14,    15,    16,    17,    18,    19, 
         20,   234,   136,   245,   122,   238,   244,   246,   250,   251, 
        128,   127,   123,   124,   270,   248,   341,   167,   167,   145, 
        274,   129,   130,   276,   136,   150,   349,   351,   282,   284, 
        136,   298,     5,   354,   355,   128,   127,   123,   124,   294, 
        300,   309,    50,    12,   313,   213,   129,   130,   314,   213, 
        213,   213,   213,   213,   213,   213,   227,   318,   319,   323, 
        324,   325,   431,   326,   327,    16,   213,   213,   213,   213, 
        213,   213,   340,   342,   345,   150,   352,     7,   392,   393, 
        391,   353,   145,   358,   394,    50,   145,   145,   145,   145, 
        145,   145,   145,   359,   360,   362,   227,   227,   227,   213, 
        364,   213,   367,   145,   145,   145,   145,   145,   145,   368, 
        370,   371,   372,   375,   150,    16,    16,    16,   380,   381, 
        423,   377,   382,   401,   385,    16,   227,   395,   384,   407, 
        410,   420,   435,   213,   213,   434,   145,   427,   145,   421, 
        433,   436,    30,   437,   439,    16,    30,    30,    30,    30, 
         30,    30,    30,   429,   438,   442,   444,    63,   141,   446, 
        218,   218,   218,    30,    30,    30,    30,    30,    30,    11, 
        145,   145,    13,     2,     2,     2,     2,     2,     2,     2, 
          2,    13,    14,    15,    16,    17,    18,    19,    20,    28, 
        218,   142,   176,     2,     2,     2,    30,     2,    30,    26, 
        137,   141,   221,   137,   167,    16,    16,    16,    16,    16, 
         16,    16,    16,    16,   218,    16,    16,    16,    16,    16, 
         16,     5,     5,     5,     5,     5,     5,     5,     5,    39, 
         30,    30,    13,    14,    15,   218,    17,    18,    19,    20, 
         12,     5,     5,     5,   141,    38,   220,    86,    12,   137, 
        218,   218,   218,   218,   218,   218,   218,   218,   218,    53, 
        141,   218,   218,   218,   218,   218,     7,     7,     7,     7, 
          7,     7,     7,     7,   219,    70,    48,   137,   128,   127, 
        123,   124,   237,    72,   114,    12,     7,     7,     7,   129, 
        130,   116,   167,   167,   167,   167,   167,   167,   167,   167, 
        167,    26,    16,   167,   167,   167,   167,   167,   207,   149, 
         22,    89,   207,   207,   207,   207,   207,   148,   207,   343, 
        213,   278,   376,    49,   335,    48,   379,   339,   234,   207, 
        207,   207,   207,   207,   207,   428,   406,   209,   405,   228, 
        205,   209,   209,   209,   209,   209,   215,   209,   234,   234, 
        234,   234,   234,   234,   234,   234,    37,   145,   209,   209, 
        209,   209,   209,   209,   207,   108,     0,     0,     0,     0, 
        120,   118,     0,   119,     0,   121,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   295,   125,   107, 
        126,   109,     0,   209,     0,     0,   207,   207,   234,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   213,   213, 
        213,   213,   213,   213,   213,   213,   213,    30,     0,   213, 
        213,   213,   213,   213,     0,   209,   209,     0,     0,    13, 
         14,    15,   218,    17,    18,    19,    20,    13,    14,    15, 
        218,    17,    18,    19,    20,   145,   145,   145,   145,   145, 
        145,   145,   145,   145,   122,     0,   145,   145,   145,   145, 
        145,   346,   108,     0,     0,   350,     0,   120,   118,     0, 
        119,     0,   121,     0,    13,    14,    15,   218,    17,    18, 
         19,    20,     0,     0,   321,   125,   107,   126,   109,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    30,    30,    30,    30,    30, 
         30,    30,    30,    30,     0,     0,    30,    30,    30,    30, 
         30,   108,     0,     0,     0,   163,   120,   118,     0,   119, 
          0,   121,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   417,   125,   107,   126,   109,   108,     0, 
          0,   122,     0,   120,   118,   200,   119,     0,   121,     0, 
          0,     0,     0,     0,     0,   321,   432,     0,     0,   321, 
        108,   125,   107,   126,   109,   120,   118,     0,   119,     0, 
        121,   441,     0,   207,     0,   443,     0,     0,     0,   445, 
          0,     0,   295,   125,   107,   126,   109,     0,   108,     0, 
          0,     0,   344,   120,   118,   321,   119,     0,   121,     0, 
        122,     0,   209,     0,     0,     0,     0,     0,     0,     0, 
        321,   125,   107,   126,   109,     0,     0,     0,   108,   321, 
          0,     0,     0,   120,   118,     0,   119,   122,   121,     0, 
        117,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        347,   125,   107,   126,   109,     0,     0,     0,     0,   122, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   207,   207,   207,   207,   207,   207,   207,   207,   207, 
          0,     0,   207,   207,   207,   207,   207,   122,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        209,   209,   209,   209,   209,   209,   209,   209,   209,     0, 
          0,   209,   209,   209,   209,   209,     0,   122,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   128,   127, 
        123,   124,   110,   111,   112,   113,   114,   117,     0,   129, 
        130,   131,   115,   116,     0,   108,     0,     0,     0,   369, 
        120,   118,     0,   119,     0,   121,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   125,   107, 
        126,   109,     0,     0,   108,     0,     0,     0,   373,   120, 
        118,     0,   119,     0,   121,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   117,   125,   107,   126, 
        109,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   117,     0,   128,   127,   123,   124,   110, 
        111,   112,   113,   114,   122,     0,   129,   130,   131,   115, 
        116,     0,   108,     0,     0,   117,   374,   120,   118,     0, 
        119,     0,   121,     0,   199,     0,     0,     0,   199,   199, 
        199,   199,   199,   122,   199,   125,   107,   126,   109,     0, 
          0,     0,     0,   117,     0,   199,   199,     0,   199,     0, 
        199,     0,     0,     0,   128,   127,   123,   124,   110,   111, 
        112,   113,   114,     0,     0,   129,   130,     0,   115,   116, 
          0,     0,     0,   117,     0,     0,     0,     0,     0,     0, 
        199,   128,   127,   123,   124,   110,   111,   112,   113,   114, 
          0,     0,   129,   130,     0,   115,   116,     0,     0,     0, 
          0,   122,     0,   128,   127,   123,   124,   110,   111,   112, 
        113,   114,   199,     0,   129,   130,     0,   115,   116,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   128,   127,   123,   124,   110,   111,   112,   113,   114, 
          0,     0,   129,   130,     0,   115,   116,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   128,   127,   123,   124,   110,   111,   112,   113,   114, 
          0,     0,   129,   130,   108,   115,   116,     0,   408,   120, 
        118,     0,   119,     0,   121,     0,     0,     0,     0,     0, 
        117,     0,     0,     0,     0,     0,     0,   125,   107,   126, 
        109,     0,   108,     0,     0,     0,   409,   120,   118,     0, 
        119,     0,   121,     0,     0,     0,     0,     0,     0,   117, 
          0,     0,     0,     0,     0,   125,   107,   126,   109,     0, 
          0,   108,     0,     0,     0,     0,   120,   118,     0,   119, 
          0,   121,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   440,     0,   125,   107,   126,   109,     0,     0, 
          0,     0,     0,   122,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   128,   127, 
        123,   124,   110,   111,   112,   113,   114,   117,     0,   129, 
        130,   122,   115,   116,     0,     0,     0,     0,     0,   199, 
          0,     0,     0,     0,     0,     0,     0,   128,   127,   123, 
        124,   110,   111,   112,   113,   114,     0,     0,   129,   130, 
        122,   115,   116,     0,     0,     0,     0,     0,   108,     0, 
          0,     0,     0,   120,   118,     0,   119,     0,   121,     0, 
        200,     0,     0,     0,   200,   200,   200,   200,   200,     0, 
        200,   125,   107,   126,   109,     0,     0,     0,     0,     0, 
          0,   200,   200,     0,   200,     0,   200,     0,     0,     0, 
          0,     0,     0,     0,     0,   128,   127,   123,   124,   110, 
        111,   112,   113,   114,     0,     0,   129,   130,     0,   115, 
        116,   199,   199,   199,   199,   199,   200,     0,     0,   203, 
        199,   199,   199,   203,   203,   203,   203,   203,     0,   203, 
          0,     0,     0,     0,     0,     0,     0,   122,     0,     0, 
        203,   203,     0,   203,     0,   203,   204,     0,   200,     0, 
        204,   204,   204,   204,   204,     0,   204,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   204,   204,   117, 
        204,     0,   204,     0,     0,   203,     0,     0,     0,   195, 
          0,     0,     0,   195,   195,   195,   195,   195,     0,   195, 
          0,     0,     0,     0,     0,     0,     0,   117,     0,     0, 
        195,   195,   204,   195,     0,   195,     0,   203,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   196,     0,     0, 
          0,   196,   196,   196,   196,   196,   117,   196,     0,     0, 
          0,     0,     0,     0,   204,   195,     0,     0,   196,   196, 
          0,   196,     0,   196,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   128,   127,   123, 
        124,   110,   111,   112,   113,   114,     0,   195,   129,   130, 
          0,   115,   116,   196,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   128,   127,   123,   124,   110, 
        111,   112,   113,   114,     0,     0,   129,   130,     0,   115, 
        116,     0,     0,     0,     0,   196,     0,     0,     0,     0, 
          0,     0,     0,     0,   128,   127,   123,   124,   110,   111, 
        112,   113,   114,   117,     0,   129,   130,     0,   115,   116, 
          0,     0,   198,     0,     0,   200,   198,   198,   198,   198, 
        198,     0,   198,     0,   201,     0,     0,     0,   201,     0, 
        201,   201,   201,   198,   198,     0,   198,     0,   198,     0, 
          0,     0,     0,     0,     0,   201,   201,     0,   201,     0, 
        201,     0,     0,     0,     0,     0,     0,   202,     0,     0, 
          0,   202,     0,   202,   202,   202,     0,     0,   198,     0, 
          0,     0,     0,     0,   203,     0,     0,     0,   202,   202, 
        201,   202,     0,   202,     0,     0,     0,     0,     0,     0, 
          0,   128,   127,   123,   124,   110,   111,   112,   113,   114, 
        198,   204,   129,   130,     0,   115,   116,   200,   200,   200, 
        200,   200,   201,   202,     0,     0,   200,   200,   200,     0, 
          0,     0,   193,     0,     0,     0,   193,     0,   193,   193, 
        193,     0,     0,     0,   195,   181,     0,     0,     0,   181, 
          0,     0,   181,   193,   193,   202,   193,     0,   193,     0, 
          0,     0,     0,     0,     0,     0,   181,   181,     0,   181, 
          0,   181,     0,     0,     0,     0,   203,   203,   203,   203, 
        203,     0,   196,     0,     0,   203,   203,   203,   193,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   181,     0,   204,   204,   204,   204,   204,     0,     0, 
          0,     0,   204,   204,   204,     0,     0,     0,     0,     0, 
        193,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   181,     0,     0,   195,   195,   195,   195, 
        195,     0,     0,     0,   194,   195,   195,   195,   194,     0, 
        194,   194,   194,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   194,   194,     0,   194,     0, 
        194,     0,     0,     0,   196,   196,   196,   196,   196,     0, 
          0,     0,   197,   196,   196,   196,   197,     0,     0,   197, 
          0,     0,     0,     0,   182,     0,     0,   198,   182,     0, 
        194,   182,     0,   197,   197,     0,   197,   183,   197,   201, 
          0,   183,     0,     0,   183,   182,   182,     0,   182,     0, 
        182,     0,     0,     0,     0,     0,     0,     0,   183,   183, 
        184,   183,   194,   183,   184,     0,     0,   184,   197,     0, 
          0,     0,   202,     0,     0,     0,     0,     0,     0,     0, 
        182,   184,   184,   185,   184,     0,   184,   185,     0,     0, 
        185,     0,     0,   183,     0,     0,     0,     0,     0,     0, 
        197,     0,     0,     0,   185,   185,     0,   185,     0,   185, 
          0,     0,   182,     0,     0,     0,   184,     0,     0,   198, 
        198,   198,   198,   198,     0,   183,     0,     0,   198,   198, 
        198,   201,   201,   201,   201,   201,     0,   193,     0,   185, 
        201,   201,   201,     0,     0,     0,     0,     0,   184,     0, 
        181,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   202,   202,   202,   202,   202,     0, 
          0,   185,   186,   202,   202,   202,   186,     0,     0,   186, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   186,   186,     0,   186,     0,   186,     0, 
        164,     0,     0,     0,   164,     0,     0,   164,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   164,   164,     0,   164,     0,   164,     0,   186,   193, 
        193,   193,   193,   193,     0,     0,     0,     0,   193,   193, 
        193,     0,   181,   181,   181,   181,   181,     0,     0,   194, 
        165,   181,   181,   181,   165,     0,   164,   165,     0,     0, 
        186,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   165,   165,     0,   165,     0,   165,     0,     0,     0, 
          0,     0,    60,     0,     0,     0,     0,   197,   164,    72, 
          0,     0,    57,     0,    58,     0,     0,   163,     0,   182, 
          0,   163,     0,     0,   163,     0,   165,     0,     0,     0, 
          0,     0,   183,     0,     0,     0,     0,     0,   163,   163, 
          0,   163,     0,   163,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   184,     0,     0,   165,     0, 
         59,   194,   194,   194,   194,   194,     0,     0,     0,     0, 
        194,   194,   194,   163,     0,     0,     0,     0,   185,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    71,     0,     0,    61,     0,     0,     0,   197, 
        197,   197,   197,   197,     0,   163,     0,     0,   197,   197, 
        197,   182,   182,   182,   182,   182,     0,     0,     0,     0, 
        182,   182,   182,     0,   183,   183,   183,   183,   183,   129, 
          0,     0,     0,   183,   183,   183,   129,     0,     0,   129, 
          0,   129,     0,     0,     0,     0,     0,   184,   184,   184, 
        184,   184,     0,     0,     0,   129,   184,   184,   184,     0, 
          0,     0,     0,     0,     0,     0,     0,   186,     0,     0, 
        185,   185,   185,   185,   185,     0,     0,     0,     0,   185, 
        185,   185,   133,     0,     0,     0,     0,   129,     0,   133, 
          0,     0,   133,     0,   133,   164,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   133,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   129, 
          0,   129,   129,     0,     0,     0,     0,     0,     0,    64, 
         65,    66,    67,    68,     0,     0,     0,     0,     0,     0, 
        133,     0,     0,     0,     0,   165,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   186, 
        186,   186,   186,   186,     0,     0,     0,     0,   186,   186, 
        186,     0,   133,   124,   133,   133,     0,     0,     0,     0, 
        124,     0,     0,   124,     0,   124,     0,   164,   164,   164, 
        164,   164,   163,     0,     0,     0,   164,   164,   164,   124, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    69, 
          0,     0,     0,     0,     0,    70,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   124,     0,     0,     0,     0,     0,   165,   165,   165, 
        165,   165,    60,     0,     0,     0,   165,   165,   165,    72, 
          0,     0,    57,     0,    58,     0,   129,   129,   129,   129, 
        129,     0,     0,   124,     0,   124,   124,     0,   264,     0, 
          0,    62,    63,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   163,   163,   163,   163,   163,    60, 
          0,     0,     0,   163,   163,   163,    72,     0,     0,    57, 
         59,    58,     0,     0,     0,     0,     0,     0,     0,   133, 
        133,   133,   133,   133,     0,   264,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    71,     0,     0,    61,   129,   129,   129,   129, 
          0,   129,   129,     0,     0,     0,     0,    59,     0,     0, 
          0,     0,     0,     0,     0,     0,   129,   129,   129,   129, 
          0,   129,   129,     0,     0,     0,   129,   129,   129,   129, 
        129,     0,     0,     0,     0,     0,     0,     0,     0,   320, 
          0,     0,    61,     0,     0,     0,     0,     0,     0,   133, 
        133,   133,   133,     0,     0,   133,     0,     0,   129,   129, 
        124,   124,   124,   124,   124,     0,     0,     0,     0,   133, 
        133,   133,   133,     0,   133,   133,     0,     0,     0,   133, 
        133,   133,   133,   133,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   133,   133,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    64, 
         65,    66,    67,    68,     0,     0,     0,     0,     0,     0, 
        124,   124,   124,   124,     0,     0,   124,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        124,   124,   124,   124,     0,   124,   124,     0,     0,     0, 
        124,     0,   124,   124,   124,     0,    64,    65,    66,    67, 
         68,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   124,   124,     0,     0,     0,     0,     0,    69, 
        253,   254,   255,     0,     0,    70,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   256, 
        257,   258,   259,     0,   260,   261,     0,     0,     0,   262, 
          0,   263,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    69,   253,   254,   255, 
          0,     0,    70,     0,     0,     0,     0,     0,     0,     0, 
          0,    62,    63,     0,     0,     0,   256,   257,   258,   259, 
          0,   260,   261,     0,     0,     0,   262,     0,   263,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    62,    63, 
    );
    protected static $yyCheck = array(4,
         60,    42,    62,    44,    42,   125,   125,    42,    43,    63, 
         45,   143,    47,    42,    60,    43,    44,    45,    93,   123, 
        251,    62,    27,    47,   260,    60,    31,    62,   125,   109, 
        303,    40,    44,   260,    41,    44,   153,    41,    43,    44, 
         45,    41,   260,   161,    44,    91,    44,    46,    37,   260, 
         59,    84,    59,    42,    43,   337,    45,    85,    47,    87, 
        260,    59,    59,   268,   304,   197,   126,   260,   101,   260, 
         60,   123,    59,   300,   301,   302,    60,    46,    59,    84, 
         85,    93,    87,   365,    47,    59,    93,   344,   345,   117, 
        207,   126,    91,   211,    57,    58,   101,    60,    61,    62, 
         63,    91,    91,   330,   340,   196,    59,    91,    71,    72, 
        134,   229,   117,   344,   123,   143,   125,   234,   125,   330, 
        320,   125,   340,   203,   382,   125,   283,   125,   125,   334, 
         64,    94,   249,   250,    91,   260,   123,   126,   143,   330, 
        340,   260,   123,   401,   107,   108,   109,   110,   111,   112, 
        113,   114,   115,   116,   245,   118,   119,   120,   121,   122, 
         93,   194,   125,   126,   127,   128,   129,   130,   131,   197, 
        123,   134,    37,    44,    46,    40,    41,    42,    43,    44, 
         45,    41,    47,   274,    44,   260,   191,   220,    40,   194, 
        153,    60,   197,    58,    59,    60,    61,    62,    63,    59, 
        310,   318,   310,   283,   373,   374,   260,   311,   260,    46, 
         41,   330,    40,    44,   260,   220,   400,    37,    46,   260, 
         59,    41,    42,    43,    44,    45,    91,    47,    93,   410, 
         40,   260,    41,    93,    41,   419,    46,   200,    58,    59, 
        203,    61,    62,    63,   207,   377,    44,   311,   123,   212, 
         42,   368,   125,   373,   374,    47,    58,    59,   123,    37, 
        125,   126,    93,    41,    42,    43,    44,    45,    60,    47, 
         62,   234,    62,    93,   320,   300,   373,   374,   310,   320, 
         58,    59,    60,    61,    62,    63,   249,   250,   340,    44, 
        407,    93,   297,   123,   340,    44,   123,    93,   260,   340, 
         40,   306,   340,   123,    58,   125,   126,   300,   301,   302, 
         93,   260,    40,   276,    91,    93,    41,   300,   301,   302, 
        283,    93,   285,   280,   281,   282,   283,   284,   285,   286, 
        287,    40,   337,    59,   126,   123,   125,    44,   123,    41, 
        400,   401,   402,   403,   340,    93,   309,   125,   126,   377, 
        123,   411,   412,    40,   359,   318,   319,   320,    41,   123, 
        365,   260,    91,   326,   327,   400,   401,   402,   403,   125, 
         40,    61,   377,    91,    41,    37,   411,   412,   125,    41, 
         42,    43,    44,    45,    46,    47,   260,    40,    40,    40, 
         59,    59,   420,    40,    40,   260,    58,    59,    60,    61, 
         62,    63,    40,    59,    59,   368,   361,    91,   371,   372, 
        369,   340,    37,    41,   373,   420,    41,    42,    43,    44, 
         45,    46,    47,    44,    40,    59,   300,   301,   302,    91, 
         93,    93,   125,    58,    59,    60,    61,    62,    63,    59, 
        125,    40,   364,   340,   407,   310,   311,   312,    41,   125, 
        409,   321,    41,    41,   345,   320,   330,   123,   344,    59, 
        371,    40,   425,   125,   126,   424,    91,   125,    93,   123, 
         41,    58,    37,   340,   433,   340,    41,    42,    43,    44, 
         45,    46,    47,   125,   125,    41,   123,    93,    41,   125, 
        310,   311,   312,    58,    59,    60,    61,    62,    63,   260, 
        125,   126,    59,   280,   281,   282,   283,   284,   285,   286, 
        287,   280,   281,   282,   283,   284,   285,   286,   287,   123, 
        340,    41,   125,   300,   301,   302,    91,   304,    93,   123, 
         93,    58,    62,    41,   312,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    40,   410,   411,   412,   413,   414, 
        415,   280,   281,   282,   283,   284,   285,   286,   287,   125, 
        125,   126,   280,   281,   282,   283,   284,   285,   286,   287, 
         91,   300,   301,   302,    93,   125,    40,   125,    91,   125, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    59, 
         59,   411,   412,   413,   414,   415,   280,   281,   282,   283, 
        284,   285,   286,   287,   125,    41,    59,    59,   400,   401, 
        402,   403,   125,    41,   125,    91,   300,   301,   302,   411, 
        412,   125,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,     8,   410,   411,   412,   413,   414,   415,    37,    90, 
          6,    53,    41,    42,    43,    44,    45,    89,    47,   125, 
        312,   246,   357,    42,   299,    41,   359,   306,   260,    58, 
         59,    60,    61,    62,    63,   416,   389,    37,   387,   200, 
        158,    41,    42,    43,    44,    45,   194,    47,   280,   281, 
        282,   283,   284,   285,   286,   287,    25,   312,    58,    59, 
         60,    61,    62,    63,    93,    37,    -1,    -1,    -1,    -1, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,    61, 
         62,    63,    -1,    93,    -1,    -1,   125,   126,   330,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   312,    -1,   411, 
        412,   413,   414,   415,    -1,   125,   126,    -1,    -1,   280, 
        281,   282,   283,   284,   285,   286,   287,   280,   281,   282, 
        283,   284,   285,   286,   287,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   126,    -1,   411,   412,   413,   414, 
        415,   316,    37,    -1,    -1,   320,    -1,    42,    43,    -1, 
         45,    -1,    47,    -1,   280,   281,   282,   283,   284,   285, 
        286,   287,    -1,    -1,   288,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,   413,   414, 
        415,    37,    -1,    -1,    -1,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   398,    60,    61,    62,    63,    37,    -1, 
         -1,   126,    -1,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,   369,   421,    -1,    -1,   373, 
         37,    60,    61,    62,    63,    42,    43,    -1,    45,    -1, 
         47,   436,    -1,   312,    -1,   440,    -1,    -1,    -1,   444, 
         -1,    -1,    59,    60,    61,    62,    63,    -1,    37,    -1, 
         -1,    -1,    41,    42,    43,   409,    45,    -1,    47,    -1, 
        126,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        424,    60,    61,    62,    63,    -1,    -1,    -1,    37,   433, 
         -1,    -1,    -1,    42,    43,    -1,    45,   126,    47,    -1, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,   413,   414,   415,   126,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,   413,   414,   415,    -1,   126,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   312,    -1,   411, 
        412,   413,   414,   415,    -1,    37,    -1,    -1,    -1,    41, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61, 
         62,    63,    -1,    -1,    37,    -1,    -1,    -1,    41,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   312,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   312,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   126,    -1,   411,   412,   413,   414, 
        415,    -1,    37,    -1,    -1,   312,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,    37,    -1,    -1,    -1,    41,    42, 
         43,    44,    45,   126,    47,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,   312,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
         -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1, 
         93,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,    -1,    -1,    -1, 
         -1,   126,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   125,    -1,   411,   412,    -1,   414,   415,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    37,   414,   415,    -1,    41,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62, 
         63,    -1,    37,    -1,    -1,    -1,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,   312, 
         -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1, 
         -1,    37,    -1,    -1,    -1,    -1,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    -1,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   312,    -1,   411, 
        412,   126,   414,   415,    -1,    -1,    -1,    -1,    -1,   312, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
        126,   414,   415,    -1,    -1,    -1,    -1,    -1,    37,    -1, 
         -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47,    -1, 
         37,    -1,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   404,   405,   406,   407,   408,    93,    -1,    -1,    37, 
        413,   414,   415,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    37,    -1,   125,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,   312, 
         61,    -1,    63,    -1,    -1,    93,    -1,    -1,    -1,    37, 
         -1,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1, 
         58,    59,    93,    61,    -1,    63,    -1,   125,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1, 
         -1,    41,    42,    43,    44,    45,   312,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,   125,    93,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,   125,   411,   412, 
         -1,   414,   415,    93,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,   312,    -1,   411,   412,    -1,   414,   415, 
         -1,    -1,    37,    -1,    -1,   312,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    37,    -1,    -1,    -1,    41,    -1, 
         43,    44,    45,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1, 
         -1,    41,    -1,    43,    44,    45,    -1,    -1,    93,    -1, 
         -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    58,    59, 
         93,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
        125,   312,   411,   412,    -1,   414,   415,   404,   405,   406, 
        407,   408,   125,    93,    -1,    -1,   413,   414,   415,    -1, 
         -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    43,    44, 
         45,    -1,    -1,    -1,   312,    37,    -1,    -1,    -1,    41, 
         -1,    -1,    44,    58,    59,   125,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,   312,    -1,    -1,   413,   414,   415,    93,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,   414,   415,    -1,    -1,    -1,    -1,    -1, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   125,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    37,   413,   414,   415,    41,    -1, 
         43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    37,   413,   414,   415,    41,    -1,    -1,    44, 
         -1,    -1,    -1,    -1,    37,    -1,    -1,   312,    41,    -1, 
         93,    44,    -1,    58,    59,    -1,    61,    37,    63,   312, 
         -1,    41,    -1,    -1,    44,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         37,    61,   125,    63,    41,    -1,    -1,    44,    93,    -1, 
         -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         93,    58,    59,    37,    61,    -1,    63,    41,    -1,    -1, 
         44,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1, 
        125,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,   125,    -1,    -1,    -1,    93,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,   125,    -1,    -1,   413,   414, 
        415,   404,   405,   406,   407,   408,    -1,   312,    -1,    93, 
        413,   414,   415,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,   125,    37,   413,   414,   415,    41,    -1,    -1,    44, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         37,    -1,    -1,    -1,    41,    -1,    -1,    44,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    93,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,    -1,   404,   405,   406,   407,   408,    -1,    -1,   312, 
         37,   413,   414,   415,    41,    -1,    93,    44,    -1,    -1, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    33,    -1,    -1,    -1,    -1,   312,   125,    40, 
         -1,    -1,    43,    -1,    45,    -1,    -1,    37,    -1,   312, 
         -1,    41,    -1,    -1,    44,    -1,    93,    -1,    -1,    -1, 
         -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,   125,    -1, 
         91,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,    93,    -1,    -1,    -1,    -1,   312,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   123,    -1,    -1,   126,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,   125,    -1,    -1,   413,   414, 
        415,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,    -1,   404,   405,   406,   407,   408,    33, 
         -1,    -1,    -1,   413,   414,   415,    40,    -1,    -1,    43, 
         -1,    45,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    59,   413,   414,   415,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,   413, 
        414,   415,    33,    -1,    -1,    -1,    -1,    91,    -1,    40, 
         -1,    -1,    43,    -1,    45,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123, 
         -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1, 
         91,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,    -1,   123,    33,   125,   126,    -1,    -1,    -1,    -1, 
         40,    -1,    -1,    43,    -1,    45,    -1,   404,   405,   406, 
        407,   408,   312,    -1,    -1,    -1,   413,   414,   415,    59, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340, 
         -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    91,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    33,    -1,    -1,    -1,   413,   414,   415,    40, 
         -1,    -1,    43,    -1,    45,    -1,   260,   261,   262,   263, 
        264,    -1,    -1,   123,    -1,   125,   126,    -1,    59,    -1, 
         -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    33, 
         -1,    -1,    -1,   413,   414,   415,    40,    -1,    -1,    43, 
         91,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,    -1,    59,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   123,    -1,    -1,   126,   340,   341,   342,   343, 
         -1,   345,   346,    -1,    -1,    -1,    -1,    91,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363, 
         -1,   365,   366,    -1,    -1,    -1,   370,   371,   372,   373, 
        374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123, 
         -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   340, 
        341,   342,   343,    -1,    -1,   346,    -1,    -1,   402,   403, 
        260,   261,   262,   263,   264,    -1,    -1,    -1,    -1,   360, 
        361,   362,   363,    -1,   365,   366,    -1,    -1,    -1,   370, 
        371,   372,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1, 
        340,   341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        360,   361,   362,   363,    -1,   365,   366,    -1,    -1,    -1, 
        370,    -1,   372,   373,   374,    -1,   260,   261,   262,   263, 
        264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   402,   403,    -1,    -1,    -1,    -1,    -1,   340, 
        341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360, 
        361,   362,   363,    -1,   365,   366,    -1,    -1,    -1,   370, 
         -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342,   343, 
         -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403,    -1,    -1,    -1,   360,   361,   362,   363, 
         -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_PROPERTY', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', NULL, 'T_DOUBLE_COLON', 
      'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 
      'T_BOOLEAN_AND', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 132 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 144 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 144 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 155 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 156 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 160 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 10:  #line 160 "grammar/xp.jay"
    {
      if (MODIFIER_STATIC === $yyVals[-4+$yyTop]) {
        $yyVal= new StaticImportNode();
      } else {
        $yyVal= new ImportNode();
      }
      $yyVal->position= $p;
      $yyVal->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 12:  #line 173 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 15:  #line 179 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 17:  #line 184 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 18:  #line 190 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 19:  #line 190 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 199 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 21:  #line 199 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 22:  #line 208 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 23:  #line 208 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 24:  #line 219 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 25:  #line 220 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 224 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 27:  #line 225 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 229 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 230 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 30:  #line 234 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 31:  #line 235 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 32:  #line 239 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 33:  #line 240 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 34:  #line 244 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 35:  #line 245 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 36:  #line 246 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 37:  #line 250 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 38:  #line 251 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 39:  #line 252 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 40:  #line 256 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 41:  #line 257 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 42:  #line 261 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 261 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 264 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 45:  #line 264 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 46:  #line 274 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 47:  #line 281 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop][0];
      $yyVal->annotations= $yyVals[-5+$yyTop][1];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 48:  #line 292 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 50:  #line 297 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 51:  #line 298 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 52:  #line 299 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 53:  #line 303 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 54:  #line 304 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 55:  #line 310 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 56:  #line 310 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 57:  #line 320 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 58:  #line 320 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 59:  #line 328 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 60:  #line 328 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 61:  #line 341 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 62:  #line 342 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 63:  #line 346 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 64:  #line 347 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 65:  #line 351 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 66:  #line 355 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVals[-1+$yyTop] && $yyVal->parameters= array('default' => $yyVals[-1+$yyTop]);
    } break;

    case 67:  #line 360 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 68:  #line 368 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 69:  #line 369 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 70:  #line 373 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 71:  #line 374 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 72:  #line 378 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 73:  #line 379 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 74:  #line 383 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 75:  #line 384 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 76:  #line 388 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 77:  #line 389 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 84:  #line 401 "grammar/xp.jay"
    { $yyVal= '[]'; } break;

    case 85:  #line 402 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 86:  #line 410 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 88:  #line 415 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 89:  #line 416 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 90:  #line 420 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 91:  #line 420 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 92:  #line 423 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 93:  #line 423 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 94:  #line 428 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 95:  #line 428 "grammar/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= array();
        foreach ($yyVals[-6+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->initialization[]= $stmt;
        }
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= array();
        foreach ($yyVals[-2+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->loop[]= $stmt;
        }
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 96:  #line 446 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 97:  #line 446 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 98:  #line 451 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 99:  #line 451 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 100:  #line 455 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 101:  #line 455 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 102:  #line 459 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 103:  #line 459 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 104:  #line 463 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 105:  #line 463 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 106:  #line 468 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 108:  #line 469 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 110:  #line 470 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 111:  #line 470 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 112:  #line 473 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->free= TRUE; } break;

    case 114:  #line 478 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 116:  #line 483 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 117:  #line 484 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 118:  #line 488 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 119:  #line 488 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 120:  #line 492 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 121:  #line 492 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 122:  #line 498 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 123:  #line 499 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 124:  #line 503 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 125:  #line 504 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 126:  #line 504 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 127:  #line 509 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 128:  #line 510 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 129:  #line 514 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 130:  #line 515 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 131:  #line 519 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 132:  #line 519 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 133:  #line 527 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 135:  #line 532 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 136:  #line 532 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 137:  #line 540 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 139:  #line 545 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 140:  #line 546 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 141:  #line 550 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 143:  #line 555 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 144:  #line 561 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 145:  #line 569 "grammar/xp.jay"
    { 
      /* TBI: Constant */ 
    } break;

    case 146:  #line 572 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 147:  #line 575 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new InvocationNode(array('name' => $yyVals[-3+$yyTop]))); 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 149:  #line 583 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 150:  #line 583 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 151:  #line 586 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 152:  #line 586 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 153:  #line 591 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 154:  #line 591 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyVals[-1+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 155:  #line 596 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 156:  #line 596 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 157:  #line 602 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 158:  #line 603 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 159:  #line 606 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 160:  #line 609 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 161:  #line 612 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 162:  #line 615 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 163:  #line 619 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 164:  #line 625 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 165:  #line 631 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 166:  #line 637 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 167:  #line 645 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 168:  #line 646 "grammar/xp.jay"
    { /* XXX class literal */ } break;

    case 169:  #line 647 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 170:  #line 647 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 171:  #line 651 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 172:  #line 656 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 173:  #line 657 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 174:  #line 658 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 175:  #line 659 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 176:  #line 663 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 178:  #line 668 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 179:  #line 669 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 180:  #line 673 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 181:  #line 677 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 182:  #line 678 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 183:  #line 679 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 184:  #line 680 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 185:  #line 681 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 682 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 686 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 188:  #line 687 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 189:  #line 688 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 190:  #line 689 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 191:  #line 690 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 192:  #line 691 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 193:  #line 695 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 194:  #line 696 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 195:  #line 697 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 196:  #line 698 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 197:  #line 699 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 198:  #line 700 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 199:  #line 704 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 200:  #line 705 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 201:  #line 706 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 202:  #line 707 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 203:  #line 708 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 204:  #line 709 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 205:  #line 713 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 206:  #line 714 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 207:  #line 719 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 210:  #line 725 "grammar/xp.jay"
    {  $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 211:  #line 729 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 212:  #line 729 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 213:  #line 732 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 214:  #line 735 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 215:  #line 735 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 218:  #line 749 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 219:  #line 750 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 220:  #line 754 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 221:  #line 758 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 222:  #line 759 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 224:  #line 764 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 225:  #line 768 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 226:  #line 769 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 227:  #line 775 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 228:  #line 776 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 229:  #line 780 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 230:  #line 781 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 231:  #line 785 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 232:  #line 786 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 233:  #line 787 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 234:  #line 788 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 235:  #line 789 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 236:  #line 790 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 237:  #line 791 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;

    case 238:  #line 792 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2005 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
