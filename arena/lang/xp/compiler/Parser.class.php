<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 48 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_PACKAGE',  303);
  define('TOKEN_T_IMPORT',  304);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          4,     4,    11,     3,    15,     3,    17,     3,    12,    12, 
         13,    13,    18,    18,    20,    20,    14,    14,    21,    21, 
         21,    16,    16,    16,    25,    25,    27,    26,    28,    26, 
         22,    22,    32,    32,    31,    31,    31,    30,    30,    35, 
         23,    38,    23,    40,    23,    37,    37,    34,    34,    42, 
         42,    43,    43,    36,    36,    39,    39,    39,    39,    39, 
         39,    41,    41,    33,    33,    45,    44,    46,    44,    48, 
         44,    50,    44,    52,    44,    53,    44,    54,    44,    56, 
         44,    44,    51,    51,    24,    24,    47,    57,    47,    55, 
         55,    58,    58,    62,    61,    59,    59,    63,    60,    64, 
         64,    29,    65,    29,    66,    29,    29,    29,    68,    29, 
         69,    29,    70,    29,    71,    29,    72,    29,    29,    29, 
         29,    29,    29,    29,    29,    73,    73,    73,    73,    73, 
         73,    74,    74,    74,    74,    74,    74,    75,    75,    75, 
         75,    75,    75,    76,    76,    76,    76,    76,    76,    77, 
         77,    67,    67,    79,    78,    78,    80,    78,    78,    49, 
         49,    81,    81,    10,    10,    10,    82,    82,    83,    83, 
         19,    19,     9,     9,    84,    84,    85,    85,    85,    85, 
         85,    85,    85, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     4, 
          1,     3,     0,     9,     0,     9,     0,     8,     0,     2, 
          0,     2,     0,     2,     0,     3,     2,     0,     1,     1, 
          2,     3,     1,     0,     1,     3,     0,     3,     0,     6, 
          5,     6,     0,     1,     2,     4,     4,     0,     2,     0, 
          9,     0,     8,     0,     9,     1,     3,     0,     1,     1, 
          3,     3,     3,     0,     2,     1,     1,     1,     1,     1, 
          1,     0,     1,     1,     2,     0,     4,     0,     7,     0, 
         10,     0,     8,     0,     6,     0,     7,     0,     6,     0, 
          4,     2,     4,     1,     1,     3,     0,     0,     3,     2, 
          1,     1,     2,     0,     9,     0,     1,     0,     5,     0, 
          1,     1,     0,     4,     0,     5,     1,     1,     0,     3, 
          0,     8,     0,     5,     0,     8,     0,     6,     3,     1, 
          1,     1,     1,     1,     5,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     2,     2,     2,     2,     2,     2,     2, 
          2,     0,     1,     0,     4,     2,     0,     6,     2,     0, 
          1,     1,     3,     1,     4,     3,     1,     3,     1,     3, 
          1,     3,     0,     1,     1,     2,     1,     1,     1,     1, 
          1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,   187,   189,   188,   190,   192,   191,   193,     1,     0, 
        184,     0,     8,     0,     4,     0,    13,    17,    15,   186, 
         12,    10,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   176,     0,   179,     0, 
          0,    20,     0,     0,     0,    24,    28,     0,     0,   175, 
          0,    22,    28,     0,     0,     0,   180,   178,     0,   182, 
          0,    18,     0,    27,    29,    30,     0,     0,     0,     0, 
         14,     0,     0,   113,     0,     0,     0,     0,     0,   118, 
        117,   119,    76,     0,    90,   121,    80,    84,    86,    82, 
         78,     0,     0,     0,    31,     0,    95,   130,   131,   132, 
        133,   134,     0,     0,     0,     0,     0,     0,    16,    28, 
          0,     0,     0,     0,     0,     0,     0,     0,   127,     0, 
          0,    88,     0,     0,     0,     0,     0,     0,     0,    73, 
          0,     0,     0,   115,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   160,   161, 
          0,     0,     0,     0,     0,     0,    92,    52,    66,    67, 
         68,    69,    70,    71,     0,     0,     0,     0,    28,    38, 
          0,     0,    36,     0,     0,   171,     0,   164,     0,   120, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         96,    75,   129,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   142, 
        143,   144,   145,   146,   147,     0,    54,     0,     0,    50, 
          0,     0,     0,     0,     0,   114,     0,     0,     0,     0, 
         77,     0,    91,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    59,     0,     0,     0,    45, 
          0,    44,     0,     0,     0,    41,    26,     0,   173,     0, 
          0,     0,   167,     0,     0,     0,     0,     0,     0,     0, 
        116,   124,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    42,     0,    40,   128,   165,     0,   104,   108,    89, 
          0,   101,     0,     0,     0,    85,     0,     0,     0,     0, 
          0,    63,    62,     0,     0,    61,     0,    46,    47,     0, 
          0,     0,     0,   100,   107,   103,     0,     0,    87,     0, 
          0,    98,    79,     0,    65,    56,     0,    53,     0,     0, 
        168,     0,     0,   122,     0,     0,    83,     0,   126,     0, 
         55,    51,     0,     0,     0,    93,    99,    57,     0,   109, 
         81,     0,     0,     0,   105, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    19,   104,     4,     7,     8,    11,    73,    55, 
         33,    43,    54,    65,    35,    78,    34,    45,    56,   180, 
         74,    75,    76,   105,    79,    80,   117,   118,   106,   232, 
        229,   263,   140,   255,   264,   315,   338,   226,   175,   258, 
        141,   256,   257,   107,   131,   139,   333,   135,   185,   138, 
        309,   136,   137,   193,   300,   133,   348,   301,   324,   302, 
        303,   322,   323,   272,   124,   204,   190,   130,   134,   205, 
        206,   187,   108,   109,   110,   111,   112,   191,   238,   297, 
        186,    50,    51,    21,    22, 
    );
    protected static $yySindex = array(         -241,
          0,     0,  -226,  -187,     0,   276,     0,  -226,    78,    85, 
       -187,     0,     0,     0,     0,     0,     0,     0,     0,  -231, 
          0,   276,     0,  -187,     0,    92,     0,     0,     0,     0, 
          0,     0,  -187,  -187,  -187,   -19,  -157,  -142,  -157,    83, 
        -44,  -187,  -134,  -187,    55,  -134,     0,  -129,     0,   135, 
        154,     0,  -187,    77,   165,     0,     0,    88,  -187,     0, 
        -44,     0,     0,  -187,   -34,   -42,     0,     0,    96,     0, 
       1231,     0,  -220,     0,     0,     0,     0,    94,   163,   179, 
          0,  1605,  1605,     0,  1605,  1605,  1605,  1605,   109,     0, 
          0,     0,     0,   102,     0,     0,     0,     0,     0,     0, 
          0,  1592,  1605,   -82,     0,   170,     0,     0,     0,     0, 
          0,     0,   125,    21,  -114,  -247,   104,   195,     0,     0, 
        -42,   -59,   -59,  1605,   -59,   -59,   -59,   -59,     0,   -89, 
       1605,     0,  1605,  -187,   201,   203,  1231,   214,   225,     0, 
        112,  1592,   197,     0,     0,  1605,  1605,  1605,  1605,  1605, 
       1605,  1605,  1605,  1605,  1605,  1605,  1605,  1605,     0,     0, 
       1605,  1605,  1605,  1605,  1605,  1605,     0,     0,     0,     0, 
          0,     0,     0,     0,   227,     8,   230,   211,     0,     0, 
       1605,   303,     0,   219,   180,     0,  1605,     0,    14,     0, 
        -89,   246,  1592,   274,   236,  1605,  1605,   -77,  1605,  1605, 
          0,     0,     0,  1605,   -55,    26,   -59,   -59,   -59,   -59, 
        -59,   -59,   366,   -59,   -59,   -59,   -59,   -59,   -59,     0, 
          0,     0,     0,     0,     0,  -187,     0,  -112,     8,     0, 
       1605,   228,   204,   650,  1605,     0,   251,  1605,   255,   -89, 
          0,   187,     0,  1605,   254,   677,   275,   699,   738,   221, 
        -89,   278,  1605,   -30,   281,     0,   280,  -187,   299,     0, 
       1592,     0,   287,  -187,   789,     0,     0,   104,     0,   -89, 
        789,   247,     0,  -223,   306,  1605,  1231,  1605,     9,  1231, 
          0,     0,  1605,   -59,    11,   211,    35,  -187,   316,   317, 
        234,     0,   320,     0,     0,     0,  1605,     0,     0,     0, 
         17,     0,    39,   104,   325,     0,   767,   326,   345,    33, 
        348,     0,     0,  -187,   -15,     0,    35,     0,     0,    35, 
        364,   370,   283,     0,     0,     0,   -89,  1605,     0,   350, 
       1231,     0,     0,   -89,     0,     0,  1592,     0,   -15,   -15, 
          0,  -187,  1592,     0,   373,    75,     0,  1231,     0,   298, 
          0,     0,    90,   300,  1231,     0,     0,     0,   390,     0, 
          0,   309,  1592,   308,     0, 
    );
    protected static $yyRindex= array(          136,
          0,     0,   359,     0,     0,  -108,     0,   447,  1582,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    30,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    15,  -103,   312,  -103,     0, 
          0,     0,   318,     0,     0,   318,     0,     0,     0,     0, 
        380,     0,     0,     0,    23,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,  -168,   328,     0,     0,  -168,     0, 
         18,     0,     0,     0,     0,     0,   130,     0,   332,     1, 
          0,     0,     0,     0,     0,     0,     0,     0,   -37,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   333,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   -46,     0,     0,     0,    50,     0,     0,     0, 
          0,   471,   824,   367,   847,   883,   892,   919,     0,    70, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   334,     0,     0,  -244,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   402,     0,     0, 
          0,  -110,     0,     6,     0,     0,   423,     0,     0,     0, 
         98,     0,   333,     0,     0,   406,     0,     0,     0,     0, 
          0,     0,     0,   367,     0,     0,   928,   955,   982,  1071, 
       1175,  1306,     0,  1333,  1360,  1369,  1396,  1405,  1443,     0, 
          0,     0,     0,     0,     0,   425,     0,     0,   408,     0, 
          0,     0,  -168,     0,     0,     0,     0,   375,   -10,   143, 
          0,     0,     0,   423,     0,     0,     0,     0,     0,     0, 
         70,     0,     0,     0,     0,     0,   428,   425,     0,     0, 
          0,     0,     0,   425,   123,     0,     0,    50,     0,    70, 
        386,     0,     0,     0,     0,   406,     0,     0,     0,     0, 
          0,     0,   423,  1466,     0,     2,    60,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   423,     0,     0,     0, 
       1626,     0,  1555,    43,     0,     0,     0,   439,     0,  1738, 
          0,     0,     0,     0,     0,     0,    60,     0,     0,    60, 
          0,     0,     0,     0,     0,     0,    70,   423,     0,     0, 
          0,     0,     0,    70,     0,     0,   333,     0,     0,     0, 
          0,     0,   333,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   333,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,  2001,     0,   475,     0,     0,   485,  1721, 
          0,   454,   448,   -25,     0,     0,     0,     0,   -36,  -229, 
          0,     0,     0,   108,   374,     0,     0,     0,  1964,   210, 
        268,     0,  -124,   -92,     0,  -197,  -242,     0,     0,     0, 
       -164,   223,     0,   -66,     0,     0,     0,     0,   335,     0, 
          0,     0,     0,     0,     0,     0,     0,   216,     0,   220, 
          0,     0,     0,     0,     0,     0,  -209,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,  -161,     0,     0, 
        282,   459,     0,   501,     0, 
    );
    protected static $yyTable = array(112,
        161,   188,   162,   112,   112,   112,   112,   112,   144,   112, 
        261,   285,   177,    11,    32,   125,    62,   202,    48,    19, 
        112,   112,   112,   112,   112,   112,   166,    70,   242,   240, 
        166,   166,   166,   166,   166,   142,   166,    69,   294,   113, 
         41,   282,    48,   336,    11,    48,   172,   166,   166,   166, 
        166,   166,   166,    11,   174,   112,   174,   173,   174,    35, 
        295,     1,   171,   169,   172,   170,   158,   172,    27,    28, 
         29,    40,     9,   174,   327,   142,   174,     5,   240,    25, 
        166,   181,   166,    25,    25,    25,    25,    25,   112,    25, 
         72,   183,   178,    25,   182,   123,   351,   352,   172,   114, 
         25,    25,    25,    25,    25,    25,   162,   337,    25,   115, 
        162,   162,   162,   162,   162,   166,   162,   344,    64,   339, 
        298,   299,   340,    24,   349,    35,   142,   162,   162,   162, 
        162,   162,   162,    25,   163,    25,   291,   174,   163,   163, 
        163,   163,   163,    25,   163,   181,   174,   259,   129,   183, 
         32,   183,    42,   233,    24,   163,   163,   163,   163,   163, 
        163,   183,   162,    49,   168,   289,    49,    44,    25,    39, 
         24,   293,   350,    37,    25,    47,    53,    57,   354,   169, 
         59,    49,    64,   169,   169,   169,   169,   169,    37,   169, 
        163,   183,   183,   183,   142,   162,    60,    61,   364,    63, 
        169,   169,   169,   169,   169,   169,   151,    19,    64,   183, 
         66,   149,   147,    11,   148,     9,   150,    77,   119,   183, 
         81,   120,   121,   163,   132,   176,   179,   260,   167,   161, 
        146,   162,   152,   151,   181,   169,   201,   203,   149,   147, 
        196,   148,   197,   150,   198,    12,    13,    14,    71,    16, 
         17,    18,    37,   199,    37,   151,   161,   146,   162,   152, 
        149,   147,   235,   148,   200,   150,   227,   228,   169,   230, 
        142,   231,   236,   239,   174,   244,   142,   335,   161,   146, 
        162,   152,   151,   247,   251,   252,   266,   149,   147,   185, 
        148,   270,   150,    11,   273,   158,   142,   190,   190,   190, 
        190,   190,   190,   190,   241,   161,   146,   162,   152,   286, 
        151,   274,   276,   281,   278,   149,   147,   283,   148,   189, 
        150,   287,   158,   288,   174,   174,   112,   145,   267,   185, 
        185,   185,   243,   161,   146,   162,   152,   190,   290,   296, 
        164,   163,   159,   160,   158,   292,   304,   190,   308,   185, 
        312,   165,   166,   166,   174,   314,   317,   318,   319,   185, 
        320,   299,   112,   112,   112,   112,   112,   112,   112,   112, 
        112,   158,    11,   112,   112,    12,    13,    14,    71,    16, 
         17,    18,   298,   328,   306,   331,   330,   310,   334,   166, 
        166,   166,   166,   166,   166,   166,   166,   166,   166,   158, 
        166,   166,   151,   332,   341,   343,    25,   149,   147,   342, 
        148,   346,   150,   355,   356,     2,     2,     2,     2,     2, 
          2,     2,   358,   253,   360,   161,   146,   162,   152,   359, 
        362,   363,   365,   162,    23,     2,     2,     2,   347,     2, 
         21,   177,    25,    25,    25,    25,    25,    25,    25,    25, 
         25,    25,    34,    25,    25,   357,    33,    72,    74,   170, 
         48,   163,   361,   170,   170,    58,    43,   110,    60,   162, 
        162,   162,   162,   162,   162,   162,   162,   162,   111,    94, 
        162,   162,    23,    12,    13,    14,    71,    16,    17,    18, 
         20,   158,    46,    58,   183,   313,   262,   163,   163,   163, 
        163,   163,   163,   163,   163,   163,   169,   156,   163,   163, 
        316,   156,   156,   156,   156,   156,   269,   156,   326,    68, 
        325,   237,    30,     0,     0,     0,     0,     0,   156,   156, 
        245,   156,     0,   156,     0,     0,     0,     0,   250,     0, 
          0,     0,   169,   169,   169,   169,   169,   169,   169,   169, 
        169,     0,     0,   169,   169,    12,    13,    14,    15,    16, 
         17,    18,     0,   156,     0,     0,     0,     0,     0,   164, 
        163,   159,   160,   153,   154,   155,   156,   157,   275,     0, 
        165,   166,    12,    13,    14,    71,    16,    17,    18,     0, 
          0,     0,     0,     0,     0,     0,   164,   163,   159,   160, 
        153,   154,   155,   156,   157,     0,     0,   165,   166,     0, 
        305,     0,     0,     0,     0,     0,     0,   311,   164,   163, 
        159,   160,   153,   154,   155,   156,   157,     0,     0,   165, 
        166,   321,     0,     0,     0,     0,     0,     0,     5,     5, 
          5,     5,     5,     5,     5,   164,   163,   159,   160,   153, 
        154,   155,   156,   157,     0,     0,   165,   166,     5,     5, 
          5,     0,   345,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   164,   163,   159,   160,   153,   154,   155, 
        156,   157,     0,     0,   165,   166,   151,     0,     0,     0, 
        268,   149,   147,     0,   148,     0,   150,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   161, 
        146,   162,   152,   151,     0,     0,     0,   277,   149,   147, 
          0,   148,     0,   150,     0,     0,     7,     7,     7,     7, 
          7,     7,     7,     0,     0,   151,   161,   146,   162,   152, 
        149,   147,     0,   148,     0,   150,     7,     7,     7,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   161,   146, 
        162,   152,     0,     0,     0,   164,   163,   159,   160,   153, 
        154,   155,   156,   157,   151,   158,   165,   166,   280,   149, 
        147,     0,   148,     0,   150,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   161,   146,   162, 
        152,     0,   158,   151,     0,     0,     0,   329,   149,   147, 
          0,   148,     0,   150,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   158,   151,   161,   146,   162,   152, 
        149,   147,     0,   148,   156,   150,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   161,   146, 
        162,   152,     0,     0,     0,     0,     0,     0,     0,     0, 
        157,     0,     0,   158,   157,   157,   157,   157,   157,     0, 
        157,     0,     0,     0,   156,   156,   156,   156,   156,     0, 
          0,   157,   157,   154,   157,     0,   157,   154,   154,   154, 
        154,   154,   158,   154,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   154,   154,     0,   154,     0,   154, 
          0,     0,     0,     0,   158,     0,   157,     0,     0,   155, 
          0,     0,     0,   155,   155,   155,   155,   155,   158,   155, 
          0,     0,   158,   158,   158,   158,   158,     0,   158,   154, 
        155,   155,     0,   155,     0,   155,     0,     0,     0,   158, 
        158,     0,   158,     0,   158,   159,     0,     0,     0,   159, 
        159,   159,   159,   159,   136,   159,     0,     0,   136,   136, 
        136,   136,   136,     0,   136,   155,   159,   159,     0,   159, 
          0,   159,     0,     0,   158,   136,   136,     0,   136,     0, 
        136,   148,     0,     0,     0,   148,   148,   148,   148,   148, 
          0,   148,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   159,   148,   148,     0,   148,     0,   148,   149,     0, 
        136,     0,   149,   149,   149,   149,   149,     0,   149,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   149, 
        149,     0,   149,     0,   149,     0,     0,   148,     0,   164, 
        163,   159,   160,   153,   154,   155,   156,   157,     0,     0, 
        165,   166,   279,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   149,     0,   164,   163,   159,   160, 
        153,   154,   155,   156,   157,     0,     0,   165,   166,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   164,   163, 
        159,   160,   153,   154,   155,   156,   157,   150,     0,   165, 
        166,   150,   150,   150,   150,   150,     0,   150,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   150,   150, 
          0,   150,     0,   150,     0,     0,     0,   164,   163,   159, 
        160,   153,   154,   155,   156,   157,     0,     0,   165,   166, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   150,     0,     0,   164,   163,   159,   160, 
        153,   154,   155,   156,   157,     0,     0,   165,   166,     0, 
          0,     0,     0,     0,     0,     0,     0,   157,   164,   163, 
        159,   160,   153,   154,   155,   156,   157,     0,     0,   165, 
        166,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        154,   151,     0,     0,     0,   151,   151,   151,   151,   151, 
          0,   151,     0,     0,     0,     0,     0,   157,   157,   157, 
        157,   157,   151,   151,     0,   151,     0,   151,     0,     0, 
          0,     0,     0,     0,     0,     0,   155,     0,     0,     0, 
        154,   154,   154,   154,   154,   158,     0,     0,     0,     0, 
          0,     0,     0,    85,     0,     0,     0,   151,     0,     0, 
        103,     0,     0,    82,     0,    83,     0,     0,     0,     0, 
          0,     0,   159,     0,     0,     0,   155,   155,   155,   155, 
        155,   136,     0,     0,     0,   158,   158,   158,   158,   158, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   148,     0, 
          0,    84,   159,   159,   159,   159,   159,     0,     0,     0, 
          0,   136,   136,   136,   136,   136,     0,     0,     0,     0, 
          0,     0,   152,     0,     0,   149,   152,   152,   152,   152, 
        152,     0,   152,   102,     0,     0,    86,     0,   148,   148, 
        148,   148,   148,   152,   152,     0,   152,     0,   152,   137, 
          0,     0,     0,   137,   137,   137,   137,   137,     0,   137, 
          0,     0,     0,     0,     0,   149,   149,   149,   149,   149, 
        137,   137,     0,   137,     0,   137,   138,     0,   152,     0, 
        138,   138,   138,   138,   138,   139,   138,     0,     0,   139, 
        139,   139,   139,   139,     0,   139,     0,   138,   138,     0, 
        138,     0,   138,     0,     0,   137,   139,   139,     0,   139, 
          0,   139,   140,     0,   150,     0,   140,   140,   140,   140, 
        140,   141,   140,     0,     0,   141,   141,   141,   141,   141, 
          0,   141,   138,   140,   140,     0,   140,     0,   140,     0, 
          0,   139,   141,   141,     0,   141,     0,   141,     0,     0, 
          0,     0,     0,     0,   150,   150,   150,   150,   150,   153, 
          0,     0,     0,   153,   153,   153,   153,   153,   140,   153, 
         89,    90,    91,     0,     0,     0,     0,   141,     0,     0, 
        153,   153,   135,   153,     0,   153,   135,   135,   135,   135, 
        135,     0,   135,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   135,   135,     0,   135,     0,   135,     0, 
          0,     0,     0,     0,     0,   153,     0,     0,   151,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   135,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         92,    93,    94,    95,     0,     0,    96,     0,   151,   151, 
        151,   151,   151,     0,     0,     0,     0,   102,     0,     0, 
         97,    98,    99,   100,   102,     0,     0,   102,     0,   102, 
        101,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    11,     0,    11,    85,    11,     0,     0,     0,     0, 
          0,   103,    87,    88,    82,     0,    83,    85,     0,     0, 
         11,    11,     0,    11,   103,   102,     0,    82,     0,    83, 
          0,     0,     0,     0,     0,     0,     0,     0,   106,     0, 
          0,     0,     0,     0,     0,   106,     0,     0,   106,   152, 
        106,     0,    11,     0,     0,     0,     0,     0,     0,   102, 
        102,     0,    84,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    84,   137,     0,     0,     0, 
          0,     0,     0,     0,    11,     0,     0,     0,     0,   152, 
        152,   152,   152,   152,     0,     0,   106,    86,     0,     0, 
          0,     0,     0,   138,     0,     0,     0,     0,     0,     0, 
         86,     0,   139,     0,     0,     0,   137,   137,   137,   137, 
        137,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        106,   106,     0,    37,    38,    39,     0,     0,     0,   140, 
          0,    49,    52,   138,   138,   138,   138,   138,   141,     0, 
         97,     0,   139,   139,   139,   139,   139,    97,     0,     0, 
         97,    49,    97,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   116,     0,     0,     0,     0,     0,   140, 
        140,   140,   140,   140,     0,     0,   153,     0,   141,   141, 
        141,   141,   141,     0,   102,   102,   102,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    97,   135, 
          0,     0,     0,     0,   102,   102,   102,   102,   102,   102, 
        102,    11,     0,     0,     0,     0,   153,   153,   153,   153, 
        153,    89,    90,    91,   195,     0,     0,     0,     0,     0, 
          0,     0,    97,    97,    89,    90,    91,     0,     0,   135, 
        135,   135,   135,   135,   102,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   102,   106,   106,   106,     0,     0, 
          0,    11,    11,     0,   102,   102,   102,   102,     0,   102, 
        102,     0,     0,     0,     0,   106,   106,   106,   106,   106, 
        106,   106,     0,     0,   102,   102,   102,   102,     0,     0, 
          0,    11,     0,     0,   102,   102,     0,     0,     0,     0, 
          0,    92,    93,    94,    95,     0,     0,    96,     0,     0, 
          0,     0,     0,     0,    92,   106,   254,     0,     0,     0, 
         96,    97,    98,    99,   100,   106,   102,   102,     0,     0, 
          0,   101,     0,     0,     0,   106,   106,   106,   106,     0, 
          0,   106,     0,     0,     0,     0,     0,     0,   254,     0, 
          0,     0,     0,     0,   254,   106,   106,   106,   106,     0, 
          0,    11,     0,    87,    88,   106,   106,    97,    97,    97, 
          0,     0,     0,     0,    10,     0,    87,    88,   254,     0, 
          0,    26,     0,     0,     0,     0,     0,    97,    97,    97, 
         97,    97,    97,    97,    31,     0,     0,   106,   106,     0, 
          0,     0,     0,    36,    36,    36,     0,     0,     0,     0, 
          0,    36,    36,     0,    36,   122,   123,     0,   125,   126, 
        127,   128,     0,    36,     0,     0,     0,    97,     0,    67, 
          0,    36,   353,     0,    36,     0,   143,    97,     0,     0, 
          0,     0,     0,    36,     0,     0,     0,    97,    97,    97, 
         97,     0,     0,    97,     0,     0,     0,   184,     0,     0, 
          0,     0,     0,     0,   192,     0,   194,    97,    97,    97, 
         97,     0,     0,     0,     0,     0,     0,    97,     0,   207, 
        208,   209,   210,   211,   212,   213,   214,   215,   216,   217, 
        218,   219,     0,     0,   220,   221,   222,   223,   224,   225, 
          0,     0,     0,     0,    36,     0,     0,     0,     0,    97, 
         97,     0,     0,     0,   234,     0,     0,     0,     0,     0, 
        184,     0,     0,     0,     0,     0,     0,     0,     0,   184, 
        246,     0,   248,   249,     0,     0,     0,   184,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   265,     0,     0,     0,   184,     0, 
          0,   271,     0,     0,     0,     0,     0,   184,     0,     0, 
          0,     0,     0,     0,     0,     0,   284,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    36,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   184, 
          0,   307,     0,     0,     0,     0,   184,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    36,     0, 
        184,     0,     0,     0,    36,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    36,     0, 
          0,   184,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    36,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    36, 
    );
    protected static $yyCheck = array(37,
         60,    91,    62,    41,    42,    43,    44,    45,    91,    47, 
        123,    42,   260,    60,   125,   260,    53,   142,    63,   123, 
         58,    59,    60,    61,    62,    63,    37,    64,   193,   191, 
         41,    42,    43,    44,    45,   102,    47,    63,   268,   260, 
         60,   251,    41,    59,    91,    44,    41,    58,    59,    60, 
         61,    62,    63,    91,    40,    93,    42,    37,    44,    59, 
        270,   303,    42,    43,    59,    45,   126,    47,   300,   301, 
        302,    91,   260,    59,   304,   142,    62,   304,   240,    37, 
         91,    59,    93,    41,    42,    43,    44,    45,   126,    47, 
        125,   260,   340,    44,   120,   340,   339,   340,    93,   320, 
         58,    59,    60,    61,    62,    63,    37,   123,    59,   330, 
         41,    42,    43,    44,    45,   126,    47,   327,    59,   317, 
        344,   345,   320,    46,   334,   125,   193,    58,    59,    60, 
         61,    62,    63,    91,    37,    93,   261,   123,    41,    42, 
         43,    44,    45,    59,    47,   123,   126,   260,    40,   260, 
         59,   320,   310,   179,    46,    58,    59,    60,    61,    62, 
         63,   330,    93,    41,    40,   258,    44,   310,   126,    40, 
         46,   264,   337,    44,   125,    93,   311,   123,   343,    37, 
        310,    59,   123,    41,    42,    43,    44,    45,    59,    47, 
         93,   300,   301,   302,   261,   126,    62,    44,   363,   123, 
         58,    59,    60,    61,    62,    63,    37,   311,    44,   320, 
        123,    42,    43,   260,    45,   260,    47,   260,   125,   330, 
        125,    59,    44,   126,   123,   340,   123,   340,    59,    60, 
         61,    62,    63,    37,    40,    93,   125,    41,    42,    43, 
         40,    45,    40,    47,   137,   280,   281,   282,   283,   284, 
        285,   286,   123,    40,   125,    37,    60,    61,    62,    63, 
         42,    43,    44,    45,    40,    47,    40,   260,   126,    40, 
        337,    61,    93,   260,   260,    40,   343,   314,    60,    61, 
         62,    63,    37,   361,   340,   260,    59,    42,    43,   260, 
         45,    41,    47,   340,    40,   126,   363,   280,   281,   282, 
        283,   284,   285,   286,    59,    60,    61,    62,    63,   340, 
         37,   125,    59,    93,    40,    42,    43,    40,    45,   409, 
         47,    41,   126,    44,   310,   311,   364,   410,   125,   300, 
        301,   302,    59,    60,    61,    62,    63,   320,    40,    93, 
        400,   401,   402,   403,   126,    59,    41,   330,   340,   320, 
        340,   411,   412,   364,   340,   321,    41,    41,   125,   330, 
         41,   345,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   126,   410,   411,   412,   280,   281,   282,   283,   284, 
        285,   286,   344,    59,   277,    41,    61,   280,    41,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   409,   126, 
        411,   412,    37,   371,    41,   123,   364,    42,    43,    40, 
         45,    62,    47,    41,   340,   280,   281,   282,   283,   284, 
        285,   286,   125,    58,   125,    60,    61,    62,    63,   340, 
         41,   123,   125,   364,   123,   300,   301,   302,   331,   304, 
        123,    62,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   409,   125,   411,   412,   348,   125,   125,   125,    93, 
         59,   364,   355,    41,    59,    41,    59,    93,    41,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    93,    41, 
        411,   412,     8,   280,   281,   282,   283,   284,   285,   286, 
          6,   126,    39,    46,   121,   286,   229,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   364,    37,   411,   412, 
        288,    41,    42,    43,    44,    45,   235,    47,   303,    61, 
        301,   187,    22,    -1,    -1,    -1,    -1,    -1,    58,    59, 
        196,    61,    -1,    63,    -1,    -1,    -1,    -1,   204,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,   280,   281,   282,   283,   284, 
        285,   286,    -1,    93,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   244,    -1, 
        411,   412,   280,   281,   282,   283,   284,   285,   286,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        276,    -1,    -1,    -1,    -1,    -1,    -1,   283,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,   297,    -1,    -1,    -1,    -1,    -1,    -1,   280,   281, 
        282,   283,   284,   285,   286,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,   300,   301, 
        302,    -1,   328,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    37,    -1,    -1,    -1, 
         41,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    37,    -1,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,   280,   281,   282,   283, 
        284,   285,   286,    -1,    -1,    37,    60,    61,    62,    63, 
         42,    43,    -1,    45,    -1,    47,   300,   301,   302,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61, 
         62,    63,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    37,   126,   411,   412,    41,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62, 
         63,    -1,   126,    37,    -1,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   126,    37,    60,    61,    62,    63, 
         42,    43,    -1,    45,   364,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         37,    -1,    -1,   126,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    58,    59,    37,    61,    -1,    63,    41,    42,    43, 
         44,    45,   126,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,    -1,   126,    -1,    93,    -1,    -1,    37, 
         -1,    -1,    -1,    41,    42,    43,    44,    45,    37,    47, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,    93, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    37,    -1,    -1,    -1,    41, 
         42,    43,    44,    45,    37,    47,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    93,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    93,    58,    59,    -1,    61,    -1, 
         63,    37,    -1,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    58,    59,    -1,    61,    -1,    63,    37,    -1, 
         93,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    93,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    93,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    37,    -1,   411, 
        412,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        364,    37,    -1,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   364,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,   364,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    33,    -1,    -1,    -1,    93,    -1,    -1, 
         40,    -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1, 
         -1,    -1,   364,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,   364,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,    -1, 
         -1,    91,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
         -1,    -1,    37,    -1,    -1,   364,    41,    42,    43,    44, 
         45,    -1,    47,   123,    -1,    -1,   126,    -1,   404,   405, 
        406,   407,   408,    58,    59,    -1,    61,    -1,    63,    37, 
         -1,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         58,    59,    -1,    61,    -1,    63,    37,    -1,    93,    -1, 
         41,    42,    43,    44,    45,    37,    47,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    93,    58,    59,    -1,    61, 
         -1,    63,    37,    -1,   364,    -1,    41,    42,    43,    44, 
         45,    37,    47,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    93,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    93,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    37, 
         -1,    -1,    -1,    41,    42,    43,    44,    45,    93,    47, 
        260,   261,   262,    -1,    -1,    -1,    -1,    93,    -1,    -1, 
         58,    59,    37,    61,    -1,    63,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,   364,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        340,   341,   342,   343,    -1,    -1,   346,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,    33,    -1,    -1, 
        360,   361,   362,   363,    40,    -1,    -1,    43,    -1,    45, 
        370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    40,    -1,    42,    33,    44,    -1,    -1,    -1,    -1, 
         -1,    40,   402,   403,    43,    -1,    45,    33,    -1,    -1, 
         59,    60,    -1,    62,    40,    91,    -1,    43,    -1,    45, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1, 
         -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,   364, 
         45,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,   125, 
        126,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    91,   364,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    91,   126,    -1,    -1, 
         -1,    -1,    -1,   364,    -1,    -1,    -1,    -1,    -1,    -1, 
        126,    -1,   364,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        125,   126,    -1,    33,    34,    35,    -1,    -1,    -1,   364, 
         -1,    41,    42,   404,   405,   406,   407,   408,   364,    -1, 
         33,    -1,   404,   405,   406,   407,   408,    40,    -1,    -1, 
         43,    61,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   364,    -1,   404,   405, 
        406,   407,   408,    -1,   260,   261,   262,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,   364, 
         -1,    -1,    -1,    -1,   280,   281,   282,   283,   284,   285, 
        286,   260,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,   260,   261,   262,   134,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   125,   126,   260,   261,   262,    -1,    -1,   404, 
        405,   406,   407,   408,   320,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   330,   260,   261,   262,    -1,    -1, 
         -1,   310,   311,    -1,   340,   341,   342,   343,    -1,   345, 
        346,    -1,    -1,    -1,    -1,   280,   281,   282,   283,   284, 
        285,   286,    -1,    -1,   360,   361,   362,   363,    -1,    -1, 
         -1,   340,    -1,    -1,   370,   371,    -1,    -1,    -1,    -1, 
         -1,   340,   341,   342,   343,    -1,    -1,   346,    -1,    -1, 
         -1,    -1,    -1,    -1,   340,   320,   226,    -1,    -1,    -1, 
        346,   360,   361,   362,   363,   330,   402,   403,    -1,    -1, 
         -1,   370,    -1,    -1,    -1,   340,   341,   342,   343,    -1, 
         -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,   258,    -1, 
         -1,    -1,    -1,    -1,   264,   360,   361,   362,   363,    -1, 
         -1,   410,    -1,   402,   403,   370,   371,   260,   261,   262, 
         -1,    -1,    -1,    -1,     4,    -1,   402,   403,   288,    -1, 
         -1,    11,    -1,    -1,    -1,    -1,    -1,   280,   281,   282, 
        283,   284,   285,   286,    24,    -1,    -1,   402,   403,    -1, 
         -1,    -1,    -1,    33,    34,    35,    -1,    -1,    -1,    -1, 
         -1,    41,    42,    -1,    44,    82,    83,    -1,    85,    86, 
         87,    88,    -1,    53,    -1,    -1,    -1,   320,    -1,    59, 
         -1,    61,   342,    -1,    64,    -1,   103,   330,    -1,    -1, 
         -1,    -1,    -1,    73,    -1,    -1,    -1,   340,   341,   342, 
        343,    -1,    -1,   346,    -1,    -1,    -1,   124,    -1,    -1, 
         -1,    -1,    -1,    -1,   131,    -1,   133,   360,   361,   362, 
        363,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,   146, 
        147,   148,   149,   150,   151,   152,   153,   154,   155,   156, 
        157,   158,    -1,    -1,   161,   162,   163,   164,   165,   166, 
         -1,    -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,   402, 
        403,    -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,    -1, 
        187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196, 
        197,    -1,   199,   200,    -1,    -1,    -1,   204,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,   235,    -1, 
         -1,   238,    -1,    -1,    -1,    -1,    -1,   244,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   276, 
         -1,   278,    -1,    -1,    -1,    -1,   283,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   258,    -1, 
        297,    -1,    -1,    -1,   264,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,    -1, 
         -1,   328,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   314,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   342, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 'T_FINAL', 
      'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 'T_PACKAGE', 
      'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 'T_IMPLEMENTS', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 'T_THROWS', NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 
      'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_AS', 
      'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 
      'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 'T_OBJECT_OPERATOR', 
      'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 111 "grammar/xp.jay"
    {
        $yyVal= new ParseTree();
        $yyVal->package= $yyVals[-2+$yyTop];
        $yyVal->imports= $yyVals[-1+$yyTop];
        $yyVal->declaration= $yyVals[0+$yyTop];
      } break;

    case 3:  #line 122 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 122 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 133 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 134 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 138 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 138 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
    } break;

    case 12:  #line 145 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 13:  #line 151 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 14:  #line 151 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 15:  #line 159 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 16:  #line 159 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 17:  #line 167 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 18:  #line 167 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 19:  #line 177 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 20:  #line 178 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 21:  #line 182 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 22:  #line 183 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 23:  #line 187 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 24:  #line 188 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 25:  #line 192 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 26:  #line 193 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 27:  #line 197 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 28:  #line 198 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 202 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 30:  #line 203 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 31:  #line 204 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[0+$yyTop]); } break;

    case 32:  #line 208 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 33:  #line 209 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 210 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 35:  #line 214 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 36:  #line 215 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 37:  #line 219 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 38:  #line 219 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 39:  #line 222 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 40:  #line 222 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 41:  #line 232 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
        $yyVal->modifiers= $yyVals[-4+$yyTop];
        $yyVal->type= $yyVals[-3+$yyTop];
        $yyVal->name= $yyVals[-2+$yyTop];
        $yyVal->initialization= $yyVals[-1+$yyTop];
      } break;

    case 42:  #line 238 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
        $yyVal->modifiers= $yyVals[-5+$yyTop];
        $yyVal->name= $yyVals[-3+$yyTop];
        $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
        $yyVal->get= $gs['get'];
        $yyVal->set= $gs['set'];
      } break;

    case 43:  #line 248 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 45:  #line 253 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 46:  #line 254 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 47:  #line 255 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 48:  #line 259 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 49:  #line 260 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 50:  #line 266 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 51:  #line 266 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
        $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
      } break;

    case 52:  #line 275 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 53:  #line 275 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
      } break;

    case 54:  #line 282 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 55:  #line 282 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 56:  #line 293 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 57:  #line 294 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 58:  #line 298 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 59:  #line 299 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 60:  #line 303 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 61:  #line 304 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 62:  #line 308 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 63:  #line 309 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 64:  #line 313 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 65:  #line 314 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 72:  #line 331 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 74:  #line 336 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 75:  #line 337 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 76:  #line 341 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 77:  #line 341 "grammar/xp.jay"
    { 
        $yyVal->expression= $yyVals[-1+$yyTop];
      } break;

    case 78:  #line 344 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 79:  #line 344 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
      } break;

    case 80:  #line 349 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 81:  #line 349 "grammar/xp.jay"
    {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
        $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
        $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 82:  #line 355 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 83:  #line 355 "grammar/xp.jay"
    {
        $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
        /* $1->assignment= $6; XX FIXME XX*/
        $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 84:  #line 360 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 85:  #line 360 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
        $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 86:  #line 364 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 87:  #line 364 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
      } break;

    case 88:  #line 368 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 89:  #line 368 "grammar/xp.jay"
    { 
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
        $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-4+$yyTop]; 
      } break;

    case 90:  #line 373 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 91:  #line 373 "grammar/xp.jay"
    { /* Throw statement */ 
        $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
      } break;

    case 93:  #line 380 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop], $yyVals[0+$yyTop]); } break;

    case 94:  #line 381 "grammar/xp.jay"
    { $yyVal= array(NULL, $yyVals[0+$yyTop]); } break;

    case 95:  #line 385 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 96:  #line 386 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 97:  #line 390 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 98:  #line 391 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 99:  #line 391 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 100:  #line 396 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 101:  #line 397 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 102:  #line 401 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 103:  #line 402 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 104:  #line 406 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 105:  #line 406 "grammar/xp.jay"
    {
        $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
        $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
        $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
      } break;

    case 106:  #line 414 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 108:  #line 419 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 109:  #line 419 "grammar/xp.jay"
    {
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      } break;

    case 110:  #line 427 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 112:  #line 432 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 113:  #line 433 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 114:  #line 433 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 115:  #line 437 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 116:  #line 437 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= new TypeName($yyVals[-4+$yyTop]);
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 117:  #line 442 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 118:  #line 443 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 119:  #line 444 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 120:  #line 444 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 121:  #line 447 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InstanceCreationNode()); } break;

    case 122:  #line 447 "grammar/xp.jay"
    { 
      $yyVals[-7+$yyTop]->type= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-7+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 123:  #line 452 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 124:  #line 452 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 125:  #line 457 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 126:  #line 457 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 127:  #line 463 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 128:  #line 463 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 129:  #line 469 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 130:  #line 470 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); } break;

    case 131:  #line 471 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); } break;

    case 132:  #line 472 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); } break;

    case 133:  #line 473 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); } break;

    case 134:  #line 474 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); $yyVal->postfix= TRUE; } break;

    case 135:  #line 475 "grammar/xp.jay"
    { /* XXX Ternary */ } break;

    case 136:  #line 479 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 137:  #line 480 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 138:  #line 481 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 139:  #line 482 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 140:  #line 483 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 141:  #line 484 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 142:  #line 488 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 143:  #line 489 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 144:  #line 490 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 145:  #line 491 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 146:  #line 492 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 147:  #line 493 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 148:  #line 497 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 149:  #line 498 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 150:  #line 499 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 151:  #line 500 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 152:  #line 501 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 153:  #line 502 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 154:  #line 506 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 155:  #line 507 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 156:  #line 508 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 157:  #line 509 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 158:  #line 510 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 159:  #line 511 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 160:  #line 515 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 161:  #line 516 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 162:  #line 521 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 164:  #line 526 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 165:  #line 526 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 166:  #line 529 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 167:  #line 533 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 168:  #line 533 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 169:  #line 537 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 170:  #line 541 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 172:  #line 546 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 173:  #line 547 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 174:  #line 553 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 175:  #line 554 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 176:  #line 555 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 177:  #line 559 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 178:  #line 560 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 180:  #line 565 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 181:  #line 569 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 182:  #line 570 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 183:  #line 576 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 184:  #line 577 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 185:  #line 581 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 186:  #line 582 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 187:  #line 586 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 188:  #line 587 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 189:  #line 588 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 190:  #line 589 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 191:  #line 590 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 192:  #line 591 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 193:  #line 592 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1616 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
