<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.StaticImportNode',
    'xp.compiler.ast.NativeImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.ConstantNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.InstanceOfNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.SwitchNode',
    'xp.compiler.ast.CaseNode',
    'xp.compiler.ast.DefaultNode',
    'xp.compiler.ast.BreakNode',
    'xp.compiler.ast.ContinueNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 63 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_MOD_EQUAL= 408;
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_INSTANCEOF= 312;
    const T_CONCAT_EQUAL= 416;
    const T_INC= 402;
    const T_DEC= 403;
    const T_SE= 401;
    const T_GE= 400;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_DOTS= 330;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_NEW= 346;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     9,     7, 
          8,     8,     8,    10,    10,    10,     4,     4,    13,     3, 
         17,     3,    19,     3,    14,    14,    15,    15,    20,    20, 
         22,    22,    16,    16,    23,    23,    23,    18,    18,    18, 
         27,    27,    29,    28,    30,    28,    24,    24,    34,    34, 
         35,    35,    37,    37,    37,    33,    33,    39,    25,    42, 
         25,    44,    25,    11,    11,    45,    45,    47,    47,    47, 
         41,    41,    38,    38,    36,    36,    50,    50,    40,    40, 
         43,    43,    43,    43,    43,    43,    26,    26,    51,    51, 
         53,    52,    54,    52,    57,    52,    59,    52,    60,    52, 
         61,    52,    62,    52,    64,    52,    66,    52,    67,    52, 
         68,    52,    52,    52,    63,    63,    69,    69,    71,    70, 
         72,    70,    55,    55,    56,    73,    56,    65,    65,    74, 
         74,    78,    77,    75,    75,    79,    76,    58,    58,    80, 
         80,    48,    48,    81,    81,    82,    82,    82,    31,    85, 
         31,    86,    31,    87,    31,    88,    31,    31,    31,    31, 
         31,    31,    31,    31,    31,    31,    31,    83,    83,    94, 
         83,    83,    83,    83,    83,    83,    95,    95,    49,    49, 
         96,    89,    89,    89,    89,    89,    89,    89,    90,    90, 
         90,    90,    90,    90,    91,    91,    91,    91,    91,    91, 
         92,    92,    92,    92,    92,    92,    93,    93,    84,    84, 
         97,    97,    99,    98,    98,   100,    98,    32,    32,    12, 
         12,   101,   102,   102,   103,   103,    21,    21,    46,    46, 
        104,   104,   105,   105,   105,   105,   105,   105,   105,   105, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     7, 
          0,     1,     1,     1,     1,     3,     1,     3,     0,     9, 
          0,     9,     0,     8,     0,     2,     0,     2,     0,     2, 
          0,     3,     2,     0,     1,     1,     4,     3,     1,     0, 
          1,     3,     0,     3,     0,     6,     5,     6,     1,     4, 
          1,     2,     2,     4,     4,     0,     2,     0,     9,     0, 
          8,     0,    10,     4,     1,     1,     3,     2,     5,     5, 
          1,     3,     0,     1,     1,     3,     3,     4,     0,     2, 
          1,     1,     1,     1,     1,     1,     0,     1,     1,     2, 
          0,     4,     0,     7,     0,    10,     0,     8,     0,     6, 
          0,     7,     0,     8,     0,     6,     0,     3,     0,     3, 
          0,     4,     2,     1,     0,     1,     1,     2,     0,     5, 
          0,     4,     1,     3,     0,     0,     3,     2,     1,     1, 
          2,     0,     9,     0,     1,     0,     5,     0,     1,     1, 
          3,     0,     1,     5,     6,     1,     1,     4,     1,     0, 
          3,     0,     4,     0,     5,     0,     6,     3,     1,     1, 
          1,     1,     1,     5,     3,     3,     3,     1,     3,     0, 
          4,     3,     1,     1,     1,     1,     0,     1,     1,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          2,     2,     2,     2,     2,     2,     2,     2,     0,     1, 
          1,     2,     0,     4,     2,     0,     6,     1,     1,     1, 
          4,     3,     1,     3,     1,     3,     1,     3,     0,     1, 
          1,     2,     1,     1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   233,   235,   234,   236,   238,   237,   239,   240, 
          1,     0,    65,   230,     0,     8,     0,     4,    12,    13, 
          0,     0,     0,     0,    19,    23,    21,   232,    18,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    64,    67, 
          0,     0,     0,     0,    15,     0,     0,     0,     0,   170, 
          0,     0,     0,     0,     0,   176,   173,   175,   174,   150, 
        152,     0,     0,     0,     0,     0,     0,   149,   159,   160, 
        161,   162,   163,     0,     0,     0,     0,     0,     0,     0, 
          0,    10,     0,     0,     0,     0,     0,     0,     0,   156, 
          0,     0,     0,   178,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   207,   208,     0,     0,     0,     0, 
          0,     0,     0,    69,    70,     0,     0,     0,   218,   225, 
        219,     0,     0,    26,     0,     0,     0,    30,    34,     0, 
         16,     0,     0,   139,     0,   213,     0,   151,   210,     0, 
          0,     0,     0,   172,   158,   169,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   167,     0,     0,     0, 
          0,     0,     0,     0,     0,   189,   190,   191,   192,   193, 
        194,     0,   180,     0,     0,   221,     0,    28,    34,     0, 
          0,     0,     0,   171,     0,     0,     0,   212,     0,     0, 
        153,     0,   147,     0,     0,   226,   222,   224,     0,   228, 
          0,    24,     0,    33,    35,    36,     0,     0,     0,     0, 
        141,     0,     0,   216,     0,     0,     0,   155,     0,    20, 
          0,     0,     0,     0,     0,    22,    34,     0,   157,   214, 
          0,     0,     0,     0,    91,     0,   111,    95,    99,   101, 
         97,   107,   109,    93,   103,   114,     0,     0,    88,     0, 
         60,     0,     0,     0,     0,    34,    44,     0,     0,    42, 
          0,     0,   144,   148,     0,   105,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    37,   113,    90,     0,     0, 
         58,    85,    81,    82,    83,    84,    86,     0,     0,     0, 
          0,     0,     0,   217,   145,     0,     0,     0,     0,     0, 
          0,   123,     0,     0,   108,   110,     0,     0,     0,    74, 
          0,     0,     0,     0,    62,     0,    47,     0,     0,     0, 
         32,     0,    92,     0,   112,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    50,     0,     0, 
          0,    53,     0,    48,    52,    46,     0,     0,     0,   124, 
          0,     0,     0,     0,     0,    77,     0,     0,    76,     0, 
          0,     0,     0,   132,   136,   106,     0,   129,     0,     0, 
        100,     0,     0,     0,     0,    78,    80,    71,     0,    61, 
          0,     0,    54,    55,     0,     0,   128,   135,   131,     0, 
        102,     0,   126,    94,   119,   121,     0,   116,     0,     0, 
         59,     0,     0,     0,     0,    98,     0,     0,     0,   104, 
        118,    72,    63,     0,     0,     0,   127,     0,     0,     0, 
        137,    96,     0,   122,     0,   120,     0,     0,   133, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    21,    74,     4,     7,     8,    31,    11,    57, 
        223,   139,    44,    87,   146,   201,    46,   228,    45,    89, 
        148,   277,   224,   225,   226,   267,   229,   230,   244,   245, 
        268,   329,   310,   275,   339,   330,   340,   331,   334,   378, 
        400,   299,   308,   360,    33,    23,    34,    76,   104,   332, 
        269,   270,   285,   294,   323,   414,   288,   153,   291,   289, 
        290,   295,   417,   317,   386,   292,   293,   287,   418,   419, 
        428,   429,   427,   387,   407,   388,   389,   405,   406,   154, 
        163,   214,    78,   158,   101,   102,   167,   155,    79,    80, 
         81,    82,    83,    95,   105,    84,   159,   160,   206,   251, 
        141,   142,   143,    24,    25, 
    );
    protected static $yySindex = array(         -265,
          0,     0,  -254,  -198,     0,   489,     0,  -254,    30,    46, 
       -103,   102,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   -41,     0,     0,   194,     0,  -198,     0,     0,     0, 
        -76,  -198,    92,   150,     0,     0,     0,     0,     0,   162, 
        180,   194,   102,  -198,  -198,  -198,   -38,  2859,     0,     0, 
        166,   -83,   -73,   -83,     0,   193,   185,  2859,  2859,     0, 
       2859,  2859,  2859,  2859,   142,     0,     0,     0,     0,     0, 
          0,  2859,  2859,  -154,   718,   222,   226,     0,     0,     0, 
          0,     0,     0,   220,   -56,  -198,   -42,  -198,   151,   -42, 
        -38,     0,  2110,  2110,  2859,   129,   129,   129,   129,     0, 
        -28,  -198,   718,     0,   153,   745,   -25,  2859,  2859,  2859, 
       2859,  2859,  2859,  2859,  2859,  2859,  -198,  2859,  2859,  2859, 
       2859,  2859,  2859,  2859,     0,     0,  2859,  2859,  2859,  2859, 
       2859,  2859,  2859,     0,     0,  2859,   -34,   104,     0,     0, 
          0,   217,   237,     0,  -198,   165,   245,     0,     0,   167, 
          0,   830,   199,     0,  2859,     0,    34,     0,     0,   -28, 
        127,   259,   -28,     0,     0,     0,  -217,   223,   223,   223, 
        223,   223,   223,   223,   223,   223,     0,   223,  1280,   242, 
       2110,  2110,   129,   129,   129,     0,     0,     0,     0,     0, 
          0,  1280,     0,  -198,   208,     0,   -56,     0,     0,  -198, 
        371,    51,  2859,     0,   268,  2859,   274,     0,   224,  2859, 
          0,   276,     0,   -28,  2859,     0,     0,     0,   403,     0, 
        195,     0,    68,     0,     0,     0,     0,   204,   272,   288, 
          0,   -28,   244,     0,   212,   297,  2859,     0,   502,     0, 
       2626,   152,  -245,   216,   307,     0,     0,    51,     0,     0, 
       2859,  2859,   216,   309,     0,   225,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   230,   898,     0,  2626, 
          0,    -6,    49,   290,   241,     0,     0,  2859,   513,     0, 
        324,   243,     0,     0,  2859,     0,  2859,   326,   327,  2800, 
        329,   312,   313,   336,   348,     0,     0,     0,  -198,  -198, 
          0,     0,     0,     0,     0,     0,     0,   349,  2859,   332, 
        133,   443,   950,     0,     0,   335,  2626,   972,  2859,  2859, 
       2626,     0,    41,    55,     0,     0,  2859,  2859,  -291,     0, 
        362,   360,   314,  -198,     0,  1280,     0,  -115,   280,   133, 
          0,   216,     0,   281,     0,   351,  1009,   283,   570,   372, 
         47,  1047,  1121,   367,   290,    93,  -198,     0,   374,  -198, 
        377,     0,  2626,     0,     0,     0,  -299,  2859,  2800,     0, 
       2859,  2859,  2800,   295,    83,     0,  -198,   -12,     0,    93, 
        385,   386,   303,     0,     0,     0,    88,     0,    91,   373, 
          0,  1152,  1234,    65,  -286,     0,     0,     0,  2626,     0, 
        -12,    93,     0,     0,   397,   315,     0,     0,     0,  2859, 
          0,  2800,     0,     0,     0,     0,   316,     0,  -286,   317, 
          0,   -12,  -198,  2626,   398,     0,  2800,  2859,   387,     0, 
          0,     0,     0,   103,   319,  2800,     0,  1206,  2626,   405, 
          0,     0,  2626,     0,   325,     0,  2626,   331,     0, 
    );
    protected static $yyRindex= array(          778,
          0,     0,  1303,     0,     0,   -29,     0,  1916,   110,     0, 
        189,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   -95,     0,     0,     0,     0,     0, 
          0,     0,     0,   365,     0,     0,     0,     0,     0,     0, 
        -27,   -60,     0,     0,     0,     0,     0,   418,     0,     0, 
        187,  -114,   337,  -114,     0,   402,     0,     0,     0,     0, 
          0,     0,     0,     0,   410,     0,     0,     0,     0,     0, 
          0,   340,     0,     0,   425,     0,     0,     0,     0,     0, 
          0,     0,     0,   -19,     0,     0,   344,     0,     0,   344, 
          0,     0,  1819,  1844,   389,  1437,  1535,  1610,  1663,     0, 
        446,     0,     0,     0,     0,     0,  -200,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   426,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   -43,     0,     0, 
          0,     0,   423,     0,     0,     0,    21,     0,     0,     0, 
          0,   122,     0,     0,   445,     0,     0,     0,     0,   516, 
        452,     0,   446,     0,     0,     0,     0,  1774,  1941,  1969, 
       1994,  2170,  2203,  2300,  2328,  2353,     0,  2376,   120,     0, 
       1872,  1918,  1696,  1721,  1761,     0,     0,     0,     0,     0, 
          0,     7,     0,     0,     0,     0,     0,     0,     0,     0, 
        235,   375,     0,     0,     0,   408,   261,     0,     0,   445, 
          0,   299,     0,   446,     0,     0,     0,     0,   235,     0, 
        549,     0,     0,     0,     0,     0,   -15,     0,   394,   -35, 
          0,   446,     0,     0,   462,     0,   445,     0,  1734,     0, 
        412,   -58,     0,   -32,     0,     0,     0,     0,     0,     0, 
        445,   413,   338,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,  -122, 
          0,   419,     0,   474,     0,     0,     0,     0,  -111,     0, 
          0,     0,     0,     0,   484,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   505,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   235,     0,     0,     0,     0,   412,     0,   491,     0, 
        412,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    16,     0,   505,     0,   118,     0,     0,     0,   427, 
          0,   -32,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    14,    87,     0,     0,     0,   505, 
          0,     0,   412,     0,     0,     0,     0,   491,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    87, 
          0,     0,     0,     0,     0,     0,  2511,     0,  2464,     0, 
          0,     0,     0,  2555,   429,     0,     0,     0,   412,     0, 
          0,    87,     0,     0,     0,     0,     0,     0,     0,   445, 
          0,     0,     0,     0,     0,     0,     0,     0,   430,     0, 
          0,     0,     0,   412,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,  -120,     0, 
          0,     0,  -120,     0,     0,     0,   412,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   540,     0,     0,     0,   460, 
        550,   -14,     0,   511,   476,  -164,     0,     0,     0,     0, 
       -139,  -240,     0,     0,     0,   780,   321,     0,     0,     0, 
          6,   -49,   215,     0,   227,  -284,     0,  -308,     0,  -343, 
       -345,     0,     0,     0,   538,   541,     0,  -109,   -37,     0, 
        346,  -269,     0,     0,  -213,     0,     0,   628,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   163,     0, 
          0,     0,     0,   196,     0,   197,     0,     0,     0,   383, 
          0,     0,     0,  -143,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   436,     0,     0,     0, 
          0,   400,     0,   580,     0, 
    );
    protected static $yyTable = array(10,
        220,    17,    89,    55,    87,   198,   137,   363,    25,   180, 
         77,    31,   283,    38,   272,   333,    68,   157,   220,   211, 
        322,   179,    39,    41,    45,   359,    31,    41,    43,    52, 
         53,    54,    17,   301,   219,   140,   401,     1,   354,    51, 
         51,    51,   212,    43,   384,   385,   398,   181,   355,     5, 
        181,   381,   162,    75,    56,   421,    75,    56,   422,   154, 
        220,     9,   156,    93,    94,    68,    96,    97,    98,    99, 
        238,   144,   379,   147,   273,    27,   433,   103,   106,   227, 
        138,    51,   279,    51,   300,   302,   415,   416,   249,    41, 
        305,   303,    31,   304,   274,   306,   233,   161,   193,   322, 
        152,   366,   177,   322,    28,   179,    56,    43,    75,    43, 
        399,   312,    51,   168,   169,   170,   171,   172,   173,   174, 
        175,   176,   213,   178,   179,   181,   182,   183,   184,   185, 
        147,   181,   186,   187,   188,   189,   190,   191,   192,   154, 
         51,   103,   322,   227,   361,    79,    17,   140,   229,    17, 
         17,    17,    17,    17,    17,   391,    17,   322,    57,   394, 
        152,    57,   140,    85,   231,    32,   322,    17,    17,    17, 
         17,    17,    17,   243,   307,   316,    57,   143,   143,    29, 
        140,   100,    30,    40,    42,   147,    85,    27,   127,   216, 
        128,   271,   138,    43,   195,    51,    25,    27,   426,   229, 
         17,    17,    17,     9,   231,   231,   231,    47,   152,    79, 
         57,   179,   143,   437,   140,   152,   220,   209,   138,    48, 
        239,    56,   442,   220,   362,    85,    86,   220,   220,   220, 
        220,   220,    17,   220,    17,    17,    88,   397,    91,   229, 
        229,   229,   152,    92,   220,   220,   140,   220,   220,   220, 
         89,    89,    87,    87,   124,   107,   152,   152,    35,    36, 
         37,    17,   134,   136,   122,   120,   135,   121,   145,   123, 
        229,   229,   229,   149,   166,   194,   220,   164,   196,   220, 
        197,    17,   127,   313,   128,   119,   220,   199,   200,   202, 
        179,   204,   318,   207,   138,   138,   220,   215,   210,   215, 
        217,   215,   215,   215,   215,   215,   215,   215,   232,   220, 
        227,   220,   220,   234,   336,   237,   235,   241,   215,   215, 
        215,   215,   215,   215,   152,   347,   349,   242,   246,   138, 
        247,   248,   352,   353,   252,   146,   250,   253,   276,   146, 
        146,   146,   146,   146,   146,   146,   278,   286,   124,   284, 
        309,   215,   138,   215,   296,   138,   146,   146,   146,   146, 
        146,   146,   147,   311,   314,   319,   320,   315,   324,    17, 
        325,   326,    51,   152,    31,   327,   392,   393,    31,    31, 
         31,    31,    31,    31,    31,   215,   215,   328,   335,   146, 
        337,   146,   338,   343,   351,    31,    31,    31,    31,    31, 
         31,   350,   356,   357,   364,   367,   358,   370,   434,   368, 
        372,   371,   375,   377,   380,   152,   382,   395,    51,    17, 
         17,    17,   396,   146,   146,   402,   403,   404,    31,    17, 
         31,   410,   385,   438,   384,   413,   423,   424,   436,    17, 
        430,   432,   440,   441,   439,   445,   168,   447,    11,    17, 
        168,   168,   168,   168,   168,   449,   168,    66,   142,    29, 
         14,    12,    31,    31,   177,   143,    27,   168,   168,   168, 
        168,   168,   168,    13,    14,    15,    16,    17,    18,    19, 
         20,   138,   209,   142,   223,   138,   209,   209,   209,   209, 
        209,   220,   209,    12,   229,   222,   220,   220,   220,    40, 
        142,   222,   168,   209,   209,   209,   209,   209,   209,    17, 
         17,    17,    17,    17,    17,    17,    17,    17,    39,    17, 
         17,    17,    17,    17,    17,    17,   220,   240,   130,   129, 
        125,   126,    56,    12,   168,   168,    87,   138,   209,   131, 
        132,    49,   142,   122,   120,    73,   121,    26,   123,   138, 
        151,    51,   211,   115,   117,    22,   211,   211,   211,   211, 
        211,   127,   211,   128,    90,   150,   365,   341,   280,   376, 
        209,   209,   215,   211,   211,   211,   211,   211,   211,    12, 
         50,   431,    49,   408,   409,   231,   220,   220,   220,   220, 
        220,   220,   220,   220,   220,   208,   218,   220,   220,   220, 
        220,   220,   220,    12,    38,     0,   109,     0,   211,     0, 
        146,   122,   120,     0,   121,   298,   123,     0,     0,     0, 
          0,     0,   130,   129,   125,   126,     0,   124,   297,   127, 
        108,   128,   119,   131,   132,     0,     0,     0,     0,     0, 
        211,   211,     0,     0,     0,     0,     0,     0,     0,    31, 
         13,    14,    15,   221,    17,    18,    19,    20,     0,     0, 
        215,   215,   215,   215,   215,   215,   215,   215,   215,     0, 
          0,   215,   215,   215,   215,   215,   215,     0,     0,     0, 
          0,     0,    13,    14,    15,   221,    17,    18,    19,    20, 
          0,     0,     0,     0,     0,   124,     0,     0,   146,   146, 
        146,   146,   146,   146,   146,   146,   146,     0,     0,   146, 
        146,   146,   146,   146,   146,     0,     0,     0,     0,     0, 
          0,   168,    13,    14,    15,   221,    17,    18,    19,    20, 
          0,     0,     0,     0,     0,     0,     0,    31,    31,    31, 
         31,    31,    31,    31,    31,    31,     0,     0,    31,    31, 
         31,    31,    31,    31,   109,     0,     0,   209,     0,   122, 
        120,     0,   121,     0,   123,     0,     0,     0,    13,    14, 
         15,    16,    17,    18,    19,    20,     0,   127,   108,   128, 
        119,   109,   205,     0,     0,   165,   122,   120,     0,   121, 
          0,   123,    13,    14,    15,   221,    17,    18,    19,    20, 
          0,     0,     0,     0,   127,   108,   128,   119,   236,   168, 
        168,   168,   168,   168,   168,   168,   168,   168,     0,    17, 
        168,   168,   168,   168,   168,   168,     0,   211,   236,   236, 
        236,   236,   236,   236,   236,   236,     0,   236,     0,     0, 
          0,     0,     0,   124,     0,   209,   209,   209,   209,   209, 
        209,   209,   209,   209,     0,     0,   209,   209,   209,   209, 
        209,   209,     0,     0,   254,     0,   109,     0,     2,     0, 
        124,   122,   120,   203,   121,     0,   123,     0,   281,   282, 
          0,   117,     0,     0,     0,     0,     0,     0,     0,   127, 
        108,   128,   119,     0,     0,     0,     0,     0,     0,     0, 
          0,   130,   129,   125,   126,     0,     0,     0,     0,     0, 
          0,     0,   131,   132,     0,   211,   211,   211,   211,   211, 
        211,   211,   211,   211,     0,     0,   211,   211,   211,   211, 
        211,   211,     0,     0,   109,     0,     0,     0,     0,   122, 
        120,     0,   121,     0,   123,     0,   346,     0,     0,     0, 
          0,     0,     0,     0,     0,   124,   297,   127,   108,   128, 
        119,     0,     0,     0,     0,     0,     0,     0,     0,   130, 
        129,   125,   126,   110,   111,   112,   113,   114,     0,     0, 
        131,   132,   133,   115,   116,   118,   109,     0,     0,     0, 
        342,   122,   120,     0,   121,   390,   123,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   109,   127, 
        108,   128,   119,   122,   120,     0,   121,     0,   123,     0, 
          0,     0,     0,   124,     0,     0,     0,     0,     0,   117, 
        345,   127,   108,   128,   119,     0,     0,   425,     0,     0, 
          0,     0,     0,     0,     0,   109,     0,     0,     0,   369, 
        122,   120,     0,   121,     0,   123,   117,     2,     2,     2, 
          2,     2,     2,     2,     2,     0,     0,     0,   127,   108, 
        128,   119,     0,     0,     0,   124,     0,     2,     2,     2, 
          0,     2,     0,   109,     0,     0,     0,   373,   122,   120, 
          0,   121,     0,   123,     0,     0,   344,   124,     0,     0, 
        348,     0,     0,     0,     0,     0,   127,   108,   128,   119, 
          0,     0,     0,     0,     0,     0,     0,   130,   129,   125, 
        126,   110,   111,   112,   113,   114,     0,     0,   131,   132, 
        133,   115,   116,   118,   124,     0,     0,     0,     0,     0, 
          0,   117,   383,     0,   130,   129,   125,   126,   110,   111, 
        112,   113,   114,     0,     0,   131,   132,   109,   115,   116, 
        118,   374,   122,   120,     0,   121,     0,   123,     0,     0, 
          0,     0,   124,     0,     0,     0,     0,     0,   420,     0, 
        127,   108,   128,   119,     0,     0,     0,     0,   109,     0, 
          0,     0,   411,   122,   120,     0,   121,     0,   123,     0, 
          0,     0,     0,   435,     0,     0,     0,     0,     0,   117, 
          0,   127,   108,   128,   119,     0,     0,     0,   444,     0, 
          0,     0,   446,     0,     0,     0,   448,     0,     0,   130, 
        129,   125,   126,   110,   111,   112,   113,   114,     0,     0, 
        131,   132,   109,   115,   116,   118,   124,   122,   120,     0, 
        121,     0,   123,     0,     0,     0,     0,     0,     0,     0, 
          0,   117,     0,   443,     0,   127,   108,   128,   119,     0, 
        109,     0,     0,     0,   412,   122,   120,   124,   121,     0, 
        123,     0,     0,   117,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   127,   108,   128,   119,   130,   129,   125, 
        126,   110,   111,   112,   113,   114,     0,     0,   131,   132, 
          0,   115,   116,   118,     0,     0,   109,     0,     0,     0, 
        117,   122,   120,     0,   121,     0,   123,     0,     0,     0, 
          0,   124,     0,     0,     0,     0,     0,     0,     0,   127, 
        108,   128,   119,     0,     0,     0,     0,     0,     0,   130, 
        129,   125,   126,   110,   111,   112,   113,   114,   117,   124, 
        131,   132,     0,   115,   116,   118,     0,     0,     0,     0, 
          0,   130,   129,   125,   126,   110,   111,   112,   113,   114, 
          0,     0,   131,   132,     0,   115,   116,   118,     0,     0, 
          0,     0,     0,     5,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   124,     0,     0,   130,   129, 
        125,   126,   110,   111,   112,   113,   114,     0,     0,   131, 
        132,     0,   115,   116,   118,     0,     0,     0,     0,     0, 
          0,     0,   117,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   130,   129,   125,   126, 
        110,   111,   112,   113,   114,     0,     0,   131,   132,     0, 
        115,   116,   118,   117,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   201,     0,     0,     0,   201,   201,   201, 
        201,   201,     0,   201,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   201,   201,     0,   201,     0,   201, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   117,     0,     0, 
        130,   129,   125,   126,   110,   111,   112,   113,   114,   201, 
          0,   131,   132,     0,   115,   116,   118,     0,     0,     0, 
          0,     0,     0,     0,     0,   117,     0,     0,     0,     0, 
          0,   130,   129,   125,   126,   110,   111,   112,   113,   114, 
          0,   201,   131,   132,     0,   115,   116,   118,     0,     0, 
          0,   202,     0,     0,     0,   202,   202,   202,   202,   202, 
          0,   202,     5,     5,     5,     5,     5,     5,     5,     5, 
          0,   117,   202,   202,     0,   202,     0,   202,     0,     0, 
          0,     0,     5,     5,     5,   130,   129,   125,   126,   110, 
        111,   112,   113,   114,     0,     0,   131,   132,     0,   115, 
        116,   118,     0,     0,     0,     0,     0,   202,     0,     0, 
          0,     0,     0,   130,   129,   125,   126,   110,   111,   112, 
        113,   114,     0,     0,   131,   132,   205,   115,   116,   118, 
        205,   205,   205,   205,   205,     0,   205,     0,     0,   202, 
          0,     0,     0,     0,     0,     0,     0,   205,   205,     0, 
        205,     0,   205,     0,     0,     0,     0,     0,     0,   130, 
        129,   125,   126,   110,   111,   112,   113,   114,     0,     0, 
        131,   132,     0,   115,   116,   118,     0,     0,     0,   206, 
          0,     0,   205,   206,   206,   206,   206,   206,     0,   206, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        206,   206,     0,   206,     0,   206,     0,     0,     0,     0, 
          0,     0,   197,     0,   205,     0,   197,   197,   197,   197, 
        197,     0,   197,     0,     0,     0,     0,     0,   201,     0, 
          0,     0,     0,   197,   197,   206,   197,   198,   197,     0, 
          0,   198,   198,   198,   198,   198,     0,   198,     0,     0, 
        164,     0,     0,     0,   164,     0,     0,   164,   198,   198, 
          0,   198,     0,   198,     0,     0,     0,   206,   197,     0, 
          0,   164,   164,     0,   164,     0,   164,   200,     0,     0, 
          0,   200,   200,   200,   200,   200,     0,   200,     0,     0, 
        182,     0,     0,   198,   182,     0,     0,   182,   200,   200, 
        197,   200,     0,   200,     0,     0,   164,     0,     0,     0, 
          0,   182,   182,     0,   182,     0,     0,     0,     0,     0, 
        201,   201,   201,   201,   201,   198,   202,     0,     0,   201, 
        201,   201,   201,   200,     0,   203,     0,     0,   164,   203, 
          0,   203,   203,   203,     0,     0,   182,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   203,   203,     0,   203, 
        204,   203,     0,     0,   204,   200,   204,   204,   204,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   182,     0, 
          0,   204,   204,     0,   204,     0,   204,     0,   195,     0, 
          0,   203,   195,     0,   195,   195,   195,     0,     0,     0, 
          0,   205,     0,     0,     0,     0,     0,     0,     0,   195, 
        195,     0,   195,     0,   195,     0,   204,     0,   202,   202, 
        202,   202,   202,   203,     0,     0,     0,   202,   202,   202, 
        202,     0,     0,     0,   196,     0,     0,     0,   196,     0, 
        196,   196,   196,     0,   195,     0,     0,     0,   204,     0, 
          0,     0,     0,     0,   206,   196,   196,   199,   196,     0, 
        196,   199,     0,     0,   199,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   195,     0,   199,   199, 
          0,   199,     0,     0,     0,   183,     7,   197,     0,   183, 
        196,     0,   183,   205,   205,   205,   205,   205,     0,     0, 
          0,     0,   205,   205,   205,   205,   183,   183,     0,   183, 
        184,     0,   198,   199,   184,     0,     0,   184,     0,     0, 
          0,     0,   196,     0,     0,   164,     0,     0,     0,     0, 
          0,   184,   184,     0,   184,     0,     0,     0,     0,     0, 
          0,   183,     0,     0,     0,   199,   206,   206,   206,   206, 
        206,     0,   200,     0,     0,   206,   206,   206,   206,     0, 
          0,     0,     0,     0,     0,   182,   184,     0,     0,     0, 
          0,     0,     0,   183,     0,     0,     0,     0,     0,   197, 
        197,   197,   197,   197,     0,     0,     0,     0,   197,   197, 
        197,   197,     0,     0,     0,     0,     0,     0,   184,     0, 
          0,     0,     0,     0,   198,   198,   198,   198,   198,     0, 
        203,     0,     0,   198,   198,   198,   198,   164,   164,   164, 
        164,   164,     0,     0,     0,     0,   164,   164,   164,   164, 
          0,   122,     0,     0,     0,   204,   123,     0,     0,     0, 
          0,     0,     0,     0,   200,   200,   200,   200,   200,   127, 
          0,   128,     0,   200,   200,   200,   200,   182,   182,   182, 
        182,   182,     0,   195,     0,     0,   182,   182,   182,   182, 
          0,     0,     0,     0,     0,     7,     7,     7,     7,     7, 
          7,     7,     7,     0,     0,     0,   185,     0,     0,     0, 
        185,     0,     0,   185,     0,     7,     7,     7,     0,     0, 
          0,     0,   203,   203,   203,   203,   203,   185,   185,   196, 
        185,   203,   203,   203,   203,   124,     0,     0,     0,   186, 
          0,     0,     0,   186,     0,     0,   186,   204,   204,   204, 
        204,   204,   199,     0,     0,     0,   204,   204,   204,   204, 
        186,   186,   185,   186,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   195,   195,   195,   195,   195, 
        183,     0,     0,     0,   195,   195,   195,   195,     0,     0, 
          0,     0,     0,     0,   185,   186,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   184,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   196,   196,   196,   196,   196,     0,   186,     0,     0, 
        196,   196,   196,   196,     0,     0,   187,     0,     0,     0, 
        187,     0,     0,   187,   199,   199,   199,   199,   199,     0, 
          0,     0,     0,   199,   199,   199,   199,   187,   187,     0, 
        187,     0,     0,     0,   165,     0,     0,     0,   165,     0, 
          0,   165,   183,   183,   183,   183,   183,     0,     0,     0, 
          0,   183,   183,   183,   183,   165,   165,     0,   165,   166, 
          0,     0,   187,   166,     0,     0,   166,   184,   184,   184, 
        184,   184,     0,     0,     0,     0,   184,   184,   184,   184, 
        166,   166,   188,   166,     0,     0,   188,     0,     0,   188, 
        165,     0,     0,     0,   187,     0,     0,     0,     0,     0, 
          0,     0,     0,   188,   188,     0,   188,     0,     0,     0, 
          0,     0,     0,     0,     0,   166,     0,     0,     0,     0, 
          0,     0,   165,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   188,     0, 
          0,     0,     0,     0,     0,     0,     0,   166,     0,     0, 
          0,   185,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   130,     0,     0,     0, 
        188,     0,     0,   130,     0,     0,   130,     0,   130,   130, 
        129,   125,   126,     0,   186,     0,     0,     0,     0,     0, 
        131,   132,   130,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   134,     0,     0,     0,     0,     0,     0, 
        134,     0,     0,   134,   130,   134,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   134, 
          0,     0,     0,   185,   185,   185,   185,   185,     0,     0, 
          0,     0,   185,   185,   185,   185,   130,   125,   130,   130, 
          0,     0,     0,     0,   125,     0,     0,   125,     0,   125, 
          0,   134,     0,     0,     0,     0,   186,   186,   186,   186, 
        186,   187,     0,   125,     0,   186,   186,   186,   186,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   134,     0,   134,   134,     0,     0,   165, 
          0,     0,     0,     0,     0,   125,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    61,     0, 
          0,     0,     0,     0,   166,    73,     0,     0,    58,     0, 
         59,     0,     0,     0,     0,     0,     0,   125,     0,   125, 
        125,     0,     0,     0,   266,     0,     0,   188,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   187,   187,   187,   187,   187,     0,     0, 
          0,     0,   187,   187,   187,   187,    60,     0,     0,     0, 
          0,     0,     0,   130,   130,   130,   130,   130,     0,     0, 
          0,   165,   165,   165,   165,   165,     0,     0,     0,     0, 
        165,   165,   165,   165,     0,     0,     0,     0,    72,     0, 
          0,    62,     0,     0,     0,     0,   166,   166,   166,   166, 
        166,     0,     0,     0,     0,   166,   166,   166,   166,     0, 
        134,   134,   134,   134,   134,     0,     0,     0,     0,   188, 
        188,   188,   188,   188,     0,     0,     0,     0,   188,   188, 
        188,   188,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   130,   130,   130,   130,     0,   130,   130, 
          0,     0,     0,     0,   125,   125,   125,   125,   125,     0, 
          0,     0,     0,   130,   130,   130,   130,     0,   130,   130, 
          0,     0,    61,   130,   130,   130,   130,   130,     0,    73, 
          0,     0,    58,     0,    59,     0,     0,     0,     0,     0, 
        134,   134,   134,   134,     0,     0,   134,     0,   266,     0, 
          0,     0,     0,     0,     0,   130,   130,     0,     0,     0, 
        134,   134,   134,   134,     0,   134,   134,     0,     0,     0, 
        134,   134,   134,   134,   134,    65,    66,    67,    68,    69, 
         60,    61,     0,     0,   125,   125,   125,   125,    73,     0, 
        125,    58,     0,    59,     0,     0,     0,     0,     0,     0, 
          0,     0,   134,   134,   125,   125,   125,   125,     0,   125, 
        125,     0,   321,     0,   125,    62,   125,   125,   125,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    60, 
          0,     0,     0,     0,     0,     0,   125,   125,     0,     0, 
          0,     0,     0,     0,     0,    70,   255,   256,   257,     0, 
          0,    71,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    72,     0,     0,    62,   258,   259,   260,   261,     0, 
        262,   263,     0,     0,     0,   264,     0,   265,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    63,    64,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    65, 
         66,    67,    68,    69,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    65,    66, 
         67,    68,    69,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    70, 
        255,   256,   257,     0,     0,    71,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   258, 
        259,   260,   261,     0,   262,   263,     0,     0,     0,   264, 
          0,   265,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    70,     0, 
          0,    63,    64,     0,    71,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         63,    64, 
    );
    protected static $yyCheck = array(4,
         44,    60,   125,    42,   125,   145,    63,   123,   123,   119, 
         48,    44,   253,   125,   260,   300,    44,    46,    62,   163, 
        290,    41,    27,    59,    40,   334,    59,    32,    44,    44, 
         45,    46,    91,    40,   199,    85,   380,   303,   330,    44, 
         45,    46,   260,    59,   344,   345,    59,    41,   340,   304, 
         44,   360,   102,    48,    41,   401,    41,    44,   402,   260, 
        200,   260,    91,    58,    59,    93,    61,    62,    63,    64, 
        214,    86,   357,    88,   320,    46,   422,    72,    73,    59, 
         85,    86,   247,    88,    91,    37,   373,   374,   232,   125, 
         42,    43,   125,    45,   340,    47,   206,   102,   136,   369, 
         95,   342,   117,   373,    59,   125,    93,   123,    93,   125, 
        123,   276,   117,   108,   109,   110,   111,   112,   113,   114, 
        115,   116,   340,   118,   119,   120,   121,   122,   123,   124, 
        145,   125,   127,   128,   129,   130,   131,   132,   133,   340, 
        145,   136,   412,   123,   260,    59,    37,   197,   260,    40, 
         41,    42,    43,    44,    45,   369,    47,   427,    41,   373, 
        155,    44,    41,    60,   260,    64,   436,    58,    59,    60, 
         61,    62,    63,   223,   126,   285,    59,    58,    59,   283, 
         59,    40,   286,   260,    93,   200,    60,    46,    60,   194, 
         62,    40,   197,    44,    91,   200,   311,    46,   412,   260, 
         91,   260,    93,   260,   300,   301,   302,    46,   203,   123, 
         93,   206,    93,   427,    93,   210,   260,    91,   223,    40, 
        215,   260,   436,    37,   340,    60,   310,    41,    42,    43, 
         44,    45,   123,    47,   125,   126,   310,   377,    46,   300, 
        301,   302,   237,    59,    58,    59,   125,    61,    62,    63, 
        373,   374,   373,   374,   126,   410,   251,   252,   300,   301, 
        302,   320,    41,    44,    42,    43,    41,    45,   311,    47, 
        300,   301,   302,   123,   300,   310,   320,   125,    62,    93, 
         44,   340,    60,   278,    62,    63,   330,   123,    44,   123, 
        285,    93,   287,   260,   299,   300,   340,    37,    40,    58, 
         93,    41,    42,    43,    44,    45,    46,    47,    41,   123, 
        260,   125,   126,    40,   309,    40,    93,   123,    58,    59, 
         60,    61,    62,    63,   319,   320,   321,   260,   125,   334, 
         59,    44,   327,   328,   123,    37,    93,    41,   123,    41, 
         42,    43,    44,    45,    46,    47,    40,   123,   126,    41, 
         61,    91,   357,    93,   125,   360,    58,    59,    60,    61, 
         62,    63,   377,   123,    41,    40,    40,   125,    40,   260, 
         59,    59,   377,   368,    37,    40,   371,   372,    41,    42, 
         43,    44,    45,    46,    47,   125,   126,    40,    40,    91, 
         59,    93,   260,    59,   340,    58,    59,    60,    61,    62, 
         63,   361,    41,    44,   125,   125,    93,   125,   423,    59, 
        364,    40,    46,   321,    41,   410,    40,   123,   423,   310, 
        311,   312,   340,   125,   126,    41,    41,   125,    91,   320, 
         93,    59,   345,   428,   344,   371,    40,   123,    41,   330, 
        125,   125,   340,   125,    58,    41,    37,   123,   260,   340, 
         41,    42,    43,    44,    45,   125,    47,    93,    41,   123, 
         59,    91,   125,   126,   125,    41,   123,    58,    59,    60, 
         61,    62,    63,   280,   281,   282,   283,   284,   285,   286, 
        287,    93,    37,    58,    62,    41,    41,    42,    43,    44, 
         45,    40,    47,    91,   260,   125,   310,   311,   312,   125, 
         93,    40,    93,    58,    59,    60,    61,    62,    63,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   125,   410, 
        411,   412,   413,   414,   415,   416,   340,   125,   400,   401, 
        402,   403,    59,    91,   125,   126,   125,   125,    93,   411, 
        412,   123,    59,    42,    43,    41,    45,     8,    47,    59, 
         91,   125,    37,   125,   125,     6,    41,    42,    43,    44, 
         45,    60,    47,    62,    54,    90,   340,   125,   248,   355, 
        125,   126,   312,    58,    59,    60,    61,    62,    63,    91, 
         43,   419,    42,   387,   389,   203,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   160,   197,   411,   412,   413, 
        414,   415,   416,    91,    25,    -1,    37,    -1,    93,    -1, 
        312,    42,    43,    -1,    45,   270,    47,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,    -1,   126,    59,    60, 
         61,    62,    63,   411,   412,    -1,    -1,    -1,    -1,    -1, 
        125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312, 
        280,   281,   282,   283,   284,   285,   286,   287,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,   413,   414,   415,   416,    -1,    -1,    -1, 
         -1,    -1,   280,   281,   282,   283,   284,   285,   286,   287, 
         -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,   413,   414,   415,   416,    -1,    -1,    -1,    -1,    -1, 
         -1,   312,   280,   281,   282,   283,   284,   285,   286,   287, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
        413,   414,   415,   416,    37,    -1,    -1,   312,    -1,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,   280,   281, 
        282,   283,   284,   285,   286,   287,    -1,    60,    61,    62, 
         63,    37,   155,    -1,    -1,    41,    42,    43,    -1,    45, 
         -1,    47,   280,   281,   282,   283,   284,   285,   286,   287, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,   260,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,   410, 
        411,   412,   413,   414,   415,   416,    -1,   312,   280,   281, 
        282,   283,   284,   285,   286,   287,    -1,   210,    -1,    -1, 
         -1,    -1,    -1,   126,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,   413,   414, 
        415,   416,    -1,    -1,   237,    -1,    37,    -1,    91,    -1, 
        126,    42,    43,    44,    45,    -1,    47,    -1,   251,   252, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   411,   412,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,   413,   414, 
        415,   416,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42, 
         43,    -1,    45,    -1,    47,    -1,   319,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   126,    59,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,   413,   414,   415,   416,    37,    -1,    -1,    -1, 
         41,    42,    43,    -1,    45,   368,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    60, 
         61,    62,    63,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,   312, 
         59,    60,    61,    62,    63,    -1,    -1,   410,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41, 
         42,    43,    -1,    45,    -1,    47,   312,   280,   281,   282, 
        283,   284,   285,   286,   287,    -1,    -1,    -1,    60,    61, 
         62,    63,    -1,    -1,    -1,   126,    -1,   300,   301,   302, 
         -1,   304,    -1,    37,    -1,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,   317,   126,    -1,    -1, 
        321,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
        413,   414,   415,   416,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,   312,   363,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    37,   414,   415, 
        416,    41,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,   399,    -1, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,    37,    -1, 
         -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    -1,   424,    -1,    -1,    -1,    -1,    -1,   312, 
         -1,    60,    61,    62,    63,    -1,    -1,    -1,   439,    -1, 
         -1,    -1,   443,    -1,    -1,    -1,   447,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    37,   414,   415,   416,   126,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   312,    -1,    58,    -1,    60,    61,    62,    63,    -1, 
         37,    -1,    -1,    -1,    41,    42,    43,   126,    45,    -1, 
         47,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    60,    61,    62,    63,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,    -1,    -1,    37,    -1,    -1,    -1, 
        312,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   312,   126, 
        411,   412,    -1,   414,   415,   416,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,    -1,    -1, 
         -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   312,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    93, 
         -1,   411,   412,    -1,   414,   415,   416,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,   125,   411,   412,    -1,   414,   415,   416,    -1,    -1, 
         -1,    37,    -1,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,   280,   281,   282,   283,   284,   285,   286,   287, 
         -1,   312,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,   300,   301,   302,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    37,   414,   415,   416, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,   125, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,    -1,    -1,    -1,    37, 
         -1,    -1,    93,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    37,    -1,   125,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,   312,    -1, 
         -1,    -1,    -1,    58,    59,    93,    61,    37,    63,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         37,    -1,    -1,    -1,    41,    -1,    -1,    44,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,   125,    93,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    37,    -1,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         37,    -1,    -1,    93,    41,    -1,    -1,    44,    58,    59, 
        125,    61,    -1,    63,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,   125,   312,    -1,    -1,   413, 
        414,   415,   416,    93,    -1,    37,    -1,    -1,   125,    41, 
         -1,    43,    44,    45,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         37,    63,    -1,    -1,    41,   125,    43,    44,    45,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    37,    -1, 
         -1,    93,    41,    -1,    43,    44,    45,    -1,    -1,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    93,    -1,   404,   405, 
        406,   407,   408,   125,    -1,    -1,    -1,   413,   414,   415, 
        416,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1, 
         43,    44,    45,    -1,    93,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,   312,    58,    59,    37,    61,    -1, 
         63,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    58,    59, 
         -1,    61,    -1,    -1,    -1,    37,    91,   312,    -1,    41, 
         93,    -1,    44,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,   414,   415,   416,    58,    59,    -1,    61, 
         37,    -1,   312,    93,    41,    -1,    -1,    44,    -1,    -1, 
         -1,    -1,   125,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    -1,    -1,    -1,   125,   404,   405,   406,   407, 
        408,    -1,   312,    -1,    -1,   413,   414,   415,   416,    -1, 
         -1,    -1,    -1,    -1,    -1,   312,    93,    -1,    -1,    -1, 
         -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,   416,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
        312,    -1,    -1,   413,   414,   415,   416,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,   416, 
         -1,    42,    -1,    -1,    -1,   312,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    60, 
         -1,    62,    -1,   413,   414,   415,   416,   404,   405,   406, 
        407,   408,    -1,   312,    -1,    -1,   413,   414,   415,   416, 
         -1,    -1,    -1,    -1,    -1,   280,   281,   282,   283,   284, 
        285,   286,   287,    -1,    -1,    -1,    37,    -1,    -1,    -1, 
         41,    -1,    -1,    44,    -1,   300,   301,   302,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    58,    59,   312, 
         61,   413,   414,   415,   416,   126,    -1,    -1,    -1,    37, 
         -1,    -1,    -1,    41,    -1,    -1,    44,   404,   405,   406, 
        407,   408,   312,    -1,    -1,    -1,   413,   414,   415,   416, 
         58,    59,    93,    61,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
        312,    -1,    -1,    -1,   413,   414,   415,   416,    -1,    -1, 
         -1,    -1,    -1,    -1,   125,    93,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,   125,    -1,    -1, 
        413,   414,   415,   416,    -1,    -1,    37,    -1,    -1,    -1, 
         41,    -1,    -1,    44,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,   416,    58,    59,    -1, 
         61,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1, 
         -1,    44,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,   416,    58,    59,    -1,    61,    37, 
         -1,    -1,    93,    41,    -1,    -1,    44,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,   416, 
         58,    59,    37,    61,    -1,    -1,    41,    -1,    -1,    44, 
         93,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,    -1, 
         -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1, 
        125,    -1,    -1,    40,    -1,    -1,    43,    -1,    45,   400, 
        401,   402,   403,    -1,   312,    -1,    -1,    -1,    -1,    -1, 
        411,   412,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1, 
         40,    -1,    -1,    43,    91,    45,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,   414,   415,   416,   123,    33,   125,   126, 
         -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    45, 
         -1,    91,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,   312,    -1,    59,    -1,   413,   414,   415,   416,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   123,    -1,   125,   126,    -1,    -1,   312, 
         -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1, 
         -1,    -1,    -1,    -1,   312,    40,    -1,    -1,    43,    -1, 
         45,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,   125, 
        126,    -1,    -1,    -1,    59,    -1,    -1,   312,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,   414,   415,   416,    91,    -1,    -1,    -1, 
         -1,    -1,    -1,   260,   261,   262,   263,   264,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,   416,    -1,    -1,    -1,    -1,   123,    -1, 
         -1,   126,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,   414,   415,   416,    -1, 
        260,   261,   262,   263,   264,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,   416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   340,   341,   342,   343,    -1,   345,   346, 
         -1,    -1,    -1,    -1,   260,   261,   262,   263,   264,    -1, 
         -1,    -1,    -1,   360,   361,   362,   363,    -1,   365,   366, 
         -1,    -1,    33,   370,   371,   372,   373,   374,    -1,    40, 
         -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1, 
        340,   341,   342,   343,    -1,    -1,   346,    -1,    59,    -1, 
         -1,    -1,    -1,    -1,    -1,   402,   403,    -1,    -1,    -1, 
        360,   361,   362,   363,    -1,   365,   366,    -1,    -1,    -1, 
        370,   371,   372,   373,   374,   260,   261,   262,   263,   264, 
         91,    33,    -1,    -1,   340,   341,   342,   343,    40,    -1, 
        346,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   402,   403,   360,   361,   362,   363,    -1,   365, 
        366,    -1,   123,    -1,   370,   126,   372,   373,   374,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91, 
         -1,    -1,    -1,    -1,    -1,    -1,   402,   403,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   340,   341,   342,   343,    -1, 
         -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   123,    -1,    -1,   126,   360,   361,   362,   363,    -1, 
        365,   366,    -1,    -1,    -1,   370,    -1,   372,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,   261, 
        262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340, 
        341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360, 
        361,   362,   363,    -1,   365,   366,    -1,    -1,    -1,   370, 
         -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,    -1, 
         -1,   402,   403,    -1,   346,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_DOTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 
      'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 
      'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 'T_CONTINUE', NULL, NULL, 
      NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      NULL, 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 
      'T_BOOLEAN_OR', 'T_BOOLEAN_AND', 'T_CONCAT_EQUAL', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 136 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 148 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 148 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 159 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 160 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 164 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 10:  #line 164 "grammar/xp.jay"
    {
      $yyVals[-4+$yyTop]->position= $p;
      $yyVals[-4+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 11:  #line 172 "grammar/xp.jay"
    { $yyVal= new ImportNode(); } break;

    case 12:  #line 173 "grammar/xp.jay"
    { $yyVal= new StaticImportNode(); } break;

    case 13:  #line 174 "grammar/xp.jay"
    { $yyVal= new NativeImportNode(); } break;

    case 16:  #line 180 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 18:  #line 185 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 19:  #line 191 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 20:  #line 191 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 21:  #line 200 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 22:  #line 200 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 23:  #line 209 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 24:  #line 209 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 25:  #line 220 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 26:  #line 221 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 27:  #line 225 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 28:  #line 226 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 29:  #line 230 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 30:  #line 231 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 31:  #line 235 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 236 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 33:  #line 240 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 34:  #line 241 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 35:  #line 245 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 36:  #line 246 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 247 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 38:  #line 251 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 39:  #line 252 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 40:  #line 253 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 41:  #line 257 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 42:  #line 258 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 43:  #line 262 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 44:  #line 262 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 45:  #line 265 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 46:  #line 265 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 47:  #line 275 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 48:  #line 282 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->modifiers= $yyVals[-5+$yyTop][0];
      $yyVals[-3+$yyTop]->annotations= $yyVals[-5+$yyTop][1];
      $yyVals[-3+$yyTop]->type= $yyVals[-4+$yyTop];
      $yyVals[-3+$yyTop]->handlers= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 49:  #line 292 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 50:  #line 293 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[-3+$yyTop], 'arguments' => $yyVals[-1+$yyTop]))); } break;

    case 51:  #line 297 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 52:  #line 298 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 53:  #line 302 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 54:  #line 303 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 55:  #line 304 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 56:  #line 308 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 57:  #line 309 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 58:  #line 315 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 59:  #line 315 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 60:  #line 325 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 61:  #line 325 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 62:  #line 333 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 63:  #line 333 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 64:  #line 346 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 65:  #line 347 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 66:  #line 351 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 67:  #line 352 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 68:  #line 356 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 69:  #line 360 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVals[-1+$yyTop] && $yyVal->parameters= array('default' => $yyVals[-1+$yyTop]);
    } break;

    case 70:  #line 365 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= array();        /* FIXME: Use different rule instead of mapliteral*/
      foreach ($yyVals[-1+$yyTop] as $parameter) {
        if (!$parameter[0] instanceof ConstantValueNode) {
          throw new ParseException('Illegal member type '.xp::stringOf($parameter[0]));
        }
        $yyVal->parameters[$parameter[0]->value]= $parameter[1];
      }
    } break;

    case 71:  #line 379 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 72:  #line 380 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 73:  #line 384 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 74:  #line 385 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 75:  #line 389 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 76:  #line 390 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 77:  #line 394 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 78:  #line 395 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-3+$yyTop], 'vararg' => TRUE); } break;

    case 79:  #line 399 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 80:  #line 400 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 87:  #line 419 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 89:  #line 424 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 90:  #line 425 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 91:  #line 429 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 92:  #line 429 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 93:  #line 432 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 94:  #line 432 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 95:  #line 437 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 96:  #line 437 "grammar/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= array();
        foreach ($yyVals[-6+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->initialization[]= $stmt;
        }
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= array();
        foreach ($yyVals[-2+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->loop[]= $stmt;
        }
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 97:  #line 455 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 98:  #line 455 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 99:  #line 460 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 100:  #line 460 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 101:  #line 464 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 102:  #line 464 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 103:  #line 468 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 104:  #line 468 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 105:  #line 472 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 106:  #line 472 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 107:  #line 477 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 109:  #line 478 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 111:  #line 479 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 112:  #line 479 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 113:  #line 482 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->free= TRUE; } break;

    case 115:  #line 487 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 117:  #line 492 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 118:  #line 493 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 119:  #line 497 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 120:  #line 497 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 121:  #line 501 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 122:  #line 501 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 123:  #line 507 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 124:  #line 508 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 125:  #line 512 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 126:  #line 513 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 127:  #line 513 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 128:  #line 518 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 129:  #line 519 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 130:  #line 523 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 131:  #line 524 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 132:  #line 528 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 133:  #line 528 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 134:  #line 536 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 136:  #line 541 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 137:  #line 541 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 138:  #line 549 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 140:  #line 554 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 141:  #line 555 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 142:  #line 559 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 144:  #line 564 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 145:  #line 570 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 146:  #line 578 "grammar/xp.jay"
    { 
      /* TBI: Constant */ 
    } break;

    case 147:  #line 581 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 148:  #line 584 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new InvocationNode(array('name' => $yyVals[-3+$yyTop]))); 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 150:  #line 592 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 151:  #line 592 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 152:  #line 595 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 153:  #line 595 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 154:  #line 600 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 155:  #line 600 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyVals[-1+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 156:  #line 605 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 157:  #line 605 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 158:  #line 611 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 159:  #line 612 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 160:  #line 615 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 161:  #line 618 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 162:  #line 621 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 163:  #line 624 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 164:  #line 628 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 165:  #line 634 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 166:  #line 640 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 167:  #line 646 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 168:  #line 654 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ConstantNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 169:  #line 655 "grammar/xp.jay"
    { /* XXX class literal */ } break;

    case 170:  #line 656 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 171:  #line 656 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 172:  #line 660 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 173:  #line 665 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 174:  #line 666 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 175:  #line 667 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 176:  #line 668 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 177:  #line 672 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 179:  #line 677 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 180:  #line 678 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 181:  #line 682 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 182:  #line 686 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 183:  #line 687 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 184:  #line 688 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 185:  #line 689 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 690 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 691 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 188:  #line 692 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 189:  #line 696 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 190:  #line 697 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 191:  #line 698 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 192:  #line 699 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 193:  #line 700 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 194:  #line 701 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 195:  #line 705 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 196:  #line 706 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 197:  #line 707 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 198:  #line 708 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 199:  #line 709 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 200:  #line 710 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 201:  #line 714 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 202:  #line 715 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 203:  #line 716 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 204:  #line 717 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 205:  #line 718 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 206:  #line 719 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 207:  #line 723 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 208:  #line 724 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 209:  #line 729 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 212:  #line 735 "grammar/xp.jay"
    {  $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 213:  #line 739 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 214:  #line 739 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 215:  #line 742 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 216:  #line 745 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 217:  #line 745 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 220:  #line 759 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 221:  #line 760 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 222:  #line 764 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 223:  #line 768 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 224:  #line 769 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 226:  #line 774 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 227:  #line 778 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 228:  #line 779 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 229:  #line 785 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 230:  #line 786 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 231:  #line 790 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 232:  #line 791 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 233:  #line 795 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 234:  #line 796 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 235:  #line 797 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 236:  #line 798 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 237:  #line 799 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 238:  #line 800 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 239:  #line 801 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;

    case 240:  #line 802 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2062 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
