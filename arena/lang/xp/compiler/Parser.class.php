<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.StaticImportNode',
    'xp.compiler.ast.NativeImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.ConstantNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.InstanceOfNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.SwitchNode',
    'xp.compiler.ast.CaseNode',
    'xp.compiler.ast.DefaultNode',
    'xp.compiler.ast.BreakNode',
    'xp.compiler.ast.ContinueNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 63 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_MOD_EQUAL= 408;
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_INSTANCEOF= 312;
    const T_CONCAT_EQUAL= 416;
    const T_INC= 402;
    const T_DEC= 403;
    const T_SE= 401;
    const T_GE= 400;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_DOTS= 330;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_NEW= 346;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     9,     7, 
          8,     8,     8,    10,    10,    10,     4,     4,    13,     3, 
         17,     3,    19,     3,    14,    14,    15,    15,    20,    20, 
         22,    22,    16,    16,    23,    23,    23,    18,    18,    18, 
         27,    27,    29,    28,    30,    28,    24,    24,    34,    34, 
         35,    35,    37,    37,    37,    33,    33,    39,    25,    42, 
         25,    44,    25,    11,    11,    45,    45,    47,    47,    47, 
         49,    49,    50,    41,    41,    38,    38,    36,    36,    51, 
         51,    40,    40,    43,    43,    43,    43,    43,    43,    26, 
         26,    52,    52,    54,    53,    55,    53,    58,    53,    60, 
         53,    61,    53,    62,    53,    63,    53,    65,    53,    67, 
         53,    68,    53,    69,    53,    53,    53,    64,    64,    70, 
         70,    72,    71,    73,    71,    56,    56,    57,    74,    57, 
         66,    66,    75,    75,    79,    78,    76,    76,    80,    77, 
         59,    59,    81,    81,    48,    48,    82,    82,    83,    83, 
         83,    31,    86,    31,    87,    31,    88,    31,    89,    31, 
         31,    31,    31,    31,    31,    31,    31,    31,    31,    31, 
         84,    84,    95,    84,    84,    84,    84,    84,    84,    96, 
         96,    97,    97,    98,    90,    90,    90,    90,    90,    90, 
         90,    91,    91,    91,    91,    91,    91,    92,    92,    92, 
         92,    92,    92,    93,    93,    93,    93,    93,    93,    94, 
         94,    85,    85,    99,    99,   101,   100,   100,   102,   100, 
         32,    32,    12,    12,   103,   104,   104,   105,   105,    21, 
         21,    46,    46,   106,   106,   107,   107,   107,   107,   107, 
        107,   107,   107, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     7, 
          0,     1,     1,     1,     1,     3,     1,     3,     0,     9, 
          0,     9,     0,     8,     0,     2,     0,     2,     0,     2, 
          0,     3,     2,     0,     1,     1,     4,     3,     1,     0, 
          1,     3,     0,     3,     0,     6,     5,     6,     1,     4, 
          1,     2,     2,     4,     4,     0,     2,     0,     9,     0, 
          8,     0,    10,     4,     1,     1,     3,     2,     5,     5, 
          1,     3,     3,     1,     3,     0,     1,     1,     3,     3, 
          4,     0,     2,     1,     1,     1,     1,     1,     1,     0, 
          1,     1,     2,     0,     4,     0,     7,     0,    10,     0, 
          8,     0,     6,     0,     7,     0,     8,     0,     6,     0, 
          3,     0,     3,     0,     4,     2,     1,     0,     1,     1, 
          2,     0,     5,     0,     4,     1,     3,     0,     0,     3, 
          2,     1,     1,     2,     0,     9,     0,     1,     0,     5, 
          0,     1,     1,     3,     0,     1,     5,     6,     1,     1, 
          4,     1,     0,     3,     0,     4,     0,     5,     0,     6, 
          3,     1,     1,     1,     1,     1,     5,     3,     3,     3, 
          1,     3,     0,     4,     3,     1,     1,     1,     1,     0, 
          1,     1,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     2,     2,     2,     2,     2,     2,     2, 
          2,     0,     1,     1,     2,     0,     4,     2,     0,     6, 
          1,     1,     1,     4,     3,     1,     3,     1,     3,     1, 
          3,     0,     1,     1,     2,     1,     1,     1,     1,     1, 
          1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   236,   238,   237,   239,   241,   240,   242,   243, 
          1,     0,    65,   233,     0,     8,     0,     4,    12,    13, 
          0,     0,     0,     0,    19,    23,    21,   235,    18,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    64,    67, 
          0,     0,     0,     0,    15,     0,     0,     0,     0,   173, 
          0,     0,     0,     0,     0,   179,   176,   178,   177,   153, 
        155,     0,     0,     0,     0,     0,     0,     0,   152,   162, 
        163,   164,   165,   166,     0,     0,     0,     0,     0,     0, 
          0,    10,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   159,     0,     0,     0,     0,   181,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   210,   211,     0, 
          0,     0,     0,     0,     0,    69,    70,     0,     0,     0, 
        221,   228,   222,     0,     0,    26,     0,     0,     0,    30, 
         34,     0,    16,     0,     0,   142,     0,     0,   216,     0, 
        154,   213,     0,     0,     0,     0,     0,   175,     0,   161, 
        172,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   170,     0,     0,     0,     0,     0,     0,     0,   192, 
        193,   194,   195,   196,   197,     0,    72,     0,     0,   224, 
          0,    28,    34,     0,     0,     0,     0,   174,     0,     0, 
          0,   215,     0,     0,   156,     0,   183,     0,   150,     0, 
          0,   229,   225,   227,     0,   231,     0,    24,     0,    33, 
         35,    36,     0,     0,     0,     0,   144,     0,     0,   219, 
          0,     0,     0,   158,     0,    20,     0,     0,     0,     0, 
          0,    22,    34,     0,   160,   217,     0,     0,     0,     0, 
         94,     0,   114,    98,   102,   104,   100,   110,   112,    96, 
        106,   117,     0,     0,    91,     0,    60,     0,     0,     0, 
          0,    34,    44,     0,     0,    42,     0,     0,   147,   151, 
          0,   108,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    37,   116,    93,     0,     0,    58,    88,    84,    85, 
         86,    87,    89,     0,     0,     0,     0,     0,     0,   220, 
        148,     0,     0,     0,     0,     0,     0,   126,     0,     0, 
        111,   113,     0,     0,     0,    77,     0,     0,     0,     0, 
         62,     0,    47,     0,     0,     0,    32,     0,    95,     0, 
        115,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    50,     0,     0,     0,    53,     0,    48, 
         52,    46,     0,     0,     0,   127,     0,     0,     0,     0, 
          0,    80,     0,     0,    79,     0,     0,     0,     0,   135, 
        139,   109,     0,   132,     0,     0,   103,     0,     0,     0, 
          0,    81,    83,    74,     0,    61,     0,     0,    54,    55, 
          0,     0,   131,   138,   134,     0,   105,     0,   129,    97, 
        122,   124,     0,   119,     0,     0,    59,     0,     0,     0, 
          0,   101,     0,     0,     0,   107,   121,    75,    63,     0, 
          0,     0,   130,     0,     0,     0,   140,    99,     0,   125, 
          0,   123,     0,     0,   136, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    21,    74,     4,     7,     8,    31,    11,    57, 
        229,   141,    44,    87,   148,   205,    46,   234,    45,    89, 
        150,   283,   230,   231,   232,   273,   235,   236,   250,   251, 
        274,   335,   316,   281,   345,   336,   346,   337,   340,   384, 
        406,   305,   314,   366,    33,    23,    34,    76,    77,    78, 
        338,   275,   276,   291,   300,   329,   420,   294,   155,   297, 
        295,   296,   301,   423,   323,   392,   298,   299,   293,   424, 
        425,   434,   435,   433,   393,   413,   394,   395,   411,   412, 
        156,   166,   220,    79,   161,   103,   104,   172,   158,    80, 
         81,    82,    83,    84,    96,   106,   107,   108,   162,   163, 
        210,   257,   143,   144,   145,    24,    25, 
    );
    protected static $yySindex = array(         -243,
          0,     0,  -232,  -184,     0,   559,     0,  -232,    69,    75, 
       -133,    71,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    73,     0,     0,   528,     0,  -184,     0,     0,     0, 
       -111,  -184,    64,   128,     0,     0,     0,     0,     0,   137, 
        151,   528,    71,  -184,  -184,  -184,   -39,  2053,     0,     0, 
        138,  -105,   -95,  -105,     0,   178,   167,  2699,  2699,     0, 
       2699,  2699,  2699,  2699,   274,     0,     0,     0,     0,     0, 
          0,  2699,  2699,  -180,  1340,   190,   205,   204,     0,     0, 
          0,     0,     0,     0,   -61,  -184,   -51,  -184,   139,   -51, 
        -39,     0,    16,  2047,  2047,  2699,   387,   387,   387,   387, 
       2699,     0,   102,  -184,   636,   142,     0,   225,   733,   -24, 
       2699,  2699,  2699,  2699,  2699,  2699,  2699,  2699,  2699,  -184, 
       2699,  2699,  2699,  2699,  2699,  2699,  2699,     0,     0,  2699, 
       2699,  2699,  2699,  2699,  2699,     0,     0,    18,   -30,    15, 
          0,     0,     0,   234,   254,     0,  -184,   177,   263,     0, 
          0,   186,     0,   834,   217,     0,  1340,  2699,     0,    56, 
          0,     0,   102,    94,   283,   102,  2699,     0,  2699,     0, 
          0,  -242,   232,   232,   232,   232,   232,   232,   232,   232, 
        232,     0,   232,   266,  2047,  2047,   387,   387,   387,     0, 
          0,     0,     0,     0,     0,   265,     0,  -184,   237,     0, 
        -61,     0,     0,  -184,   132,    74,  2699,     0,   301,  2699, 
        304,     0,   252,  2699,     0,  1340,     0,   314,     0,   102, 
       2699,     0,     0,     0,   453,     0,   238,     0,    97,     0, 
          0,     0,     0,   235,   311,   319,     0,   102,   284,     0, 
        253,   341,  2699,     0,   246,     0,  2832,   172,  -229,   273, 
        358,     0,     0,    74,     0,     0,  2699,  2699,   273,   359, 
          0,   285,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   276,   862,     0,  2832,     0,    17,   -21,   348, 
        287,     0,     0,  2699,   602,     0,   370,   295,     0,     0, 
       2699,     0,  2699,   381,   386,  2879,   393,   365,   368,   394, 
        396,     0,     0,     0,  -184,  -184,     0,     0,     0,     0, 
          0,     0,     0,   399,  2699,   382,   182,   520,   908,     0, 
          0,   385,  2832,   959,  2699,  2699,  2832,     0,    82,   105, 
          0,     0,  2699,  2699,  -277,     0,   405,   406,   360,  -184, 
          0,  1340,     0,  -118,   326,   182,     0,   273,     0,   327, 
          0,   402,  1016,   338,   417,   425,   103,  1045,  1117,   420, 
        348,   147,  -184,     0,   430,  -184,   433,     0,  2832,     0, 
          0,     0,  -286,  2699,  2879,     0,  2699,  2699,  2879,   351, 
        141,     0,  -184,   -26,     0,   147,   441,   442,   362,     0, 
          0,     0,   143,     0,   140,   438,     0,  1146,  1243,   127, 
       -101,     0,     0,     0,  2832,     0,   -26,   147,     0,     0, 
        459,   366,     0,     0,     0,  2699,     0,  2879,     0,     0, 
          0,     0,   375,     0,  -101,   376,     0,   -26,  -184,  2832, 
        461,     0,  2879,  2699,   445,     0,     0,     0,     0,   165, 
        390,  2879,     0,  1168,  2832,   465,     0,     0,  2832,     0, 
        404,     0,  2832,   391,     0, 
    );
    protected static $yyRindex= array(          384,
          0,     0,   815,     0,     0,    93,     0,   916,   118,     0, 
        257,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   -18,     0,     0,     0,     0,     0, 
          0,     0,     0,   443,     0,     0,     0,     0,     0,     0, 
         -6,    27,     0,     0,     0,     0,     0,   494,     0,     0, 
        145,  -109,   414,  -109,     0,   479,     0,     0,     0,     0, 
          0,     0,     0,     0,  1284,     0,     0,     0,     0,     0, 
          0,   416,     0,     0,   245,     0,     0,   498,     0,     0, 
          0,     0,     0,     0,     0,     0,   431,     0,     0,   431, 
          0,     0,   192,  1822,  1849,   462,  1441,  1548,  1576,  1665, 
          0,     0,   526,     0,     0,     0,     0,   437,     0,  -241, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   506,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   -15, 
          0,     0,     0,     0,   503,     0,     0,     0,   -22,     0, 
          0,     0,     0,   -16,     0,     0,   173,   525,     0,     0, 
          0,     0,   579,   532,     0,   526,     0,     0,     0,     0, 
          0,     0,  1998,  2084,  2109,  2181,  2208,  2235,  2261,  2294, 
       2379,     0,  2402,     0,  1876,  1959,  1725,  1750,  1778,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   316,   452,     0,     0,     0,   486, 
        306,     0,     0,   525,     0,   -31,     0,   344,     0,   526, 
          0,     0,     0,     0,   316,     0,   630,     0,     0,     0, 
          0,     0,   188,     0,   455,   -29,     0,   526,     0,     0, 
        541,     0,   525,     0,  1975,     0,   457,   -59,     0,   -32, 
          0,     0,     0,     0,     0,     0,   525,   458,   449,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,  -115,     0,   467,     0,   542, 
          0,     0,     0,     0,  -114,     0,     0,     0,     0,     0, 
        550,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   569,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   316,     0,     0, 
          0,     0,   457,     0,   553,     0,   457,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    -7,     0,   569, 
          0,   278,     0,     0,     0,   466,     0,   -32,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         -5,    21,     0,     0,     0,   569,     0,     0,   457,     0, 
          0,     0,     0,   553,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    21,     0,     0,     0,     0, 
          0,     0,  2638,     0,  2508,     0,     0,     0,     0,  2688, 
        488,     0,     0,     0,   457,     0,     0,    21,     0,     0, 
          0,     0,     0,     0,     0,   525,     0,     0,     0,     0, 
          0,     0,     0,     0,   489,     0,     0,     0,     0,   457, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,  -108,     0,     0,     0,  -108,     0, 
          0,     0,   457,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   607,     0,     0,     0,   534, 
        611,   -37,     0,   573,   538,  -168,     0,     0,     0,     0, 
       -143,  -253,     0,     0,     0,  -279,   377,     0,     0,     0, 
          6,   -33,   268,     0,   290,  -251,     0,  -195,     0,  -239, 
       -362,     0,     0,     0,   587,   612,     0,  -107,   515,     0, 
          0,   379,  -223,     0,     0,  -329,     0,     0,    98,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   236, 
          0,     0,     0,     0,   264,     0,   267,     0,     0,     0, 
        456,     0,     0,     0,  -146,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   493,     0,   511,     0, 
          0,     0,     0,   474,     0,   651,     0, 
    );
    protected static $yyTable = array(10,
         17,   139,    55,   202,   369,   289,    52,    53,    54,    92, 
         38,    31,   184,    25,   184,   308,    90,   218,   157,   215, 
        311,   309,    39,   310,   143,   312,    31,    41,   223,    41, 
        278,    17,   404,    78,   225,    56,   230,    68,    56,    51, 
         51,    51,   143,   350,   427,   397,   223,   354,   146,   400, 
        149,   142,   360,    75,   339,   102,   307,   390,   391,     1, 
        226,    27,   361,    94,    95,   439,    97,    98,    99,   100, 
        165,     5,   328,   244,    85,     9,   143,   105,   109,    82, 
        140,    51,   182,    51,   285,    78,    68,    56,   432,   389, 
        279,   255,    31,   184,   372,    41,   405,   219,   157,   164, 
        230,   154,   239,   443,   313,   199,   157,   306,   143,   149, 
        280,   385,   448,   318,    27,    51,   173,   174,   175,   176, 
        177,   178,   179,   180,   181,   426,   183,    75,   185,   186, 
        187,   188,   189,    28,    32,   190,   191,   192,   193,   194, 
        195,   367,    51,    82,   365,   232,   407,   160,    40,    29, 
        441,   328,    30,    85,    17,   328,    42,    17,    17,    17, 
         17,    17,    17,   154,    17,   450,   149,   142,   428,   452, 
        387,    43,   216,   454,   105,    17,    17,    17,    17,    17, 
         17,   223,    47,   322,   213,   223,   223,   223,   223,   223, 
         48,   223,   159,   222,   328,   249,   140,    85,     9,    51, 
         17,    25,   223,   223,    86,   223,   223,   223,    17,   328, 
         17,   277,   154,    73,    88,    75,    73,    27,   328,   154, 
         56,   368,    12,    91,   140,    92,   245,    45,   171,   110, 
        136,    43,   171,   171,   171,   171,   171,   223,   171,   403, 
         17,   234,    17,    17,   223,   137,    43,   138,   154,   171, 
        171,   171,   171,   171,   171,   209,   228,    92,    92,   147, 
         17,   151,   154,   154,    90,    90,   168,   223,   169,   223, 
        223,   421,   422,   125,   123,   171,   124,   196,   126,   198, 
         17,   234,   234,   234,   171,   146,   232,   125,   123,   319, 
        124,   130,   126,   131,   122,   200,    75,   201,   324,   203, 
        140,   140,   146,   146,   223,   130,   204,   131,   206,   208, 
         43,   242,    43,   102,   223,   211,   171,   171,    57,    27, 
        342,    57,   214,   221,   223,   101,   232,   232,   232,   223, 
        154,   353,   355,   233,   101,   140,    57,   146,   358,   359, 
        260,   238,   218,   240,   241,   149,   218,   218,   218,   218, 
        218,   218,   218,   243,   287,   288,   248,   127,   140,   252, 
        247,   140,   254,   218,   218,   218,   218,   218,   218,   253, 
         57,   127,    35,    36,    37,   258,   256,    17,    51,   154, 
        149,   259,   398,   399,   149,   149,   149,   149,   149,   149, 
        149,   440,   232,   232,   232,   282,   218,   284,   218,   290, 
        302,   149,   149,   149,   149,   149,   149,   292,   315,   317, 
        320,    13,    14,    15,   227,    17,    18,    19,    20,   321, 
        325,   154,   352,   331,    51,   326,   332,    17,    17,    17, 
        218,   218,   330,   333,   149,   334,   149,    17,   341,   444, 
        343,   344,   356,   349,   357,   362,   130,    17,   131,   363, 
        370,   373,   364,   112,   223,   223,   223,    17,   125,   123, 
        374,   124,   376,   126,   377,   381,   378,   383,   149,   149, 
        386,   396,   388,   401,     2,   303,   130,   111,   131,   122, 
        402,   408,   409,   390,   223,    31,   410,   391,   430,    31, 
         31,    31,    31,    31,    31,    31,   416,   419,   429,   436, 
        438,   442,   445,   171,   446,   451,    31,    31,    31,    31, 
         31,    31,   127,   431,   447,   455,    11,    17,    17,    17, 
         17,    17,    17,    17,    17,    17,   453,    17,    17,    17, 
         17,    17,    17,    17,   145,    66,    29,    14,    71,    31, 
        180,    31,   127,    12,   223,   223,   223,   223,   223,   223, 
        223,   223,   223,    27,   141,   223,   223,   223,   223,   223, 
        223,   182,   212,   145,   226,   141,   212,   212,   212,   212, 
        212,   223,   212,    31,    31,   232,    40,   246,   145,    39, 
        225,    90,   141,   212,   212,   212,   212,   212,   212,    49, 
         51,   171,   171,   171,   171,   171,   171,   171,   171,   171, 
         56,    17,   171,   171,   171,   171,   171,   171,   145,    76, 
         12,   141,   118,   120,    26,   214,    22,   218,   212,   214, 
        214,   214,   214,   214,   153,   214,    90,   152,   382,    50, 
        286,   133,   132,   128,   129,   371,   214,   214,   214,   214, 
        214,   214,   134,   135,   347,   133,   132,   128,   129,    12, 
        212,   212,   197,    49,   304,   149,   134,   135,   415,   414, 
        437,   217,   237,     2,     2,     2,     2,     2,     2,     2, 
          2,   214,   112,   212,   224,    38,     0,   125,   123,     0, 
        124,     0,   126,     2,     2,     2,     0,     2,     0,     0, 
          0,     0,    12,     0,     0,   130,   111,   131,   122,     0, 
          0,     0,     0,   214,   214,   218,   218,   218,   218,   218, 
        218,   218,   218,   218,     0,     0,   218,   218,   218,   218, 
        218,   218,     0,     0,     0,     0,     0,     0,   120,     0, 
          0,     0,    13,    14,    15,   227,    17,    18,    19,    20, 
          0,     0,     0,   149,   149,   149,   149,   149,   149,   149, 
        149,   149,     0,     0,   149,   149,   149,   149,   149,   149, 
         31,   127,     0,     0,     0,     0,     0,     0,     0,   112, 
          0,     0,     0,   170,   125,   123,     0,   124,     0,   126, 
          0,     0,     0,     0,     0,     0,   133,   132,   128,   129, 
          0,     0,   130,   111,   131,   122,     0,   134,   135,    13, 
         14,    15,   227,    17,    18,    19,    20,    13,    14,    15, 
         16,    17,    18,    19,    20,     0,   133,   132,   128,   129, 
        113,   114,   115,   116,   117,     0,     0,   134,   135,   167, 
        118,   119,   121,     0,     0,     0,     0,   212,    13,    14, 
         15,    16,    17,    18,    19,    20,     0,     0,    31,    31, 
         31,    31,    31,    31,    31,    31,    31,     0,   127,    31, 
         31,    31,    31,    31,    31,     0,     0,     0,     0,     0, 
        112,     0,     0,     0,     0,   125,   123,   207,   124,     0, 
        126,    13,    14,    15,   227,    17,    18,    19,    20,   239, 
        214,     0,     0,   130,   111,   131,   122,     0,   112,     0, 
          0,     0,     0,   125,   123,     5,   124,     0,   126,   239, 
        239,   239,   239,   239,   239,   239,   239,     0,     0,     0, 
        303,   130,   111,   131,   122,   212,   212,   212,   212,   212, 
        212,   212,   212,   212,     0,     0,   212,   212,   212,   212, 
        212,   212,     0,     0,   112,     0,     0,   120,   348,   125, 
        123,     0,   124,     0,   126,     0,     0,     0,     0,   127, 
          0,     0,     0,     0,     0,     0,     0,   130,   111,   131, 
        122,     0,     0,     0,     0,     0,     0,     0,   214,   214, 
        214,   214,   214,   214,   214,   214,   214,   127,     0,   214, 
        214,   214,   214,   214,   214,   112,     0,     0,     0,     0, 
        125,   123,     0,   124,     0,   126,     7,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   351,   130,   111, 
        131,   122,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   127,     0,   133,   132,   128,   129,   113, 
        114,   115,   116,   117,   120,     0,   134,   135,   167,   118, 
        119,   121,   112,     0,     0,     0,   375,   125,   123,     0, 
        124,     0,   126,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   130,   111,   131,   122,     0, 
          0,   112,     0,     0,   127,   379,   125,   123,     0,   124, 
          0,   126,     0,     0,     5,     5,     5,     5,     5,     5, 
          5,     5,     0,     0,   130,   111,   131,   122,     0,     0, 
          0,     0,     0,     0,     5,     5,     5,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   133,   132,   128,   129,   113,   114,   115,   116, 
        117,   127,     0,   134,   135,   120,   118,   119,   121,     0, 
          0,     0,     0,   112,     0,     0,     0,   380,   125,   123, 
          0,   124,     0,   126,     0,     0,     0,     0,     0,     0, 
        127,     0,     0,   120,     0,     0,   130,   111,   131,   122, 
          0,     0,   112,     0,     0,     0,   417,   125,   123,     0, 
        124,     0,   126,     0,     0,     7,     7,     7,     7,     7, 
          7,     7,     7,     0,   112,   130,   111,   131,   122,   125, 
        123,     0,   124,     0,   126,     7,     7,     7,     0,   120, 
          0,     0,     0,     0,     0,   449,     0,   130,   111,   131, 
        122,     0,     0,   133,   132,   128,   129,   113,   114,   115, 
        116,   117,   127,     0,   134,   135,     0,   118,   119,   121, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   133,   132,   128,   129,   113,   114,   115,   116,   117, 
        120,   127,   134,   135,     0,   118,   119,   121,     0,   112, 
          0,     0,     0,   418,   125,   123,     0,   124,     0,   126, 
          0,     0,     0,   127,     0,     0,     0,     0,     0,     0, 
          0,     0,   130,   111,   131,   122,     0,   133,   132,   128, 
        129,   113,   114,   115,   116,   117,     0,     0,   134,   135, 
        171,   118,   119,   121,   171,   171,   171,   120,   171,     0, 
        171,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   171,     0,   171,   171,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   120,     0,   133,   132, 
        128,   129,   113,   114,   115,   116,   117,     0,   127,   134, 
        135,     0,   118,   119,   121,     0,   112,     0,     0,     0, 
          0,   125,   123,     0,   124,     0,   126,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   130, 
        111,   131,   122,     0,     0,     0,     0,     0,     0,   171, 
          0,     0,     0,     0,     0,   133,   132,   128,   129,   113, 
        114,   115,   116,   117,     0,     0,   134,   135,   120,   118, 
        119,   121,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   133,   132,   128,   129,   113,   114, 
        115,   116,   117,     0,     0,   134,   135,   120,   118,   119, 
        121,     0,     0,     0,     0,   127,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   204,     0,   120, 
          0,   204,   204,   204,   204,   204,     0,   204,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   204,   204, 
          0,   204,     0,   204,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   133,   132,   128,   129, 
        113,   114,   115,   116,   117,     0,     0,   134,   135,     0, 
        118,   119,   121,   204,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   133,   132,   128,   129,   113, 
        114,   115,   116,   117,   120,     0,   134,   135,     0,   118, 
        119,   121,     0,     0,     0,   204,     0,   133,   132,   128, 
        129,   113,   114,   115,   116,   117,     0,     0,   134,   135, 
          0,   118,   119,   121,   205,     0,     0,     0,   205,   205, 
        205,   205,   205,     0,   205,   171,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   205,   205,     0,   205,     0, 
        205,     0,   208,     0,     0,     0,   208,   208,   208,   208, 
        208,     0,   208,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   208,   208,     0,   208,     0,   208,     0, 
        205,     0,   133,   132,   128,   129,   113,   114,   115,   116, 
        117,   120,     0,   134,   135,     0,   118,   119,   121,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   208,     0, 
          0,     0,   205,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   171,   171,   171,   171,   171,   171,   171, 
        171,   171,     0,    17,   171,   171,     0,   171,   171,   171, 
        208,   209,     0,     0,     0,   209,   209,   209,   209,   209, 
          0,   209,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   209,   209,     0,   209,     0,   209,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   133, 
        132,   128,   129,   113,   114,   115,   116,   117,     0,     0, 
        134,   135,   204,   118,   119,   121,     0,   209,     0,     0, 
          0,   200,     0,     0,     0,   200,   200,   200,   200,   200, 
          0,   200,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   200,   200,     0,   200,   201,   200,     0,   209, 
        201,   201,   201,   201,   201,     0,   201,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   201,   201,     0, 
        201,     0,   201,     0,   203,     0,     0,   200,   203,   203, 
        203,   203,   203,     0,   203,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   203,   203,     0,   203,     0, 
        203,     0,   201,     0,   204,   204,   204,   204,   204,   200, 
          0,     0,     0,   204,   204,   204,   204,     0,   206,   205, 
          0,     0,   206,     0,   206,   206,   206,     0,     0,     0, 
        203,     0,     0,     0,   201,     0,     0,     0,     0,   206, 
        206,     0,   206,     0,   206,   207,     0,   208,     0,   207, 
          0,   207,   207,   207,     0,     0,     0,     0,     0,     0, 
          0,     0,   203,     0,     0,     0,   207,   207,     0,   207, 
          0,   207,   198,     0,   206,     0,   198,     0,   198,   198, 
        198,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   198,   198,     0,   198,     0,   198,     0, 
          0,   207,     0,     0,     0,     0,   206,     0,     0,     0, 
          0,   205,   205,   205,   205,   205,     0,     0,     0,     0, 
        205,   205,   205,   205,     0,     0,     0,     0,   198,     0, 
          0,     0,     0,   207,     0,     0,   209,     0,     0,   208, 
        208,   208,   208,   208,     0,     0,     0,     0,   208,   208, 
        208,   208,     0,     0,     0,   199,     0,     0,     0,   199, 
        198,   199,   199,   199,     0,     0,     0,     0,     0,     0, 
          0,   167,     0,     0,     0,   167,   199,   199,   167,   199, 
          0,   199,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   167,   167,   185,   167,   200,   167,   185,     0, 
          0,   185,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   199,     0,     0,     0,   185,   185,     0,   185,     0, 
          0,   201,     0,     0,     0,     0,     0,   167,   209,   209, 
        209,   209,   209,     0,     0,     0,     0,   209,   209,   209, 
        209,     0,     0,   199,     0,    61,     0,     0,   125,   203, 
        185,     0,    73,   126,     0,    58,     0,    59,     0,   167, 
          0,     0,     0,     0,     0,     0,   130,     0,   131,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        202,     0,   185,     0,   202,     0,     0,   202,   200,   200, 
        200,   200,   200,   206,     0,     0,     0,   200,   200,   200, 
        200,   202,   202,    60,   202,   186,     0,     0,     0,   186, 
          0,     0,   186,   201,   201,   201,   201,   201,     0,     0, 
        207,     0,   201,   201,   201,   201,   186,   186,     0,   186, 
          0,     0,   127,     0,     0,    72,   202,     0,    62,     0, 
          0,   203,   203,   203,   203,   203,     0,   198,     0,     0, 
        203,   203,   203,   203,     0,     0,     0,     0,     0,     0, 
          0,   186,     0,     0,     0,     0,     0,     0,   202,     0, 
          0,     0,     0,     0,     0,     0,     0,   187,     0,     0, 
          0,   187,     0,     0,   187,   206,   206,   206,   206,   206, 
          0,     0,     0,   186,   206,   206,   206,   206,   187,   187, 
          0,   187,     0,     0,   188,     0,     0,     0,   188,     0, 
          0,   188,   207,   207,   207,   207,   207,     0,     0,     0, 
          0,   207,   207,   207,   207,   188,   188,     0,   188,     0, 
        199,   189,     0,   187,     0,   189,     0,     0,   189,   198, 
        198,   198,   198,   198,     0,     0,   167,     0,   198,   198, 
        198,   198,   189,   189,     0,   189,     0,   190,     0,     0, 
        188,   190,     0,     0,   190,   187,     0,     0,     0,   185, 
          0,     0,    65,    66,    67,    68,    69,     0,   190,   190, 
          0,   190,     0,     0,     0,     0,     0,   189,     0,     0, 
        168,     0,   188,     0,   168,     0,     0,   168,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   168,   168,   190,   168,     0,     0,     0,     0,   189, 
          0,     0,   199,   199,   199,   199,   199,     0,     0,     0, 
          0,   199,   199,   199,   199,     0,     0,     0,   167,   167, 
        167,   167,   167,     0,     0,   190,   168,   167,   167,   167, 
        167,     0,    70,     0,     0,   202,     0,     0,    71,     0, 
          0,   185,   185,   185,   185,   185,     0,     0,     0,     0, 
        185,   185,   185,   185,     0,   169,     0,     0,   168,   169, 
        186,     0,   169,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   169,   169,   191,   169, 
          0,     0,   191,     0,     0,   191,   133,   132,   128,   129, 
          0,     0,     0,     0,    63,    64,     0,   134,   135,   191, 
        191,     0,   191,     0,     0,     0,     0,     0,     0,     0, 
          0,   169,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   202,   202,   202, 
        202,   202,   187,     0,   191,     0,   202,   202,   202,   202, 
          0,     0,     0,   169,     0,     0,     0,     0,     0,     0, 
          0,     0,   186,   186,   186,   186,   186,     0,     0,   188, 
          0,   186,   186,   186,   186,     0,   191,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        133,     0,     0,     0,     0,     0,   189,   133,     0,     0, 
        133,     0,   133,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   133,     0,     0,     0, 
          0,     0,   190,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   187,   187,   187,   187,   187,     0, 
          0,     0,     0,   187,   187,   187,   187,     0,   133,     0, 
          0,     0,     0,     0,     0,   168,     0,     0,     0,     0, 
          0,   188,   188,   188,   188,   188,     0,     0,     0,     0, 
        188,   188,   188,   188,     0,     0,     0,     0,     0,     0, 
        133,     0,   133,   133,     0,     0,     0,     0,   189,   189, 
        189,   189,   189,     0,     0,     0,     0,   189,   189,   189, 
        189,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   190,   190,   190,   190,   190,     0, 
        137,     0,     0,   190,   190,   190,   190,   137,     0,     0, 
        137,     0,   137,     0,     0,     0,     0,     0,     0,     0, 
        169,     0,     0,     0,     0,     0,   137,   168,   168,   168, 
        168,   168,     0,     0,     0,     0,   168,   168,   168,   168, 
          0,     0,     0,   191,     0,     0,     0,     0,     0,     0, 
        128,     0,     0,     0,     0,     0,     0,   128,   137,     0, 
        128,    61,   128,     0,     0,     0,     0,     0,    73,     0, 
          0,    58,     0,    59,     0,     0,   128,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        137,     0,   137,   137,     0,     0,     0,   133,   133,   133, 
        133,   133,     0,     0,     0,     0,     0,     0,   128,     0, 
          0,     0,   169,   169,   169,   169,   169,     0,     0,    60, 
          0,   169,   169,   169,   169,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   191,   191,   191,   191,   191, 
        128,     0,   128,   128,   191,   191,   191,   191,     0,     0, 
          0,    72,     0,     0,    62,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   133,   133,   133, 
        133,     0,   133,   133,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    61,     0,     0,   133,   133,   133, 
        133,    73,   133,   133,    58,     0,    59,   133,   133,   133, 
        133,   133,     0,     0,     0,     0,     0,     0,     0,     0, 
        272,     0,     0,     0,     0,     0,     0,   137,   137,   137, 
        137,   137,     0,     0,     0,     0,     0,     0,     0,   133, 
        133,    61,     0,     0,     0,     0,     0,     0,    73,     0, 
          0,    58,    60,    59,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   272,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   128,   128,   128, 
        128,   128,     0,     0,    72,     0,     0,    62,    93,    66, 
         67,    68,    69,     0,     0,     0,     0,     0,     0,    60, 
          0,     0,     0,     0,     0,     0,     0,   137,   137,   137, 
        137,     0,     0,   137,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   137,   137,   137, 
        137,   327,   137,   137,    62,     0,     0,   137,   137,   137, 
        137,   137,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   128,   128,   128, 
        128,     0,     0,   128,     0,     0,     0,     0,    70,   137, 
        137,     0,     0,     0,    71,     0,     0,   128,   128,   128, 
        128,     0,   128,   128,     0,     0,     0,   128,     0,   128, 
        128,   128,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   128, 
        128,    93,    66,    67,    68,    69,     0,     0,     0,     0, 
         63,    64,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    93,    66, 
         67,    68,    69,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    70,   261,   262,   263,     0,     0,    71,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   264,   265,   266,   267,     0,   268,   269,     0,     0, 
          0,   270,     0,   271,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    70,   261, 
        262,   263,     0,     0,    71,     0,     0,     0,     0,     0, 
          0,     0,     0,    63,    64,     0,     0,     0,   264,   265, 
        266,   267,     0,   268,   269,     0,     0,     0,   270,     0, 
        271,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         63,    64, 
    );
    protected static $yyCheck = array(4,
         60,    63,    42,   147,   123,   259,    44,    45,    46,   125, 
        125,    44,    44,   123,   122,    37,   125,   260,   260,   166, 
         42,    43,    27,    45,    41,    47,    59,    32,    44,    59, 
        260,    91,    59,    41,   203,    41,    59,    44,    44,    44, 
         45,    46,    59,   323,   407,   375,    62,   327,    86,   379, 
         88,    85,   330,    48,   306,    40,    40,   344,   345,   303, 
        204,    46,   340,    58,    59,   428,    61,    62,    63,    64, 
        104,   304,   296,   220,    60,   260,    93,    72,    73,    59, 
         85,    86,   120,    88,   253,    93,    93,    93,   418,   369, 
        320,   238,   125,   125,   348,   125,   123,   340,   340,   104, 
        123,    96,   210,   433,   126,    91,   101,    91,   125,   147, 
        340,   363,   442,   282,    46,   120,   111,   112,   113,   114, 
        115,   116,   117,   118,   119,   405,   121,   122,   123,   124, 
        125,   126,   127,    59,    64,   130,   131,   132,   133,   134, 
        135,   260,   147,   123,   340,   260,   386,    46,   260,   283, 
        430,   375,   286,    60,    37,   379,    93,    40,    41,    42, 
         43,    44,    45,   158,    47,   445,   204,   201,   408,   449, 
        366,    44,   167,   453,   169,    58,    59,    60,    61,    62, 
         63,    37,    46,   291,    91,    41,    42,    43,    44,    45, 
         40,    47,    91,   198,   418,   229,   201,    60,   260,   204, 
        260,   311,    58,    59,   310,    61,    62,    63,    91,   433, 
         93,    40,   207,    41,   310,   210,    44,    46,   442,   214, 
        260,   340,    91,    46,   229,    59,   221,    40,    37,   410, 
         41,    44,    41,    42,    43,    44,    45,    93,    47,   383, 
        123,   260,   125,   126,   260,    41,    59,    44,   243,    58, 
         59,    60,    61,    62,    63,   158,   125,   373,   374,   311, 
        320,   123,   257,   258,   373,   374,   125,   123,    44,   125, 
        126,   373,   374,    42,    43,   300,    45,   260,    47,   310, 
        340,   300,   301,   302,    93,    41,   260,    42,    43,   284, 
         45,    60,    47,    62,    63,    62,   291,    44,   293,   123, 
        305,   306,    58,    59,   320,    60,    44,    62,   123,    93, 
        123,   214,   125,    40,   330,   260,   125,   126,    41,    46, 
        315,    44,    40,    58,   340,    61,   300,   301,   302,    93, 
        325,   326,   327,   260,    61,   340,    59,    93,   333,   334, 
        243,    41,    37,    40,    93,   383,    41,    42,    43,    44, 
         45,    46,    47,    40,   257,   258,   260,   126,   363,   125, 
        123,   366,    44,    58,    59,    60,    61,    62,    63,    59, 
         93,   126,   300,   301,   302,   123,    93,   260,   383,   374, 
         37,    41,   377,   378,    41,    42,    43,    44,    45,    46, 
         47,   429,   300,   301,   302,   123,    91,    40,    93,    41, 
        125,    58,    59,    60,    61,    62,    63,   123,    61,   123, 
         41,   280,   281,   282,   283,   284,   285,   286,   287,   125, 
         40,   416,   325,    59,   429,    40,    59,   310,   311,   312, 
        125,   126,    40,    40,    91,    40,    93,   320,    40,   434, 
         59,   260,   361,    59,   340,    41,    60,   330,    62,    44, 
        125,   125,    93,    37,   310,   311,   312,   340,    42,    43, 
         59,    45,   125,    47,    40,    46,   364,   321,   125,   126, 
         41,   374,    40,   123,    91,    59,    60,    61,    62,    63, 
        340,    41,    41,   344,   340,    37,   125,   345,   123,    41, 
         42,    43,    44,    45,    46,    47,    59,   371,    40,   125, 
        125,    41,    58,   312,   340,    41,    58,    59,    60,    61, 
         62,    63,   126,   416,   125,   125,   260,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   123,   410,   411,   412, 
        413,   414,   415,   416,    41,    93,   123,    59,    41,    91, 
        125,    93,   126,    91,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,   123,    93,   411,   412,   413,   414,   415, 
        416,   125,    37,    58,    62,    41,    41,    42,    43,    44, 
         45,    40,    47,   125,   126,   260,   125,   125,    93,   125, 
         40,   125,   125,    58,    59,    60,    61,    62,    63,   123, 
        125,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         59,   410,   411,   412,   413,   414,   415,   416,    59,    41, 
         91,    59,   125,   125,     8,    37,     6,   312,    93,    41, 
         42,    43,    44,    45,    91,    47,    54,    90,   361,    43, 
        254,   400,   401,   402,   403,   346,    58,    59,    60,    61, 
         62,    63,   411,   412,   125,   400,   401,   402,   403,    91, 
        125,   126,   138,    42,   276,   312,   411,   412,   395,   393, 
        425,   169,   207,   280,   281,   282,   283,   284,   285,   286, 
        287,    93,    37,   163,   201,    25,    -1,    42,    43,    -1, 
         45,    -1,    47,   300,   301,   302,    -1,   304,    -1,    -1, 
         -1,    -1,    91,    -1,    -1,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,   125,   126,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,   413,   414, 
        415,   416,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1, 
         -1,    -1,   280,   281,   282,   283,   284,   285,   286,   287, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,   413,   414,   415,   416, 
        312,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37, 
         -1,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
         -1,    -1,    60,    61,    62,    63,    -1,   411,   412,   280, 
        281,   282,   283,   284,   285,   286,   287,   280,   281,   282, 
        283,   284,   285,   286,   287,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,   413, 
        414,   415,   416,    -1,    -1,    -1,    -1,   312,   280,   281, 
        282,   283,   284,   285,   286,   287,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,   126,   411, 
        412,   413,   414,   415,   416,    -1,    -1,    -1,    -1,    -1, 
         37,    -1,    -1,    -1,    -1,    42,    43,    44,    45,    -1, 
         47,   280,   281,   282,   283,   284,   285,   286,   287,   260, 
        312,    -1,    -1,    60,    61,    62,    63,    -1,    37,    -1, 
         -1,    -1,    -1,    42,    43,    91,    45,    -1,    47,   280, 
        281,   282,   283,   284,   285,   286,   287,    -1,    -1,    -1, 
         59,    60,    61,    62,    63,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,   413,   414, 
        415,   416,    -1,    -1,    37,    -1,    -1,   312,    41,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   126,    -1,   411, 
        412,   413,   414,   415,   416,    37,    -1,    -1,    -1,    -1, 
         42,    43,    -1,    45,    -1,    47,    91,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   126,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   312,    -1,   411,   412,   413,   414, 
        415,   416,    37,    -1,    -1,    -1,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1, 
         -1,    37,    -1,    -1,   126,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,   280,   281,   282,   283,   284,   285, 
        286,   287,    -1,    -1,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,   300,   301,   302,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   126,    -1,   411,   412,   312,   414,   415,   416,    -1, 
         -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
        126,    -1,    -1,   312,    -1,    -1,    60,    61,    62,    63, 
         -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,   280,   281,   282,   283,   284, 
        285,   286,   287,    -1,    37,    60,    61,    62,    63,    42, 
         43,    -1,    45,    -1,    47,   300,   301,   302,    -1,   312, 
         -1,    -1,    -1,    -1,    -1,    58,    -1,    60,    61,    62, 
         63,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   126,    -1,   411,   412,    -1,   414,   415,   416, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
        312,   126,   411,   412,    -1,   414,   415,   416,    -1,    37, 
         -1,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    60,    61,    62,    63,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         37,   414,   415,   416,    41,    42,    43,   312,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    60,    -1,    62,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,   126,   411, 
        412,    -1,   414,   415,   416,    -1,    37,    -1,    -1,    -1, 
         -1,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,   126, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,   312,   414, 
        415,   416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,   312,   414,   415, 
        416,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,   312, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,    93,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   312,    -1,   411,   412,    -1,   414, 
        415,   416,    -1,    -1,    -1,   125,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,    37,    -1,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    37,    -1,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         93,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   312,    -1,   411,   412,    -1,   414,   415,   416,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,   410,   411,   412,    -1,   414,   415,   416, 
        125,    37,    -1,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,   312,   414,   415,   416,    -1,    93,    -1,    -1, 
         -1,    37,    -1,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    37,    63,    -1,   125, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    37,    -1,    -1,    93,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    93,    -1,   404,   405,   406,   407,   408,   125, 
         -1,    -1,    -1,   413,   414,   415,   416,    -1,    37,   312, 
         -1,    -1,    41,    -1,    43,    44,    45,    -1,    -1,    -1, 
         93,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    37,    -1,   312,    -1,    41, 
         -1,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   125,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    37,    -1,    93,    -1,    41,    -1,    43,    44, 
         45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    93,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,   416,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,    -1,    -1,   125,    -1,    -1,   312,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,   416,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41, 
        125,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    37,    -1,    -1,    -1,    41,    58,    59,    44,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    37,    61,   312,    63,    41,    -1, 
         -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    93,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
        416,    -1,    -1,   125,    -1,    33,    -1,    -1,    42,   312, 
         93,    -1,    40,    47,    -1,    43,    -1,    45,    -1,   125, 
         -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    62,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         37,    -1,   125,    -1,    41,    -1,    -1,    44,   404,   405, 
        406,   407,   408,   312,    -1,    -1,    -1,   413,   414,   415, 
        416,    58,    59,    91,    61,    37,    -1,    -1,    -1,    41, 
         -1,    -1,    44,   404,   405,   406,   407,   408,    -1,    -1, 
        312,    -1,   413,   414,   415,   416,    58,    59,    -1,    61, 
         -1,    -1,   126,    -1,    -1,   123,    93,    -1,   126,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,   312,    -1,    -1, 
        413,   414,   415,   416,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1, 
         -1,    41,    -1,    -1,    44,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,   125,   413,   414,   415,   416,    58,    59, 
         -1,    61,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1, 
         -1,    44,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,   416,    58,    59,    -1,    61,    -1, 
        312,    37,    -1,    93,    -1,    41,    -1,    -1,    44,   404, 
        405,   406,   407,   408,    -1,    -1,   312,    -1,   413,   414, 
        415,   416,    58,    59,    -1,    61,    -1,    37,    -1,    -1, 
         93,    41,    -1,    -1,    44,   125,    -1,    -1,    -1,   312, 
         -1,    -1,   260,   261,   262,   263,   264,    -1,    58,    59, 
         -1,    61,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1, 
         37,    -1,   125,    -1,    41,    -1,    -1,    44,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    93,    61,    -1,    -1,    -1,    -1,   125, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,   416,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,   125,    93,   413,   414,   415, 
        416,    -1,   340,    -1,    -1,   312,    -1,    -1,   346,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,   416,    -1,    37,    -1,    -1,   125,    41, 
        312,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    37,    61, 
         -1,    -1,    41,    -1,    -1,    44,   400,   401,   402,   403, 
         -1,    -1,    -1,    -1,   402,   403,    -1,   411,   412,    58, 
         59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,   312,    -1,    93,    -1,   413,   414,   415,   416, 
         -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,   312, 
         -1,   413,   414,   415,   416,    -1,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         33,    -1,    -1,    -1,    -1,    -1,   312,    40,    -1,    -1, 
         43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1, 
         -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,   416,    -1,    91,    -1, 
         -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,   416,    -1,    -1,    -1,    -1,    -1,    -1, 
        123,    -1,   125,   126,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
        416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         33,    -1,    -1,   413,   414,   415,   416,    40,    -1,    -1, 
         43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        312,    -1,    -1,    -1,    -1,    -1,    59,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,   416, 
         -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1, 
         33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    91,    -1, 
         43,    33,    45,    -1,    -1,    -1,    -1,    -1,    40,    -1, 
         -1,    43,    -1,    45,    -1,    -1,    59,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        123,    -1,   125,   126,    -1,    -1,    -1,   260,   261,   262, 
        263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    91, 
         -1,   413,   414,   415,   416,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
        123,    -1,   125,   126,   413,   414,   415,   416,    -1,    -1, 
         -1,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342, 
        343,    -1,   345,   346,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    33,    -1,    -1,   360,   361,   362, 
        363,    40,   365,   366,    43,    -1,    45,   370,   371,   372, 
        373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         59,    -1,    -1,    -1,    -1,    -1,    -1,   260,   261,   262, 
        263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402, 
        403,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1, 
         -1,    43,    91,    45,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,   261,   262, 
        263,   264,    -1,    -1,   123,    -1,    -1,   126,   260,   261, 
        262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    91, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342, 
        343,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361,   362, 
        363,   123,   365,   366,   126,    -1,    -1,   370,   371,   372, 
        373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342, 
        343,    -1,    -1,   346,    -1,    -1,    -1,    -1,   340,   402, 
        403,    -1,    -1,    -1,   346,    -1,    -1,   360,   361,   362, 
        363,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372, 
        373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402, 
        403,   260,   261,   262,   263,   264,    -1,    -1,    -1,    -1, 
        402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,   261, 
        262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   340,   341,   342,   343,    -1,    -1,   346,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   360,   361,   362,   363,    -1,   365,   366,    -1,    -1, 
         -1,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341, 
        342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   402,   403,    -1,    -1,    -1,   360,   361, 
        362,   363,    -1,   365,   366,    -1,    -1,    -1,   370,    -1, 
        372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_DOTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 
      'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 
      'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 'T_CONTINUE', NULL, NULL, 
      NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      NULL, 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 
      'T_BOOLEAN_OR', 'T_BOOLEAN_AND', 'T_CONCAT_EQUAL', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 136 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 148 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 148 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 159 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 160 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 164 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 10:  #line 164 "grammar/xp.jay"
    {
      $yyVals[-4+$yyTop]->position= $p;
      $yyVals[-4+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 11:  #line 172 "grammar/xp.jay"
    { $yyVal= new ImportNode(); } break;

    case 12:  #line 173 "grammar/xp.jay"
    { $yyVal= new StaticImportNode(); } break;

    case 13:  #line 174 "grammar/xp.jay"
    { $yyVal= new NativeImportNode(); } break;

    case 16:  #line 180 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 18:  #line 185 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 19:  #line 191 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 20:  #line 191 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 21:  #line 200 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 22:  #line 200 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 23:  #line 209 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 24:  #line 209 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 25:  #line 220 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 26:  #line 221 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 27:  #line 225 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 28:  #line 226 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 29:  #line 230 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 30:  #line 231 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 31:  #line 235 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 236 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 33:  #line 240 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 34:  #line 241 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 35:  #line 245 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 36:  #line 246 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 247 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 38:  #line 251 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 39:  #line 252 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 40:  #line 253 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 41:  #line 257 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 42:  #line 258 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 43:  #line 262 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 44:  #line 262 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 45:  #line 265 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 46:  #line 265 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 47:  #line 275 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 48:  #line 282 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->modifiers= $yyVals[-5+$yyTop][0];
      $yyVals[-3+$yyTop]->annotations= $yyVals[-5+$yyTop][1];
      $yyVals[-3+$yyTop]->type= $yyVals[-4+$yyTop];
      $yyVals[-3+$yyTop]->handlers= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 49:  #line 292 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 50:  #line 293 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[-3+$yyTop], 'arguments' => $yyVals[-1+$yyTop]))); } break;

    case 51:  #line 297 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 52:  #line 298 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 53:  #line 302 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 54:  #line 303 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 55:  #line 304 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 56:  #line 308 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 57:  #line 309 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 58:  #line 315 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 59:  #line 315 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 60:  #line 325 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 61:  #line 325 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 62:  #line 333 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 63:  #line 333 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 64:  #line 346 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 65:  #line 347 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 66:  #line 351 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 67:  #line 352 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 68:  #line 356 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 69:  #line 360 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVals[-1+$yyTop] && $yyVal->parameters= array('default' => $yyVals[-1+$yyTop]);
    } break;

    case 70:  #line 365 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 71:  #line 373 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 72:  #line 374 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 73:  #line 378 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 74:  #line 382 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 75:  #line 383 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 76:  #line 387 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 77:  #line 388 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 78:  #line 392 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 79:  #line 393 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 80:  #line 397 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 81:  #line 398 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-3+$yyTop], 'vararg' => TRUE); } break;

    case 82:  #line 402 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 83:  #line 403 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 90:  #line 422 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 92:  #line 427 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 93:  #line 428 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 94:  #line 432 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 95:  #line 432 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 96:  #line 435 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 97:  #line 435 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 98:  #line 440 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 99:  #line 440 "grammar/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= array();
        foreach ($yyVals[-6+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->initialization[]= $stmt;
        }
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= array();
        foreach ($yyVals[-2+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->loop[]= $stmt;
        }
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 100:  #line 458 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 101:  #line 458 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 102:  #line 463 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 103:  #line 463 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 104:  #line 467 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 105:  #line 467 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 106:  #line 471 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 107:  #line 471 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 108:  #line 475 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 109:  #line 475 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 110:  #line 480 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 112:  #line 481 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 114:  #line 482 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 115:  #line 482 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 116:  #line 485 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->free= TRUE; } break;

    case 118:  #line 490 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 120:  #line 495 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 121:  #line 496 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 122:  #line 500 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 123:  #line 500 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 124:  #line 504 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 125:  #line 504 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 126:  #line 510 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 127:  #line 511 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 128:  #line 515 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 129:  #line 516 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 130:  #line 516 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 131:  #line 521 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 132:  #line 522 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 133:  #line 526 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 134:  #line 527 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 135:  #line 531 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 136:  #line 531 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 137:  #line 539 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 139:  #line 544 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 140:  #line 544 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 141:  #line 552 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 143:  #line 557 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 144:  #line 558 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 145:  #line 562 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 147:  #line 567 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 148:  #line 573 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 149:  #line 581 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ConstantNode()); $yyVal->value= $yyVals[0+$yyTop];
    } break;

    case 150:  #line 584 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 151:  #line 587 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new InvocationNode(array('name' => $yyVals[-3+$yyTop]))); 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 153:  #line 595 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 154:  #line 595 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 155:  #line 598 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 156:  #line 598 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 157:  #line 603 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 158:  #line 603 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyVals[-1+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 159:  #line 608 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 160:  #line 608 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 161:  #line 614 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 162:  #line 615 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 163:  #line 618 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 164:  #line 621 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 165:  #line 624 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 166:  #line 627 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 167:  #line 631 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 168:  #line 637 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 169:  #line 643 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 170:  #line 649 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 171:  #line 657 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ConstantNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 172:  #line 658 "grammar/xp.jay"
    { /* XXX class literal */ } break;

    case 173:  #line 659 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 174:  #line 659 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 175:  #line 663 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 176:  #line 668 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 177:  #line 669 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 178:  #line 670 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 179:  #line 671 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 180:  #line 675 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 182:  #line 680 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 183:  #line 681 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 184:  #line 685 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 185:  #line 689 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 690 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 691 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 188:  #line 692 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 189:  #line 693 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 190:  #line 694 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 191:  #line 695 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 192:  #line 699 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 193:  #line 700 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 194:  #line 701 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 195:  #line 702 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 196:  #line 703 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 197:  #line 704 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 198:  #line 708 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 199:  #line 709 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 200:  #line 710 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 201:  #line 711 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 202:  #line 712 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 203:  #line 713 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 204:  #line 717 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 205:  #line 718 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 206:  #line 719 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 207:  #line 720 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 208:  #line 721 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 209:  #line 722 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 210:  #line 726 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 211:  #line 727 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 212:  #line 732 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 215:  #line 738 "grammar/xp.jay"
    {  $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 216:  #line 742 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 217:  #line 742 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 218:  #line 745 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 219:  #line 748 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 220:  #line 748 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 223:  #line 762 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 224:  #line 763 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 225:  #line 767 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 226:  #line 771 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 227:  #line 772 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 229:  #line 777 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 230:  #line 781 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 231:  #line 782 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 232:  #line 788 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 233:  #line 789 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 234:  #line 793 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 235:  #line 794 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 236:  #line 798 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 237:  #line 799 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 238:  #line 800 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 239:  #line 801 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 240:  #line 802 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 241:  #line 803 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 242:  #line 804 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;

    case 243:  #line 805 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2074 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
