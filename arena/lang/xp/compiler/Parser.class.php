<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.StaticImportNode',
    'xp.compiler.ast.NativeImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.ConstantNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.InstanceOfNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.SwitchNode',
    'xp.compiler.ast.CaseNode',
    'xp.compiler.ast.DefaultNode',
    'xp.compiler.ast.BreakNode',
    'xp.compiler.ast.ContinueNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 63 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_MOD_EQUAL= 408;
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_INSTANCEOF= 312;
    const T_CONCAT_EQUAL= 416;
    const T_INC= 402;
    const T_DEC= 403;
    const T_SE= 401;
    const T_GE= 400;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_DOTS= 330;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_NEW= 346;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     9,     7, 
          8,     8,     8,    10,    10,    10,     4,     4,    13,     3, 
         17,     3,    19,     3,    14,    14,    15,    15,    20,    20, 
         22,    22,    16,    16,    23,    23,    23,    18,    18,    18, 
         27,    27,    29,    28,    30,    28,    24,    24,    34,    34, 
         35,    35,    37,    37,    37,    33,    33,    39,    25,    42, 
         25,    44,    25,    11,    11,    45,    45,    47,    47,    47, 
         41,    41,    38,    38,    36,    36,    50,    50,    40,    40, 
         43,    43,    43,    43,    43,    43,    43,    43,    26,    26, 
         51,    51,    53,    52,    54,    52,    57,    52,    59,    52, 
         60,    52,    61,    52,    62,    52,    64,    52,    66,    52, 
         67,    52,    68,    52,    52,    52,    63,    63,    69,    69, 
         71,    70,    72,    70,    55,    55,    56,    73,    56,    65, 
         65,    74,    74,    78,    77,    75,    75,    79,    76,    58, 
         58,    80,    80,    48,    48,    81,    81,    82,    82,    82, 
         31,    85,    31,    86,    31,    87,    31,    88,    31,    31, 
         31,    31,    31,    31,    31,    31,    31,    31,    31,    83, 
         83,    94,    83,    83,    83,    83,    83,    83,    95,    95, 
         49,    49,    96,    89,    89,    89,    89,    89,    89,    89, 
         90,    90,    90,    90,    90,    90,    91,    91,    91,    91, 
         91,    91,    92,    92,    92,    92,    92,    92,    93,    93, 
         84,    84,    97,    97,    99,    98,    98,   100,    98,    32, 
         32,    12,    12,   101,   102,   102,   103,   103,    21,    21, 
         46,    46,   104,   104,   105,   105,   105,   105,   105,   105, 
        105,   105, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     7, 
          0,     1,     1,     1,     1,     3,     1,     3,     0,     9, 
          0,     9,     0,     8,     0,     2,     0,     2,     0,     2, 
          0,     3,     2,     0,     1,     1,     4,     3,     1,     0, 
          1,     3,     0,     3,     0,     6,     5,     6,     1,     4, 
          1,     2,     2,     4,     4,     0,     2,     0,     9,     0, 
          8,     0,    10,     4,     1,     1,     3,     2,     5,     5, 
          1,     3,     0,     1,     1,     3,     3,     4,     0,     2, 
          1,     1,     1,     1,     1,     1,     2,     3,     0,     1, 
          1,     2,     0,     4,     0,     7,     0,    10,     0,     8, 
          0,     6,     0,     7,     0,     8,     0,     6,     0,     3, 
          0,     3,     0,     4,     2,     1,     0,     1,     1,     2, 
          0,     5,     0,     4,     1,     3,     0,     0,     3,     2, 
          1,     1,     2,     0,     9,     0,     1,     0,     5,     0, 
          1,     1,     3,     0,     1,     5,     6,     1,     1,     4, 
          1,     0,     3,     0,     4,     0,     5,     0,     6,     3, 
          1,     1,     1,     1,     1,     5,     3,     3,     3,     1, 
          3,     0,     4,     3,     1,     1,     1,     1,     0,     1, 
          1,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     2,     2,     2,     2,     2,     2,     2,     2, 
          0,     1,     1,     2,     0,     4,     2,     0,     6,     1, 
          1,     1,     4,     3,     1,     3,     1,     3,     1,     3, 
          0,     1,     1,     2,     1,     1,     1,     1,     1,     1, 
          1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   235,   237,   236,   238,   240,   239,   241,   242, 
          1,     0,    65,   232,     0,     8,     0,     4,    12,    13, 
          0,     0,     0,     0,    19,    23,    21,   234,    18,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    64,    67, 
          0,     0,     0,     0,    15,     0,     0,     0,     0,   172, 
          0,     0,     0,     0,     0,   178,   175,   177,   176,   152, 
        154,     0,     0,     0,     0,     0,     0,   151,   161,   162, 
        163,   164,   165,     0,     0,     0,     0,     0,     0,     0, 
          0,    10,     0,     0,     0,     0,     0,     0,     0,   158, 
          0,     0,     0,   180,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   209,   210,     0,     0,     0,     0, 
          0,     0,     0,    69,    70,     0,     0,     0,   220,   227, 
        221,     0,     0,    26,     0,     0,     0,    30,    34,     0, 
         16,     0,     0,   141,     0,   215,     0,   153,   212,     0, 
          0,     0,     0,   174,   160,   171,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   169,     0, 
          0,     0,     0,     0,     0,   191,   192,   193,   194,   195, 
        196,     0,   182,     0,     0,   223,     0,    28,    34,     0, 
          0,     0,     0,   173,     0,     0,     0,   214,     0,     0, 
        155,     0,   149,     0,     0,   228,   224,   226,     0,   230, 
          0,    24,     0,    33,    35,    36,     0,     0,     0,     0, 
        143,     0,     0,   218,     0,     0,     0,   157,     0,    20, 
          0,     0,     0,     0,     0,    22,    34,     0,   159,   216, 
          0,     0,     0,     0,    93,     0,   113,    97,   101,   103, 
         99,   109,   111,    95,   105,   116,     0,     0,    90,     0, 
         60,     0,     0,     0,     0,    34,    44,     0,     0,    42, 
          0,     0,   146,   150,     0,   107,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    37,   115,    92,     0,     0, 
         58,    85,    81,    82,    83,    84,     0,    86,     0,     0, 
          0,     0,     0,     0,   219,   147,     0,     0,     0,     0, 
          0,     0,   125,     0,     0,   110,   112,     0,     0,     0, 
         74,     0,     0,     0,     0,    87,     0,    62,     0,    47, 
          0,     0,     0,    32,     0,    94,     0,   114,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         50,     0,    88,     0,     0,    53,     0,    48,    52,    46, 
          0,     0,     0,   126,     0,     0,     0,     0,     0,    77, 
          0,     0,    76,     0,     0,     0,     0,   134,   138,   108, 
          0,   131,     0,     0,   102,     0,     0,     0,     0,    78, 
         80,    71,     0,    61,     0,     0,    54,    55,     0,     0, 
        130,   137,   133,     0,   104,     0,   128,    96,   121,   123, 
          0,   118,     0,     0,    59,     0,     0,     0,     0,   100, 
          0,     0,     0,   106,   120,    72,    63,     0,     0,     0, 
        129,     0,     0,     0,   139,    98,     0,   124,     0,   122, 
          0,     0,   135, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    21,    74,     4,     7,     8,    31,    11,    57, 
        223,   139,    44,    87,   146,   201,    46,   228,    45,    89, 
        148,   277,   224,   225,   226,   267,   229,   230,   244,   245, 
        268,   330,   311,   275,   342,   331,   343,   332,   335,   382, 
        404,   299,   309,   364,    33,    23,    34,    76,   104,   333, 
        269,   270,   285,   294,   324,   418,   288,   153,   291,   289, 
        290,   295,   421,   318,   390,   292,   293,   287,   422,   423, 
        432,   433,   431,   391,   411,   392,   393,   409,   410,   154, 
        163,   214,    78,   158,   101,   102,   167,   155,    79,    80, 
         81,    82,    83,    95,   105,    84,   159,   160,   206,   251, 
        141,   142,   143,    24,    25, 
    );
    protected static $yySindex = array(         -239,
          0,     0,  -217,   -85,     0,   506,     0,  -217,   148,   138, 
       -104,   135,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    14,     0,     0,   177,     0,   -85,     0,     0,     0, 
        -34,   -85,   125,   185,     0,     0,     0,     0,     0,   188, 
        196,   177,   135,   -85,   -85,   -85,   -36,  2540,     0,     0, 
        186,   -62,   -59,   -62,     0,   206,   198,  2540,  2540,     0, 
       2540,  2540,  2540,  2540,     8,     0,     0,     0,     0,     0, 
          0,  2540,  2540,  -155,   677,   234,   235,     0,     0,     0, 
          0,     0,     0,   239,   -46,   -85,   -21,   -85,   164,   -21, 
        -36,     0,    30,    30,  2540,   -53,   -53,   -53,   -53,     0, 
        137,   -85,   677,     0,   168,   734,    -3,  2540,  2540,  2540, 
       2540,  2540,  2540,  2540,  2540,  2540,  2540,   -85,  2540,  2540, 
       2540,  2540,  2540,  2540,     0,     0,  2540,  2540,  2540,  2540, 
       2540,  2540,  2540,     0,     0,  2540,   -11,   -17,     0,     0, 
          0,   240,   261,     0,   -85,   184,   264,     0,     0,   190, 
          0,   786,   216,     0,  2540,     0,    61,     0,     0,   137, 
        101,   290,   137,     0,     0,     0,  -230,   -31,   -31,  1356, 
        275,   -31,   -31,   -31,   -31,   -31,   -31,   -31,     0,   -31, 
         30,    30,   -53,   -53,   -53,     0,     0,     0,     0,     0, 
          0,  1356,     0,   -85,   241,     0,   -46,     0,     0,   -85, 
        207,    77,  2540,     0,   297,  2540,   303,     0,   253,  2540, 
          0,   311,     0,   137,  2540,     0,     0,     0,   320,     0, 
        229,     0,    93,     0,     0,     0,     0,   237,   295,   319, 
          0,   137,   262,     0,   242,   323,  2540,     0,   -31,     0, 
       2765,   169,  -215,   243,   328,     0,     0,    77,     0,     0, 
       2540,  2540,   243,   332,     0,   252,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   251,   808,     0,  2765, 
          0,   113,    16,   317,   263,     0,     0,  2540,   611,     0, 
        346,   270,     0,     0,  2540,     0,  2540,   356,   357,  2930, 
        358,   340,   342,   362,   363,     0,     0,     0,   -85,   -85, 
          0,     0,     0,     0,     0,     0,   -83,     0,   364,  2540, 
        353,   153,   447,   842,     0,     0,   355,  2765,   939,  2540, 
       2540,  2765,     0,    59,    82,     0,     0,  2540,  2540,  -278, 
          0,   384,   382,   335,   -85,     0,   336,     0,  1356,     0, 
       -105,   309,   153,     0,   243,     0,   310,     0,   377,  1069, 
        321,   406,   404,    86,  1110,  1222,   424,   317,   131,   -85, 
          0,   433,     0,   -85,   443,     0,  2765,     0,     0,     0, 
       -288,  2540,  2930,     0,  2540,  2540,  2930,   375,   145,     0, 
        -85,   -24,     0,   131,   445,   459,   376,     0,     0,     0, 
        157,     0,   159,   446,     0,  1249,  1323,   133,  -131,     0, 
          0,     0,  2765,     0,   -24,   131,     0,     0,   466,   393, 
          0,     0,     0,  2540,     0,  2930,     0,     0,     0,     0, 
        399,     0,  -131,   400,     0,   -24,   -85,  2765,   485,     0, 
       2930,  2540,   469,     0,     0,     0,     0,   189,   403,  2930, 
          0,  1271,  2765,   489,     0,     0,  2765,     0,   410,     0, 
       2765,   409,     0, 
    );
    protected static $yyRindex= array(          195,
          0,     0,   380,     0,     0,    18,     0,   557,   107,     0, 
        276,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    24,     0,     0,     0,     0,     0, 
          0,     0,     0,   442,     0,     0,     0,     0,     0,     0, 
        127,    40,     0,     0,     0,     0,     0,   496,     0,     0, 
        144,  -110,   416,  -110,     0,   481,     0,     0,     0,     0, 
          0,     0,     0,     0,   551,     0,     0,     0,     0,     0, 
          0,   417,     0,     0,   500,     0,     0,     0,     0,     0, 
          0,     0,     0,   -19,     0,     0,   420,     0,     0,   420, 
          0,     0,  1928,  1956,   461,  1394,  1494,  1521,  1651,     0, 
        610,     0,     0,     0,     0,     0,  -177,     0,     0,   504, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   -29,     0,     0, 
          0,     0,   501,     0,     0,     0,   -22,     0,     0,     0, 
          0,    53,     0,     0,   523,     0,     0,     0,     0,   648, 
        541,     0,   610,     0,     0,     0,     0,  1791,  1831,    -8, 
          0,  2056,  2087,  2116,  2213,  2229,  2359,  2372,     0,  2446, 
       1979,  2033,  1778,  1818,  1903,     0,     0,     0,     0,     0, 
          0,    47,     0,     0,     0,     0,     0,     0,     0,     0, 
        329,   465,     0,     0,     0,   498,   219,     0,     0,   523, 
          0,   347,     0,   610,     0,     0,     0,     0,   329,     0, 
        293,     0,     0,     0,     0,     0,   181,     0,   474,   -25, 
          0,   610,     0,     0,   568,     0,   523,     0,  2499,     0, 
        491,   -52,     0,   -12,     0,     0,     0,     0,     0,     0, 
        523,   493,   524,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,  -124, 
          0,   505,     0,   570,     0,     0,     0,     0,  -100,     0, 
          0,     0,     0,     0,   577,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   596,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   329,     0,     0,     0,     0,   491,     0,   579, 
          0,   491,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   123,     0,   596,     0,     0,     0,   230,     0, 
          0,     0,   514,     0,   -12,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    52,    50,     0, 
          0,     0,     0,   596,     0,     0,   491,     0,     0,     0, 
          0,   579,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    50,     0,     0,     0,     0,     0,     0, 
       2606,     0,  2556,     0,     0,     0,     0,  2671,   515,     0, 
          0,     0,   491,     0,     0,    50,     0,     0,     0,     0, 
          0,     0,     0,   523,     0,     0,     0,     0,     0,     0, 
          0,     0,   516,     0,     0,     0,     0,   491,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,  -101,     0,     0,     0,  -101,     0,     0,     0, 
        491,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   634,     0,     0,     0,   552, 
        639,   -42,     0,   592,   566,  -172,     0,     0,     0,     0, 
       -140,  -234,     0,     0,     0,   544,   426,     0,     0,     0, 
          7,   -64,   300,     0,   341,  -274,     0,  -286,     0,  -317, 
       -231,     0,     0,     0,   632,   636,     0,   -74,   -28,   372, 
        413,  -193,     0,     0,   -16,     0,     0,     2,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   265,     0, 
          0,     0,     0,   294,     0,   305,     0,     0,     0,   483, 
          0,     0,     0,    13,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   534,     0,     0,     0, 
          0,   502,     0,   672,     0, 
    );
    protected static $yyTable = array(10,
         91,    52,    53,    54,   198,    55,   127,    17,   128,   336, 
        122,   120,    25,   121,   222,   123,   137,   367,   283,    77, 
        140,   181,    39,    89,    38,   334,   219,    41,   127,   212, 
        128,    31,   222,    41,   402,   171,   229,   162,    17,    51, 
         51,    51,    85,   144,   272,   147,    31,   100,   362,   145, 
        145,   357,   302,    27,    75,   388,   389,   305,   303,   220, 
        304,   358,   306,     1,    93,    94,   405,    96,    97,    98, 
         99,   122,   124,   195,   279,   179,   123,   385,   103,   106, 
        138,    51,   156,    51,   145,   383,     5,   183,   426,   127, 
        183,   128,    56,   142,   124,    56,   323,   161,   403,    41, 
        229,   152,   147,   313,   273,   181,   307,   193,    79,   213, 
        370,   142,    31,    51,   168,   169,   170,   172,   173,   174, 
        175,   176,   177,   178,   274,   180,   181,   182,   183,   184, 
        185,   233,   140,   186,   187,   188,   189,   190,   191,   192, 
         51,   308,   103,    17,    56,   142,    17,    17,    17,    17, 
         17,    17,   301,    17,   365,   124,   205,   147,   243,   231, 
         85,   152,   156,    75,    17,    17,    17,    17,    17,    17, 
         68,   183,    79,   425,     9,   211,     9,   142,    29,   323, 
        222,    30,   157,   323,   222,   222,   222,   222,   222,   216, 
        222,   209,   138,    27,   437,    51,    28,    17,    32,    17, 
         25,   222,   222,   300,   222,   222,   222,    17,   271,   152, 
        317,   236,   170,     9,    27,    75,   152,    42,   138,    68, 
         45,   239,   323,    56,    43,    40,   238,   156,    43,    17, 
        222,    17,    17,    47,   366,    48,   222,   323,   254,    43, 
        401,   419,   420,   152,   249,    85,   323,    86,    91,    91, 
         88,    91,   281,   282,   107,   217,    92,   152,   152,   217, 
        217,   217,   217,   217,   217,   217,   222,    17,   222,   222, 
         57,    89,    89,    57,   134,   135,   217,   217,   217,   217, 
        217,   217,   136,   233,   314,     2,   149,    17,    57,   145, 
        222,   170,   164,   319,   138,   138,   166,    12,   194,   231, 
        222,   196,   138,    43,   197,    43,   199,   200,   204,   217, 
        222,   217,   202,    35,    36,    37,   339,   231,   231,   231, 
        207,   349,    57,   233,   233,   233,   152,   350,   352,   210, 
        138,   222,   215,   217,   355,   356,   227,   232,   147,   231, 
        231,   231,   234,   217,   217,   235,   130,   129,   125,   126, 
        237,   241,   242,   247,   250,   138,   395,   131,   132,   138, 
        398,   246,   248,   253,   252,   276,    17,   278,   130,   129, 
        125,   126,   284,   394,   286,   296,    51,   310,   152,   131, 
        132,   396,   397,   148,   438,   312,   315,   148,   148,   148, 
        148,   148,   148,   148,   316,   320,   321,   325,   326,   430, 
        327,   328,   329,   338,   148,   148,   148,   148,   148,   148, 
         12,   340,   341,   346,   441,   429,    17,    17,    17,   353, 
        152,   354,    51,   446,   359,   360,    17,   361,   363,   130, 
        129,   125,   126,   368,   371,   372,    17,   148,   442,   148, 
        131,   132,   109,   375,   240,   374,    17,   122,   120,   376, 
        121,   381,   123,   222,   222,   222,    13,    14,    15,    16, 
         17,    18,    19,    20,   297,   127,   108,   128,   110,   379, 
          5,   148,   148,   384,     2,     2,     2,     2,     2,     2, 
          2,     2,   386,   222,   400,   406,    13,    14,    15,   221, 
         17,    18,    19,    20,     2,     2,     2,   399,     2,   407, 
        408,   389,   388,   417,   414,   427,    17,    17,    17,    17, 
         17,    17,    17,    17,    17,   428,    17,    17,    17,    17, 
         17,    17,    17,   434,   436,   440,   443,   445,   444,   449, 
        217,   124,   451,   453,    66,    11,   144,    12,    29,    14, 
        145,   179,    27,   222,   222,   222,   222,   222,   222,   222, 
        222,   222,   238,   140,   222,   222,   222,   222,   222,   222, 
         31,   144,   225,   140,    31,    31,    31,    31,    31,    31, 
         31,   344,   238,   238,   238,   238,   238,   238,   238,   238, 
        222,    31,    31,    31,    31,    31,    31,   170,   231,    40, 
        144,   170,   170,   170,   170,   170,    12,   170,    39,    13, 
         14,    15,   221,    17,    18,    19,    20,   224,   170,   170, 
        170,   170,   170,   170,    31,    89,    31,   140,   217,   217, 
        217,   217,   217,   217,   217,   217,   217,    49,    56,   217, 
        217,   217,   217,   217,   217,   144,    73,   140,    51,   117, 
        119,    26,   151,   170,    22,    90,   211,     7,    31,    31, 
        211,   211,   211,   211,   211,   150,   211,   380,   148,     5, 
          5,     5,     5,     5,     5,     5,     5,   211,   211,   211, 
        211,   211,   211,   280,    50,   170,   170,    49,   337,     5, 
          5,     5,   298,   369,   213,   231,   413,   435,   213,   213, 
        213,   213,   213,   208,   213,   412,    38,     0,   218,     0, 
          0,    12,   211,     0,     0,   213,   213,   213,   213,   213, 
        213,     0,     0,   109,     0,     0,     0,   118,   122,   120, 
          0,   121,     0,   123,     0,     0,    13,    14,    15,   221, 
         17,    18,    19,    20,   211,   211,   127,   108,   128,   110, 
        213,     0,     0,     0,     0,     0,   148,   148,   148,   148, 
        148,   148,   148,   148,   148,     0,     0,   148,   148,   148, 
        148,   148,   148,     0,     0,     0,     0,     0,     0,     0, 
        109,     0,   213,   213,   165,   122,   120,     0,   121,     0, 
        123,     0,     0,     0,     0,    13,    14,    15,    16,    17, 
         18,    19,    20,   127,   108,   128,   110,     0,     0,     0, 
          0,     0,   124,     0,     0,   130,   129,   125,   126,   111, 
        112,   113,   114,   115,     0,     0,   131,   132,   133,   116, 
        117,   119,   109,     0,     0,     0,     0,   122,   120,   203, 
        121,     0,   123,     0,     0,    31,     7,     7,     7,     7, 
          7,     7,     7,     7,   109,   127,   108,   128,   110,   122, 
        120,     0,   121,     0,   123,     0,     7,     7,     7,   124, 
          0,   347,   170,     0,     0,   351,   297,   127,   108,   128, 
        110,     0,     0,     0,     0,     0,     0,     0,   109,     0, 
          0,     0,   345,   122,   120,     0,   121,     0,   123,     0, 
         13,    14,    15,   221,    17,    18,    19,    20,     0,     0, 
          0,   127,   108,   128,   110,     0,     0,     0,     0,     0, 
        387,   124,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   211,     0,    31,    31,    31,    31,    31,    31,    31, 
         31,    31,     0,   124,    31,    31,    31,    31,    31,    31, 
          0,     0,     0,     0,     0,     0,   424,     0,     0,     0, 
        170,   170,   170,   170,   170,   170,   170,   170,   170,   213, 
         17,   170,   170,   170,   170,   170,   170,   124,     0,     0, 
          0,   439,     0,     0,     0,   109,     0,     0,     0,     0, 
        122,   120,     0,   121,     0,   123,   448,     0,   118,     0, 
        450,     0,     0,     0,   452,     0,     0,   348,   127,   108, 
        128,   110,     0,     0,     0,     0,     0,     0,     0,   211, 
        211,   211,   211,   211,   211,   211,   211,   211,     0,     0, 
        211,   211,   211,   211,   211,   211,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   118,     0,   213,   213,   213, 
        213,   213,   213,   213,   213,   213,     0,     0,   213,   213, 
        213,   213,   213,   213,   124,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   130,   129,   125,   126, 
        111,   112,   113,   114,   115,     0,     0,   131,   132,   133, 
        116,   117,   119,     0,     0,     0,     0,   118,     0,     0, 
          0,     0,     0,     0,     0,   109,     0,     0,     0,   373, 
        122,   120,     0,   121,     0,   123,     0,     0,     0,   118, 
          0,     0,     0,     0,     0,     0,     0,     0,   127,   108, 
        128,   110,     0,   130,   129,   125,   126,   111,   112,   113, 
        114,   115,     0,     0,   131,   132,   109,   116,   117,   119, 
        377,   122,   120,   118,   121,     0,   123,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   127, 
        108,   128,   110,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   130,   129,   125,   126,   111, 
        112,   113,   114,   115,   124,     0,   131,   132,     0,   116, 
        117,   119,     0,     0,     0,     0,     0,   130,   129,   125, 
        126,   111,   112,   113,   114,   115,     0,     0,   131,   132, 
          0,   116,   117,   119,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   124,     0,     0,     0,     0, 
          0,   130,   129,   125,   126,   111,   112,   113,   114,   115, 
        118,     0,   131,   132,     0,   116,   117,   119,   109,     0, 
          0,     0,   378,   122,   120,     0,   121,     0,   123,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   127,   108,   128,   110,   109,     0,     0,     0,   415, 
        122,   120,     0,   121,     0,   123,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   109,   127,   108, 
        128,   110,   122,   120,     0,   121,     0,   123,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   447,     0, 
        127,   108,   128,   110,     0,     0,     0,     0,   130,   129, 
        125,   126,   111,   112,   113,   114,   115,   124,     0,   131, 
        132,     0,   116,   117,   119,     0,     0,     0,     0,   109, 
          0,     0,     0,   416,   122,   120,     0,   121,     0,   123, 
          0,     0,     0,     0,   124,     0,     0,     0,     0,     0, 
        118,     0,   127,   108,   128,   110,     0,     0,     0,     0, 
          0,     0,   109,     0,     0,     0,   124,   122,   120,     0, 
        121,     0,   123,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   127,   108,   128,   110,     0, 
          0,   118,     0,     0,     0,     0,     0,     0,     0,     0, 
        203,     0,     0,     0,   203,   203,   203,   203,   203,     0, 
        203,     0,     0,     0,     0,     0,     0,     0,   124,     0, 
          0,   203,   203,     0,   203,     0,   203,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   130,   129, 
        125,   126,   111,   112,   113,   114,   115,     0,     0,   131, 
        132,   124,   116,   117,   119,     0,   203,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   130, 
        129,   125,   126,   111,   112,   113,   114,   115,   203,     0, 
        131,   132,     0,   116,   117,   119,     0,     0,     0,     0, 
        204,     0,     0,   118,   204,   204,   204,   204,   204,     0, 
        204,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   204,   204,     0,   204,     0,   204,   207,     0,     0, 
        118,   207,   207,   207,   207,   207,     0,   207,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   207,   207, 
          0,   207,   118,   207,     0,     0,   204,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   207,     0,     0,     0,     0,   204,     0, 
          0,   130,   129,   125,   126,   111,   112,   113,   114,   115, 
          0,     0,   131,   132,   118,   116,   117,   119,     0,     0, 
          0,     0,     0,     0,     0,   207,     0,     0,   130,   129, 
        125,   126,   111,   112,   113,   114,   115,     0,     0,   131, 
        132,     0,   116,   117,   119,     0,     0,   118,     0,     0, 
        130,   129,   125,   126,   111,   112,   113,   114,   115,     0, 
          0,   131,   132,     0,   116,   117,   119,   208,     0,     0, 
          0,   208,   208,   208,   208,   208,     0,   208,     0,     0, 
          0,     0,     0,     0,     0,   203,     0,     0,   208,   208, 
          0,   208,     0,   208,     0,     0,     0,     0,     0,     0, 
          0,     0,   130,   129,   125,   126,   111,   112,   113,   114, 
        115,     0,     0,   131,   132,     0,   116,   117,   119,     0, 
          0,     0,     0,   208,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   130,   129,   125,   126,   111, 
        112,   113,   114,   115,     0,     0,   131,   132,     0,   116, 
        117,   119,     0,     0,     0,   208,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   203,   203,   203, 
        203,   203,     0,     0,     0,   204,   203,   203,   203,   203, 
          0,     0,     0,     0,   199,     0,     0,     0,   199,   199, 
        199,   199,   199,     0,   199,     0,     0,   184,     0,     0, 
          0,   184,   207,     0,   184,   199,   199,     0,   199,     0, 
        199,     0,     0,     0,     0,     0,     0,     0,   184,   184, 
          0,   184,     0,   184,   200,     0,     0,     0,   200,   200, 
        200,   200,   200,     0,   200,     0,     0,   201,     0,     0, 
        199,   201,     0,     0,   201,   200,   200,     0,   200,     0, 
        200,     0,     0,   184,     0,     0,     0,     0,   201,   201, 
          0,   201,     0,   201,     0,     0,     0,   204,   204,   204, 
        204,   204,   199,     0,     0,     0,   204,   204,   204,   204, 
        200,     0,     0,     0,     0,   184,     0,     0,     0,     0, 
          0,     0,     0,   201,   207,   207,   207,   207,   207,     0, 
          0,     0,     0,   207,   207,   207,   207,     0,     0,   202, 
          0,     0,   200,   202,   202,   202,   202,   202,     0,   202, 
          0,     0,     0,     0,     0,   201,     0,     0,     0,     0, 
        202,   202,   208,   202,   205,   202,     0,     0,   205,     0, 
        205,   205,   205,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   205,   205,     0,   205,     0, 
        205,     0,   206,     0,     0,   202,   206,     0,   206,   206, 
        206,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   206,   206,   197,   206,     0,   206,   197, 
        205,   197,   197,   197,     0,     0,     0,   202,     0,     0, 
          0,     0,     0,     0,     0,     0,   197,   197,     0,   197, 
          0,   197,     0,     0,     0,     0,     0,     0,   206,     0, 
          0,     0,   205,     0,   208,   208,   208,   208,   208,     0, 
          0,     0,     0,   208,   208,   208,   208,     0,     0,   198, 
          0,   197,     0,   198,     0,   198,   198,   198,     0,     0, 
        206,     0,     0,     0,     0,     0,     0,     0,     0,   199, 
        198,   198,   185,   198,     0,   198,   185,     0,     0,   185, 
          0,     0,   184,   197,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   185,   185,     0,   185,     0,   185,     0, 
          0,     0,     0,   186,     0,   198,     0,   186,     0,   200, 
        186,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   201,     0,   186,   186,     0,   186,   185,   186, 
          0,     0,   187,     0,     0,     0,   187,   198,     0,   187, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   187,   187,     0,   187,     0,   187,   186, 
        185,   199,   199,   199,   199,   199,     0,     0,     0,     0, 
        199,   199,   199,   199,   184,   184,   184,   184,   184,     0, 
          0,     0,     0,   184,   184,   184,   184,     0,   187,     0, 
          0,   186,     0,     0,   202,     0,     0,     0,     0,     0, 
          0,   200,   200,   200,   200,   200,     0,     0,     0,     0, 
        200,   200,   200,   200,   201,   201,   201,   201,   201,   205, 
        187,     0,     0,   201,   201,   201,   201,     0,     0,   188, 
          0,     0,     0,   188,     0,     0,   188,     0,     0,     0, 
          0,     0,     0,     0,     0,   189,     0,   206,     0,   189, 
        188,   188,   189,   188,     0,   188,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   189,   189,     0,   189, 
        197,   189,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   188,   202,   202,   202,   202, 
        202,     0,     0,     0,     0,   202,   202,   202,   202,     0, 
          0,   189,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   205,   205,   205,   205,   205,     0,   188,     0,     0, 
        205,   205,   205,   205,   198,     0,     0,     0,     0,     0, 
          0,     0,     0,   189,     0,     0,     0,     0,     0,   206, 
        206,   206,   206,   206,     0,     0,     0,   185,   206,   206, 
        206,   206,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   197,   197,   197,   197,   197,     0,     0,     0, 
          0,   197,   197,   197,   197,   167,     0,     0,   186,   167, 
          0,     0,   167,     0,     0,     0,     0,     0,   168,     0, 
          0,     0,   168,     0,     0,   168,   167,   167,     0,   167, 
          0,   167,     0,     0,     0,     0,     0,   187,     0,   168, 
        168,     0,   168,     0,   168,     0,   198,   198,   198,   198, 
        198,     0,     0,     0,     0,   198,   198,   198,   198,     0, 
          0,   167,     0,     0,     0,     0,     0,     0,     0,   185, 
        185,   185,   185,   185,   168,     0,     0,     0,   185,   185, 
        185,   185,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   190,   167,     0,     0,   190,     0,     0,   190, 
        186,   186,   186,   186,   186,     0,   168,     0,     0,   186, 
        186,   186,   186,   190,   190,     0,   190,     0,   190,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   187, 
        187,   187,   187,   187,   188,     0,     0,     0,   187,   187, 
        187,   187,     0,     0,     0,   166,     0,     0,   190,   166, 
        189,     0,   166,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   166,   166,     0,   166, 
          0,   166,     0,     0,     0,     0,     0,     0,     0,     0, 
        190,     0,    61,     0,     0,     0,     0,     0,     0,    73, 
          0,     0,    58,     0,    59,     0,     0,     0,   132,     0, 
          0,   166,     0,     0,     0,   132,     0,     0,   132,     0, 
        132,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   132,     0,   188,   188,   188,   188, 
        188,     0,     0,   166,     0,   188,   188,   188,   188,     0, 
         60,     0,   189,   189,   189,   189,   189,     0,   136,     0, 
          0,   189,   189,   189,   189,   136,   132,     0,   136,     0, 
        136,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    72,     0,   136,    62,     0,     0,     0,     0, 
        167,     0,     0,     0,     0,     0,     0,     0,   132,     0, 
        132,   132,     0,   168,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   136,     0,     0,     0, 
          0,     0,     0,   127,     0,     0,     0,     0,     0,     0, 
        127,     0,     0,   127,     0,   127,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   136,   127, 
        136,   136,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   190,     0,     0, 
          0,   127,   167,   167,   167,   167,   167,     0,     0,     0, 
          0,   167,   167,   167,   167,   168,   168,   168,   168,   168, 
          0,     0,     0,     0,   168,   168,   168,   168,     0,     0, 
          0,     0,     0,   127,     0,   127,   127,    61,     0,    65, 
         66,    67,    68,    69,    73,     0,     0,    58,     0,    59, 
        166,     0,     0,     0,     0,   132,   132,   132,   132,   132, 
          0,     0,     0,   266,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   190, 
        190,   190,   190,   190,     0,    60,     0,     0,   190,   190, 
        190,   190,     0,     0,     0,   136,   136,   136,   136,   136, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    70, 
          0,     0,     0,     0,     0,    71,     0,    72,     0,     0, 
         62,     0,     0,     0,     0,   132,   132,   132,   132,     0, 
        132,   132,   166,   166,   166,   166,   166,     0,     0,     0, 
          0,   166,   166,   166,   166,   132,   132,   132,   132,     0, 
        132,   132,     0,     0,     0,   132,   132,   132,   132,   132, 
        127,   127,   127,   127,   127,     0,     0,     0,     0,     0, 
          0,    63,    64,     0,     0,   136,   136,   136,   136,     0, 
          0,   136,     0,     0,     0,     0,     0,   132,   132,     0, 
          0,     0,    61,     0,     0,   136,   136,   136,   136,    73, 
        136,   136,    58,     0,    59,   136,   136,   136,   136,   136, 
          0,     0,     0,     0,     0,     0,     0,     0,   266,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   136,   136,     0, 
        127,   127,   127,   127,     0,     0,   127,     0,     0,     0, 
         60,     0,     0,     0,    65,    66,    67,    68,    69,     0, 
        127,   127,   127,   127,     0,   127,   127,     0,     0,     0, 
        127,     0,   127,   127,   127,     0,     0,     0,     0,     0, 
          0,     0,   322,     0,     0,    62,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   127,   127,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    70,   255,   256,   257,     0,     0, 
         71,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   258,   259,   260,   261,     0,   262, 
        263,     0,     0,     0,   264,     0,   265,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    63,    64,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    65, 
         66,    67,    68,    69,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    70, 
        255,   256,   257,     0,     0,    71,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   258, 
        259,   260,   261,     0,   262,   263,     0,     0,     0,   264, 
          0,   265,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    63,    64, 
    );
    protected static $yyCheck = array(4,
        125,    44,    45,    46,   145,    42,    60,    60,    62,    93, 
         42,    43,   123,    45,    44,    47,    63,   123,   253,    48, 
         85,    41,    27,   125,   125,   300,   199,    32,    60,   260, 
         62,    44,    62,    59,    59,   110,    59,   102,    91,    44, 
         45,    46,    60,    86,   260,    88,    59,    40,   335,    58, 
         59,   330,    37,    46,    48,   344,   345,    42,    43,   200, 
         45,   340,    47,   303,    58,    59,   384,    61,    62,    63, 
         64,    42,   126,    91,   247,   118,    47,   364,    72,    73, 
         85,    86,   260,    88,    93,   360,   304,    41,   406,    60, 
         44,    62,    41,    41,   126,    44,   290,   102,   123,   125, 
        123,    95,   145,   276,   320,   125,    91,   136,    59,   340, 
        345,    59,   125,   118,   108,   109,   110,   111,   112,   113, 
        114,   115,   116,   117,   340,   119,   120,   121,   122,   123, 
        124,   206,   197,   127,   128,   129,   130,   131,   132,   133, 
        145,   126,   136,    37,    93,    93,    40,    41,    42,    43, 
         44,    45,    40,    47,   260,   126,   155,   200,   223,   260, 
         60,   155,   340,    41,    58,    59,    60,    61,    62,    63, 
         44,   125,   123,   405,   260,   163,   260,   125,   283,   373, 
         37,   286,    46,   377,    41,    42,    43,    44,    45,   194, 
         47,    91,   197,    46,   426,   200,    59,    91,    64,    93, 
        311,    58,    59,    91,    61,    62,    63,   260,    40,   203, 
        285,   210,   206,   260,    46,    93,   210,    93,   223,    93, 
         40,   215,   416,   260,    44,   260,   214,    91,    44,   123, 
        260,   125,   126,    46,   340,    40,    93,   431,   237,    59, 
        381,   373,   374,   237,   232,    60,   440,   310,   373,   374, 
        310,    46,   251,   252,   410,    37,    59,   251,   252,    41, 
         42,    43,    44,    45,    46,    47,   123,   320,   125,   126, 
         41,   373,   374,    44,    41,    41,    58,    59,    60,    61, 
         62,    63,    44,   260,   278,    91,   123,   340,    59,   311, 
        320,   285,   125,   287,   299,   300,   300,    91,   310,   260, 
        330,    62,   307,   123,    44,   125,   123,    44,    93,    91, 
        340,    93,   123,   300,   301,   302,   310,   300,   301,   302, 
        260,   320,    93,   300,   301,   302,   320,   321,   322,    40, 
        335,   125,    58,    93,   328,   329,   260,    41,   381,   300, 
        301,   302,    40,   125,   126,    93,   400,   401,   402,   403, 
         40,   123,   260,    59,    93,   360,   373,   411,   412,   364, 
        377,   125,    44,    41,   123,   123,   260,    40,   400,   401, 
        402,   403,    41,   372,   123,   125,   381,    61,   372,   411, 
        412,   375,   376,    37,   427,   123,    41,    41,    42,    43, 
         44,    45,    46,    47,   125,    40,    40,    40,    59,   416, 
         59,    40,    40,    40,    58,    59,    60,    61,    62,    63, 
         91,    59,   260,    59,   431,   414,   310,   311,   312,   361, 
        414,   340,   427,   440,    41,    44,   320,    93,    93,   400, 
        401,   402,   403,   125,   125,    59,   330,    91,   432,    93, 
        411,   412,    37,    40,   125,   125,   340,    42,    43,   364, 
         45,   321,    47,   310,   311,   312,   280,   281,   282,   283, 
        284,   285,   286,   287,    59,    60,    61,    62,    63,    46, 
         91,   125,   126,    41,   280,   281,   282,   283,   284,   285, 
        286,   287,    40,   340,   340,    41,   280,   281,   282,   283, 
        284,   285,   286,   287,   300,   301,   302,   123,   304,    41, 
        125,   345,   344,   371,    59,    40,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   123,   410,   411,   412,   413, 
        414,   415,   416,   125,   125,    41,    58,   125,   340,    41, 
        312,   126,   123,   125,    93,   260,    41,    91,   123,    59, 
         41,   125,   123,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   260,    93,   411,   412,   413,   414,   415,   416, 
         37,    58,    62,    41,    41,    42,    43,    44,    45,    46, 
         47,   125,   280,   281,   282,   283,   284,   285,   286,   287, 
         40,    58,    59,    60,    61,    62,    63,    37,   260,   125, 
         93,    41,    42,    43,    44,    45,    91,    47,   125,   280, 
        281,   282,   283,   284,   285,   286,   287,    40,    58,    59, 
         60,    61,    62,    63,    91,   125,    93,   125,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   123,    59,   411, 
        412,   413,   414,   415,   416,    59,    41,    59,   125,   125, 
        125,     8,    91,    93,     6,    54,    37,    91,   125,   126, 
         41,    42,    43,    44,    45,    90,    47,   358,   312,   280, 
        281,   282,   283,   284,   285,   286,   287,    58,    59,    60, 
         61,    62,    63,   248,    43,   125,   126,    42,   307,   300, 
        301,   302,   270,   343,    37,   203,   393,   423,    41,    42, 
         43,    44,    45,   160,    47,   391,    25,    -1,   197,    -1, 
         -1,    91,    93,    -1,    -1,    58,    59,    60,    61,    62, 
         63,    -1,    -1,    37,    -1,    -1,    -1,   312,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,   280,   281,   282,   283, 
        284,   285,   286,   287,   125,   126,    60,    61,    62,    63, 
         93,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,   413, 
        414,   415,   416,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         37,    -1,   125,   126,    41,    42,    43,    -1,    45,    -1, 
         47,    -1,    -1,    -1,    -1,   280,   281,   282,   283,   284, 
        285,   286,   287,    60,    61,    62,    63,    -1,    -1,    -1, 
         -1,    -1,   126,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,   413,   414, 
        415,   416,    37,    -1,    -1,    -1,    -1,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,   312,   280,   281,   282,   283, 
        284,   285,   286,   287,    37,    60,    61,    62,    63,    42, 
         43,    -1,    45,    -1,    47,    -1,   300,   301,   302,   126, 
         -1,   318,   312,    -1,    -1,   322,    59,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1, 
         -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    -1, 
        280,   281,   282,   283,   284,   285,   286,   287,    -1,    -1, 
         -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1, 
        367,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   312,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,   126,   411,   412,   413,   414,   415,   416, 
         -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   312, 
        410,   411,   412,   413,   414,   415,   416,   126,    -1,    -1, 
         -1,   428,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1, 
         42,    43,    -1,    45,    -1,    47,   443,    -1,   312,    -1, 
        447,    -1,    -1,    -1,   451,    -1,    -1,    59,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,   413,   414,   415,   416,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   312,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
        413,   414,   415,   416,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,   413, 
        414,   415,   416,    -1,    -1,    -1,    -1,   312,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,   312, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61, 
         62,    63,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    37,   414,   415,   416, 
         41,    42,    43,   312,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   126,    -1,   411,   412,    -1,   414, 
        415,   416,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
        312,    -1,   411,   412,    -1,   414,   415,   416,    37,    -1, 
         -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    60,    61,    62,    63,    37,    -1,    -1,    -1,    41, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    60,    61, 
         62,    63,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    -1, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   126,    -1,   411, 
        412,    -1,   414,   415,   416,    -1,    -1,    -1,    -1,    37, 
         -1,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1, 
        312,    -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    37,    -1,    -1,    -1,   126,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         37,    -1,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,   126,   414,   415,   416,    -1,    93,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   125,    -1, 
        411,   412,    -1,   414,   415,   416,    -1,    -1,    -1,    -1, 
         37,    -1,    -1,   312,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    37,    -1,    -1, 
        312,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,   312,    63,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,   312,   414,   415,   416,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,    -1,    -1,   312,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,    37,    -1,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,    -1, 
         -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,   312,   413,   414,   415,   416, 
         -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    37,    -1,    -1, 
         -1,    41,   312,    -1,    44,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    37,    -1,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    37,    -1,    -1, 
         93,    41,    -1,    -1,    44,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    93,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,   125,    -1,    -1,    -1,   413,   414,   415,   416, 
         93,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,   416,    -1,    -1,    37, 
         -1,    -1,   125,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1, 
         58,    59,   312,    61,    37,    63,    -1,    -1,    41,    -1, 
         43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    37,    -1,    -1,    93,    41,    -1,    43,    44, 
         45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    37,    61,    -1,    63,    41, 
         93,    43,    44,    45,    -1,    -1,    -1,   125,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,    -1,   125,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,   416,    -1,    -1,    37, 
         -1,    93,    -1,    41,    -1,    43,    44,    45,    -1,    -1, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312, 
         58,    59,    37,    61,    -1,    63,    41,    -1,    -1,    44, 
         -1,    -1,   312,   125,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    37,    -1,    93,    -1,    41,    -1,   312, 
         44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   312,    -1,    58,    59,    -1,    61,    93,    63, 
         -1,    -1,    37,    -1,    -1,    -1,    41,   125,    -1,    44, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    93, 
        125,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,   416,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,   416,    -1,    93,    -1, 
         -1,   125,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,   416,   404,   405,   406,   407,   408,   312, 
        125,    -1,    -1,   413,   414,   415,   416,    -1,    -1,    37, 
         -1,    -1,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    37,    -1,   312,    -1,    41, 
         58,    59,    44,    61,    -1,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
        312,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    93,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,   414,   415,   416,    -1, 
         -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,   125,    -1,    -1, 
        413,   414,   415,   416,   312,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,   312,   413,   414, 
        415,   416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,   416,    37,    -1,    -1,   312,    41, 
         -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    37,    -1, 
         -1,    -1,    41,    -1,    -1,    44,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,   312,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,   414,   415,   416,    -1, 
         -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    93,    -1,    -1,    -1,   413,   414, 
        415,   416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    37,   125,    -1,    -1,    41,    -1,    -1,    44, 
        404,   405,   406,   407,   408,    -1,   125,    -1,    -1,   413, 
        414,   415,   416,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,   312,    -1,    -1,    -1,   413,   414, 
        415,   416,    -1,    -1,    -1,    37,    -1,    -1,    93,    41, 
        312,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        125,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40, 
         -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    33,    -1, 
         -1,    93,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1, 
         45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    59,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,   125,    -1,   413,   414,   415,   416,    -1, 
         91,    -1,   404,   405,   406,   407,   408,    -1,    33,    -1, 
         -1,   413,   414,   415,   416,    40,    91,    -1,    43,    -1, 
         45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   123,    -1,    59,   126,    -1,    -1,    -1,    -1, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1, 
        125,   126,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1, 
         -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1, 
         40,    -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    59, 
        125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1, 
         -1,    91,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,   416,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,   416,    -1,    -1, 
         -1,    -1,    -1,   123,    -1,   125,   126,    33,    -1,   260, 
        261,   262,   263,   264,    40,    -1,    -1,    43,    -1,    45, 
        312,    -1,    -1,    -1,    -1,   260,   261,   262,   263,   264, 
         -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    91,    -1,    -1,   413,   414, 
        415,   416,    -1,    -1,    -1,   260,   261,   262,   263,   264, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340, 
         -1,    -1,    -1,    -1,    -1,   346,    -1,   123,    -1,    -1, 
        126,    -1,    -1,    -1,    -1,   340,   341,   342,   343,    -1, 
        345,   346,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,   416,   360,   361,   362,   363,    -1, 
        365,   366,    -1,    -1,    -1,   370,   371,   372,   373,   374, 
        260,   261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403,    -1,    -1,   340,   341,   342,   343,    -1, 
         -1,   346,    -1,    -1,    -1,    -1,    -1,   402,   403,    -1, 
         -1,    -1,    33,    -1,    -1,   360,   361,   362,   363,    40, 
        365,   366,    43,    -1,    45,   370,   371,   372,   373,   374, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403,    -1, 
        340,   341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1, 
         91,    -1,    -1,    -1,   260,   261,   262,   263,   264,    -1, 
        360,   361,   362,   363,    -1,   365,   366,    -1,    -1,    -1, 
        370,    -1,   372,   373,   374,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   340,   341,   342,   343,    -1,    -1, 
        346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   360,   361,   362,   363,    -1,   365, 
        366,    -1,    -1,    -1,   370,    -1,   372,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   402,   403,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340, 
        341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360, 
        361,   362,   363,    -1,   365,   366,    -1,    -1,    -1,   370, 
         -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_DOTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 
      'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 
      'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 'T_CONTINUE', NULL, NULL, 
      NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      NULL, 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 
      'T_BOOLEAN_OR', 'T_BOOLEAN_AND', 'T_CONCAT_EQUAL', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 135 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 147 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 147 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 158 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 159 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 163 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 10:  #line 163 "grammar/xp.jay"
    {
      $yyVals[-4+$yyTop]->position= $p;
      $yyVals[-4+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 11:  #line 171 "grammar/xp.jay"
    { $yyVal= new ImportNode(); } break;

    case 12:  #line 172 "grammar/xp.jay"
    { $yyVal= new StaticImportNode(); } break;

    case 13:  #line 173 "grammar/xp.jay"
    { $yyVal= new NativeImportNode(); } break;

    case 16:  #line 179 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 18:  #line 184 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 19:  #line 190 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 20:  #line 190 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 21:  #line 199 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 22:  #line 199 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 23:  #line 208 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 24:  #line 208 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 25:  #line 219 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 26:  #line 220 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 27:  #line 224 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 28:  #line 225 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 29:  #line 229 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 30:  #line 230 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 31:  #line 234 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 235 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 33:  #line 239 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 34:  #line 240 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 35:  #line 244 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 36:  #line 245 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 246 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 38:  #line 250 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 39:  #line 251 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 40:  #line 252 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 41:  #line 256 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 42:  #line 257 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 43:  #line 261 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 44:  #line 261 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 45:  #line 264 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 46:  #line 264 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 47:  #line 274 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 48:  #line 281 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->modifiers= $yyVals[-5+$yyTop][0];
      $yyVals[-3+$yyTop]->annotations= $yyVals[-5+$yyTop][1];
      $yyVals[-3+$yyTop]->type= $yyVals[-4+$yyTop];
      $yyVals[-3+$yyTop]->handlers= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 49:  #line 291 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 50:  #line 292 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[-3+$yyTop], 'arguments' => $yyVals[-1+$yyTop]))); } break;

    case 51:  #line 296 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 52:  #line 297 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 53:  #line 301 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 54:  #line 302 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 55:  #line 303 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 56:  #line 307 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 57:  #line 308 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 58:  #line 314 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 59:  #line 314 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 60:  #line 324 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 61:  #line 324 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 62:  #line 332 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 63:  #line 332 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 64:  #line 345 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 65:  #line 346 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 66:  #line 350 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 67:  #line 351 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 68:  #line 355 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 69:  #line 359 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVals[-1+$yyTop] && $yyVal->parameters= array('default' => $yyVals[-1+$yyTop]);
    } break;

    case 70:  #line 364 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 71:  #line 372 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 72:  #line 373 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 73:  #line 377 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 74:  #line 378 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 75:  #line 382 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 76:  #line 383 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 77:  #line 387 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 78:  #line 388 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-3+$yyTop], 'vararg' => TRUE); } break;

    case 79:  #line 392 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 80:  #line 393 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 87:  #line 405 "grammar/xp.jay"
    { $yyVal= '[]'; } break;

    case 88:  #line 406 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 89:  #line 414 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 91:  #line 419 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 92:  #line 420 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 93:  #line 424 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 94:  #line 424 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 95:  #line 427 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 96:  #line 427 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 97:  #line 432 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 98:  #line 432 "grammar/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= array();
        foreach ($yyVals[-6+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->initialization[]= $stmt;
        }
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= array();
        foreach ($yyVals[-2+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->loop[]= $stmt;
        }
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 99:  #line 450 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 100:  #line 450 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 101:  #line 455 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 102:  #line 455 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 103:  #line 459 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 104:  #line 459 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 105:  #line 463 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 106:  #line 463 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 107:  #line 467 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 108:  #line 467 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 109:  #line 472 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 111:  #line 473 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 113:  #line 474 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 114:  #line 474 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 115:  #line 477 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->free= TRUE; } break;

    case 117:  #line 482 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 119:  #line 487 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 120:  #line 488 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 121:  #line 492 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 122:  #line 492 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 123:  #line 496 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 124:  #line 496 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 125:  #line 502 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 126:  #line 503 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 127:  #line 507 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 128:  #line 508 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 129:  #line 508 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 130:  #line 513 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 131:  #line 514 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 132:  #line 518 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 133:  #line 519 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 134:  #line 523 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 135:  #line 523 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 136:  #line 531 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 138:  #line 536 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 139:  #line 536 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 140:  #line 544 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 142:  #line 549 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 143:  #line 550 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 144:  #line 554 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 146:  #line 559 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 147:  #line 565 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 148:  #line 573 "grammar/xp.jay"
    { 
      /* TBI: Constant */ 
    } break;

    case 149:  #line 576 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 150:  #line 579 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new InvocationNode(array('name' => $yyVals[-3+$yyTop]))); 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 152:  #line 587 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 153:  #line 587 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 154:  #line 590 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 155:  #line 590 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 156:  #line 595 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 157:  #line 595 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyVals[-1+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 158:  #line 600 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 159:  #line 600 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 160:  #line 606 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 161:  #line 607 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 162:  #line 610 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 163:  #line 613 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 164:  #line 616 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 165:  #line 619 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 166:  #line 623 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 167:  #line 629 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 168:  #line 635 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 169:  #line 641 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 170:  #line 649 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ConstantNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 171:  #line 650 "grammar/xp.jay"
    { /* XXX class literal */ } break;

    case 172:  #line 651 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 173:  #line 651 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 174:  #line 655 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 175:  #line 660 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 176:  #line 661 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 177:  #line 662 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 178:  #line 663 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 179:  #line 667 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 181:  #line 672 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 182:  #line 673 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 183:  #line 677 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 184:  #line 681 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 185:  #line 682 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 683 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 684 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 188:  #line 685 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 189:  #line 686 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 190:  #line 687 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 191:  #line 691 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 192:  #line 692 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 193:  #line 693 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 194:  #line 694 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 195:  #line 695 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 196:  #line 696 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 197:  #line 700 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 198:  #line 701 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 199:  #line 702 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 200:  #line 703 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 201:  #line 704 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 202:  #line 705 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 203:  #line 709 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 204:  #line 710 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 205:  #line 711 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 206:  #line 712 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 207:  #line 713 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 208:  #line 714 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 209:  #line 718 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 210:  #line 719 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 211:  #line 724 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 214:  #line 730 "grammar/xp.jay"
    {  $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 215:  #line 734 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 216:  #line 734 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 217:  #line 737 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 218:  #line 740 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 219:  #line 740 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 222:  #line 754 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 223:  #line 755 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 224:  #line 759 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 225:  #line 763 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 226:  #line 764 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 228:  #line 769 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 229:  #line 773 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 230:  #line 774 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 231:  #line 780 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 232:  #line 781 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 233:  #line 785 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 234:  #line 786 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 235:  #line 790 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 236:  #line 791 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 237:  #line 792 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 238:  #line 793 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 239:  #line 794 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 240:  #line 795 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 241:  #line 796 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;

    case 242:  #line 797 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2081 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
