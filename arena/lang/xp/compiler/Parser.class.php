<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 46 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_PACKAGE',  303);
  define('TOKEN_T_IMPORT',  304);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          4,     4,     3,    15,     3,    10,    10,    12,    12,    13, 
         13,    16,    16,    18,    18,    14,    14,    14,    19,    19, 
         21,    21,    24,    24,    23,    23,    23,    22,    22,    20, 
         20,    29,    27,    33,    27,    31,    31,    28,    28,    35, 
         35,    36,    36,    30,    30,    32,    32,    32,    32,    32, 
         32,    34,    34,    25,    25,    38,    37,    39,    37,    42, 
         37,    44,    37,    45,    37,    46,    37,    47,    37,    49, 
         37,    37,    40,    40,    41,    50,    41,    48,    48,    51, 
         51,    55,    54,    52,    52,    56,    53,    57,    57,    26, 
         58,    26,    59,    26,    26,    26,    61,    26,    62,    26, 
         63,    26,    64,    26,    65,    26,    26,    26,    26,    26, 
         26,    26,    26,    66,    66,    66,    66,    66,    66,    67, 
         67,    67,    67,    67,    67,    68,    68,    68,    68,    68, 
         68,    69,    69,    69,    69,    69,    69,    70,    70,    60, 
         60,    72,    71,    71,    73,    71,    71,    43,    43,    74, 
         74,    11,    11,    11,    17,    17,     9,     9,    75,    75, 
         76,    76,    76,    76,    76,    76,    76, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     4, 
          1,     3,     8,     0,     8,     1,     1,     0,     2,     0, 
          2,     0,     2,     0,     3,     0,     1,     1,     1,     2, 
          5,     6,     0,     1,     2,     4,     4,     0,     2,     1, 
          2,     0,     9,     0,     9,     1,     3,     0,     1,     1, 
          3,     2,     3,     0,     2,     1,     1,     1,     1,     1, 
          1,     0,     1,     1,     2,     0,     4,     0,     7,     0, 
         10,     0,    11,     0,     6,     0,     7,     0,     6,     0, 
          4,     2,     1,     3,     0,     0,     3,     2,     1,     1, 
          2,     0,     9,     0,     1,     0,     5,     0,     1,     1, 
          0,     4,     0,     5,     1,     1,     0,     3,     0,     8, 
          0,     5,     0,     8,     0,     6,     3,     1,     1,     1, 
          1,     1,     5,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     2,     2,     2,     2,     2,     2,     2,     2,     0, 
          1,     0,     4,     2,     0,     6,     2,     0,     1,     1, 
          3,     1,     4,     3,     1,     3,     0,     1,     1,     2, 
          1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,   171,   173,   172,   174,   176,   175,   177,     1,     0, 
        168,     0,     8,     0,     4,     0,    16,    14,    17,     0, 
        170,    12,    10,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   164,     0,     0,    19,     0,     0,    23, 
          0,     0,   163,    21,     0,     0,     0,    27,    28,     0, 
          0,   166,     0,     0,     0,     0,    15,     0,    30,     0, 
         41,    13,    56,    57,    58,    59,    60,    61,     0,     0, 
          0,     0,     0,     0,    44,     0,     0,    42,     0,     0, 
          0,     0,    35,     0,    34,     0,     0,     0,     0,   101, 
          0,     0,     0,     0,     0,   106,   105,   107,   109,     0, 
          0,     0,   118,   119,   120,   121,   122,    31,     0,     0, 
         49,     0,     0,    66,     0,    80,    70,    74,    76,    72, 
         68,     0,     0,     0,    32,     0,     0,     0,     0,     0, 
          0,     0,     0,   115,     0,     0,     0,   103,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   148,   149,     0,     0,     0,     0,     0,     0, 
          0,    52,     0,     0,    36,     0,    78,     0,     0,     0, 
          0,     0,     0,    37,    82,    65,     0,     0,     0,   159, 
          0,   152,     0,   108,     0,     0,   117,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   130,   131,   132,   133,   134,   135,    53, 
          0,     0,    51,     0,     0,     0,     0,     0,     0,    83, 
          0,     0,     0,     0,     0,   102,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    55,    46,     0,    45,    67, 
         63,     0,    81,     0,     0,     0,     0,     0,     0,    43, 
        161,     0,     0,     0,   155,     0,   104,   112,     0,     0, 
          0,     0,     0,     0,    84,     0,     0,     0,   116,   153, 
          0,     0,     0,    47,    92,    96,    79,     0,    89,     0, 
          0,    75,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    88,    95,    91,     0,    77,     0,    86,    69,   156, 
          0,   110,   114,     0,     0,     0,     0,     0,    25,     0, 
          0,     0,     0,    87,     0,    97,    71,     0,     0,    73, 
          0,     0,    93, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    19,   111,     4,     7,     8,    11,    56,    30, 
         45,    41,    49,    57,    34,    43,    46,   298,    58,    59, 
         60,    90,    87,    96,   251,   133,    61,   120,    97,   222, 
        249,    79,    91,   252,   121,   122,   134,   176,   183,   231, 
        309,   179,   189,   182,   180,   181,   225,   287,   178,   318, 
        288,   302,   289,   290,   300,   301,   264,   139,   198,   194, 
        145,   146,   199,   200,   191,   113,   114,   115,   116,   117, 
        195,   238,   281,   190,    21,    22, 
    );
    protected static $yySindex = array(         -284,
          0,     0,  -257,  -198,     0,    96,     0,  -257,    36,    34, 
       -198,     0,     0,     0,     0,     0,     0,     0,     0,  -258, 
          0,    96,     0,  -198,     0,    35,     0,     0,     0,  -198, 
          0,     0,     0,  -198,   -19,  -215,  -191,    28,  -198,  -198, 
       -188,  -198,    29,     0,   100,    89,     0,  -198,    30,     0, 
         96,  -198,     0,     0,    96,  -222,    40,     0,     0,    96, 
         96,     0,    47,    21,  -186,  -244,     0,  -221,     0,  -193, 
          0,     0,     0,     0,     0,     0,     0,     0,   137,   -85, 
        138,   118,  -159,   -78,     0,  -105,   -85,     0,   298,   124, 
       -198,   152,     0,  1657,     0,   134,  -198,   298,   298,     0, 
        298,   298,   298,   298,   127,     0,     0,     0,     0,   298, 
        -90,   769,     0,     0,     0,     0,     0,     0,   -40,   153, 
          0,   154,   156,     0,    76,     0,     0,     0,     0,     0, 
          0,    75,   170,  1657,     0,   179,   -51,   -51,   298,   -51, 
        -51,   -51,   -51,     0,   -79,  -198,   197,     0,     0,   298, 
        298,   298,   298,   298,   298,   298,   298,   298,   298,   298, 
        298,   298,     0,     0,   298,   298,   298,   298,   298,   298, 
       -129,     0,  -100,  -198,     0,   298,     0,   298,   182,   185, 
       1566,   186,   187,     0,     0,     0,  -100,   219,   144,     0, 
        298,     0,   -32,     0,   -79,   201,     0,   298,   -97,   -14, 
        -51,   -51,   -51,   -51,   -51,   -51,   246,   -51,   -51,   -51, 
        -51,   -51,   -51,     0,     0,     0,     0,     0,     0,     0, 
       -198,   -13,     0,   274,  1657,   366,   298,   298,  1657,     0, 
       -114,   298,   298,   -13,   298,     0,   207,   298,   209,   -79, 
        298,   159,   -79,   213,   298,     0,     0,  1657,     0,     0, 
          0,   129,     0,   196,   650,   140,   227,   672,   699,     0, 
          0,   -79,   769,   175,     0,   229,     0,     0,   298,   -51, 
        146,  -253,   298,  1566,     0,   298,   -67,  1566,     0,     0, 
        298,   151,   235,     0,     0,     0,     0,   -68,     0,   -66, 
        225,     0,   742,   224,   -84,   245,    96,   -79,   -79,   250, 
        169,     0,     0,     0,   298,     0,   232,     0,     0,     0, 
        172,     0,     0,  -198,  1657,   254,   -42,  1566,     0,   -41, 
        176,  1566,   261,     0,   262,     0,     0,  1566,   192,     0, 
       1657,   180,     0, 
    );
    protected static $yyRindex= array(          135,
          0,     0,   183,     0,     0,  -231,     0,   239,  1506,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    12,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    15,   -95,   195,     0,     0,     0, 
        199,     0,     0,     0,    14,     0,     0,     0,     0,     0, 
       -112,     0,     0,     0,  -112,     0,     0,     0,     0,  -111, 
       -110,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   251,     0,     0,     0,     0,    35,     0,     0,     0, 
        283,     0,     0,     0,     0,     0,   283,     0,     0,     0, 
          0,     0,     0,     0,   -37,     0,     0,     0,     0,     0, 
          0,   269,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   288,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   214,     0,     0,   471,   796,   247,   843, 
        866,   897,   920,     0,    70,     0,     0,     0,  -243,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     2,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     2,   130,     0,     0, 
        303,     0,     0,     0,    98,     0,     0,   247,     0,     0, 
        951,   974,  1071,  1147,  1174,  1248,     0,  1276,  1303,  1330, 
       1357,  1366,  1395,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   221,     0,   289,     0,   221,     0, 
          0,     0,     0,     0,     0,     0,     0,   260,   -10,   143, 
        303,     0,    70,     0,     0,     0,     0,   221,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    70,   263,     0,     0,     0,     0,     0,   303,  1404, 
          0,     0,   289,     0,     0,     0,     0,     0,     0,     0, 
        303,    43,     0,     0,     0,     0,     0,  1492,     0,  1479, 
          0,     0,     0,     0,  1631,     0,  -112,    70,    70,     0, 
          0,     0,     0,     0,   303,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   221,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        221,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,  1911,     0,   339,     0,     0,    39,     0, 
        724,     0,     0,   -52,     0,     0,   -12,     0,   297,   301, 
          0,     0,   271,     0,   -16,  1886,     0,   286,     0,   198, 
        125,     0,     0,  -169,   210,     0,  -152,     0,     0,  -154, 
          0,     0,   415,     0,     0,     0,     0,     0,     0,     0, 
         97,     0,   116,     0,     0,     0,     0,     0,     0,   -48, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       -175,     0,     0,   171,   364,     0, 
    );
    protected static $yyTable = array(100,
        148,   171,    63,   100,   100,   100,   100,   100,   165,   100, 
        166,   192,    26,    29,    40,    81,   113,    94,     1,   240, 
        100,   100,   100,   100,   100,   100,   154,    18,   230,    50, 
        154,   154,   154,   154,   154,    54,   154,     9,     9,    62, 
         39,    27,    28,    29,    20,   247,     5,   154,   154,   154, 
        154,   154,   154,    11,   162,   100,   162,    77,   162,   256, 
         54,     9,    75,    73,   240,    74,     9,    76,   167,   167, 
        167,    38,   165,   162,   162,   165,   162,   132,   271,    24, 
        154,    24,   154,    24,    24,    24,    24,    24,   100,    24, 
        285,   286,    25,    33,    40,    82,   111,    64,    68,    70, 
         24,    24,    24,    24,    24,    24,   150,    65,    65,   248, 
        150,   150,   150,   150,   150,   154,   150,   186,    42,   292, 
         44,   230,    48,   295,    54,   230,    64,   150,   150,   150, 
        150,   150,   150,    24,   151,    24,   165,   162,   151,   151, 
        151,   151,   151,    52,   151,   321,    78,   167,   167,   167, 
         53,    51,    55,    80,    92,   151,   151,   151,   151,   151, 
        151,   332,   150,   324,    67,   230,   144,   327,    24,   230, 
        160,    72,    24,   330,    86,   230,    85,    88,    89,   157, 
         82,    81,   118,   157,   157,   157,   157,   157,   160,   157, 
        151,   123,   135,   173,   268,   150,   175,   174,   177,   184, 
        157,   157,   157,   157,   157,   157,   155,   167,   246,   167, 
        220,   153,   151,   279,   152,    18,   154,   167,   167,   187, 
        221,   227,   160,   151,   228,   232,   233,   239,   185,   165, 
        150,   166,   156,   155,    93,   157,   236,   197,   153,   151, 
        241,   152,   243,   154,   311,   244,   257,   262,   265,   312, 
        313,   267,   269,   272,   273,   155,   165,   150,   166,   156, 
        153,   151,   235,   152,   275,   154,   276,   280,   157,   282, 
        284,   169,   294,   297,   162,   299,   286,   285,   165,   150, 
        166,   156,   155,   305,   307,   310,   308,   153,   151,   314, 
        152,   315,   154,   317,   322,   162,   319,   323,   325,   172, 
        326,   328,   329,   245,   333,   165,   150,   166,   156,    38, 
        155,   169,   169,   169,   331,   153,   151,    22,   152,   149, 
        154,    20,   162,    48,   162,   162,   100,    39,    50,   193, 
        101,   169,   250,   165,   150,   166,   156,   110,    64,   158, 
         98,   169,    99,   158,   162,    62,    23,   158,   168,   167, 
        163,   164,    98,   154,   162,    99,    69,    95,   260,   169, 
        170,    71,   100,   100,   100,   100,   100,   100,   100,   100, 
        100,   162,    11,   100,   100,    12,    13,    14,    15,    16, 
         17,    18,   136,   223,   234,    31,   304,     0,   100,   154, 
        154,   154,   154,   154,   154,   154,   154,   154,   154,   162, 
        154,   154,   155,   303,     0,   261,    24,   153,   151,     0, 
        152,     0,   154,     0,     2,     2,     2,     2,     2,     2, 
          2,     0,     0,   102,   253,   165,   150,   166,   156,     0, 
          0,     0,     0,   150,     2,     2,     2,     0,     2,     0, 
          0,     0,    24,    24,    24,    24,    24,    24,    24,    24, 
         24,    24,     0,    24,    24,     0,     0,     0,     0,     0, 
          0,   151,     5,     5,     5,     5,     5,     5,     5,   150, 
        150,   150,   150,   150,   150,   150,   150,   150,     0,     0, 
        150,   150,     5,     5,     5,     0,     0,     0,     0,     0, 
          0,   162,     0,     0,     0,     0,     0,   151,   151,   151, 
        151,   151,   151,   151,   151,   151,   157,   144,   151,   151, 
          0,   144,   144,   144,   144,   144,     0,   144,     7,     7, 
          7,     7,     7,     7,     7,     0,     0,     0,   144,   144, 
          0,   144,     0,   144,     0,     0,     0,     0,     7,     7, 
          7,     0,   157,   157,   157,   157,   157,   157,   157,   157, 
        157,     0,     0,   157,   157,     0,     0,   105,   106,   107, 
          0,     0,     0,   144,     0,     0,     0,     0,     0,   168, 
        167,   163,   164,   157,   158,   159,   160,   161,     0,     0, 
        169,   170,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   168,   167,   163,   164, 
        157,   158,   159,   160,   161,   237,     0,   169,   170,     0, 
          0,     0,   242,     0,     0,     0,     0,     0,   168,   167, 
        163,   164,   157,   158,   159,   160,   161,     0,     0,   169, 
        170,     0,     0,     0,     0,     0,     0,   108,     0,     0, 
          0,   254,     0,   109,     0,   168,   167,   163,   164,   157, 
        158,   159,   160,   161,     0,   266,   169,   170,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   168,   167,   163,   164,   157,   158,   159, 
        160,   161,     0,   283,   169,   170,   155,   291,     0,     0, 
        274,   153,   151,     0,   152,   296,   154,     0,     0,   103, 
        104,     0,     0,     0,     0,     0,     0,     0,   155,   165, 
        150,   166,   156,   153,   151,     0,   152,     0,   154,   316, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   165,   150,   166,   156,   155,     0,     0,     0,   278, 
        153,   151,     0,   152,     0,   154,     0,     0,     0,     0, 
          0,     0,     0,    36,     0,     0,     0,    37,   165,   150, 
        166,   156,     0,    47,     0,   168,   167,   163,   164,   157, 
        158,   159,   160,   161,     0,   162,   169,   170,   155,    66, 
          0,     0,   306,   153,   151,     0,   152,     0,   154,     0, 
          0,    83,     0,    84,     0,     0,     0,   162,     0,     0, 
          0,   165,   150,   166,   156,   155,     0,     0,     0,     0, 
        153,   151,     0,   152,   119,   154,     0,     0,     0,     0, 
        119,     0,     0,     0,   162,     0,     0,     0,   165,   150, 
        166,   156,   145,     0,   144,     0,   145,   145,   145,   145, 
        145,     0,   145,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   145,   145,     0,   145,     0,   145,     0, 
          0,     0,     0,     0,     0,     0,     0,   162,     0,   196, 
          0,     0,     0,     0,   144,   144,   144,   144,   144,   142, 
          0,     0,     0,   142,   142,   142,   142,   142,   145,   142, 
          0,     0,     0,     0,   162,     0,     0,   119,     0,     0, 
        142,   142,   143,   142,     0,   142,   143,   143,   143,   143, 
        143,     0,   143,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   143,   143,     0,   143,     0,   143,     0, 
          0,     0,     0,   146,     0,   142,     0,   146,   146,   146, 
        146,   146,     0,   146,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   146,   146,   147,   146,   143,   146, 
        147,   147,   147,   147,   147,     0,   147,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   147,   147,     0, 
        147,     0,   147,     0,     0,     0,     0,   124,     0,   146, 
          0,   124,   124,   124,   124,   124,     0,   124,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   124,   124, 
        136,   124,   147,   124,   136,   136,   136,   136,   136,     0, 
        136,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   136,   136,     0,   136,   277,   136,   320,     0,     0, 
          0,     0,     0,   124,     0,     0,     0,     0,     0,   168, 
        167,   163,   164,   157,   158,   159,   160,   161,     0,     0, 
        169,   170,     0,     0,     0,     0,   136,     0,     0,     0, 
          0,   168,   167,   163,   164,   157,   158,   159,   160,   161, 
          0,     0,   169,   170,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   168,   167, 
        163,   164,   157,   158,   159,   160,   161,   137,     0,   169, 
        170,   137,   137,   137,   137,   137,     0,   137,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   137,   137, 
          0,   137,     0,   137,     0,     0,     0,     0,     0,     0, 
          0,   168,   167,   163,   164,   157,   158,   159,   160,   161, 
          0,     0,   169,   170,     0,     0,     0,     0,     0,   145, 
          0,     0,     0,   137,     0,     0,     0,     0,   168,   167, 
        163,   164,   157,   158,   159,   160,   161,     0,     0,   169, 
        170,     0,     0,   138,     0,     0,     0,   138,   138,   138, 
        138,   138,     0,   138,     0,     0,     0,     0,     0,   145, 
        145,   145,   145,   145,   138,   138,   142,   138,     0,   138, 
        139,     0,     0,     0,   139,   139,   139,   139,   139,     0, 
        139,     0,     0,     0,     0,     0,     0,     0,     0,   143, 
          0,   139,   139,     0,   139,     0,   139,     0,     0,   138, 
          0,     0,     0,     0,     0,     0,   142,   142,   142,   142, 
        142,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        146,     0,     0,     0,     0,     0,   139,     0,     0,   143, 
        143,   143,   143,   143,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   147,   140,     0,     0,     0,   140,   140, 
        140,   140,   140,     0,   140,     0,     0,     0,     0,     0, 
        146,   146,   146,   146,   146,   140,   140,     0,   140,     0, 
        140,     0,   125,     0,   124,     0,   125,   125,   125,   125, 
        125,     0,   125,   147,   147,   147,   147,   147,     0,     0, 
          0,     0,     0,   125,   125,     0,   125,   136,   125,   126, 
        140,     0,     0,   126,   126,   126,   126,   126,     0,   126, 
          0,     0,     0,     0,   124,   124,   124,   124,   124,     0, 
        126,   126,     0,   126,     0,   126,   127,     0,   125,     0, 
        127,   127,   127,   127,   127,     0,   127,   136,   136,   136, 
        136,   136,     0,     0,     0,     0,     0,   127,   127,     0, 
        127,     0,   127,   128,     0,   126,     0,   128,   128,   128, 
        128,   128,   129,   128,     0,     0,   129,   129,   129,   129, 
        129,     0,   129,     0,   128,   128,     0,   128,     0,   128, 
          0,     0,   127,   129,   129,     0,   129,     0,   129,     0, 
          0,   141,     0,     0,   137,   141,   141,   141,   141,   141, 
        123,   141,     0,     0,   123,   123,   123,   123,   123,   128, 
        123,     0,   141,   141,     0,   141,     0,   141,   129,     0, 
          0,   123,   123,     0,   123,     0,   123,     0,     0,     0, 
          0,     0,     0,     0,   137,   137,   137,   137,   137,     0, 
          0,     0,     0,     0,     0,     0,     0,   141,     0,     0, 
          0,     0,     0,     0,     0,     0,   123,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        138,    90,     0,     0,     0,     0,     0,     0,    90,     0, 
          0,    90,     0,    90,    94,     0,     0,     0,     0,     0, 
          0,    94,     0,     0,    94,     0,    94,   139,     0,     0, 
          0,     0,     0,     0,     0,    11,     0,    11,     0,    11, 
        138,   138,   138,   138,   138,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    11,    11,     0,    11,     0,    90, 
          0,     0,     0,     0,     0,     0,     0,   139,   139,   139, 
        139,   139,    94,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    11,     0,   101,     0, 
          0,     0,     0,    90,    90,   110,     0,     0,    98,     0, 
         99,   140,     0,     0,     0,     0,    94,    94,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    11,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   125, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   140,   140,   140,   140,   140,   100,     0,     0,     0, 
          0,     0,     0,    85,     0,     0,   126,     0,     0,     0, 
         85,     0,     0,    85,     0,    85,     0,     0,     0,   125, 
        125,   125,   125,   125,     0,     0,     0,     0,   229,   101, 
          0,   102,     0,   127,     0,     0,   110,     0,     0,    98, 
          0,    99,     0,     0,     0,     0,   126,   126,   126,   126, 
        126,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        128,    85,     0,     0,     0,     0,     0,     0,     0,   129, 
          0,     0,     0,   127,   127,   127,   127,   127,    90,    90, 
         90,     0,     0,     0,     0,     0,     0,   100,     0,     0, 
          0,    94,    94,    94,     0,    85,    85,     0,   141,     0, 
        128,   128,   128,   128,   128,    11,     0,   123,     0,   129, 
        129,   129,   129,   129,     0,     0,     0,     0,     0,     0, 
          0,     0,   102,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   141,   141, 
        141,   141,   141,     0,     0,     0,     0,   123,   123,   123, 
        123,   123,     0,     0,     0,    11,    11,     0,    90,    90, 
         90,    90,     0,    90,    90,   105,   106,   107,     0,     0, 
          0,    94,    94,    94,    94,     0,     0,    94,    90,    90, 
         90,    90,     0,     0,     0,    11,     0,     0,    90,    90, 
          0,    94,    94,    94,    94,     0,     0,     0,     0,     0, 
          0,    94,    94,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         90,    90,     0,     0,     0,     0,     0,     0,     0,     0, 
         85,    85,    85,    94,    94,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   108,   124,   125,   126,     0, 
          0,   109,     0,     0,    10,    11,   105,   106,   107,     0, 
          0,    26,     0,     0,     0,   127,   128,   129,   130,     0, 
          0,     0,     0,     0,    32,   131,     0,     0,     0,     0, 
         35,     0,     0,     0,    35,     0,     0,     0,     0,    35, 
         35,     0,    35,     0,     0,     0,     0,     0,    35,     0, 
          0,     0,    35,     0,     0,     0,    35,   103,   104,     0, 
         85,    85,    85,    85,   112,     0,    85,     0,    35,     0, 
         35,     0,     0,   137,   138,     0,   140,   141,   142,   143, 
         85,    85,    85,    85,     0,   147,   108,   124,   125,   126, 
         85,    35,   109,     0,     0,     0,     0,    35,     0,     0, 
          0,     0,     0,     0,     0,     0,   127,   128,   129,   130, 
          0,     0,     0,     0,   188,     0,   131,     0,     0,     0, 
          0,     0,    85,    85,     0,   201,   202,   203,   204,   205, 
        206,   207,   208,   209,   210,   211,   212,   213,     0,     0, 
        214,   215,   216,   217,   218,   219,    35,     0,   103,   104, 
          0,   224,     0,   226,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   188,     0,     0,     0, 
          0,     0,     0,   188,    35,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   188,   255,     0,     0,     0,   258,   259,     0, 
        188,     0,     0,   263,     0,     0,   188,     0,     0,     0, 
        270,    35,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   188,     0,     0,     0,   188,     0, 
          0,   293,     0,     0,     0,     0,   188,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        188,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    35, 
    );
    protected static $yyCheck = array(37,
         91,    42,    55,    41,    42,    43,    44,    45,    60,    47, 
         62,    91,   125,   125,   125,   260,   260,   123,   303,   195, 
         58,    59,    60,    61,    62,    63,    37,   123,   181,    42, 
         41,    42,    43,    44,    45,    48,    47,   260,   260,    52, 
         60,   300,   301,   302,     6,    59,   304,    58,    59,    60, 
         61,    62,    63,    91,    40,    93,    42,    37,    44,   229, 
         59,   260,    42,    43,   240,    45,   260,    47,   300,   301, 
        302,    91,    59,    59,   126,    62,    62,    94,   248,    37, 
         91,    46,    93,    41,    42,    43,    44,    45,   126,    47, 
        344,   345,    59,    59,   310,   340,   340,   320,    60,    61, 
         58,    59,    60,    61,    62,    63,    37,   330,   330,   123, 
         41,    42,    43,    44,    45,   126,    47,   134,   310,   274, 
         93,   274,   311,   278,   123,   278,   320,    58,    59,    60, 
         61,    62,    63,    91,    37,    93,   123,   123,    41,    42, 
         43,    44,    45,    44,    47,   315,   126,   260,   260,   260, 
         62,   123,   123,   340,   260,    58,    59,    60,    61,    62, 
         63,   331,    93,   318,   125,   318,    40,   322,   126,   322, 
         41,   125,    46,   328,   260,   328,    40,    40,    61,    37, 
        340,   260,    59,    41,    42,    43,    44,    45,    59,    47, 
         93,    40,    59,    41,   243,   126,    41,    44,   123,   125, 
         58,    59,    60,    61,    62,    63,    37,   320,   221,   320, 
        340,    42,    43,   262,    45,   311,    47,   330,   330,    41, 
        321,    40,    93,   126,    40,    40,    40,   260,    59,    60, 
         61,    62,    63,    37,   340,    93,    93,    41,    42,    43, 
         40,    45,   340,    47,   297,   260,   361,    41,    40,   298, 
        299,    93,    40,   125,    59,    37,    60,    61,    62,    63, 
         42,    43,    44,    45,   125,    47,    40,    93,   126,    41, 
        125,   260,   340,   123,   260,    41,   345,   344,    60,    61, 
         62,    63,    37,    59,    61,    41,   371,    42,    43,    40, 
         45,   123,    47,    62,    41,   126,   125,   340,   340,   340, 
        125,    41,    41,    58,   125,    60,    61,    62,    63,    59, 
         37,   300,   301,   302,   123,    42,    43,   123,    45,   410, 
         47,   123,   126,    41,   310,   311,   364,    59,    41,   409, 
         33,   320,    59,    60,    61,    62,    63,    40,   125,    93, 
         43,   330,    45,    41,   126,   125,     8,    59,   400,   401, 
        402,   403,    93,   364,   340,    93,    60,    87,   234,   411, 
        412,    61,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   126,   410,   411,   412,   280,   281,   282,   283,   284, 
        285,   286,    97,   174,   187,    22,   290,    -1,    91,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   409,   126, 
        411,   412,    37,   288,    -1,   235,   364,    42,    43,    -1, 
         45,    -1,    47,    -1,   280,   281,   282,   283,   284,   285, 
        286,    -1,    -1,   126,    59,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,   364,   300,   301,   302,    -1,   304,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   409,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1, 
         -1,   364,   280,   281,   282,   283,   284,   285,   286,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,   300,   301,   302,    -1,    -1,    -1,    -1,    -1, 
         -1,   126,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   364,    37,   411,   412, 
         -1,    41,    42,    43,    44,    45,    -1,    47,   280,   281, 
        282,   283,   284,   285,   286,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,   300,   301, 
        302,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,    -1,   260,   261,   262, 
         -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   191,    -1,   411,   412,    -1, 
         -1,    -1,   198,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,    -1,    -1,    -1,    -1,    -1,   340,    -1,    -1, 
         -1,   227,    -1,   346,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,   241,   411,   412,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,   269,   411,   412,    37,   273,    -1,    -1, 
         41,    42,    43,    -1,    45,   281,    47,    -1,    -1,   402, 
        403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    60, 
         61,    62,    63,    42,    43,    -1,    45,    -1,    47,   305, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    60,    61,    62,    63,    37,    -1,    -1,    -1,    41, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    60,    61, 
         62,    63,    -1,    40,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,   126,   411,   412,    37,    56, 
         -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    68,    -1,    70,    -1,    -1,    -1,   126,    -1,    -1, 
         -1,    60,    61,    62,    63,    37,    -1,    -1,    -1,    -1, 
         42,    43,    -1,    45,    91,    47,    -1,    -1,    -1,    -1, 
         97,    -1,    -1,    -1,   126,    -1,    -1,    -1,    60,    61, 
         62,    63,    37,    -1,   364,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,   146, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    37, 
         -1,    -1,    -1,    41,    42,    43,    44,    45,    93,    47, 
         -1,    -1,    -1,    -1,   126,    -1,    -1,   174,    -1,    -1, 
         58,    59,    37,    61,    -1,    63,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    37,    -1,    93,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    37,    61,    93,    63, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,    37,    -1,    93, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         37,    61,    93,    63,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,   364,    63,   314,    -1,    -1, 
         -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    37,    -1,   411, 
        412,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1,   364, 
         -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    58,    59,   364,    61,    -1,    63, 
         37,    -1,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    93, 
         -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        364,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   364,    37,    -1,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    58,    59,    -1,    61,    -1, 
         63,    -1,    37,    -1,   364,    -1,    41,    42,    43,    44, 
         45,    -1,    47,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,   364,    63,    37, 
         93,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         58,    59,    -1,    61,    -1,    63,    37,    -1,    93,    -1, 
         41,    42,    43,    44,    45,    -1,    47,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    37,    -1,    93,    -1,    41,    42,    43, 
         44,    45,    37,    47,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    93,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    37,    -1,    -1,   364,    41,    42,    43,    44,    45, 
         37,    47,    -1,    -1,    41,    42,    43,    44,    45,    93, 
         47,    -1,    58,    59,    -1,    61,    -1,    63,    93,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        364,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1, 
         -1,    43,    -1,    45,    33,    -1,    -1,    -1,    -1,    -1, 
         -1,    40,    -1,    -1,    43,    -1,    45,   364,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,    44, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    59,    60,    -1,    62,    -1,    91, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    33,    -1, 
         -1,    -1,    -1,   125,   126,    40,    -1,    -1,    43,    -1, 
         45,   364,    -1,    -1,    -1,    -1,   125,   126,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    91,    -1,    -1,    -1, 
         -1,    -1,    -1,    33,    -1,    -1,   364,    -1,    -1,    -1, 
         40,    -1,    -1,    43,    -1,    45,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   123,    33, 
         -1,   126,    -1,   364,    -1,    -1,    40,    -1,    -1,    43, 
         -1,    45,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        364,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,   260,   261, 
        262,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1, 
         -1,   260,   261,   262,    -1,   125,   126,    -1,   364,    -1, 
        404,   405,   406,   407,   408,   260,    -1,   364,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,   310,   311,    -1,   340,   341, 
        342,   343,    -1,   345,   346,   260,   261,   262,    -1,    -1, 
         -1,   340,   341,   342,   343,    -1,    -1,   346,   360,   361, 
        362,   363,    -1,    -1,    -1,   340,    -1,    -1,   370,   371, 
         -1,   360,   361,   362,   363,    -1,    -1,    -1,    -1,    -1, 
         -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        260,   261,   262,   402,   403,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   340,   341,   342,   343,    -1, 
         -1,   346,    -1,    -1,     4,   410,   260,   261,   262,    -1, 
         -1,    11,    -1,    -1,    -1,   360,   361,   362,   363,    -1, 
         -1,    -1,    -1,    -1,    24,   370,    -1,    -1,    -1,    -1, 
         30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    39, 
         40,    -1,    42,    -1,    -1,    -1,    -1,    -1,    48,    -1, 
         -1,    -1,    52,    -1,    -1,    -1,    56,   402,   403,    -1, 
        340,   341,   342,   343,    89,    -1,   346,    -1,    68,    -1, 
         70,    -1,    -1,    98,    99,    -1,   101,   102,   103,   104, 
        360,   361,   362,   363,    -1,   110,   340,   341,   342,   343, 
        370,    91,   346,    -1,    -1,    -1,    -1,    97,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363, 
         -1,    -1,    -1,    -1,   139,    -1,   370,    -1,    -1,    -1, 
         -1,    -1,   402,   403,    -1,   150,   151,   152,   153,   154, 
        155,   156,   157,   158,   159,   160,   161,   162,    -1,    -1, 
        165,   166,   167,   168,   169,   170,   146,    -1,   402,   403, 
         -1,   176,    -1,   178,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,    -1,    -1, 
         -1,    -1,    -1,   198,   174,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   227,   228,    -1,    -1,    -1,   232,   233,    -1, 
        235,    -1,    -1,   238,    -1,    -1,   241,    -1,    -1,    -1, 
        245,   221,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   269,    -1,    -1,    -1,   273,    -1, 
         -1,   276,    -1,    -1,    -1,    -1,   281,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   314, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 'T_FINAL', 
      'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 'T_PACKAGE', 
      'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 'T_IMPLEMENTS', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 'T_THROWS', NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 
      'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_AS', 
      'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 
      'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 'T_OBJECT_OPERATOR', 
      'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 109 "grammar/xp.jay"
    {
        $yyVal= new ParseTree();
        $yyVal->package= $yyVals[-2+$yyTop];
        $yyVal->imports= $yyVals[-1+$yyTop];
        $yyVal->declaration= $yyVals[0+$yyTop];
      } break;

    case 3:  #line 120 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 120 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 131 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 132 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 136 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 136 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
    } break;

    case 12:  #line 143 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 13:  #line 149 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
        $yyVals[-6+$yyTop]->name= $yyVals[-5+$yyTop];
        $yyVals[-6+$yyTop]->parent= $yyVals[-4+$yyTop];
        $yyVals[-6+$yyTop]->implements= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
        $yyVal= $yyVals[-6+$yyTop];
      } break;

    case 14:  #line 157 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 15:  #line 157 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
        $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
        $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
        $yyVal= $yyVals[-6+$yyTop];
      } break;

    case 16:  #line 167 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 168 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new EnumNode()); } break;

    case 18:  #line 172 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 19:  #line 173 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 20:  #line 177 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 21:  #line 178 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 22:  #line 182 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 183 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 187 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 25:  #line 188 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 26:  #line 192 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 193 "grammar/xp.jay"
    { $yyVal['fields']= $yyVals[0+$yyTop]; } break;

    case 28:  #line 194 "grammar/xp.jay"
    { $yyVal['methods']= $yyVals[0+$yyTop]; } break;

    case 29:  #line 200 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 30:  #line 201 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 31:  #line 205 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
        $yyVal->modifiers= $yyVals[-4+$yyTop];
        $yyVal->type= $yyVals[-3+$yyTop];
        $yyVal->name= $yyVals[-2+$yyTop];
        $yyVal->initialization= $yyVals[-1+$yyTop];
      } break;

    case 32:  #line 211 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
        $yyVal->modifiers= $yyVals[-5+$yyTop];
        $yyVal->name= $yyVals[-3+$yyTop];
        $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
        $yyVal->get= $gs['get'];
        $yyVal->set= $gs['set'];
      } break;

    case 33:  #line 221 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 35:  #line 226 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 36:  #line 227 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 37:  #line 228 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 38:  #line 232 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 39:  #line 233 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 40:  #line 239 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 41:  #line 240 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 42:  #line 244 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 43:  #line 244 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
        $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
      } break;

    case 44:  #line 253 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 45:  #line 253 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 46:  #line 264 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 47:  #line 265 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 48:  #line 269 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 49:  #line 270 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 50:  #line 274 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 51:  #line 275 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 52:  #line 279 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-1+$yyTop]); } break;

    case 53:  #line 280 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 54:  #line 284 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 55:  #line 285 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 62:  #line 302 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 64:  #line 307 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 65:  #line 308 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 66:  #line 312 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 67:  #line 312 "grammar/xp.jay"
    { 
        $yyVal->expression= $yyVals[-1+$yyTop];
      } break;

    case 68:  #line 315 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 69:  #line 315 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
      } break;

    case 70:  #line 320 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 71:  #line 320 "grammar/xp.jay"
    {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
        $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
        $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 72:  #line 326 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 73:  #line 326 "grammar/xp.jay"
    {
        $yyVals[-10+$yyTop]->expression= $yyVals[-7+$yyTop];
        $yyVals[-10+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 74:  #line 330 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 75:  #line 330 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
        $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 76:  #line 334 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 77:  #line 334 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
      } break;

    case 78:  #line 338 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 79:  #line 338 "grammar/xp.jay"
    { 
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
        $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-4+$yyTop]; 
      } break;

    case 80:  #line 343 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 81:  #line 343 "grammar/xp.jay"
    { /* Throw statement */ 
        $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
      } break;

    case 83:  #line 350 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 84:  #line 351 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 85:  #line 355 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 86:  #line 356 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 87:  #line 356 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 88:  #line 361 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 89:  #line 362 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 90:  #line 366 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 91:  #line 367 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 92:  #line 371 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 93:  #line 371 "grammar/xp.jay"
    {
        $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
        $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
        $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
      } break;

    case 94:  #line 379 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 96:  #line 384 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 97:  #line 384 "grammar/xp.jay"
    {
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      } break;

    case 98:  #line 392 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 100:  #line 397 "grammar/xp.jay"
    { /* XXX Constant */ } break;

    case 101:  #line 398 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 102:  #line 398 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 103:  #line 402 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 104:  #line 402 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= new TypeName($yyVals[-4+$yyTop]);
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 105:  #line 407 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 106:  #line 408 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 107:  #line 409 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 108:  #line 409 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 109:  #line 412 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InstanceCreationNode()); } break;

    case 110:  #line 412 "grammar/xp.jay"
    { 
      $yyVals[-7+$yyTop]->type= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-7+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 111:  #line 417 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 112:  #line 417 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 113:  #line 422 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 114:  #line 422 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 115:  #line 428 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 116:  #line 428 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 117:  #line 434 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 118:  #line 435 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); } break;

    case 119:  #line 436 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); } break;

    case 120:  #line 437 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); } break;

    case 121:  #line 438 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); } break;

    case 122:  #line 439 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); $yyVal->postfix= TRUE; } break;

    case 123:  #line 440 "grammar/xp.jay"
    { /* XXX Ternary */ } break;

    case 124:  #line 444 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 125:  #line 445 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 126:  #line 446 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 127:  #line 447 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 128:  #line 448 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 129:  #line 449 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 130:  #line 453 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 131:  #line 454 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 132:  #line 455 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 133:  #line 456 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 134:  #line 457 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 135:  #line 458 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 136:  #line 462 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 137:  #line 463 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 138:  #line 464 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 139:  #line 465 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 140:  #line 466 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 141:  #line 467 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 142:  #line 471 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 143:  #line 472 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 144:  #line 473 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 145:  #line 474 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 146:  #line 475 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 147:  #line 476 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 148:  #line 480 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 149:  #line 481 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 150:  #line 486 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 152:  #line 491 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 153:  #line 491 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 154:  #line 494 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 155:  #line 498 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 156:  #line 498 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 157:  #line 502 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 158:  #line 506 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 160:  #line 511 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 161:  #line 512 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 162:  #line 518 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 163:  #line 519 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 164:  #line 520 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 165:  #line 524 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 166:  #line 525 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 167:  #line 531 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 168:  #line 532 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 169:  #line 536 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 170:  #line 537 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 171:  #line 541 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 172:  #line 542 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 173:  #line 543 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 174:  #line 544 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 175:  #line 545 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 176:  #line 546 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 177:  #line 547 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1511 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
