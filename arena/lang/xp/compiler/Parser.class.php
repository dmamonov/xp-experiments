<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 48 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_PACKAGE',  303);
  define('TOKEN_T_IMPORT',  304);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          4,     4,    11,     3,    15,     3,    17,     3,    12,    12, 
         13,    13,    18,    18,    20,    20,    14,    14,    21,    21, 
         21,    16,    16,    25,    26,    25,    27,    25,    22,    22, 
         31,    31,    30,    30,    30,    29,    29,    34,    23,    37, 
         23,    39,    23,    36,    36,    33,    33,    41,    41,    42, 
         42,    35,    35,    38,    38,    38,    38,    38,    38,    40, 
         40,    32,    32,    44,    43,    45,    43,    47,    43,    49, 
         43,    51,    43,    52,    43,    53,    43,    55,    43,    43, 
         50,    50,    24,    24,    46,    56,    46,    54,    54,    57, 
         57,    61,    60,    58,    58,    62,    59,    63,    63,    28, 
         64,    28,    65,    28,    28,    28,    67,    28,    68,    28, 
         69,    28,    70,    28,    71,    28,    28,    28,    28,    28, 
         28,    28,    28,    72,    72,    72,    72,    72,    72,    73, 
         73,    73,    73,    73,    73,    74,    74,    74,    74,    74, 
         74,    75,    75,    75,    75,    75,    75,    76,    76,    66, 
         66,    78,    77,    77,    79,    77,    77,    48,    48,    80, 
         80,    10,    10,    10,    81,    81,    82,    82,    19,    19, 
          9,     9,    83,    83,    84,    84,    84,    84,    84,    84, 
         84, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     4, 
          1,     3,     0,     9,     0,     9,     0,     8,     0,     2, 
          0,     2,     0,     2,     0,     3,     2,     0,     1,     1, 
          2,     2,     0,     1,     0,     3,     0,     6,     5,     6, 
          0,     1,     2,     4,     4,     0,     2,     0,     9,     0, 
          8,     0,     9,     1,     3,     0,     1,     1,     3,     3, 
          3,     0,     2,     1,     1,     1,     1,     1,     1,     0, 
          1,     1,     2,     0,     4,     0,     7,     0,    10,     0, 
          8,     0,     6,     0,     7,     0,     6,     0,     4,     2, 
          4,     1,     1,     3,     0,     0,     3,     2,     1,     1, 
          2,     0,     9,     0,     1,     0,     5,     0,     1,     1, 
          0,     4,     0,     5,     1,     1,     0,     3,     0,     8, 
          0,     5,     0,     8,     0,     6,     3,     1,     1,     1, 
          1,     1,     5,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     2,     2,     2,     2,     2,     2,     2,     2,     0, 
          1,     0,     4,     2,     0,     6,     2,     0,     1,     1, 
          3,     1,     4,     3,     1,     3,     1,     3,     1,     3, 
          0,     1,     1,     2,     1,     1,     1,     1,     1,     1, 
          1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,   185,   187,   186,   188,   190,   189,   191,     1,     0, 
        182,     0,     8,     0,     4,     0,    13,    17,    15,   184, 
         12,    10,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   174,     0,   177,     0, 
          0,    20,     0,     0,     0,    24,    28,     0,     0,   173, 
          0,    22,    28,     0,     0,    33,   178,   176,     0,   180, 
          0,    18,     0,    27,    29,    30,     0,    14,     0,     0, 
        111,     0,     0,     0,     0,     0,   116,   115,   117,    74, 
          0,    88,   119,    78,    82,    84,    80,    76,     0,     0, 
          0,    31,     0,    93,   128,   129,   130,   131,   132,     0, 
          0,     0,     0,     0,    16,    34,    32,     0,     0,     0, 
          0,     0,     0,     0,   125,     0,     0,    86,     0,     0, 
          0,     0,     0,     0,     0,    71,     0,     0,     0,   113, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   158,   159,     0,     0,     0,     0, 
          0,     0,    90,    50,    64,    65,    66,    67,    68,    69, 
          0,     0,     0,     0,     0,     0,     0,     0,   169,     0, 
        162,     0,   118,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    94,    73,   127,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   140,   141,   142,   143,   144,   145,     0,    52, 
          0,     0,    48,     0,     0,    28,    36,     0,     0,   112, 
          0,     0,     0,     0,    75,     0,    89,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    57, 
          0,     0,     0,    43,     0,    42,     0,     0,     0,    39, 
          0,     0,   171,     0,     0,     0,   165,     0,     0,     0, 
          0,     0,     0,     0,   114,   122,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    40,     0,    26,     0,   126, 
        163,     0,   102,   106,    87,     0,    99,     0,     0,     0, 
         83,     0,     0,     0,     0,     0,    61,    60,     0,     0, 
         59,     0,    44,    45,     0,    38,     0,     0,     0,    98, 
        105,   101,     0,     0,    85,     0,     0,    96,    77,     0, 
         63,    54,     0,    51,     0,     0,   166,     0,     0,   120, 
          0,     0,    81,     0,   124,     0,    53,    49,     0,     0, 
          0,    91,    97,    55,     0,   107,    79,     0,     0,     0, 
        103, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    19,   101,     4,     7,     8,    11,    73,    55, 
         33,    43,    54,    65,    35,    77,    34,    45,    56,   227, 
         74,    75,    76,   102,   117,   175,   176,   103,   225,   222, 
        257,   136,   249,   258,   310,   334,   219,   171,   252,   137, 
        250,   251,   104,   127,   135,   329,   131,   178,   134,   304, 
        132,   133,   186,   295,   129,   344,   296,   320,   297,   298, 
        318,   319,   266,   120,   197,   183,   126,   130,   198,   199, 
        180,   105,   106,   107,   108,   109,   184,   232,   292,   179, 
         50,    51,    21,    22, 
    );
    protected static $yySindex = array(         -256,
          0,     0,  -226,  -165,     0,    17,     0,  -226,    51,    63, 
       -165,     0,     0,     0,     0,     0,     0,     0,     0,  -149, 
          0,    17,     0,  -165,     0,    85,     0,     0,     0,     0, 
          0,     0,  -165,  -165,  -165,   -22,  -173,  -161,  -173,    61, 
        -44,  -165,  -156,  -165,    44,  -156,     0,  -133,     0,   116, 
        138,     0,  -165,    58,   148,     0,     0,    71,  -165,     0, 
        -44,     0,     0,  -165,   255,     0,     0,     0,   331,     0, 
       1509,     0,  -221,     0,     0,     0,   -33,     0,  1459,  1459, 
          0,  1459,  1459,  1459,  1459,    78,     0,     0,     0,     0, 
         72,     0,     0,     0,     0,     0,     0,     0,  1841,  1459, 
        -82,     0,   170,     0,     0,     0,     0,     0,     0,    81, 
         21,  -143,  -247,     0,     0,     0,     0,   -59,   -59,  1459, 
        -59,   -59,   -59,   -59,     0,   -89,  1459,     0,  1459,  -165, 
        158,   159,  1509,   160,   178,     0,    94,  1841,   197,     0, 
          0,  1459,  1459,  1459,  1459,  1459,  1459,  1459,  1459,  1459, 
       1459,  1459,  1459,  1459,     0,     0,  1459,  1459,  1459,  1459, 
       1459,  1459,     0,     0,     0,     0,     0,     0,     0,     0, 
        182,   -35,   183,   174,   114,   201,   219,   150,     0,  1459, 
          0,   -14,     0,   -89,   246,  1841,   274,   214,  1459,  1459, 
       -106,  1459,  1459,     0,     0,     0,  1459,   -73,     8,   -59, 
        -59,   -59,   -59,   -59,   -59,   366,   -59,   -59,   -59,   -59, 
        -59,   -59,     0,     0,     0,     0,     0,     0,  -165,     0, 
       -112,   -35,     0,  1459,   211,     0,     0,  1459,  1459,     0, 
        230,  1459,   232,   -89,     0,   149,     0,  1459,   217,   650, 
        237,   672,   699,   185,   -89,   244,  1459,   -30,   245,     0, 
        241,  -165,   247,     0,  1841,     0,   233,  -165,   791,     0, 
        359,   742,     0,   -89,   791,   202,     0,  -302,   263,  1459, 
       1509,  1459,   -28,  1509,     0,     0,  1459,   -59,   -26,   174, 
         -6,  -165,   277,   281,   199,     0,   288,     0,   114,     0, 
          0,  1459,     0,     0,     0,    -7,     0,    -5,   114,   287, 
          0,   769,   279,   306,   -20,   315,     0,     0,  -165,   -29, 
          0,    -6,     0,     0,    -6,     0,   316,   309,   235,     0, 
          0,     0,   -89,  1459,     0,   299,  1509,     0,     0,   -89, 
          0,     0,  1841,     0,   -29,   -29,     0,  -165,  1841,     0, 
        335,    37,     0,  1509,     0,   253,     0,     0,    39,   256, 
       1509,     0,     0,     0,   342,     0,     0,   261,  1841,   260, 
          0, 
    );
    protected static $yyRindex= array(          998,
          0,     0,   747,     0,     0,  -136,     0,  1225,  1581,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    30,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    15,  -103,   264,  -103,     0, 
          0,     0,   265,     0,     0,   265,     0,     0,     0,     0, 
        324,     0,     0,     0,   -15,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,  -220,     0,     0,     0,  -220,     0, 
        137,     0,     0,     0,     0,     0,  -258,     0,     0,     0, 
          0,     0,     0,     0,     0,   -37,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   280,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   -46, 
          0,     0,     0,   308,     0,     0,     0,   471,   800,   296, 
        845,   868,   899,   922,     0,    70,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   285,     0,     0, 
       -242,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   345,  -110,     0,   152,     0,     0,   365, 
          0,     0,     0,    98,     0,   280,     0,     0,   353,     0, 
          0,     0,     0,     0,     0,     0,   296,     0,     0,   953, 
        976,  1072,  1175,  1184,  1250,     0,  1278,  1305,  1332,  1359, 
       1368,  1396,     0,     0,     0,     0,     0,     0,   373,     0, 
          0,   357,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   332,   -10,   143,     0,     0,     0,   365,     0,     0, 
          0,     0,     0,     0,    70,     0,     0,     0,     0,     0, 
        389,   373,     0,     0,     0,     0,     0,   373,    32,     0, 
       -220,     0,     0,    70,   343,     0,     0,     0,     0,   353, 
          0,     0,     0,     0,     0,     0,   365,  1423,     0,    38, 
          2,     0,     0,     0,     0,     0,     0,     0,  -110,     0, 
          0,   365,     0,     0,     0,  1657,     0,  1553,    43,     0, 
          0,     0,   394,     0,  1751,     0,     0,     0,     0,     0, 
          0,     2,     0,     0,     2,     0,     0,     0,     0,     0, 
          0,     0,    70,   365,     0,     0,     0,     0,     0,    70, 
          0,     0,   280,     0,     0,     0,     0,     0,   280,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   280,     0, 
          0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,  2005,     0,   429,     0,     0,   432,   666, 
          0,   401,   395,   -47,     0,     0,     0,     0,   -36,  -224, 
        376,     0,     0,    88,     0,     0,     0,  2088,   162,   236, 
          0,  -109,   -90,     0,  -192,  -265,     0,     0,     0,  -150, 
        177,     0,   127,     0,     0,     0,     0,   660,     0,     0, 
          0,     0,     0,     0,     0,     0,   163,     0,   167,     0, 
          0,     0,     0,     0,     0,  -204,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,  -138,     0,     0,   239, 
        403,     0,   443,     0, 
    );
    protected static $yyTable = array(110,
        157,   181,   158,   110,   110,   110,   110,   110,   140,   110, 
        255,   279,   173,    11,    25,    69,    62,   123,    48,    19, 
        110,   110,   110,   110,   110,   110,   164,    70,   195,   332, 
        164,   164,   164,   164,   164,   236,   164,    41,   110,   181, 
        276,   293,   294,   179,    11,   234,     1,   164,   164,   164, 
        164,   164,   164,    11,   172,   110,   172,   169,   172,   290, 
         62,   181,   167,   165,   316,   166,   154,   168,    40,   347, 
        348,   181,    47,   172,   323,    47,   172,     5,    46,    25, 
        164,    46,   164,    25,    25,    25,    25,    25,   110,    25, 
         47,   115,   174,   333,     9,   234,    24,   121,   111,   181, 
         25,    25,    25,    25,    25,    25,   160,   179,   112,   181, 
        160,   160,   160,   160,   160,   164,   160,   125,   340,   335, 
        164,    25,   336,    24,    62,   345,    24,   160,   160,   160, 
        160,   160,   160,    25,   161,    25,    42,   172,   161,   161, 
        161,   161,   161,    32,   161,   285,   170,   253,    44,    25, 
         27,    28,    29,    47,    53,   161,   161,   161,   161,   161, 
        161,   283,   160,   181,   181,   181,    57,   287,    25,    25, 
         25,    25,    25,    25,    25,    25,    59,    60,   261,   167, 
         63,    61,   346,   167,   167,   167,   167,   167,   350,   167, 
        161,    64,   170,    66,   128,   160,   172,   189,   190,   192, 
        167,   167,   167,   167,   167,   167,   147,    19,   360,    25, 
        170,   145,   143,    11,   144,     9,   146,   193,   194,    25, 
        191,   220,   223,   161,   221,   138,   114,   254,   163,   157, 
        142,   158,   148,   147,   224,   167,   226,   196,   145,   143, 
        228,   144,   230,   146,   170,   233,    12,    13,    14,    71, 
         16,    17,    18,   238,   241,   147,   157,   142,   158,   148, 
        145,   143,   229,   144,   138,   146,   245,   246,   167,   260, 
        264,   267,   331,   268,   172,   270,   272,   275,   157,   142, 
        158,   148,   147,   277,   282,   281,   284,   145,   143,   183, 
        144,   286,   146,    11,   291,   154,    12,    13,    14,    15, 
         16,    17,    18,   299,   235,   157,   142,   158,   148,   280, 
        147,   303,   138,   307,   309,   145,   143,   312,   144,   182, 
        146,   313,   154,   314,   172,   172,   110,   141,   315,   183, 
        183,   183,   237,   157,   142,   158,   148,   294,   293,   326, 
        160,   159,   155,   156,   154,   324,   327,    37,   338,   183, 
        328,   161,   162,   164,   172,   330,   337,   339,   301,   183, 
        342,   305,   110,   110,   110,   110,   110,   110,   110,   110, 
        110,   154,    11,   110,   110,   351,   352,   354,   355,    72, 
        356,   138,   358,   359,   361,   175,    23,    21,   168,   164, 
        164,   164,   164,   164,   164,   164,   164,   164,   164,   154, 
        164,   164,   147,    46,    70,   168,    25,   145,   143,    72, 
        144,   168,   146,    56,   343,    41,   188,   188,   188,   188, 
        188,   188,   188,   247,   108,   157,   142,   158,   148,    58, 
         35,   353,    35,   160,    92,   109,    23,    20,   357,    46, 
         58,   308,    25,    25,    25,    25,    25,    25,    25,    25, 
         25,    25,   116,    25,    25,    78,   188,   256,   311,   138, 
        322,   161,   321,    68,    30,   138,   188,   263,     0,   160, 
        160,   160,   160,   160,   160,   160,   160,   160,     0,     0, 
        160,   160,     0,   288,     0,   138,     0,     0,     0,     0, 
          0,   154,     0,     0,     0,     0,     0,   161,   161,   161, 
        161,   161,   161,   161,   161,   161,   167,   154,   161,   161, 
          0,   154,   154,   154,   154,   154,     0,   154,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   154,   154, 
          0,   154,     0,   154,    12,    13,    14,    71,    16,    17, 
         18,     0,   167,   167,   167,   167,   167,   167,   167,   167, 
        167,     0,     0,   167,   167,     0,     0,     0,     0,     0, 
          0,     0,     0,   154,     0,     0,     0,    35,     0,   160, 
        159,   155,   156,   149,   150,   151,   152,   153,     0,     0, 
        161,   162,     0,     0,     0,     0,     0,    35,    35,    35, 
         35,    35,    35,    35,     0,     0,   160,   159,   155,   156, 
        149,   150,   151,   152,   153,     0,     0,   161,   162,     0, 
         12,    13,    14,    71,    16,    17,    18,     0,   160,   159, 
        155,   156,   149,   150,   151,   152,   153,    35,     0,   161, 
        162,     0,     0,     0,     0,     0,     0,    35,    12,    13, 
         14,    71,    16,    17,    18,   160,   159,   155,   156,   149, 
        150,   151,   152,   153,     0,     0,   161,   162,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   160,   159,   155,   156,   149,   150,   151, 
        152,   153,     0,     0,   161,   162,   147,     0,     0,     0, 
        271,   145,   143,     0,   144,     0,   146,     0,    37,    38, 
         39,     0,     0,     0,     0,     0,    49,    52,   147,   157, 
        142,   158,   148,   145,   143,     0,   144,     0,   146,     0, 
          0,     0,     0,     0,     0,     0,    49,     0,     0,     0, 
          0,   157,   142,   158,   148,   147,     0,     0,   113,   274, 
        145,   143,     0,   144,     0,   146,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   157,   142, 
        158,   148,     0,     0,     0,   160,   159,   155,   156,   149, 
        150,   151,   152,   153,     0,   154,   161,   162,   147,     0, 
          0,     0,   289,   145,   143,     0,   144,     0,   146,     0, 
          0,     0,     0,     0,     0,   188,     0,   154,     0,     0, 
          0,   157,   142,   158,   148,   147,     0,     0,     0,   325, 
        145,   143,     0,   144,     0,   146,     0,     0,     0,     0, 
          0,     0,     0,     0,   154,     0,     0,   147,   157,   142, 
        158,   148,   145,   143,   154,   144,   155,   146,     0,   231, 
        155,   155,   155,   155,   155,     0,   155,     0,   239,     0, 
        157,   142,   158,   148,     0,     0,   244,   155,   155,     0, 
        155,     0,   155,     0,     0,     0,     0,   154,     0,     0, 
          0,     0,     0,     0,   154,   154,   154,   154,   154,     0, 
          0,   152,     0,     0,   248,   152,   152,   152,   152,   152, 
          0,   152,   155,     0,   154,     0,     0,   269,     0,     0, 
          0,     0,   152,   152,   153,   152,     0,   152,   153,   153, 
        153,   153,   153,     0,   153,     0,   154,   248,     0,     0, 
          0,     0,     0,   248,     0,   153,   153,     0,   153,   300, 
        153,     0,     0,     0,     0,   156,   306,   152,     0,   156, 
        156,   156,   156,   156,     0,   156,     0,   248,     0,     0, 
          0,   317,     0,     0,     0,     0,   156,   156,   157,   156, 
        153,   156,   157,   157,   157,   157,   157,     0,   157,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   157, 
        157,     0,   157,   341,   157,     0,     0,     0,     0,   134, 
          0,   156,     0,   134,   134,   134,   134,   134,     0,   134, 
          0,     0,     0,   349,     0,     0,     0,     0,     0,     0, 
        134,   134,   146,   134,   157,   134,   146,   146,   146,   146, 
        146,     0,   146,     0,     0,     0,     5,     5,     5,     5, 
          5,     5,     5,   146,   146,   273,   146,     0,   146,     0, 
          0,     0,     0,     0,     0,   134,     5,     5,     5,   160, 
        159,   155,   156,   149,   150,   151,   152,   153,     0,     0, 
        161,   162,     0,     0,     0,     0,     0,     0,   146,     0, 
          0,   160,   159,   155,   156,   149,   150,   151,   152,   153, 
          0,     0,   161,   162,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   160,   159, 
        155,   156,   149,   150,   151,   152,   153,     0,   147,   161, 
        162,     0,   147,   147,   147,   147,   147,     0,   147,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   147, 
        147,     0,   147,     0,   147,     0,     0,     0,     0,     0, 
          0,   160,   159,   155,   156,   149,   150,   151,   152,   153, 
          0,     0,   161,   162,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   155,   147,     0,     0,     0,   160,   159, 
        155,   156,   149,   150,   151,   152,   153,     0,     0,   161, 
        162,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        160,   159,   155,   156,   149,   150,   151,   152,   153,     0, 
          0,   161,   162,   155,   155,   155,   155,   155,   152,     0, 
          0,   148,     0,     0,     0,   148,   148,   148,   148,   148, 
        149,   148,     0,     0,   149,   149,   149,   149,   149,     0, 
        149,   153,   148,   148,     0,   148,     0,   148,     0,     0, 
          0,   149,   149,     0,   149,     0,   149,     0,   152,   152, 
        152,   152,   152,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   156,     0,     0,     0,     0,   148,     0,     0, 
          0,   153,   153,   153,   153,   153,   149,     2,     2,     2, 
          2,     2,     2,     2,     0,   157,   150,     0,     0,     0, 
        150,   150,   150,   150,   150,     0,   150,     2,     2,     2, 
          0,     2,   156,   156,   156,   156,   156,   150,   150,     0, 
        150,     0,   150,     0,   135,     0,   134,     0,   135,   135, 
        135,   135,   135,     0,   135,   157,   157,   157,   157,   157, 
          0,     0,     0,     0,     0,   135,   135,     0,   135,   146, 
        135,   136,   150,     0,     0,   136,   136,   136,   136,   136, 
          0,   136,     0,     0,     0,     0,   134,   134,   134,   134, 
        134,     0,   136,   136,     0,   136,     0,   136,   137,     0, 
        135,     0,   137,   137,   137,   137,   137,     0,   137,   146, 
        146,   146,   146,   146,     0,     0,     0,     0,     0,   137, 
        137,     0,   137,     0,   137,   138,     0,   136,     0,   138, 
        138,   138,   138,   138,   139,   138,     0,     0,   139,   139, 
        139,   139,   139,     0,   139,     0,   138,   138,     0,   138, 
          0,   138,     0,     0,   137,   139,   139,     0,   139,     0, 
        139,     0,   151,     0,     0,   147,   151,   151,   151,   151, 
        151,     0,   151,     0,     0,     0,     0,     0,     0,     0, 
          0,   138,     0,   151,   151,     0,   151,     0,   151,   133, 
        139,     0,     0,   133,   133,   133,   133,   133,     0,   133, 
          0,     0,     0,     0,     0,   147,   147,   147,   147,   147, 
        133,   133,     0,   133,     0,   133,     0,     0,   151,     0, 
          0,    82,     0,     0,     0,     0,     0,     0,   100,     0, 
          0,    79,     0,    80,     7,     7,     7,     7,     7,     7, 
          7,     0,     0,     0,     0,   133,     0,     0,     0,     0, 
          0,     0,     0,     0,     7,     7,     7,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   148,     0, 
          0,    82,     0,     0,     0,     0,     0,   149,   100,    81, 
          0,    79,     0,    80,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   148,   148, 
        148,   148,   148,     0,    83,   100,     0,   149,   149,   149, 
        149,   149,   100,     0,     0,   100,     0,   100,     0,    81, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   150,     0,     0,     0,     0,     0,     0, 
         11,     0,    11,     0,    11,     0,     0,     0,     0,     0, 
          0,    99,     0,     0,    83,     0,     0,     0,     0,    11, 
         11,   135,    11,   100,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   150,   150,   150,   150,   150,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   136,     0, 
          0,    11,     0,     0,     0,     0,     0,   100,   100,     0, 
          0,   135,   135,   135,   135,   135,     0,     0,     0,   104, 
          0,     0,     0,     0,     0,   137,   104,     0,     0,   104, 
          0,   104,     0,    11,     0,     0,     0,     0,   136,   136, 
        136,   136,   136,     0,     0,     0,     0,     0,    86,    87, 
         88,     0,   138,     0,     0,     0,     0,     0,     0,     0, 
          0,   139,     0,     0,     0,   137,   137,   137,   137,   137, 
          0,     0,     0,     0,     0,     0,     0,   104,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   151, 
          0,     0,   138,   138,   138,   138,   138,     0,    86,    87, 
         88,   139,   139,   139,   139,   139,     0,     0,     0,     0, 
          0,   104,   104,    95,     0,     0,   133,     0,     0,     0, 
         95,     0,     0,    95,     0,    95,     0,     0,    89,   151, 
        151,   151,   151,   151,    93,     0,     0,     0,     0,     0, 
          0,     0,   100,   100,   100,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   133,   133,   133,   133, 
        133,     0,   100,   100,   100,   100,   100,   100,   100,     0, 
         11,    95,     0,     0,     0,     0,     0,     0,    89,    90, 
         91,    92,     0,     0,    93,     0,     0,     0,     0,     0, 
         84,    85,     0,     0,     0,     0,     0,     0,    94,    95, 
         96,    97,   100,    82,     0,    95,    95,     0,    98,     0, 
        100,     0,   100,    79,     0,    80,     0,     0,     0,     0, 
         11,    11,   100,   100,   100,   100,     0,   100,   100,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         84,    85,   100,   100,   100,   100,   104,   104,   104,     0, 
         11,     0,   100,   100,     0,     0,     0,     0,     0,     0, 
          0,    81,     0,     0,     0,     0,   104,   104,   104,   104, 
        104,   104,   104,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   100,   100,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    83,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   104,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   104,     0,     0,     0, 
         11,     0,     0,     0,     0,     0,   104,   104,   104,   104, 
          0,     0,   104,     0,     0,     0,     0,     0,    10,     0, 
         95,    95,    95,     0,     0,    26,   104,   104,   104,   104, 
          0,     0,     0,     0,     0,     0,   104,   104,    31,     0, 
         95,    95,    95,    95,    95,    95,    95,    36,    36,    36, 
          0,     0,     0,     0,     0,    36,    36,     0,    36,     0, 
          0,     0,     0,     0,     0,     0,     0,    36,   104,   104, 
          0,     0,     0,    67,     0,    36,     0,     0,    36,     0, 
         95,     0,     0,     0,     0,     0,     0,    36,     0,     0, 
         95,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         95,    95,    95,    95,     0,     0,    95,     0,     0,     0, 
         86,    87,    88,     0,     0,     0,     0,     0,     0,     0, 
         95,    95,    95,    95,     0,     0,     0,     0,     0,     0, 
         95,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    36,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    95,    95,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   118,   119,     0,   121, 
        122,   123,   124,     0,     0,     0,     0,     0,     0,     0, 
         89,    90,    91,    92,     0,     0,    93,   139,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         94,    95,    96,    97,     0,     0,     0,   177,     0,     0, 
         98,     0,     0,     0,   185,     0,   187,     0,     0,     0, 
          0,     0,     0,    36,     0,     0,     0,     0,     0,   200, 
        201,   202,   203,   204,   205,   206,   207,   208,   209,   210, 
        211,   212,    84,    85,   213,   214,   215,   216,   217,   218, 
          0,     0,     0,     0,     0,     0,    36,     0,     0,     0, 
          0,     0,    36,     0,     0,     0,     0,   177,     0,     0, 
          0,     0,     0,     0,     0,     0,   177,   240,     0,   242, 
        243,     0,     0,     0,   177,     0,    36,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   259,     0,    36,     0,   262,   177,     0,     0,   265, 
          0,     0,     0,     0,     0,   177,     0,     0,     0,     0, 
          0,     0,     0,     0,   278,     0,     0,     0,     0,     0, 
          0,     0,    36,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   177,     0,   302, 
          0,     0,     0,     0,   177,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   177, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   177, 
    );
    protected static $yyCheck = array(37,
         60,    91,    62,    41,    42,    43,    44,    45,    91,    47, 
        123,    42,   260,    60,   125,    63,    53,   260,    63,   123, 
         58,    59,    60,    61,    62,    63,    37,    64,   138,    59, 
         41,    42,    43,    44,    45,   186,    47,    60,   260,   260, 
        245,   344,   345,    59,    91,   184,   303,    58,    59,    60, 
         61,    62,    63,    91,    40,    93,    42,    37,    44,   264, 
         59,   320,    42,    43,   289,    45,   126,    47,    91,   335, 
        336,   330,    41,    59,   299,    44,    62,   304,    41,    37, 
         91,    44,    93,    41,    42,    43,    44,    45,   126,    47, 
         59,   125,   340,   123,   260,   234,    46,   340,   320,   320, 
         58,    59,    60,    61,    62,    63,    37,   123,   330,   330, 
         41,    42,    43,    44,    45,   126,    47,    40,   323,   312, 
         40,    59,   315,    46,   123,   330,    46,    58,    59,    60, 
         61,    62,    63,    91,    37,    93,   310,   123,    41,    42, 
         43,    44,    45,    59,    47,   255,   126,   260,   310,   260, 
        300,   301,   302,    93,   311,    58,    59,    60,    61,    62, 
         63,   252,    93,   300,   301,   302,   123,   258,   126,   280, 
        281,   282,   283,   284,   285,   286,   310,    62,   226,    37, 
        123,    44,   333,    41,    42,    43,    44,    45,   339,    47, 
         93,    44,    41,   123,   123,   126,   340,    40,    40,    40, 
         58,    59,    60,    61,    62,    63,    37,   311,   359,   320, 
         59,    42,    43,   260,    45,   260,    47,    40,   125,   330, 
        133,    40,    40,   126,   260,    99,   260,   340,    59,    60, 
         61,    62,    63,    37,    61,    93,   123,    41,    42,    43, 
         40,    45,    93,    47,    93,   260,   280,   281,   282,   283, 
        284,   285,   286,    40,   361,    37,    60,    61,    62,    63, 
         42,    43,    44,    45,   138,    47,   340,   260,   126,    59, 
         41,    40,   309,   125,   260,    59,    40,    93,    60,    61, 
         62,    63,    37,    40,    44,    41,    40,    42,    43,   260, 
         45,    59,    47,   340,    93,   126,   280,   281,   282,   283, 
        284,   285,   286,    41,    59,    60,    61,    62,    63,   340, 
         37,   340,   186,   340,   321,    42,    43,    41,    45,   409, 
         47,    41,   126,   125,   310,   311,   364,   410,    41,   300, 
        301,   302,    59,    60,    61,    62,    63,   345,   344,    61, 
        400,   401,   402,   403,   126,    59,    41,    40,    40,   320, 
        371,   411,   412,   364,   340,    41,    41,   123,   271,   330, 
         62,   274,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   126,   410,   411,   412,    41,   340,   125,   340,   125, 
        125,   255,    41,   123,   125,    62,   123,   123,    93,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   409,   126, 
        411,   412,    37,    59,   125,    41,   364,    42,    43,   125, 
         45,    59,    47,    41,   327,    59,   280,   281,   282,   283, 
        284,   285,   286,    58,    93,    60,    61,    62,    63,    41, 
        123,   344,   125,   364,    41,    93,     8,     6,   351,    39, 
         46,   280,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   409,    77,   411,   412,   125,   320,   222,   282,   333, 
        298,   364,   296,    61,    22,   339,   330,   229,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   125,    -1,   359,    -1,    -1,    -1,    -1, 
         -1,   126,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   364,    37,   411,   412, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,   280,   281,   282,   283,   284,   285, 
        286,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    -1,    -1,    -1,   260,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,    -1,    -1,    -1,    -1,   280,   281,   282, 
        283,   284,   285,   286,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        280,   281,   282,   283,   284,   285,   286,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   320,    -1,   411, 
        412,    -1,    -1,    -1,    -1,    -1,    -1,   330,   280,   281, 
        282,   283,   284,   285,   286,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    37,    -1,    -1,    -1, 
         41,    42,    43,    -1,    45,    -1,    47,    -1,    33,    34, 
         35,    -1,    -1,    -1,    -1,    -1,    41,    42,    37,    60, 
         61,    62,    63,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1, 
         -1,    60,    61,    62,    63,    37,    -1,    -1,    73,    41, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61, 
         62,    63,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,   126,   411,   412,    37,    -1, 
         -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,   130,    -1,   126,    -1,    -1, 
         -1,    60,    61,    62,    63,    37,    -1,    -1,    -1,    41, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   126,    -1,    -1,    37,    60,    61, 
         62,    63,    42,    43,   364,    45,    37,    47,    -1,   180, 
         41,    42,    43,    44,    45,    -1,    47,    -1,   189,    -1, 
         60,    61,    62,    63,    -1,    -1,   197,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,   126,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    37,    -1,    -1,   219,    41,    42,    43,    44,    45, 
         -1,    47,    93,    -1,   126,    -1,    -1,   238,    -1,    -1, 
         -1,    -1,    58,    59,    37,    61,    -1,    63,    41,    42, 
         43,    44,    45,    -1,    47,    -1,   126,   252,    -1,    -1, 
         -1,    -1,    -1,   258,    -1,    58,    59,    -1,    61,   270, 
         63,    -1,    -1,    -1,    -1,    37,   277,    93,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,   282,    -1,    -1, 
         -1,   292,    -1,    -1,    -1,    -1,    58,    59,    37,    61, 
         93,    63,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,   324,    63,    -1,    -1,    -1,    -1,    37, 
         -1,    93,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,   338,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    37,    61,    93,    63,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,   280,   281,   282,   283, 
        284,   285,   286,    58,    59,   364,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    93,   300,   301,   302,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    37,   411, 
        412,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   364,    93,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,   404,   405,   406,   407,   408,   364,    -1, 
         -1,    37,    -1,    -1,    -1,    41,    42,    43,    44,    45, 
         37,    47,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,   364,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   364,    -1,    -1,    -1,    -1,    93,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    93,   280,   281,   282, 
        283,   284,   285,   286,    -1,   364,    37,    -1,    -1,    -1, 
         41,    42,    43,    44,    45,    -1,    47,   300,   301,   302, 
         -1,   304,   404,   405,   406,   407,   408,    58,    59,    -1, 
         61,    -1,    63,    -1,    37,    -1,   364,    -1,    41,    42, 
         43,    44,    45,    -1,    47,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,   364, 
         63,    37,    93,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    58,    59,    -1,    61,    -1,    63,    37,    -1, 
         93,    -1,    41,    42,    43,    44,    45,    -1,    47,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    37,    -1,    93,    -1,    41, 
         42,    43,    44,    45,    37,    47,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    93,    58,    59,    -1,    61,    -1, 
         63,    -1,    37,    -1,    -1,   364,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    -1,    58,    59,    -1,    61,    -1,    63,    37, 
         93,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    93,    -1, 
         -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1, 
         -1,    43,    -1,    45,   280,   281,   282,   283,   284,   285, 
        286,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   300,   301,   302,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,    -1, 
         -1,    33,    -1,    -1,    -1,    -1,    -1,   364,    40,    91, 
         -1,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,   126,    33,    -1,   404,   405,   406, 
        407,   408,    40,    -1,    -1,    43,    -1,    45,    -1,    91, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   364,    -1,    -1,    -1,    -1,    -1,    -1, 
         40,    -1,    42,    -1,    44,    -1,    -1,    -1,    -1,    -1, 
         -1,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,    59, 
         60,   364,    62,    91,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,    -1, 
         -1,    91,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    33, 
         -1,    -1,    -1,    -1,    -1,   364,    40,    -1,    -1,    43, 
         -1,    45,    -1,   123,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,    -1,   260,   261, 
        262,    -1,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   364,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,   260,   261, 
        262,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
         -1,   125,   126,    33,    -1,    -1,   364,    -1,    -1,    -1, 
         40,    -1,    -1,    43,    -1,    45,    -1,    -1,   340,   404, 
        405,   406,   407,   408,   346,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   260,   261,   262,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,   280,   281,   282,   283,   284,   285,   286,    -1, 
        260,    91,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341, 
        342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1, 
        402,   403,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361, 
        362,   363,   320,    33,    -1,   125,   126,    -1,   370,    -1, 
         40,    -1,   330,    43,    -1,    45,    -1,    -1,    -1,    -1, 
        310,   311,   340,   341,   342,   343,    -1,   345,   346,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        402,   403,   360,   361,   362,   363,   260,   261,   262,    -1, 
        340,    -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    91,    -1,    -1,    -1,    -1,   280,   281,   282,   283, 
        284,   285,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   402,   403,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   320,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   330,    -1,    -1,    -1, 
        410,    -1,    -1,    -1,    -1,    -1,   340,   341,   342,   343, 
         -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,     4,    -1, 
        260,   261,   262,    -1,    -1,    11,   360,   361,   362,   363, 
         -1,    -1,    -1,    -1,    -1,    -1,   370,   371,    24,    -1, 
        280,   281,   282,   283,   284,   285,   286,    33,    34,    35, 
         -1,    -1,    -1,    -1,    -1,    41,    42,    -1,    44,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    53,   402,   403, 
         -1,    -1,    -1,    59,    -1,    61,    -1,    -1,    64,    -1, 
        320,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1, 
        330,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        340,   341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1, 
        260,   261,   262,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        360,   361,   362,   363,    -1,    -1,    -1,    -1,    -1,    -1, 
        370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    79,    80,    -1,    82, 
         83,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        340,   341,   342,   343,    -1,    -1,   346,   100,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        360,   361,   362,   363,    -1,    -1,    -1,   120,    -1,    -1, 
        370,    -1,    -1,    -1,   127,    -1,   129,    -1,    -1,    -1, 
         -1,    -1,    -1,   219,    -1,    -1,    -1,    -1,    -1,   142, 
        143,   144,   145,   146,   147,   148,   149,   150,   151,   152, 
        153,   154,   402,   403,   157,   158,   159,   160,   161,   162, 
         -1,    -1,    -1,    -1,    -1,    -1,   252,    -1,    -1,    -1, 
         -1,    -1,   258,    -1,    -1,    -1,    -1,   180,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   189,   190,    -1,   192, 
        193,    -1,    -1,    -1,   197,    -1,   282,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   224,    -1,   309,    -1,   228,   229,    -1,    -1,   232, 
         -1,    -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   247,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   338,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,    -1,   272, 
         -1,    -1,    -1,    -1,   277,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   324, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 'T_FINAL', 
      'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 'T_PACKAGE', 
      'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 'T_IMPLEMENTS', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 'T_THROWS', NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 
      'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_AS', 
      'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 
      'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 'T_OBJECT_OPERATOR', 
      'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 111 "grammar/xp.jay"
    {
        $yyVal= new ParseTree();
        $yyVal->package= $yyVals[-2+$yyTop];
        $yyVal->imports= $yyVals[-1+$yyTop];
        $yyVal->declaration= $yyVals[0+$yyTop];
      } break;

    case 3:  #line 122 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 122 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 133 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 134 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 138 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 138 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
    } break;

    case 12:  #line 145 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 13:  #line 151 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 14:  #line 151 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 15:  #line 159 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 16:  #line 159 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 17:  #line 167 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 18:  #line 167 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 19:  #line 177 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 20:  #line 178 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 21:  #line 182 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 22:  #line 183 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 23:  #line 187 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 24:  #line 188 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 25:  #line 192 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 26:  #line 193 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 27:  #line 197 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 28:  #line 198 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 202 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 30:  #line 203 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 31:  #line 204 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[0+$yyTop]); } break;

    case 32:  #line 208 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 33:  #line 209 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 35:  #line 214 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 36:  #line 214 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= array('member' => $yyVals[-2+$yyTop]);
    } break;

    case 37:  #line 218 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 38:  #line 218 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= array('member' => $yyVals[-5+$yyTop]);
    } break;

    case 39:  #line 229 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
        $yyVal->modifiers= $yyVals[-4+$yyTop];
        $yyVal->type= $yyVals[-3+$yyTop];
        $yyVal->name= $yyVals[-2+$yyTop];
        $yyVal->initialization= $yyVals[-1+$yyTop];
      } break;

    case 40:  #line 235 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
        $yyVal->modifiers= $yyVals[-5+$yyTop];
        $yyVal->name= $yyVals[-3+$yyTop];
        $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
        $yyVal->get= $gs['get'];
        $yyVal->set= $gs['set'];
      } break;

    case 41:  #line 245 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 43:  #line 250 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 44:  #line 251 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 45:  #line 252 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 46:  #line 256 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 47:  #line 257 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 48:  #line 263 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 49:  #line 263 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
        $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
      } break;

    case 50:  #line 272 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 51:  #line 272 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
      } break;

    case 52:  #line 279 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 53:  #line 279 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 54:  #line 290 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 55:  #line 291 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 56:  #line 295 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 57:  #line 296 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 58:  #line 300 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 59:  #line 301 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 60:  #line 305 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 61:  #line 306 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 62:  #line 310 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 63:  #line 311 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 70:  #line 328 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 72:  #line 333 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 73:  #line 334 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 74:  #line 338 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 75:  #line 338 "grammar/xp.jay"
    { 
        $yyVal->expression= $yyVals[-1+$yyTop];
      } break;

    case 76:  #line 341 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 77:  #line 341 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
      } break;

    case 78:  #line 346 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 79:  #line 346 "grammar/xp.jay"
    {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
        $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
        $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 80:  #line 352 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 81:  #line 352 "grammar/xp.jay"
    {
        $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
        /* $1->assignment= $6; XX FIXME XX*/
        $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 82:  #line 357 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 83:  #line 357 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
        $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 84:  #line 361 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 85:  #line 361 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
      } break;

    case 86:  #line 365 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 87:  #line 365 "grammar/xp.jay"
    { 
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
        $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-4+$yyTop]; 
      } break;

    case 88:  #line 370 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 89:  #line 370 "grammar/xp.jay"
    { /* Throw statement */ 
        $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
      } break;

    case 91:  #line 377 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop], $yyVals[0+$yyTop]); } break;

    case 92:  #line 378 "grammar/xp.jay"
    { $yyVal= array(NULL, $yyVals[0+$yyTop]); } break;

    case 93:  #line 382 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 94:  #line 383 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 95:  #line 387 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 96:  #line 388 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 97:  #line 388 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 98:  #line 393 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 99:  #line 394 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 100:  #line 398 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 101:  #line 399 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 102:  #line 403 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 103:  #line 403 "grammar/xp.jay"
    {
        $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
        $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
        $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
      } break;

    case 104:  #line 411 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 106:  #line 416 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 107:  #line 416 "grammar/xp.jay"
    {
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      } break;

    case 108:  #line 424 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 110:  #line 429 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 111:  #line 430 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 112:  #line 430 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 113:  #line 434 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 114:  #line 434 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= new TypeName($yyVals[-4+$yyTop]);
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 115:  #line 439 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 116:  #line 440 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 117:  #line 441 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 118:  #line 441 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 119:  #line 444 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InstanceCreationNode()); } break;

    case 120:  #line 444 "grammar/xp.jay"
    { 
      $yyVals[-7+$yyTop]->type= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-7+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 121:  #line 449 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 122:  #line 449 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 123:  #line 454 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 124:  #line 454 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 125:  #line 460 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 126:  #line 460 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 127:  #line 466 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 128:  #line 467 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); } break;

    case 129:  #line 468 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); } break;

    case 130:  #line 469 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); } break;

    case 131:  #line 470 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); } break;

    case 132:  #line 471 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); $yyVal->postfix= TRUE; } break;

    case 133:  #line 472 "grammar/xp.jay"
    { /* XXX Ternary */ } break;

    case 134:  #line 476 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 135:  #line 477 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 136:  #line 478 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 137:  #line 479 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 138:  #line 480 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 139:  #line 481 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 140:  #line 485 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 141:  #line 486 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 142:  #line 487 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 143:  #line 488 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 144:  #line 489 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 145:  #line 490 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 146:  #line 494 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 147:  #line 495 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 148:  #line 496 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 149:  #line 497 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 150:  #line 498 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 151:  #line 499 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 152:  #line 503 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 153:  #line 504 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 154:  #line 505 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 155:  #line 506 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 156:  #line 507 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 157:  #line 508 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 158:  #line 512 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 159:  #line 513 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 160:  #line 518 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 162:  #line 523 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 163:  #line 523 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 164:  #line 526 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 165:  #line 530 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 166:  #line 530 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 167:  #line 534 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 168:  #line 538 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 170:  #line 543 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 171:  #line 544 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 172:  #line 550 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 173:  #line 551 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 174:  #line 552 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 175:  #line 556 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 176:  #line 557 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 178:  #line 562 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 179:  #line 566 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 180:  #line 567 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 181:  #line 573 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 182:  #line 574 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 183:  #line 578 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 184:  #line 579 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 185:  #line 583 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 186:  #line 584 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 187:  #line 585 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 188:  #line 586 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 189:  #line 587 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 190:  #line 588 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 191:  #line 589 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1623 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
