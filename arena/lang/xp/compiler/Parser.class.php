<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.StaticImportNode',
    'xp.compiler.ast.NativeImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.InstanceOfNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.SwitchNode',
    'xp.compiler.ast.CaseNode',
    'xp.compiler.ast.DefaultNode',
    'xp.compiler.ast.BreakNode',
    'xp.compiler.ast.ContinueNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 62 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_MOD_EQUAL= 408;
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_INSTANCEOF= 312;
    const T_CONCAT_EQUAL= 416;
    const T_INC= 402;
    const T_DEC= 403;
    const T_SE= 401;
    const T_GE= 400;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_PROPERTY= 330;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_NEW= 346;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     9,     7, 
          8,     8,     8,    10,    10,    10,     4,     4,    13,     3, 
         17,     3,    19,     3,    14,    14,    15,    15,    20,    20, 
         22,    22,    16,    16,    23,    23,    23,    18,    18,    18, 
         27,    27,    29,    28,    30,    28,    24,    24,    35,    35, 
         34,    34,    34,    33,    33,    38,    25,    41,    25,    43, 
         25,    11,    11,    44,    44,    46,    46,    46,    40,    40, 
         37,    37,    49,    49,    50,    50,    39,    39,    42,    42, 
         42,    42,    42,    42,    42,    42,    26,    26,    36,    36, 
         52,    51,    53,    51,    56,    51,    58,    51,    59,    51, 
         60,    51,    61,    51,    63,    51,    65,    51,    66,    51, 
         67,    51,    51,    51,    62,    62,    68,    68,    70,    69, 
         71,    69,    54,    54,    55,    72,    55,    64,    64,    73, 
         73,    77,    76,    74,    74,    78,    75,    57,    57,    79, 
         79,    47,    47,    80,    80,    81,    81,    81,    31,    84, 
         31,    85,    31,    86,    31,    87,    31,    31,    31,    31, 
         31,    31,    31,    31,    31,    31,    31,    82,    82,    93, 
         82,    82,    82,    82,    82,    82,    94,    94,    48,    48, 
         95,    88,    88,    88,    88,    88,    88,    88,    89,    89, 
         89,    89,    89,    89,    90,    90,    90,    90,    90,    90, 
         91,    91,    91,    91,    91,    91,    92,    92,    83,    83, 
         96,    96,    98,    97,    97,    99,    97,    32,    32,    12, 
         12,   100,   101,   101,   102,   102,    21,    21,    45,    45, 
        103,   103,   104,   104,   104,   104,   104,   104,   104,   104, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     7, 
          0,     1,     1,     1,     1,     3,     1,     3,     0,     9, 
          0,     9,     0,     8,     0,     2,     0,     2,     0,     2, 
          0,     3,     2,     0,     1,     1,     4,     3,     1,     0, 
          1,     3,     0,     3,     0,     6,     5,     6,     0,     1, 
          2,     4,     4,     0,     2,     0,     9,     0,     8,     0, 
         10,     4,     1,     1,     3,     2,     5,     5,     1,     3, 
          0,     1,     1,     3,     3,     3,     0,     2,     1,     1, 
          1,     1,     1,     1,     2,     3,     0,     1,     1,     2, 
          0,     4,     0,     7,     0,    10,     0,     8,     0,     6, 
          0,     7,     0,     8,     0,     6,     0,     3,     0,     3, 
          0,     4,     2,     1,     0,     1,     1,     2,     0,     5, 
          0,     4,     1,     3,     0,     0,     3,     2,     1,     1, 
          2,     0,     9,     0,     1,     0,     5,     0,     1,     1, 
          3,     0,     1,     5,     6,     1,     1,     4,     1,     0, 
          3,     0,     4,     0,     5,     0,     6,     3,     1,     1, 
          1,     1,     1,     5,     3,     3,     3,     1,     3,     0, 
          4,     3,     1,     1,     1,     1,     0,     1,     1,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          2,     2,     2,     2,     2,     2,     2,     2,     0,     1, 
          1,     2,     0,     4,     2,     0,     6,     1,     1,     1, 
          4,     3,     1,     3,     1,     3,     1,     3,     0,     1, 
          1,     2,     1,     1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   233,   235,   234,   236,   238,   237,   239,   240, 
          1,     0,    63,   230,     0,     8,     0,     4,    12,    13, 
          0,     0,     0,     0,    19,    23,    21,   232,    18,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    62,    65, 
          0,     0,     0,     0,    15,     0,     0,     0,     0,   170, 
          0,     0,     0,     0,     0,   176,   173,   175,   174,   150, 
        152,     0,     0,     0,     0,     0,     0,   149,   159,   160, 
        161,   162,   163,     0,     0,     0,     0,     0,     0,     0, 
          0,    10,     0,     0,     0,     0,     0,     0,     0,   156, 
          0,     0,     0,   178,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   207,   208,     0,     0,     0,     0, 
          0,     0,     0,    67,    68,     0,     0,     0,   218,   225, 
        219,     0,     0,    26,     0,     0,     0,    30,    34,     0, 
         16,     0,     0,   139,     0,   213,     0,   151,   210,     0, 
          0,     0,     0,   172,   158,   169,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   167,     0, 
          0,     0,     0,     0,     0,   189,   190,   191,   192,   193, 
        194,     0,   180,     0,     0,   221,     0,    28,    34,     0, 
          0,     0,     0,   171,     0,     0,     0,   212,     0,     0, 
        153,     0,   147,     0,     0,   226,   222,   224,     0,   228, 
          0,    24,     0,    33,    35,    36,     0,     0,     0,     0, 
        141,     0,     0,   216,     0,     0,     0,   155,     0,    20, 
          0,     0,     0,     0,     0,     0,    22,    34,     0,   157, 
        214,     0,     0,     0,     0,    91,     0,   111,    95,    99, 
        101,    97,   107,   109,    93,   103,   114,     0,     0,    88, 
          0,    58,     0,     0,     0,     0,    34,    44,     0,     0, 
         42,     0,     0,   144,   148,     0,   105,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    37,   113,    90,     0, 
          0,     0,    56,    83,    79,    80,    81,    82,     0,    84, 
          0,     0,     0,     0,     0,   217,   145,     0,     0,     0, 
          0,     0,     0,   123,     0,     0,   108,   110,     0,     0, 
          0,     0,    72,     0,     0,    51,     0,    50,     0,     0, 
         85,     0,    60,     0,    47,    32,     0,    92,     0,   112, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    48,     0,    86,     0,    46,     0, 
          0,     0,   124,     0,     0,     0,     0,    76,    75,     0, 
          0,    74,    52,    53,     0,     0,   132,   136,   106,     0, 
        129,     0,     0,   100,     0,     0,     0,     0,    78,    69, 
          0,    59,     0,     0,     0,     0,   128,   135,   131,     0, 
        102,     0,   126,    94,   119,   121,     0,   116,     0,     0, 
         57,     0,     0,     0,     0,    98,     0,     0,     0,   104, 
        118,    70,    61,     0,     0,     0,   127,     0,     0,     0, 
        137,    96,     0,   122,     0,   120,     0,     0,   133, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    21,    74,     4,     7,     8,    31,    11,    57, 
        223,   139,    44,    87,   146,   201,    46,   228,    45,    89, 
        148,   278,   224,   225,   226,   268,   229,   230,   245,   246, 
        269,   331,   313,   302,   339,   270,   332,   340,   381,   402, 
        300,   311,   368,    33,    23,    34,    76,   104,   333,   334, 
        271,   286,   295,   325,   414,   289,   153,   292,   290,   291, 
        296,   417,   319,   389,   293,   294,   288,   418,   419,   428, 
        429,   427,   390,   407,   391,   392,   405,   406,   154,   163, 
        214,    78,   158,   101,   102,   167,   155,    79,    80,    81, 
         82,    83,    95,   105,    84,   159,   160,   206,   252,   141, 
        142,   143,    24,    25, 
    );
    protected static $yySindex = array(         -253,
          0,     0,  -249,  -183,     0,   533,     0,  -249,    33,    64, 
        -17,    68,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   -18,     0,     0,   210,     0,  -183,     0,     0,     0, 
       -168,  -183,    41,   104,     0,     0,     0,     0,     0,   109, 
        147,   210,    68,  -183,  -183,  -183,   -27,   266,     0,     0, 
        148,   -86,   -72,   -86,     0,   199,   188,   266,   266,     0, 
        266,   266,   266,   266,   151,     0,     0,     0,     0,     0, 
          0,   266,   266,  -157,   425,   227,   231,     0,     0,     0, 
          0,     0,     0,   234,   -43,  -183,   -32,  -183,   165,   -32, 
        -27,     0,  1888,  1888,   266,   -57,   -57,   -57,   -57,     0, 
         58,  -183,   425,     0,   168,   664,    -2,   266,   266,   266, 
        266,   266,   266,   266,   266,   266,   266,  -183,   266,   266, 
        266,   266,   266,   266,     0,     0,   266,   266,   266,   266, 
        266,   266,   266,     0,     0,   266,   -13,   -24,     0,     0, 
          0,   241,   263,     0,  -183,   185,   271,     0,     0,   193, 
          0,   877,   233,     0,   266,     0,    67,     0,     0,    58, 
         -3,   289,    58,     0,     0,     0,  -239,  1790,  1790,  1311, 
        272,  1790,  1790,  1790,  1790,  1790,  1790,  1790,     0,  1790, 
       1888,  1888,   -57,   -57,   -57,     0,     0,     0,     0,     0, 
          0,  1311,     0,  -183,   238,     0,   -43,     0,     0,  -183, 
        160,    73,   266,     0,   293,   266,   307,     0,   255,   266, 
          0,   309,     0,    58,   266,     0,     0,     0,   500,     0, 
        228,     0,  -234,     0,     0,     0,     0,   225,   294,   308, 
          0,    58,   267,     0,   236,   315,   266,     0,  1790,     0, 
       2954,   152,    22,  -190,   240,   325,     0,     0,    73,     0, 
          0,   266,   266,   240,   326,     0,   243,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   244,  1040,     0, 
       2954,     0,   113,   334,    11,   316,     0,     0,   266,   645, 
          0,   341,   259,     0,     0,   266,     0,   266,   346,   347, 
       3006,   348,   331,   332,   353,   354,     0,     0,     0,  -183, 
       -114,   113,     0,     0,     0,     0,     0,     0,   -77,     0, 
        355,   266,   337,   603,  1067,     0,     0,   362,  2954,  1089, 
        266,   266,  2954,     0,    51,    82,     0,     0,   266,   266, 
        -36,   384,     0,   382,   387,     0,  2954,     0,   371,  -183, 
          0,   363,     0,  1311,     0,     0,   240,     0,   306,     0, 
        380,  1116,   323,   338,   415,    93,  1145,  1175,   118,   316, 
        139,  -183,   420,   340,     0,   422,     0,  -183,     0,  -122, 
        266,  3006,     0,   266,   266,  3006,   343,     0,     0,  -183, 
        -29,     0,     0,     0,   139,   430,     0,     0,     0,   128, 
          0,   130,   416,     0,  1202,  1257,   105,   -99,     0,     0, 
       2954,     0,   -29,   139,   438,   360,     0,     0,     0,   266, 
          0,  3006,     0,     0,     0,     0,   374,     0,   -99,   375, 
          0,   -29,  -183,  2954,   460,     0,  3006,   266,   452,     0, 
          0,     0,     0,   171,   388,  3006,     0,  1284,  2954,   471, 
          0,     0,  2954,     0,   392,     0,  2954,   389,     0, 
    );
    protected static $yyRindex= array(          378,
          0,     0,    38,     0,     0,   -11,     0,   477,   169,     0, 
        258,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   -65,     0,     0,     0,     0,     0, 
          0,     0,     0,   432,     0,     0,     0,     0,     0,     0, 
         42,   -59,     0,     0,     0,     0,     0,   490,     0,     0, 
          2,  -111,   409,  -111,     0,   474,     0,     0,     0,     0, 
          0,     0,     0,     0,   558,     0,     0,     0,     0,     0, 
          0,   410,     0,     0,   495,     0,     0,     0,     0,     0, 
          0,     0,     0,    -6,     0,     0,   414,     0,     0,   414, 
          0,     0,  1845,  1868,   453,  1583,  1691,  1714,  1745,     0, 
        594,     0,     0,     0,     0,     0,  -209,     0,     0,   487, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   -40,     0,     0, 
          0,     0,   485,     0,     0,     0,    19,     0,     0,     0, 
          0,   -22,     0,     0,   507,     0,     0,     0,     0,   630, 
        509,     0,   594,     0,     0,     0,     0,  1975,  2008,    81, 
          0,  2281,  2304,  2367,  2390,  2403,  2426,  2449,     0,  2472, 
       1899,  1922,  1768,  1799,  1822,     0,     0,     0,     0,     0, 
          0,    18,     0,     0,     0,     0,     0,     0,     0,     0, 
       -231,   428,     0,     0,     0,   457,   391,     0,     0,   507, 
          0,   461,     0,   594,     0,     0,     0,     0,  -231,     0, 
        562,     0,     0,     0,     0,     0,    28,     0,   436,   -34, 
          0,   594,     0,     0,   522,     0,   507,     0,  2503,     0, 
        439,   -53,     0,     0,    31,     0,     0,     0,     0,     0, 
          0,   507,   440,   497,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       -124,     0,     0,     0,     0,   504,     0,     0,     0,  -115, 
          0,     0,     0,     0,     0,   508,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   525, 
          0,   519,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,  -231,     0,     0,     0,     0,   439,     0, 
        530,     0,   439,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   551,     0,     0,     0,     0,     0,   525, 
          0,     0,     0,   217,     0,     0,    31,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   177, 
         24,     0,     0,     0,     0,     0,     0,   525,     0,     0, 
        530,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    24,     0,     0,     0,     0,  2701, 
          0,  2607,     0,     0,     0,     0,  2880,   468,     0,     0, 
        439,     0,     0,    24,     0,     0,     0,     0,     0,   507, 
          0,     0,     0,     0,     0,     0,     0,     0,   469,     0, 
          0,     0,     0,   439,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,  -117,     0, 
          0,     0,  -117,     0,     0,     0,   439,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   588,     0,     0,     0,   506, 
        592,   -12,     0,   550,   517,  -110,     0,     0,     0,     0, 
       -134,  -230,     0,     0,     0,  -199,   359,     0,     0,     0, 
         49,   -71,   249,   311,     0,  -244,  -288,     0,  -210,  -217, 
          0,     0,     0,   567,   569,     0,   -97,   -31,   252,   317, 
       -173,     0,     0,   -95,     0,     0,  -137,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   196,     0,     0, 
          0,     0,   235,     0,   239,     0,     0,     0,   427,     0, 
          0,     0,   -78,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   472,     0,     0,     0,     0, 
        431,     0,   608,     0, 
    );
    protected static $yyTable = array(10,
         89,   220,   127,   220,   128,   359,    17,    87,   337,    38, 
        198,    25,   171,   140,    55,   341,    77,   205,   140,   137, 
        212,   220,    39,   284,    41,   242,   299,    41,   229,   400, 
        162,    52,    53,    54,   179,    85,   140,    17,   220,    51, 
         51,    51,   220,   220,   220,   220,   220,   304,   220,     1, 
        154,   366,   307,   305,     5,   306,    85,   308,   181,   220, 
        220,   181,   220,   220,   220,   220,   195,    45,   124,   274, 
        140,    43,   236,   144,    31,   147,     9,   227,    27,   386, 
        138,    51,    77,    51,   211,    66,    43,   209,   219,    31, 
         41,    40,   364,   401,   220,   243,    75,   161,   229,   255, 
        213,   309,   140,   157,   193,   179,    93,    94,   233,    96, 
         97,    98,    99,    51,   282,   283,   369,   324,   179,   349, 
        103,   106,    28,   353,   220,   140,   220,   220,     5,   275, 
        154,    32,   147,    42,    66,   238,   310,   280,   143,   143, 
         51,   227,   181,   152,   229,   335,    77,    43,   156,   276, 
         43,   244,    43,   250,    47,    31,   168,   169,   170,   172, 
        173,   174,   175,   176,   177,   178,   314,   180,   181,   182, 
        183,   184,   185,   143,   403,   186,   187,   188,   189,   190, 
        191,   192,     9,   351,   103,   421,    48,   147,   318,   216, 
        100,   272,   138,   422,   231,    51,    27,    27,   324,    25, 
        229,   420,   324,   152,   433,    17,    17,    85,    17,    17, 
         17,    17,    17,    17,   229,    17,     9,    54,   138,   220, 
         54,   387,   388,    86,   435,   336,    17,    17,    17,    17, 
         17,    17,    56,   393,   231,   231,   231,    88,   324,   444, 
        229,   229,   229,   446,    91,   399,    92,   448,    89,    89, 
         12,   152,   107,   324,   170,    87,    87,    55,   152,    17, 
         55,    17,   324,   239,   231,    29,    17,   134,    30,    54, 
        229,   135,   425,   415,   416,    55,   394,   136,   145,   220, 
        397,    35,    36,    37,   222,   152,    17,   149,   229,   229, 
        229,    17,   164,    17,    17,   138,   194,   166,    61,   220, 
        152,   152,   196,   360,   138,    73,   197,   199,    58,    55, 
         59,   220,   220,   220,   200,   202,   426,     5,     5,     5, 
          5,     5,     5,     5,     5,   204,   207,   315,   210,   215, 
        217,   437,   227,   232,   170,   138,   320,     5,     5,     5, 
        442,   220,   130,   129,   125,   126,   234,   235,   237,   247, 
        241,   249,   248,   131,   132,   254,    60,   138,   253,   251, 
        344,   273,   277,   138,   279,   287,   285,   147,   297,   152, 
        352,   354,   301,   303,   109,    51,   312,   357,   358,   122, 
        120,   316,   121,   317,   123,   321,   322,   326,    72,   327, 
        328,    62,   329,   330,   343,   345,   298,   127,   108,   128, 
        110,   220,   220,   220,   220,   220,   220,   220,   220,   220, 
        434,   355,   220,   220,   220,   220,   220,   220,    51,   152, 
        348,   356,   395,   396,   361,   362,   363,   215,    17,   365, 
        370,   215,   215,   215,   215,   215,   215,   215,   371,    13, 
         14,    15,   221,    17,    18,    19,    20,   373,   215,   215, 
        215,   215,   215,   215,   374,   367,   375,   378,   152,   380, 
        383,   109,   385,   124,   384,   398,   122,   120,     2,   121, 
        404,   123,   388,   387,   410,   413,   438,   423,    17,    17, 
         17,   215,   424,   215,   127,   108,   128,   110,    17,    13, 
         14,    15,    16,    17,    18,    19,    20,   146,   430,   432, 
        436,   146,   146,   146,   146,   146,   146,   146,    17,   439, 
        440,   445,   441,   449,   447,   215,   215,    11,   146,   146, 
        146,   146,   146,   146,    64,    65,    66,    67,    68,    69, 
        142,    29,    14,    31,   177,   143,    27,    31,    31,    31, 
         31,    31,    31,    31,   142,   138,   223,   138,   220,   142, 
        124,   146,    40,   146,    31,    31,    31,    31,    31,    31, 
         39,   222,    54,    87,   138,    71,   142,     7,    17,    17, 
         17,    17,    17,    17,    17,    17,    17,    49,    17,    17, 
         17,    17,    17,    17,    17,   146,   146,    31,   138,    31, 
         12,    73,   115,   117,   168,    26,   151,    22,   168,   168, 
        168,   168,   168,    90,   168,    70,   150,   281,   379,    50, 
         49,    71,   338,   382,   431,   168,   168,   168,   168,   168, 
        168,    31,    31,    12,   240,   342,   409,   218,   408,   231, 
        209,   208,    38,     0,   209,   209,   209,   209,   209,     0, 
        209,     0,     0,     0,     0,     0,     0,     0,     0,   118, 
        168,   209,   209,   209,   209,   209,   209,     2,     2,     2, 
          2,     2,     2,     2,     2,     0,   211,    63,    64,     0, 
        211,   211,   211,   211,   211,     0,   211,     2,     2,     2, 
          0,     2,   168,   168,     0,     0,   209,   211,   211,   211, 
        211,   211,   211,    12,     0,     0,     0,     0,     0,     0, 
        109,     0,   215,     0,   165,   122,   120,     0,   121,     0, 
        123,     0,     0,     0,     0,     0,     0,     0,   209,   209, 
          0,     0,   211,   127,   108,   128,   110,   346,     0,     0, 
          0,     0,     0,     0,     0,    12,   118,   130,   129,   125, 
        126,   111,   112,   113,   114,   115,     0,     0,   131,   132, 
        133,   116,   117,   119,   211,   211,     7,     7,     7,     7, 
          7,     7,     7,     7,     0,     0,     0,     0,     0,     0, 
          0,     0,   146,     0,     0,     0,     7,     7,     7,    13, 
         14,    15,   221,    17,    18,    19,    20,     0,     0,   124, 
        215,   215,   215,   215,   215,   215,   215,   215,   215,     0, 
          0,   215,   215,   215,   215,   215,   215,     0,    31,     0, 
          0,     0,    13,    14,    15,    16,    17,    18,    19,    20, 
          0,   236,     0,     0,   130,   129,   125,   126,   111,   112, 
        113,   114,   115,     0,     0,   131,   132,   133,   116,   117, 
        119,   236,   236,   236,   236,   236,   236,   236,   236,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        146,   146,   146,   146,   146,   146,   146,   146,   146,   168, 
          0,   146,   146,   146,   146,   146,   146,     0,     0,     0, 
          0,     0,    13,    14,    15,   221,    17,    18,    19,    20, 
          0,   236,     0,     0,     0,     0,    31,    31,    31,    31, 
         31,    31,    31,    31,    31,   209,     0,    31,    31,    31, 
         31,    31,    31,   109,     0,     0,     0,     0,   122,   120, 
        203,   121,     0,   123,    13,    14,    15,   221,    17,    18, 
         19,    20,     0,     0,     0,     0,   127,   108,   128,   110, 
          0,   211,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   168,   168,   168, 
        168,   168,   168,   168,   168,   168,     0,    17,   168,   168, 
        168,   168,   168,   168,     0,   118,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   209,   209,   209,   209,   209,   209,   209, 
        209,   209,   124,     0,   209,   209,   209,   209,   209,   209, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   211, 
        211,   211,   211,   211,   211,   211,   211,   211,     0,     0, 
        211,   211,   211,   211,   211,   211,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   130,   129,   125,   126,   111,   112,   113, 
        114,   115,     0,     0,   131,   132,   109,   116,   117,   119, 
          0,   122,   120,     0,   121,     0,   123,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   298,   127, 
        108,   128,   110,   109,     0,     0,     0,   347,   122,   120, 
          0,   121,     0,   123,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   109,   127,   108,   128,   110, 
        122,   120,     0,   121,     0,   123,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   350,   127,   108, 
        128,   110,   109,     0,     0,     0,   372,   122,   120,     0, 
        121,     0,   123,     0,     0,   124,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   127,   108,   128,   110,     0, 
          0,   109,     0,     0,     0,   376,   122,   120,   118,   121, 
          0,   123,   124,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   127,   108,   128,   110,     0,     0, 
          0,   109,     0,     0,   124,   377,   122,   120,     0,   121, 
          0,   123,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   127,   108,   128,   110,   109,     0, 
          0,   124,   411,   122,   120,     0,   121,     0,   123,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   127,   108,   128,   110,     0,     0,     0,     0,     0, 
        124,     0,     0,     0,     0,     0,   130,   129,   125,   126, 
        111,   112,   113,   114,   115,     0,     0,   131,   132,     0, 
        116,   117,   119,   109,     0,     0,     0,   412,   122,   120, 
        124,   121,     0,   123,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   127,   108,   128,   110, 
        109,     0,     0,     0,     0,   122,   120,   124,   121,     0, 
        123,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   443,     0,   127,   108,   128,   110,   109,     0,     0, 
          0,   118,   122,   120,     0,   121,     0,   123,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        127,   108,   128,   110,     0,     0,     0,     0,   118,     0, 
          0,     0,   124,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        118,     0,     0,     0,     0,     0,     0,     0,     0,   124, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   118,     0,     0, 
          0,     0,     0,     0,     0,     0,   124,     0,     0,   130, 
        129,   125,   126,   111,   112,   113,   114,   115,     0,     0, 
        131,   132,     0,   116,   117,   119,   118,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   130,   129,   125,   126, 
        111,   112,   113,   114,   115,     0,     0,   131,   132,     0, 
        116,   117,   119,     0,     0,     0,   118,     0,   130,   129, 
        125,   126,   111,   112,   113,   114,   115,     0,     0,   131, 
        132,     0,   116,   117,   119,     0,     0,     0,     0,     0, 
          0,     0,     0,   118,     0,   130,   129,   125,   126,   111, 
        112,   113,   114,   115,     0,     0,   131,   132,     0,   116, 
        117,   119,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   130,   129,   125,   126,   111,   112, 
        113,   114,   115,     0,     0,   131,   132,     0,   116,   117, 
        119,     0,     0,     0,     0,     0,     0,     0,   118,     0, 
          0,     0,     0,     0,   130,   129,   125,   126,   111,   112, 
        113,   114,   115,     0,     0,   131,   132,     0,   116,   117, 
        119,     0,     0,     0,     0,   118,     0,     0,     0,     0, 
          0,   130,   129,   125,   126,   111,   112,   113,   114,   115, 
          0,     0,   131,   132,     0,   116,   117,   119,     0,   201, 
          0,     0,   118,   201,   201,   201,   201,   201,     0,   201, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        201,   201,     0,   201,     0,   201,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   130,   129,   125,   126, 
        111,   112,   113,   114,   115,     0,     0,   131,   132,     0, 
        116,   117,   119,     0,     0,   201,     0,     0,     0,     0, 
          0,     0,     0,   130,   129,   125,   126,   111,   112,   113, 
        114,   115,     0,     0,   131,   132,     0,   116,   117,   119, 
          0,     0,     0,     0,     0,     0,     0,   201,     0,     0, 
        130,   129,   125,   126,   111,   112,   113,   114,   115,     0, 
          0,   131,   132,     0,   116,   117,   119,   202,     0,     0, 
          0,   202,   202,   202,   202,   202,     0,   202,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   202,   202, 
        205,   202,     0,   202,   205,   205,   205,   205,   205,     0, 
        205,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   205,   205,     0,   205,     0,   205,     0,     0,     0, 
          0,   206,     0,   202,     0,   206,   206,   206,   206,   206, 
          0,   206,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   206,   206,   197,   206,   205,   206,   197,   197, 
        197,   197,   197,     0,   197,   202,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   197,   197,     0,   197,     0, 
        197,   122,   120,     0,   121,   198,   123,   206,   205,   198, 
        198,   198,   198,   198,     0,   198,     0,     0,     0,   127, 
          0,   128,     0,     0,     0,     0,   198,   198,   200,   198, 
        197,   198,   200,   200,   200,   200,   200,     0,   200,   206, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   200, 
        200,   203,   200,     0,   200,   203,     0,   203,   203,   203, 
          0,   198,   197,     0,   201,     0,     0,     0,     0,     0, 
          0,     0,   203,   203,   204,   203,     0,   203,   204,     0, 
        204,   204,   204,     0,   200,   124,     0,     0,     0,     0, 
          0,     0,     0,   198,     0,   204,   204,     0,   204,   122, 
        204,     0,     0,     0,   123,   195,     0,   203,     0,   195, 
          0,   195,   195,   195,     0,     0,   200,   127,     0,   128, 
          0,     0,     0,     0,     0,     0,   195,   195,   196,   195, 
        204,   195,   196,     0,   196,   196,   196,     0,     0,   203, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   196, 
        196,     0,   196,     0,   196,     0,   201,   201,   201,   201, 
        201,   195,   204,     0,     0,   201,   201,   201,   201,     0, 
          0,     0,   202,     0,     0,     0,     0,     0,     0,     0, 
          0,   182,     0,   124,   196,   182,     0,     0,   182,     0, 
          0,     0,     0,   195,     0,   205,     0,     0,     0,     0, 
          0,     0,   182,   182,     0,   182,     0,   182,     0,     0, 
          0,     0,     0,     0,   199,     0,   196,     0,   199,     0, 
          0,   199,     0,     0,     0,     0,   206,     0,     0,     0, 
          0,     0,     0,     0,     0,   199,   199,   182,   199,     0, 
        199,     0,     0,     0,     0,     0,     0,     0,     0,   197, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   202,   202,   202,   202,   202,   182, 
        199,     0,     0,   202,   202,   202,   202,     0,     0,     0, 
        198,     0,     0,     0,     0,     0,     0,   205,   205,   205, 
        205,   205,     0,     0,     0,     0,   205,   205,   205,   205, 
          0,     0,   199,   200,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   206,   206, 
        206,   206,   206,     0,     0,     0,   203,   206,   206,   206, 
        206,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   197,   197,   197,   197,   197,     0,     0,     0,   204, 
        197,   197,   197,   197,     0,     0,     0,     0,     0,   130, 
        129,   125,   126,     0,     0,     0,     0,     0,     0,     0, 
        131,   132,   198,   198,   198,   198,   198,     0,     0,     0, 
        195,   198,   198,   198,   198,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   200,   200,   200,   200,   200, 
          0,     0,     0,   196,   200,   200,   200,   200,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   203,   203, 
        203,   203,   203,     0,     0,     0,     0,   203,   203,   203, 
        203,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   204,   204,   204,   204,   204,     0,     0,     0,     0, 
        204,   204,   204,   204,     0,     0,   182,   130,   129,   125, 
        126,     0,     0,     0,     0,     0,     0,     0,   131,   132, 
          0,     0,   195,   195,   195,   195,   195,     0,     0,     0, 
          0,   195,   195,   195,   195,     0,     0,   183,     0,   199, 
          0,   183,     0,     0,   183,   196,   196,   196,   196,   196, 
          0,     0,     0,     0,   196,   196,   196,   196,   183,   183, 
        184,   183,     0,   183,   184,     0,     0,   184,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   184,   184,     0,   184,     0,   184,     0,     0,     0, 
          0,     0,     0,   183,     0,     0,     0,     0,   182,   182, 
        182,   182,   182,     0,     0,     0,     0,   182,   182,   182, 
        182,     0,     0,     0,     0,     0,   184,     0,     0,     0, 
          0,     0,     0,   185,     0,   183,     0,   185,     0,     0, 
        185,   199,   199,   199,   199,   199,     0,     0,     0,     0, 
        199,   199,   199,   199,   185,   185,   186,   185,   184,   185, 
        186,     0,     0,   186,     0,     0,     0,     0,     0,   187, 
          0,     0,     0,   187,     0,     0,   187,   186,   186,     0, 
        186,     0,   186,     0,     0,     0,     0,     0,     0,   185, 
        187,   187,   165,   187,     0,   187,   165,     0,     0,   165, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   186,   165,   165,   166,   165,     0,   165,   166, 
          0,   185,   166,     0,     0,   187,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   166,   166,   188,   166, 
          0,   166,   188,     0,   186,   188,     0,     0,   165,     0, 
          0,     0,     0,     0,     0,     0,     0,   187,     0,   188, 
        188,     0,   188,     0,   188,     0,     0,     0,     0,   164, 
          0,   166,     0,   164,     0,     0,   164,     0,     0,     0, 
        165,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        164,   164,     0,   164,   188,   164,     0,     0,     0,     0, 
          0,     0,     0,   166,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   183,     0,     0,   164,   188,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   184,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   164,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   130, 
          0,     0,     0,     0,     0,     0,   130,     0,     0,   130, 
          0,   130,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   130,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   185,     0, 
          0,     0,     0,     0,   183,   183,   183,   183,   183,     0, 
          0,     0,     0,   183,   183,   183,   183,   130,     0,     0, 
          0,   186,     0,     0,     0,     0,     0,   184,   184,   184, 
        184,   184,     0,     0,   187,     0,   184,   184,   184,   184, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   130, 
          0,   130,   130,   134,     0,     0,     0,   165,     0,     0, 
        134,     0,     0,   134,     0,   134,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   134, 
        166,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        185,   185,   185,   185,   185,     0,     0,     0,     0,   185, 
        185,   185,   185,   188,     0,     0,     0,     0,     0,     0, 
          0,   134,     0,   186,   186,   186,   186,   186,     0,     0, 
          0,     0,   186,   186,   186,   186,   187,   187,   187,   187, 
        187,     0,     0,     0,   164,   187,   187,   187,   187,     0, 
          0,     0,     0,   134,     0,   134,   134,     0,     0,   165, 
        165,   165,   165,   165,     0,     0,     0,     0,   165,   165, 
        165,   165,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   166,   166,   166,   166,   166,     0,     0,     0, 
          0,   166,   166,   166,   166,     0,   130,   130,   130,   130, 
        130,     0,     0,     0,     0,   188,   188,   188,   188,   188, 
          0,     0,     0,     0,   188,   188,   188,   188,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   164,   164,   164,   164, 
        164,     0,   125,     0,     0,   164,   164,   164,   164,   125, 
          0,     0,   125,     0,   125,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   125,     0, 
          0,     0,     0,     0,     0,     0,   130,   130,   130,   130, 
          0,   130,   130,     0,     0,     0,     0,     0,     0,     0, 
        134,   134,   134,   134,   134,     0,   130,   130,   130,   130, 
        125,   130,   130,     0,     0,     0,   130,   130,   130,   130, 
        130,     0,     0,     0,     0,     0,    61,     0,     0,     0, 
          0,     0,     0,    73,     0,     0,    58,     0,    59,     0, 
          0,     0,   125,     0,   125,   125,     0,     0,   130,   130, 
          0,     0,   267,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    61,     0, 
        134,   134,   134,   134,    60,    73,   134,     0,    58,     0, 
         59,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        134,   134,   134,   134,   267,   134,   134,     0,     0,     0, 
        134,   134,   134,   134,   134,     0,    72,     0,     0,    62, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    60,     0,     0,     0, 
          0,     0,   134,   134,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   323,     0, 
          0,    62,     0,     0,     0,     0,     0,     0,     0,   125, 
        125,   125,   125,   125,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    65,    66,    67,    68,    69,     0,   125, 
        125,   125,   125,     0,     0,   125,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   125, 
        125,   125,   125,     0,   125,   125,     0,     0,     0,   125, 
          0,   125,   125,   125,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    65,    66,    67,    68,    69, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   125,   125,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    70,   256,   257,   258,     0,     0,    71, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   259,   260,   261,   262,     0,   263,   264, 
          0,     0,     0,   265,     0,   266,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    70,   256,   257,   258,     0, 
          0,    71,     0,     0,     0,    63,    64,     0,     0,     0, 
          0,     0,     0,     0,     0,   259,   260,   261,   262,     0, 
        263,   264,     0,     0,     0,   265,     0,   266,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    63,    64, 
    );
    protected static $yyCheck = array(4,
        125,    42,    60,    44,    62,    42,    60,   125,   123,   125, 
        145,   123,   110,    85,    42,    93,    48,   155,    41,    63, 
        260,    62,    27,   254,    59,   260,   271,    32,   260,    59, 
        102,    44,    45,    46,    41,    60,    59,    91,    37,    44, 
         45,    46,    41,    42,    43,    44,    45,    37,    47,   303, 
        260,   340,    42,    43,   304,    45,    60,    47,    41,    58, 
         59,    44,    61,    62,    63,   200,    91,    40,   126,   260, 
         93,    44,   210,    86,    44,    88,   260,    59,    46,   368, 
         85,    86,    59,    88,   163,    44,    59,    91,   199,    59, 
        125,   260,   337,   123,    93,   330,    48,   102,   330,   237, 
        340,    91,   125,    46,   136,   118,    58,    59,   206,    61, 
         62,    63,    64,   118,   252,   253,   347,   291,   125,   319, 
         72,    73,    59,   323,   123,   197,   125,   126,    91,   320, 
        340,    64,   145,    93,    93,   214,   126,   248,    58,    59, 
        145,   123,   125,    95,   260,   260,   123,    44,    91,   340, 
        123,   223,   125,   232,    46,   125,   108,   109,   110,   111, 
        112,   113,   114,   115,   116,   117,   277,   119,   120,   121, 
        122,   123,   124,    93,   385,   127,   128,   129,   130,   131, 
        132,   133,   260,   321,   136,   403,    40,   200,   286,   194, 
         40,    40,   197,   404,   260,   200,    46,    46,   372,   311, 
        260,   401,   376,   155,   422,    37,   260,    60,    40,    41, 
         42,    43,    44,    45,   330,    47,   260,    41,   223,   260, 
         44,   344,   345,   310,   424,   340,    58,    59,    60,    61, 
         62,    63,   260,   371,   300,   301,   302,   310,   412,   439, 
        300,   301,   302,   443,    46,   380,    59,   447,   373,   374, 
         91,   203,   410,   427,   206,   373,   374,    41,   210,    91, 
         44,    93,   436,   215,   330,   283,   320,    41,   286,    93, 
        330,    41,   410,   373,   374,    59,   372,    44,   311,   320, 
        376,   300,   301,   302,   125,   237,   340,   123,   300,   301, 
        302,   123,   125,   125,   126,   300,   310,   300,    33,   340, 
        252,   253,    62,   340,   309,    40,    44,   123,    43,    93, 
         45,   310,   311,   312,    44,   123,   412,   280,   281,   282, 
        283,   284,   285,   286,   287,    93,   260,   279,    40,    58, 
         93,   427,   260,    41,   286,   340,   288,   300,   301,   302, 
        436,   340,   400,   401,   402,   403,    40,    93,    40,   125, 
        123,    44,    59,   411,   412,    41,    91,   362,   123,    93, 
        312,   340,   123,   368,    40,   123,    41,   380,   125,   321, 
        322,   323,   260,    40,    37,   380,    61,   329,   330,    42, 
         43,    41,    45,   125,    47,    40,    40,    40,   123,    59, 
         59,   126,    40,    40,    40,    59,    59,    60,    61,    62, 
         63,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
        423,   361,   411,   412,   413,   414,   415,   416,   423,   371, 
         59,   340,   374,   375,    41,    44,    40,    37,   260,    59, 
        125,    41,    42,    43,    44,    45,    46,    47,    59,   280, 
        281,   282,   283,   284,   285,   286,   287,   125,    58,    59, 
         60,    61,    62,    63,    40,    93,   364,   340,   410,   321, 
         41,    37,    41,   126,   125,   123,    42,    43,    91,    45, 
         41,    47,   345,   344,    59,   371,   428,    40,   310,   311, 
        312,    91,   123,    93,    60,    61,    62,    63,   320,   280, 
        281,   282,   283,   284,   285,   286,   287,    37,   125,   125, 
         41,    41,    42,    43,    44,    45,    46,    47,   340,    58, 
        340,    41,   125,   125,   123,   125,   126,   260,    58,    59, 
         60,    61,    62,    63,    93,   260,   261,   262,   263,   264, 
         41,   123,    59,    37,   125,    41,   123,    41,    42,    43, 
         44,    45,    46,    47,    58,    93,    62,    41,    40,    93, 
        126,    91,   125,    93,    58,    59,    60,    61,    62,    63, 
        125,    40,    59,   125,   125,    41,    59,    91,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    59,   410,   411, 
        412,   413,   414,   415,   416,   125,   126,    91,    59,    93, 
         91,    41,   125,   125,    37,     8,    91,     6,    41,    42, 
         43,    44,    45,    54,    47,   340,    90,   249,   360,    43, 
         42,   346,   302,   362,   419,    58,    59,    60,    61,    62, 
         63,   125,   126,    91,   125,   309,   392,   197,   390,   203, 
         37,   160,    25,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312, 
         93,    58,    59,    60,    61,    62,    63,   280,   281,   282, 
        283,   284,   285,   286,   287,    -1,    37,   402,   403,    -1, 
         41,    42,    43,    44,    45,    -1,    47,   300,   301,   302, 
         -1,   304,   125,   126,    -1,    -1,    93,    58,    59,    60, 
         61,    62,    63,    91,    -1,    -1,    -1,    -1,    -1,    -1, 
         37,    -1,   312,    -1,    41,    42,    43,    -1,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126, 
         -1,    -1,    93,    60,    61,    62,    63,   125,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    91,   312,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
        413,   414,   415,   416,   125,   126,   280,   281,   282,   283, 
        284,   285,   286,   287,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   312,    -1,    -1,    -1,   300,   301,   302,   280, 
        281,   282,   283,   284,   285,   286,   287,    -1,    -1,   126, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,   413,   414,   415,   416,    -1,   312,    -1, 
         -1,    -1,   280,   281,   282,   283,   284,   285,   286,   287, 
         -1,   260,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,   413,   414,   415, 
        416,   280,   281,   282,   283,   284,   285,   286,   287,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   312, 
         -1,   411,   412,   413,   414,   415,   416,    -1,    -1,    -1, 
         -1,    -1,   280,   281,   282,   283,   284,   285,   286,   287, 
         -1,   330,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   312,    -1,   411,   412,   413, 
        414,   415,   416,    37,    -1,    -1,    -1,    -1,    42,    43, 
         44,    45,    -1,    47,   280,   281,   282,   283,   284,   285, 
        286,   287,    -1,    -1,    -1,    -1,    60,    61,    62,    63, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,   410,   411,   412, 
        413,   414,   415,   416,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   126,    -1,   411,   412,   413,   414,   415,   416, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,   413,   414,   415,   416,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    37,   414,   415,   416, 
         -1,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60, 
         61,    62,    63,    37,    -1,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    37,    60,    61,    62,    63, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,    61, 
         62,    63,    37,    -1,    -1,    -1,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1, 
         -1,    37,    -1,    -1,    -1,    41,    42,    43,   312,    45, 
         -1,    47,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1, 
         -1,    37,    -1,    -1,   126,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    37,    -1, 
         -1,   126,    41,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,    37,    -1,    -1,    -1,    41,    42,    43, 
        126,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63, 
         37,    -1,    -1,    -1,    -1,    42,    43,   126,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    -1,    60,    61,    62,    63,    37,    -1,    -1, 
         -1,   312,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,   312,    -1, 
         -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   312,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,    -1,    -1,    -1,   312,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   312,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,    -1,    37, 
         -1,    -1,   312,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,    -1,    -1,    93,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,    37,    -1,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         37,    61,    -1,    63,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    37,    -1,    93,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    37,    61,    93,    63,    41,    42, 
         43,    44,    45,    -1,    47,   125,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    42,    43,    -1,    45,    37,    47,    93,   125,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    60, 
         -1,    62,    -1,    -1,    -1,    -1,    58,    59,    37,    61, 
         93,    63,    41,    42,    43,    44,    45,    -1,    47,   125, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    37,    61,    -1,    63,    41,    -1,    43,    44,    45, 
         -1,    93,   125,    -1,   312,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    37,    61,    -1,    63,    41,    -1, 
         43,    44,    45,    -1,    93,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   125,    -1,    58,    59,    -1,    61,    42, 
         63,    -1,    -1,    -1,    47,    37,    -1,    93,    -1,    41, 
         -1,    43,    44,    45,    -1,    -1,   125,    60,    -1,    62, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    37,    61, 
         93,    63,    41,    -1,    43,    44,    45,    -1,    -1,   125, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,   404,   405,   406,   407, 
        408,    93,   125,    -1,    -1,   413,   414,   415,   416,    -1, 
         -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    37,    -1,   126,    93,    41,    -1,    -1,    44,    -1, 
         -1,    -1,    -1,   125,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    37,    -1,   125,    -1,    41,    -1, 
         -1,    44,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    93,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,   125, 
         93,    -1,    -1,   413,   414,   415,   416,    -1,    -1,    -1, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,   416, 
         -1,    -1,   125,   312,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,   312,   413,   414,   415, 
        416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,   312, 
        413,   414,   415,   416,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        411,   412,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
        312,   413,   414,   415,   416,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,   312,   413,   414,   415,   416,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
        416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,   416,    -1,    -1,   312,   400,   401,   402, 
        403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   411,   412, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,   416,    -1,    -1,    37,    -1,   312, 
         -1,    41,    -1,    -1,    44,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,   416,    58,    59, 
         37,    61,    -1,    63,    41,    -1,    -1,    44,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
        416,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,    -1,    -1,    37,    -1,   125,    -1,    41,    -1,    -1, 
         44,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,   416,    58,    59,    37,    61,   125,    63, 
         41,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    37, 
         -1,    -1,    -1,    41,    -1,    -1,    44,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    93, 
         58,    59,    37,    61,    -1,    63,    41,    -1,    -1,    44, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    93,    58,    59,    37,    61,    -1,    63,    41, 
         -1,   125,    44,    -1,    -1,    93,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    37,    61, 
         -1,    63,    41,    -1,   125,    44,    -1,    -1,    93,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    37, 
         -1,    93,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    93,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   312,    -1,    -1,    93,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33, 
         -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43, 
         -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,   416,    91,    -1,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,   312,    -1,   413,   414,   415,   416, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123, 
         -1,   125,   126,    33,    -1,    -1,    -1,   312,    -1,    -1, 
         40,    -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,   413, 
        414,   415,   416,   312,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    91,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,   414,   415,   416,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,   312,   413,   414,   415,   416,    -1, 
         -1,    -1,    -1,   123,    -1,   125,   126,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,   416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,   416,    -1,   260,   261,   262,   263, 
        264,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,   416,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    33,    -1,    -1,   413,   414,   415,   416,    40, 
         -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342,   343, 
         -1,   345,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        260,   261,   262,   263,   264,    -1,   360,   361,   362,   363, 
         91,   365,   366,    -1,    -1,    -1,   370,   371,   372,   373, 
        374,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1, 
         -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    45,    -1, 
         -1,    -1,   123,    -1,   125,   126,    -1,    -1,   402,   403, 
         -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1, 
        340,   341,   342,   343,    91,    40,   346,    -1,    43,    -1, 
         45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        360,   361,   362,   363,    59,   365,   366,    -1,    -1,    -1, 
        370,   371,   372,   373,   374,    -1,   123,    -1,    -1,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1, 
         -1,    -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1, 
         -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   260,   261,   262,   263,   264,    -1,   340, 
        341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360, 
        361,   362,   363,    -1,   365,   366,    -1,    -1,    -1,   370, 
         -1,   372,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   260,   261,   262,   263,   264, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   340,   341,   342,   343,    -1,    -1,   346, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   360,   361,   362,   363,    -1,   365,   366, 
         -1,    -1,    -1,   370,    -1,   372,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   340,   341,   342,   343,    -1, 
         -1,   346,    -1,    -1,    -1,   402,   403,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363,    -1, 
        365,   366,    -1,    -1,    -1,   370,    -1,   372,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_PROPERTY', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', NULL, 'T_DOUBLE_COLON', 
      'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 
      'T_BOOLEAN_AND', 'T_CONCAT_EQUAL', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 134 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 146 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 146 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 157 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 158 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 162 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 10:  #line 162 "grammar/xp.jay"
    {
      $yyVals[-4+$yyTop]->position= $p;
      $yyVals[-4+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 11:  #line 170 "grammar/xp.jay"
    { $yyVal= new ImportNode(); } break;

    case 12:  #line 171 "grammar/xp.jay"
    { $yyVal= new StaticImportNode(); } break;

    case 13:  #line 172 "grammar/xp.jay"
    { $yyVal= new NativeImportNode(); } break;

    case 16:  #line 178 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 18:  #line 183 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 19:  #line 189 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 20:  #line 189 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 21:  #line 198 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 22:  #line 198 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 23:  #line 207 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 24:  #line 207 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 25:  #line 218 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 26:  #line 219 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 27:  #line 223 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 28:  #line 224 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 29:  #line 228 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 30:  #line 229 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 31:  #line 233 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 234 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 33:  #line 238 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 34:  #line 239 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 35:  #line 243 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 36:  #line 244 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 245 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 38:  #line 249 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 39:  #line 250 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 40:  #line 251 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 41:  #line 255 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 42:  #line 256 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 43:  #line 260 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 44:  #line 260 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 45:  #line 263 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 46:  #line 263 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 47:  #line 273 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 48:  #line 280 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop][0];
      $yyVal->annotations= $yyVals[-5+$yyTop][1];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 49:  #line 291 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 51:  #line 296 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 52:  #line 297 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 53:  #line 298 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 54:  #line 302 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 55:  #line 303 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 56:  #line 309 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 57:  #line 309 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 58:  #line 319 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 59:  #line 319 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 60:  #line 327 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 61:  #line 327 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 62:  #line 340 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 63:  #line 341 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 64:  #line 345 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 65:  #line 346 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 66:  #line 350 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 67:  #line 354 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVals[-1+$yyTop] && $yyVal->parameters= array('default' => $yyVals[-1+$yyTop]);
    } break;

    case 68:  #line 359 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 69:  #line 367 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 70:  #line 368 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 71:  #line 372 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 72:  #line 373 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 73:  #line 377 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 74:  #line 378 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 75:  #line 382 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 76:  #line 383 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 77:  #line 387 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 78:  #line 388 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 85:  #line 400 "grammar/xp.jay"
    { $yyVal= '[]'; } break;

    case 86:  #line 401 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 87:  #line 409 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 89:  #line 414 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 90:  #line 415 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 91:  #line 419 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 92:  #line 419 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 93:  #line 422 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 94:  #line 422 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 95:  #line 427 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 96:  #line 427 "grammar/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= array();
        foreach ($yyVals[-6+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->initialization[]= $stmt;
        }
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= array();
        foreach ($yyVals[-2+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->loop[]= $stmt;
        }
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 97:  #line 445 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 98:  #line 445 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 99:  #line 450 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 100:  #line 450 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 101:  #line 454 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 102:  #line 454 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 103:  #line 458 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 104:  #line 458 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 105:  #line 462 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 106:  #line 462 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 107:  #line 467 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 109:  #line 468 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 111:  #line 469 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 112:  #line 469 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 113:  #line 472 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->free= TRUE; } break;

    case 115:  #line 477 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 117:  #line 482 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 118:  #line 483 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 119:  #line 487 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 120:  #line 487 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 121:  #line 491 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 122:  #line 491 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 123:  #line 497 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 124:  #line 498 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 125:  #line 502 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 126:  #line 503 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 127:  #line 503 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 128:  #line 508 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 129:  #line 509 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 130:  #line 513 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 131:  #line 514 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 132:  #line 518 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 133:  #line 518 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 134:  #line 526 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 136:  #line 531 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 137:  #line 531 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 138:  #line 539 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 140:  #line 544 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 141:  #line 545 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 142:  #line 549 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 144:  #line 554 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 145:  #line 560 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 146:  #line 568 "grammar/xp.jay"
    { 
      /* TBI: Constant */ 
    } break;

    case 147:  #line 571 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 148:  #line 574 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new InvocationNode(array('name' => $yyVals[-3+$yyTop]))); 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 150:  #line 582 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 151:  #line 582 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 152:  #line 585 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 153:  #line 585 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 154:  #line 590 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 155:  #line 590 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyVals[-1+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 156:  #line 595 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 157:  #line 595 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 158:  #line 601 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 159:  #line 602 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 160:  #line 605 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 161:  #line 608 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 162:  #line 611 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 163:  #line 614 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 164:  #line 618 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 165:  #line 624 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 166:  #line 630 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 167:  #line 636 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 168:  #line 644 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 169:  #line 645 "grammar/xp.jay"
    { /* XXX class literal */ } break;

    case 170:  #line 646 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 171:  #line 646 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 172:  #line 650 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 173:  #line 655 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 174:  #line 656 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 175:  #line 657 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 176:  #line 658 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 177:  #line 662 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 179:  #line 667 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 180:  #line 668 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 181:  #line 672 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 182:  #line 676 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 183:  #line 677 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 184:  #line 678 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 185:  #line 679 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 680 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 681 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 188:  #line 682 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 189:  #line 686 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 190:  #line 687 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 191:  #line 688 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 192:  #line 689 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 193:  #line 690 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 194:  #line 691 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 195:  #line 695 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 196:  #line 696 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 197:  #line 697 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 198:  #line 698 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 199:  #line 699 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 200:  #line 700 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 201:  #line 704 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 202:  #line 705 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 203:  #line 706 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 204:  #line 707 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 205:  #line 708 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 206:  #line 709 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 207:  #line 713 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 208:  #line 714 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 209:  #line 719 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 212:  #line 725 "grammar/xp.jay"
    {  $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 213:  #line 729 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 214:  #line 729 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 215:  #line 732 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 216:  #line 735 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 217:  #line 735 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 220:  #line 749 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 221:  #line 750 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 222:  #line 754 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 223:  #line 758 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 224:  #line 759 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 226:  #line 764 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 227:  #line 768 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 228:  #line 769 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 229:  #line 775 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 230:  #line 776 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 231:  #line 780 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 232:  #line 781 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 233:  #line 785 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 234:  #line 786 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 235:  #line 787 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 236:  #line 788 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 237:  #line 789 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 238:  #line 790 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 239:  #line 791 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;

    case 240:  #line 792 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2082 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
