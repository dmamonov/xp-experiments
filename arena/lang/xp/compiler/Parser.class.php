<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 54 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_BOOLEAN_OR',  414);
  define('TOKEN_T_BOOLEAN_AND',  415);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_DECIMAL',  263);
  define('TOKEN_T_HEX',  264);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_PACKAGE',  303);
  define('TOKEN_T_IMPORT',  304);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_T_DOUBLE_ARROW',  413);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          9,     9,     9,     4,     4,    12,     3,    16,     3,    18, 
          3,    13,    13,    14,    14,    19,    19,    21,    21,    15, 
         15,    22,    22,    22,    17,    17,    17,    26,    26,    28, 
         27,    29,    27,    23,    23,    34,    34,    33,    33,    33, 
         32,    32,    37,    24,    40,    24,    42,    24,    10,    10, 
         43,    43,    45,    45,    45,    39,    39,    36,    36,    48, 
         48,    49,    49,    38,    38,    41,    41,    41,    41,    41, 
         41,    41,    41,    25,    25,    35,    35,    51,    50,    52, 
         50,    55,    50,    57,    50,    59,    50,    60,    50,    61, 
         50,    63,    50,    50,    50,    58,    58,    53,    53,    54, 
         64,    54,    62,    62,    65,    65,    69,    68,    66,    66, 
         70,    67,    56,    56,    71,    71,    46,    46,    72,    72, 
         30,    75,    30,    76,    30,    77,    30,    78,    30,    79, 
         30,    30,    30,    30,    30,    30,    30,    30,    30,    30, 
         73,    85,    73,    73,    73,    73,    73,    73,    86,    86, 
         47,    47,    87,    80,    80,    80,    80,    80,    80,    81, 
         81,    81,    81,    81,    81,    82,    82,    82,    82,    82, 
         82,    83,    83,    83,    83,    83,    83,    84,    84,    74, 
         74,    89,    88,    88,    90,    88,    88,    31,    31,    11, 
         11,    91,    92,    92,    93,    93,    20,    20,    44,    44, 
         94,    94,    95,    95,    95,    95,    95,    95,    95, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     6, 
          1,     1,     3,     1,     3,     0,     9,     0,     9,     0, 
          8,     0,     2,     0,     2,     0,     2,     0,     3,     2, 
          0,     1,     1,     4,     3,     1,     0,     1,     3,     0, 
          3,     0,     6,     5,     6,     0,     1,     2,     4,     4, 
          0,     2,     0,     9,     0,     8,     0,    10,     4,     1, 
          1,     3,     2,     5,     5,     1,     3,     0,     1,     1, 
          3,     3,     3,     0,     2,     1,     1,     1,     1,     1, 
          1,     2,     3,     0,     1,     1,     2,     0,     4,     0, 
          7,     0,    10,     0,     8,     0,     6,     0,     7,     0, 
          6,     0,     4,     2,     1,     3,     1,     1,     3,     0, 
          0,     3,     2,     1,     1,     2,     0,     9,     0,     1, 
          0,     5,     0,     1,     1,     3,     0,     1,     5,     6, 
          1,     0,     3,     0,     4,     0,     5,     0,     8,     0, 
          6,     3,     1,     1,     1,     1,     1,     5,     3,     3, 
          1,     0,     4,     3,     1,     1,     1,     1,     0,     1, 
          1,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     2,     2,     2,     2,     2,     2,     2,     2,     0, 
          1,     0,     4,     2,     0,     6,     2,     1,     1,     1, 
          4,     3,     1,     3,     1,     3,     1,     3,     0,     1, 
          1,     2,     1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   213,   215,   214,   216,   218,   217,   219,     1, 
          0,    60,   210,     0,     8,     0,     4,     0,     0,     0, 
          0,    16,    20,    18,   212,    15,     0,     0,     0,     0, 
          0,     0,     0,    12,     0,     0,     0,    59,    62,     0, 
          0,     0,     0,     0,    10,     0,     0,   152,     0,     0, 
          0,     0,     0,   158,   155,   157,   156,   132,   134,     0, 
          0,     0,     0,     0,     0,   131,   143,   144,   145,   146, 
        147,     0,     0,     0,     0,     0,     0,     0,    13,     0, 
          0,     0,     0,     0,     0,     0,   140,     0,     0,     0, 
        160,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   188, 
        189,     0,     0,     0,     0,     0,     0,     0,    64,    65, 
          0,     0,   205,     0,     0,    23,     0,     0,     0,    27, 
         31,     0,     0,     0,   124,     0,   192,     0,   133,     0, 
          0,   198,     0,     0,   199,   154,   142,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   170,   171,   172,   173,   174, 
        175,     0,   162,     0,   201,     0,    25,    31,     0,     0, 
          0,     0,   153,     0,     0,     0,     0,     0,     0,   135, 
          0,     0,     0,   206,   204,     0,   208,     0,    21,     0, 
         30,    32,    33,     0,     0,     0,     0,   126,     0,     0, 
        195,     0,     0,   137,     0,     0,    17,     0,     0,     0, 
          0,     0,     0,     0,    19,    31,     0,   141,   193,     0, 
          0,     0,     0,    88,     0,   102,    92,    96,    98,    94, 
         90,   105,     0,     0,    85,     0,    55,     0,     0,     0, 
          0,     0,    31,    41,     0,     0,    39,     0,     0,   129, 
          0,     0,   100,     0,     0,     0,     0,     0,     0,    34, 
        104,    87,     0,     0,     0,   202,    53,    76,    77,    78, 
         79,    80,     0,    81,     0,     0,     0,     0,     0,   196, 
        130,   139,     0,     0,     0,     0,     0,     0,   108,     0, 
          0,     0,     0,     0,    69,     0,     0,    48,     0,    47, 
          0,     0,    82,     0,    57,     0,    44,    29,     0,    89, 
          0,   103,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    45,     0,    83,     0,    43, 
          0,     0,     0,   109,     0,     0,     0,    73,    72,     0, 
          0,    71,    49,    50,     0,     0,   117,   121,   101,     0, 
        114,     0,     0,    97,     0,     0,     0,     0,    75,    66, 
          0,    56,     0,     0,     0,     0,   113,   120,   116,     0, 
         99,     0,     0,   111,    91,     0,    54,     0,     0,     0, 
          0,   106,    95,     0,    67,    58,     0,     0,     0,   112, 
          0,   122,    93,     0,     0,     0,   118, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    20,    72,     4,     7,     8,    11,    46,   210, 
        152,    41,    85,   138,   190,    43,   215,    42,    87,   140, 
        264,   211,   212,   213,   253,   216,   217,   233,   234,   254, 
        313,   297,   285,   321,   255,   314,   322,   361,   382,   283, 
        295,   349,    30,    22,    31,    74,   101,   315,   316,   256, 
        272,   279,   310,   395,   275,   144,   278,   377,   276,   277, 
        304,   369,   274,   404,   370,   387,   371,   372,   385,   386, 
        145,   154,    76,   149,    98,    99,   158,   159,   146,    77, 
         78,    79,    80,    81,    92,   102,    82,   150,   195,   240, 
        155,   134,   135,    23,    24, 
    );
    protected static $yySindex = array(         -253,
          0,     0,  -246,  -184,     0,   315,     0,  -246,    32,    43, 
       -154,    46,     0,     0,     0,     0,     0,     0,     0,     0, 
        -86,     0,     0,   572,     0,  -184,     0,    86,  -184,    69, 
        139,     0,     0,     0,     0,     0,   -38,   147,   572,    46, 
       -184,  -184,  -184,     0,   161,   168,    20,     0,     0,   183, 
        -61,   -59,   -61,   -38,     0,    20,    20,     0,    20,    20, 
         20,    20,    58,     0,     0,     0,     0,     0,     0,    20, 
         20,  -158,   261,   212,   213,     0,     0,     0,     0,     0, 
          0,   211,   -55,  -184,   -53,  -184,   136,   -53,     0,   149, 
        149,    20,   149,   149,   149,   149,     0,   -90,  -184,   261, 
          0,   135,   349,     0,    20,    20,    20,    20,    20,    20, 
         20,    20,    20,    20,    20,    20,    20,    20,    20,     0, 
          0,    20,    20,    20,    20,    20,    20,    20,     0,     0, 
         20,   -43,     0,   208,   227,     0,  -184,   154,   228,     0, 
          0,   163,   404,   194,     0,    20,     0,    28,     0,   -90, 
         97,     0,   255,   -90,     0,     0,     0,   -41,    37,   149, 
        149,   149,   149,   149,   149,   911,   249,   149,   149,   149, 
        149,   149,   149,   149,   149,     0,     0,     0,     0,     0, 
          0,   911,     0,  -184,     0,   -55,     0,     0,  -184,   -85, 
         49,    20,     0,   269,    20,   271,   -90,   220,    20,     0, 
        -90,   274,    20,     0,     0,   344,     0,   192,     0,  -203, 
          0,     0,     0,     0,   191,   258,   276,     0,   -90,   233, 
          0,   204,   293,     0,    20,   149,     0,  2253,   115,    -2, 
        119,  -239,   214,   296,     0,     0,    49,     0,     0,    20, 
         20,   214,   299,     0,   219,     0,     0,     0,     0,     0, 
          0,     0,   221,   288,     0,  2253,     0,    92,   260,   314, 
        521,   294,     0,     0,    20,   462,     0,   317,   236,     0, 
        -90,    20,     0,    20,   325,   327,  2289,   338,   345,     0, 
          0,     0,  -184,  -107,    92,     0,     0,     0,     0,     0, 
          0,     0,   -76,     0,   348,    20,   354,   369,   459,     0, 
          0,     0,   664,  2253,   725,    20,    20,  2253,     0,    23, 
         20,    20,   -40,   367,     0,   376,   384,     0,  2253,     0, 
        385,  -184,     0,   350,     0,   911,     0,     0,   214,     0, 
        328,     0,   391,   780,   329,   231,   412,   835,   862,   116, 
        294,   134,  -184,   418,   336,     0,   421,     0,  -184,     0, 
       -103,    20,  2289,     0,    20,   123,  2289,     0,     0,  -184, 
        -24,     0,     0,     0,   134,   427,     0,     0,     0,   125, 
          0,   127,   413,     0,   889,    61,   435,   132,     0,     0, 
       2253,     0,   -24,   134,   447,   382,     0,     0,     0,    20, 
          0,   169,  2289,     0,     0,   383,     0,   -24,  -184,  2253, 
        470,     0,     0,  2289,     0,     0,   174,   390,  2289,     0, 
        475,     0,     0,   394,  2253,   393,     0, 
    );
    protected static $yyRindex= array(          117,
          0,     0,   432,     0,     0,   -70,     0,   495,  2343,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   197,     0,     0,     0,     0,     0,     0, 
        433,     0,     0,     0,     0,     0,     0,    52,   498,     0, 
          0,     0,     0,     0,   466,     0,   487,     0,     0,   105, 
       -109,   424,  -109,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    78,     0,     0,     0,     0,     0,     0,   416, 
          0,     0,   507,     0,     0,     0,     0,     0,     0,     0, 
          0,   -22,     0,     0,   431,     0,     0,   431,     0,   923, 
        960,   463,   988,  1045,  1104,  1159,     0,   131,     0,     0, 
          0,     0,     0,  -226,     0,     0,     0,     0,     0,     0, 
        497,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   500,     0,     0,     0,   -14,     0, 
          0,     0,   -18,     0,     0,   516,     0,     0,     0,   176, 
        519,     0,     0,   131,     0,     0,     0,     0,     0,  1298, 
       1363,  1420,  1483,  1538,  1574,    84,     0,  1597,  1628,  1673, 
       1696,  1749,  1807,  1866,  1913,     0,     0,     0,     0,     0, 
          0,    -8,     0,     0,     0,     0,     0,     0,     0,  -186, 
        440,     0,     0,     0,   476,   -32,   203,     0,   516,     0, 
        131,     0,     0,     0,     0,  -186,     0,   564,     0,     0, 
          0,     0,     0,    33,     0,   445,   -13,     0,   131,     0, 
          0,   531,     0,     0,   516,  2003,     0,   448,   252,     0, 
        -35,     0,   -12,     0,     0,     0,     0,     0,     0,   516, 
        449,    25,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   450,     0,     0,     0,     0, 
          0,   534,     0,     0,     0,  -101,     0,     0,     0,     0, 
        131,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   553,     0,   543,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,  -186,     0,     0, 
          0,     0,     0,   448,     0,   554,     0,   448,     0,     0, 
          0,     0,     0,     0,     0,   578,     0,     0,     0,     0, 
          0,   553,     0,     0,     0,   300,     0,     0,   -12,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          7,    12,     0,     0,     0,     0,     0,     0,   553,     0, 
          0,   554,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    12,     0,     0,     0,     0,  2132, 
          0,  2079,     0,     0,     0,   579,     0,  2184,     0,     0, 
        448,     0,     0,    12,     0,     0,     0,     0,     0,   516, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   448, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   448,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   613,     0,     0,   568,   617, 
        321,     0,   587,   560,  -139,     0,     0,     0,     0,  -134, 
       -224,     0,     0,     0,  -252,   419,     0,     0,     0,  2610, 
        -79,   316,   356,     0,  -167,  -258,     0,  -218,  -229,     0, 
          0,     0,   618,   620,     0,   -69,    -3,   334,   377,  -223, 
          0,     0,   120,     0,     0,   595,     0,     0,     0,     0, 
          0,     0,     0,     0,   306,     0,   290,     0,     0,     0, 
        479,     0,     0,  -111,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    15,     0,     0, 
          0,   493,     0,   656,     0, 
    );
    protected static $yyTable = array(10,
        147,   340,   187,    44,   194,    12,   200,   132,   194,   194, 
        194,   194,   194,    22,   194,   319,   323,   270,   161,   153, 
        260,    36,   125,    35,    38,   194,   194,   194,   194,   194, 
        194,    28,   163,   138,   380,   163,    50,    50,    50,   209, 
        125,   167,   200,    75,   207,    38,    28,    51,   206,     1, 
         51,   331,    59,   309,   207,   335,   229,     5,   194,    71, 
        194,    28,    56,   347,    57,    28,    28,    28,    28,    28, 
         74,    28,    42,   209,   125,     9,    40,    26,    50,    50, 
        261,    50,    28,    28,    28,    28,    28,    28,   282,   224, 
        366,    40,   194,   194,   151,    63,   266,    97,   381,    51, 
        262,    27,   161,    26,   350,    28,   125,   238,   207,    29, 
         58,    38,    28,   136,   151,    28,   163,    28,   151,   151, 
        151,   151,   151,   298,   151,   220,   230,   183,   396,   309, 
        232,    37,    50,   309,    74,   151,   151,   151,   151,   151, 
        151,   128,    70,   209,    63,    60,   383,   408,   200,    28, 
         28,   345,   317,   397,   257,    40,    83,    40,   209,   302, 
         26,    39,   416,   200,   197,   398,   200,   190,   406,   309, 
        151,   190,   190,   190,   190,   190,   128,   190,    83,   204, 
        309,    50,    40,     9,    50,   309,    47,   198,   190,   190, 
        190,   190,   190,   190,    13,    14,    15,   208,    17,    18, 
         19,    22,   151,   151,     9,   231,    54,     2,   122,   259, 
        123,   197,   191,    32,    33,    34,   191,   191,   191,   191, 
        191,    45,   191,   190,   200,   379,    55,   200,   209,   209, 
        209,   209,   318,   191,   191,   191,   191,   191,   191,   197, 
        367,   368,    83,   197,   197,   197,   197,   197,    84,   197, 
         86,   104,   129,   130,   131,   190,   190,   137,   141,   156, 
        197,   197,   197,   197,   197,   197,   184,   110,   191,   185, 
        186,   189,   108,   106,   119,   107,   188,   109,   231,    63, 
         64,    65,    66,    67,   200,   191,   193,   196,   231,   281, 
        122,   105,   123,   111,   199,   197,   202,   110,   201,   341, 
        191,   191,   108,   106,   200,   107,   203,   109,   214,   219, 
        221,    14,   222,   225,   228,   235,   236,   231,   148,   237, 
        122,   105,   123,   111,   110,   239,   241,   197,   197,   108, 
        106,   194,   107,   242,   109,   265,   263,   258,   231,   271, 
         52,   273,    14,    52,   231,   280,   281,   122,   105,   123, 
        111,   284,   286,   287,   296,    50,   119,   300,    52,    68, 
        301,    51,    52,    53,   306,    69,   307,   194,   194,   194, 
        194,   194,   194,   194,   194,   194,   194,   311,   194,   194, 
        194,   194,   194,   337,   312,   110,   119,   325,    28,   157, 
        108,   106,    52,   107,    50,   109,     2,     2,     2,     2, 
          2,     2,     2,   133,   136,    12,   139,   342,   122,   105, 
        123,   111,   327,   119,   200,   200,     2,     2,     2,   343, 
          2,    61,    62,   344,    28,    28,    28,    28,    28,    28, 
         28,    28,    28,    28,    12,    28,    28,    28,    28,    28, 
        110,   151,   348,   346,   200,   108,   106,   192,   107,   352, 
        109,   355,   351,   354,   360,   358,   211,   139,   363,    12, 
        364,   365,   376,   122,   105,   123,   111,   384,   227,   368, 
        367,   390,   374,   392,   119,   393,   378,   151,   151,   151, 
        151,   151,   151,   151,   151,   151,   399,    14,   151,   151, 
        151,   151,   151,   328,   190,   110,   211,   211,   211,   329, 
        108,   106,   394,   107,   400,   109,   133,   405,   402,   139, 
        409,    14,   403,   411,   412,   414,   415,   417,   122,   105, 
        123,   111,     5,   410,    11,    61,   211,   127,   413,   119, 
        190,   190,   190,   190,   190,   190,   190,   190,   190,   191, 
        159,   190,   190,   190,   190,   190,    26,   128,   125,   124, 
        120,   121,    12,    24,   127,   123,   123,   292,   200,   126, 
        127,   203,   290,   288,    37,   289,   197,   291,   127,    36, 
        202,    14,    84,   123,    86,   191,   191,   191,   191,   191, 
        191,   191,   191,   191,   119,     7,   191,   191,   191,   191, 
        191,    14,    51,    68,    13,    14,    15,    16,    17,    18, 
         19,    46,   197,   197,   197,   197,   197,   197,   197,   197, 
        197,   293,   123,   197,   197,   197,   197,   197,    70,   107, 
         25,    89,    21,    13,    14,    15,   208,    17,    18,    19, 
        125,   124,   120,   121,   112,   113,   114,   115,   116,    88, 
        320,   126,   127,   128,   117,   118,   294,   142,    13,    14, 
         15,   208,    17,    18,    19,   267,   359,    49,    48,   388, 
        125,   124,   120,   121,   112,   113,   114,   115,   116,   324, 
        218,   126,   127,   128,   117,   118,   362,   389,   205,    35, 
        139,     0,     0,     0,     0,     0,     0,   125,   124,   120, 
        121,   112,   113,   114,   115,   116,     0,     0,   126,   127, 
        110,   117,   118,     0,     0,   108,   106,     0,   107,     0, 
        109,     5,     5,     5,     5,     5,     5,     5,     0,   407, 
          0,     0,   330,   122,   105,   123,   111,     0,     0,     0, 
          0,     5,     5,     5,     0,     0,     0,     0,     0,     0, 
        194,    13,    14,    15,   208,    17,    18,    19,   125,   124, 
        120,   121,   112,   113,   114,   115,   116,   209,     0,   126, 
        127,   110,   117,   118,     0,     0,   108,   106,     0,   107, 
          0,   109,     0,     0,     7,     7,     7,     7,     7,     7, 
          7,     0,     0,   332,   122,   105,   123,   111,     0,   119, 
          0,     0,     0,   223,     7,     7,     7,   209,   209,   209, 
          0,     0,     0,   125,   124,   120,   121,   112,   113,   114, 
        115,   116,     0,     0,   126,   127,   110,   117,   118,   243, 
        353,   108,   106,   216,   107,     0,   109,   209,     0,     0, 
          0,     0,     0,     0,   268,   269,     0,     0,     0,   122, 
        105,   123,   111,   216,   216,   216,   216,   216,   216,   216, 
        119,    13,    14,    15,    16,    17,    18,    19,   125,   124, 
        120,   121,   112,   113,   114,   115,   116,     0,     0,   126, 
        127,   110,   117,   118,     0,     0,   108,   106,     0,   107, 
          0,   109,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   216,   122,   105,   123,   111,   110,     0, 
        333,     0,   357,   108,   106,   119,   107,     0,   109,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   122,   105,   123,   111,   110,     0,     0,     0,   391, 
        108,   106,     0,   107,     0,   109,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   373,   110,   122,   105, 
        123,   111,   108,   106,     0,   107,     0,   109,     0,   184, 
        119,     0,     0,   184,   184,   184,   184,   184,     0,   184, 
        122,   105,   123,   111,     0,     0,     0,     0,     0,     0, 
        184,   184,     0,   184,   401,   184,     0,   119,     0,     0, 
          0,     0,     0,     0,     0,     0,   185,     0,     0,     0, 
        185,   185,   185,   185,   185,     0,   185,     0,     0,     0, 
          0,     0,     0,     0,   119,   184,     0,   185,   185,     0, 
        185,     0,   185,     0,   182,     0,     0,     0,   182,   182, 
        182,   182,   182,     0,   182,     0,   119,     0,     0,     0, 
          0,     0,     0,     0,     0,   182,   182,   184,   182,     0, 
        182,     0,   185,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   125,   124,   120,   121,   112,   113,   114, 
        115,   116,     0,     0,   126,   127,     0,   117,   118,     0, 
        182,   183,     0,     0,   185,   183,   183,   183,   183,   183, 
          0,   183,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   183,   183,     0,   183,     0,   183,     0,     0, 
          0,     0,   182,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   125,   124,   120,   121,   112,   113, 
        114,   115,   116,     0,     0,   126,   127,   183,   117,   118, 
        186,     0,     0,     0,   186,   186,   186,   186,   186,     0, 
        186,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   186,   186,     0,   186,     0,   186,     0,     0,   183, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   125, 
        124,   120,   121,   112,   113,   114,   115,   116,     0,     0, 
        126,   127,     0,   117,   118,   187,   186,     0,   356,   187, 
        187,   187,   187,   187,     0,   187,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   187,   187,     0,   187, 
          0,   187,     0,     0,     0,     0,     0,     0,   186,     0, 
          0,     0,     0,     0,   125,   124,   120,   121,   112,   113, 
        114,   115,   116,     0,     0,   126,   127,     0,   117,   118, 
          0,   187,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   125,   124,   120,   121,   112,   113,   114,   115,   116, 
          0,     0,   126,   127,     0,   117,   118,     0,     0,     0, 
          0,     0,     0,   187,     0,     0,   184,     0,   125,   124, 
        120,   121,   112,   113,   114,   115,   116,     0,     0,   126, 
        127,     0,   117,   118,     0,     0,     0,     0,     0,     0, 
        125,   124,   120,   121,   112,   113,   114,   115,   116,     0, 
          0,   126,   127,   185,   117,   118,   184,   184,   184,   184, 
        184,     0,     0,     0,   164,   184,   184,   184,   164,   164, 
        164,   164,   164,     0,   164,     0,     0,     0,     0,     0, 
          0,   182,     0,     0,     0,   164,   164,     0,   164,     0, 
        164,     0,     0,   185,   185,   185,   185,   185,     0,     0, 
          0,     0,   185,   185,   185,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        164,   182,   182,   182,   182,   182,     0,     0,     0,   176, 
        182,   182,   182,   176,   176,   176,   176,   176,   183,   176, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        176,   176,   164,   176,     0,   176,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   183,   183, 
        183,   183,   183,     0,     0,   176,   177,   183,   183,   183, 
        177,   177,   177,   177,   177,     0,   177,   186,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   177,   177,     0, 
        177,     0,   177,     0,     0,     0,     0,   176,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   186,   186,   186, 
        186,   186,   177,     0,     0,     0,   186,   186,   186,   178, 
          0,     0,   187,   178,   178,   178,   178,   178,     0,   178, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        178,   178,     0,   178,   177,   178,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   187,   187,   187,   187,   187,     0,     0,     0, 
          0,   187,   187,   187,   179,   178,     0,     0,   179,   179, 
        179,   179,   179,     0,   179,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   179,   179,     0,   179,     0, 
        179,     0,     0,     0,     0,     0,     0,   178,     0,     0, 
        180,     0,     0,     0,   180,   180,   180,   180,   180,     0, 
        180,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        179,   180,   180,   165,   180,     0,   180,   165,   165,   165, 
        165,   165,     0,   165,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   165,   165,     0,   165,     0,   165, 
          0,   164,   179,     0,   166,     0,   180,     0,   166,   166, 
        166,   166,   166,     0,   166,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   166,   166,     0,   166,   165, 
        166,     0,     0,     0,     0,     0,     0,     0,   180,     0, 
          0,   164,   164,   164,   164,   164,     0,     0,     0,   167, 
        164,   164,   164,   167,   167,   167,   167,   167,     0,   167, 
        166,   165,     0,     0,     0,     0,   176,     0,     0,     0, 
        167,   167,   168,   167,     0,   167,   168,   168,   168,   168, 
        168,     0,   168,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   166,   168,   168,     0,   168,     0,   168,     0, 
          0,     0,     0,     0,     0,   167,   176,   176,   176,   176, 
        176,     0,     0,     0,     0,   176,   176,   176,     0,     0, 
          0,     0,     0,   177,     0,   169,     0,     0,   168,   169, 
        169,   169,   169,   169,     0,   169,     0,   167,     0,     0, 
          0,     0,     0,     0,     0,     0,   169,   169,     0,   169, 
          0,   169,     0,     0,     0,     0,     0,     0,     0,     0, 
        168,     0,     0,   177,   177,   177,   177,   177,     0,     0, 
          0,     0,   177,   177,   177,     0,     0,     0,     0,     0, 
          0,   169,     0,   149,     0,     0,   178,   149,   149,   149, 
        149,   149,     0,   149,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   149,   149,     0,   149,     0,   149, 
          0,     0,     0,   169,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   178,   178,   178,   178, 
        178,     0,     0,     0,     0,   178,   178,   178,     0,   149, 
          0,   179,   150,     0,     0,     0,   150,   150,   150,   150, 
        150,     0,   150,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   150,   150,     0,   150,     0,   150,     0, 
          0,   149,     0,     0,     0,     0,     0,   180,     0,     0, 
          0,   179,   179,   179,   179,   179,     0,     0,     0,   181, 
        179,   179,   179,   181,   181,   181,   181,   181,   150,   181, 
        165,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        181,   181,     0,   181,     0,   181,     0,   180,   180,   180, 
        180,   180,     0,     0,     0,     0,   180,   180,   180,     0, 
        150,   166,     0,     0,     0,     0,     0,     0,     0,     0, 
        165,   165,   165,   165,   165,   181,     0,     0,     0,   165, 
        165,   165,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   166,   166,   166,   166,   166,   167,   181,     0,   148, 
        166,   166,   166,   148,   148,   148,   148,   148,     0,   148, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   168, 
        148,   148,     0,   148,     0,   148,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   167,   167,   167,   167, 
        167,     0,     0,     0,     0,   167,   167,   167,     0,     0, 
          0,     0,     0,     0,     0,   148,     0,     0,     0,   168, 
        168,   168,   168,   168,     0,     0,     0,     0,   168,   168, 
        168,   115,   169,     0,     0,     0,     0,     0,   115,     0, 
          0,   115,     0,   115,     0,     0,     0,   148,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   115,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   169,   169,   169,   169,   169,     0,     0,     0, 
          0,   169,   169,   169,   119,     0,     0,     0,     0,   115, 
        149,   119,     0,     0,   119,     0,   119,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        119,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   115,     0,   115,   115,     0,     0,     0,     0,     0, 
        149,   149,   149,   149,   149,     0,   110,     0,     0,   149, 
        149,   149,   119,   110,     0,     0,   110,     0,   110,   150, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   110,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   119,     0,   119,   119,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   150, 
        150,   150,   150,   150,   110,     0,   181,     0,   150,   150, 
        150,     0,     0,     0,     0,    59,     0,     0,     0,     0, 
          0,     0,    71,     0,     0,    56,     0,    57,     0,     0, 
          0,     0,     0,     0,     0,     0,   110,     0,   110,   110, 
          0,   252,     0,     0,     0,     0,   181,   181,   181,   181, 
        181,    59,     0,     0,     0,   181,   181,   181,    71,     0, 
          0,    56,     0,    57,     0,     0,     0,     0,   115,   115, 
        115,   115,   115,    58,     0,     0,     0,   252,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   148,     0,     0,     0, 
          0,     0,     0,     0,     0,    70,     0,     0,    60,    58, 
          0,     0,    14,     0,    14,     0,    14,     0,     0,     0, 
          0,   119,   119,   119,   119,   119,     0,     0,     0,     0, 
          0,    14,    14,     0,    14,     0,   148,   148,   148,   148, 
        148,   308,     0,     0,    60,   148,   148,   148,   115,   115, 
        115,   115,     0,   115,   115,     0,     0,     0,     0,     0, 
          0,     0,     0,    14,     0,    14,     0,     0,   115,   115, 
        115,   115,     0,   110,   110,   110,   110,   110,   115,   115, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    14,     0,     0,     0,     0, 
          0,   119,   119,   119,   119,     0,     0,   119,     0,     0, 
        115,   115,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   119,   119,   119,   119,     0,     0,     0,     0,     0, 
          0,   119,   119,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    63,    64,    65,    66,    67,     0,     0,     0, 
          0,     0,     0,   110,   110,   110,   110,     0,     0,   110, 
          0,     0,     0,   119,   119,     0,     0,     0,     0,     0, 
          0,     0,     0,   110,   110,   110,   110,     0,    63,    64, 
         65,    66,    67,   110,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   110,   110,     0,     0,     0, 
          0,     0,    68,   244,   245,   246,     0,     0,    69,     0, 
          0,     0,    14,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   247,   248,   249,   250,     0,     0,     0,     0, 
          0,     0,   251,     0,     0,     0,     0,     0,    68,   244, 
        245,   246,     0,     0,    69,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   247,   248, 
        249,   250,    14,    14,    61,    62,    73,     0,   251,     0, 
          0,     0,    14,     0,     0,    90,    91,     0,    93,    94, 
         95,    96,     0,     0,     0,     0,     0,     0,     0,   100, 
        103,     0,    14,     0,     0,     0,     0,     0,     0,     0, 
         61,    62,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   143,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   160,   161,   162,   163,   164,   165, 
        166,   168,   169,   170,   171,   172,   173,   174,   175,     0, 
          0,   176,   177,   178,   179,   180,   181,   182,     0,     0, 
        100,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    14,     0,     0,   143,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   143,     0,     0,   166,     0,     0,     0,   143,     0, 
          0,     0,   226,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   143,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   143, 
        143,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   299,     0,     0,     0,     0,     0, 
          0,   303,     0,   305,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   326,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   143,   334,   336,     0,     0, 
        338,   339,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   143,     0,     0,   375,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   143, 
    );
    protected static $yyCheck = array(4,
         91,    42,   137,    42,    37,    91,    42,    63,    41,    42, 
         43,    44,    45,   123,    47,   123,    93,   242,    41,    99, 
        260,    26,    41,   125,    29,    58,    59,    60,    61,    62, 
         63,    44,    41,   260,    59,    44,    41,    42,    43,   125, 
         59,   111,   154,    47,    59,    59,    59,    41,   188,   303, 
         44,   304,    33,   277,   189,   308,   260,   304,    91,    40, 
         93,    37,    43,   322,    45,    41,    42,    43,    44,    45, 
         59,    47,    40,   260,    93,   260,    44,    46,    83,    84, 
        320,    86,    58,    59,    60,    61,    62,    63,   256,   201, 
        349,    59,   125,   126,    99,    44,   236,    40,   123,    93, 
        340,    59,   125,    46,   329,   260,   125,   219,   123,    64, 
         91,   125,   125,   340,    37,    91,   125,    93,    41,    42, 
         43,    44,    45,   263,    47,   195,   330,   131,   381,   353, 
        210,    46,   137,   357,   123,    58,    59,    60,    61,    62, 
         63,    58,   123,   330,    93,   126,   365,   400,    44,   125, 
        126,   319,   260,   383,    40,   123,    60,   125,   260,   271, 
         46,    93,   415,    59,   150,   384,    62,    37,   398,   393, 
         93,    41,    42,    43,    44,    45,    93,    47,    60,   184, 
        404,   186,    44,   260,   189,   409,    40,    91,    58,    59, 
         60,    61,    62,    63,   280,   281,   282,   283,   284,   285, 
        286,   311,   125,   126,   260,   210,    46,    91,    60,    91, 
         62,   197,    37,   300,   301,   302,    41,    42,    43,    44, 
         45,   260,    47,    93,   260,   360,    59,   123,   330,   300, 
        301,   302,   340,    58,    59,    60,    61,    62,    63,    37, 
        344,   345,    60,    41,    42,    43,    44,    45,   310,    47, 
        310,   410,    41,    41,    44,   125,   126,   311,   123,   125, 
         58,    59,    60,    61,    62,    63,   310,    37,    93,    62, 
         44,    44,    42,    43,   126,    45,   123,    47,   283,   260, 
        261,   262,   263,   264,   320,   123,    93,   260,   293,    59, 
         60,    61,    62,    63,    40,    93,   260,    37,   340,   340, 
        125,   126,    42,    43,   340,    45,    58,    47,   260,    41, 
         40,    60,    93,    40,   123,   125,    59,   322,   409,    44, 
         60,    61,    62,    63,    37,    93,   123,   125,   126,    42, 
         43,   364,    45,    41,    47,    40,   123,   340,   343,    41, 
         41,   123,    91,    44,   349,   125,    59,    60,    61,    62, 
         63,   260,    93,    40,    61,   360,   126,    41,    59,   340, 
        125,    41,    42,    43,    40,   346,    40,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   409,    40,   411,   412, 
        413,   414,   415,   361,    40,    37,   126,    40,   364,    41, 
         42,    43,    93,    45,   399,    47,   280,   281,   282,   283, 
        284,   285,   286,    83,    84,    91,    86,    41,    60,    61, 
         62,    63,    59,   126,   310,   311,   300,   301,   302,    44, 
        304,   402,   403,    40,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,   409,    91,   411,   412,   413,   414,   415, 
         37,   364,    93,    59,   340,    42,    43,    44,    45,    59, 
         47,    40,   125,   125,   321,   340,   260,   137,    41,    91, 
        125,    41,   340,    60,    61,    62,    63,    41,   125,   345, 
        344,    59,   353,   413,   126,    41,   357,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    40,   410,   411,   412, 
        413,   414,   415,   125,   364,    37,   300,   301,   302,    41, 
         42,    43,   371,    45,   123,    47,   186,   125,   340,   189, 
         41,   260,   393,   340,   125,    41,   123,   125,    60,    61, 
         62,    63,    91,   404,    59,    93,   330,    41,   409,   126, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   364, 
        125,   411,   412,   413,   414,   415,   123,    41,   400,   401, 
        402,   403,    91,   123,    58,    93,    41,    37,    40,   411, 
        412,    62,    42,    43,   125,    45,   364,    47,    93,   125, 
         40,   320,   125,   125,   125,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   126,    91,   411,   412,   413,   414, 
        415,   340,    59,    41,   280,   281,   282,   283,   284,   285, 
        286,    59,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    91,    59,   411,   412,   413,   414,   415,    41,    41, 
          8,    54,     6,   280,   281,   282,   283,   284,   285,   286, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    53, 
        285,   411,   412,   413,   414,   415,   126,    88,   280,   281, 
        282,   283,   284,   285,   286,   237,   341,    40,    39,   370, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   293, 
        192,   411,   412,   413,   414,   415,   343,   372,   186,    24, 
        360,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         37,   414,   415,    -1,    -1,    42,    43,    -1,    45,    -1, 
         47,   280,   281,   282,   283,   284,   285,   286,    -1,   399, 
         -1,    -1,    59,    60,    61,    62,    63,    -1,    -1,    -1, 
         -1,   300,   301,   302,    -1,    -1,    -1,    -1,    -1,    -1, 
        146,   280,   281,   282,   283,   284,   285,   286,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   260,    -1,   411, 
        412,    37,   414,   415,    -1,    -1,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,   280,   281,   282,   283,   284,   285, 
        286,    -1,    -1,    59,    60,    61,    62,    63,    -1,   126, 
         -1,    -1,    -1,   199,   300,   301,   302,   300,   301,   302, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    37,   414,   415,   225, 
         41,    42,    43,   260,    45,    -1,    47,   330,    -1,    -1, 
         -1,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1,    60, 
         61,    62,    63,   280,   281,   282,   283,   284,   285,   286, 
        126,   280,   281,   282,   283,   284,   285,   286,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    37,   414,   415,    -1,    -1,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   330,    60,    61,    62,    63,    37,    -1, 
        306,    -1,    41,    42,    43,   126,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    60,    61,    62,    63,    37,    -1,    -1,    -1,    41, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   352,    37,    60,    61, 
         62,    63,    42,    43,    -1,    45,    -1,    47,    -1,    37, 
        126,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,   390,    63,    -1,   126,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   126,    93,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    37,    -1,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,   125,    61,    -1, 
         63,    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,    -1, 
         93,    37,    -1,    -1,   125,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    93,   414,   415, 
         37,    -1,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,   125, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,    37,    93,    -1,   364,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
         -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,    -1,    -1,    -1, 
         -1,    -1,    -1,   125,    -1,    -1,   364,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,   364,   414,   415,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    37,   413,   414,   415,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,   364,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,   414,   415,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         93,   404,   405,   406,   407,   408,    -1,    -1,    -1,    37, 
        413,   414,   415,    41,    42,    43,    44,    45,   364,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,   125,    61,    -1,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    93,    37,   413,   414,   415, 
         41,    42,    43,    44,    45,    -1,    47,   364,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,   125,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    93,    -1,    -1,    -1,   413,   414,   415,    37, 
         -1,    -1,   364,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,   125,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,    37,    93,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1, 
         37,    -1,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         93,    58,    59,    37,    61,    -1,    63,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,   364,   125,    -1,    37,    -1,    93,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    93, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    37, 
        413,   414,   415,    41,    42,    43,    44,    45,    -1,    47, 
         93,   125,    -1,    -1,    -1,    -1,   364,    -1,    -1,    -1, 
         58,    59,    37,    61,    -1,    63,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   125,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    93,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,   414,   415,    -1,    -1, 
         -1,    -1,    -1,   364,    -1,    37,    -1,    -1,    93,    41, 
         42,    43,    44,    45,    -1,    47,    -1,   125,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        125,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,   414,   415,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    -1,    37,    -1,    -1,   364,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,   414,   415,    -1,    93, 
         -1,   364,    37,    -1,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,   125,    -1,    -1,    -1,    -1,    -1,   364,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    37, 
        413,   414,   415,    41,    42,    43,    44,    45,    93,    47, 
        364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,    -1, 
        125,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    93,    -1,    -1,    -1,   413, 
        414,   415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,   364,   125,    -1,    37, 
        413,   414,   415,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,   414,   415,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,    33,   364,    -1,    -1,    -1,    -1,    -1,    40,    -1, 
         -1,    43,    -1,    45,    -1,    -1,    -1,   125,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,    33,    -1,    -1,    -1,    -1,    91, 
        364,    40,    -1,    -1,    43,    -1,    45,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    33,    -1,    -1,   413, 
        414,   415,    91,    40,    -1,    -1,    43,    -1,    45,   364, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   123,    -1,   125,   126,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    91,    -1,   364,    -1,   413,   414, 
        415,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    -1, 
         -1,    -1,    40,    -1,    -1,    43,    -1,    45,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,   125,   126, 
         -1,    59,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    33,    -1,    -1,    -1,   413,   414,   415,    40,    -1, 
         -1,    43,    -1,    45,    -1,    -1,    -1,    -1,   260,   261, 
        262,   263,   264,    91,    -1,    -1,    -1,    59,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   364,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,   126,    91, 
         -1,    -1,    40,    -1,    42,    -1,    44,    -1,    -1,    -1, 
         -1,   260,   261,   262,   263,   264,    -1,    -1,    -1,    -1, 
         -1,    59,    60,    -1,    62,    -1,   404,   405,   406,   407, 
        408,   123,    -1,    -1,   126,   413,   414,   415,   340,   341, 
        342,   343,    -1,   345,   346,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    91,    -1,    93,    -1,    -1,   360,   361, 
        362,   363,    -1,   260,   261,   262,   263,   264,   370,   371, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1, 
         -1,   340,   341,   342,   343,    -1,    -1,   346,    -1,    -1, 
        402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   360,   361,   362,   363,    -1,    -1,    -1,    -1,    -1, 
         -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   260,   261,   262,   263,   264,    -1,    -1,    -1, 
         -1,    -1,    -1,   340,   341,   342,   343,    -1,    -1,   346, 
         -1,    -1,    -1,   402,   403,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   360,   361,   362,   363,    -1,   260,   261, 
        262,   263,   264,   370,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   402,   403,    -1,    -1,    -1, 
         -1,    -1,   340,   341,   342,   343,    -1,    -1,   346,    -1, 
         -1,    -1,   260,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,    -1, 
         -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,   340,   341, 
        342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361, 
        362,   363,   310,   311,   402,   403,    47,    -1,   370,    -1, 
         -1,    -1,   320,    -1,    -1,    56,    57,    -1,    59,    60, 
         61,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70, 
         71,    -1,   340,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110, 
        111,   112,   113,   114,   115,   116,   117,   118,   119,    -1, 
         -1,   122,   123,   124,   125,   126,   127,   128,    -1,    -1, 
        131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   410,    -1,    -1,   146,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,    -1, 
         -1,    -1,   203,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240, 
        241,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   265,    -1,    -1,    -1,    -1,    -1, 
         -1,   272,    -1,   274,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   296,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   306,   307,   308,    -1,    -1, 
        311,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   352,    -1,    -1,   355,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 
      'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 
      'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 
      'T_FOREACH', 'T_AS', 'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 
      'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      'T_OBJECT_OPERATOR', 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
      'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 'T_BOOLEAN_AND', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 122 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 133 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 133 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 144 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 145 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 149 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 149 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 13:  #line 157 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 15:  #line 162 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 16:  #line 168 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 168 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 18:  #line 177 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 19:  #line 177 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 186 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 21:  #line 186 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 22:  #line 197 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 198 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 202 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 25:  #line 203 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 207 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 208 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 212 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 213 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 30:  #line 217 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 31:  #line 218 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 222 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 33:  #line 223 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 224 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 35:  #line 228 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 229 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 230 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 234 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 39:  #line 235 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 40:  #line 239 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 41:  #line 239 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 42:  #line 242 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 242 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 252 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 45:  #line 259 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop][0];
      $yyVal->annotations= $yyVals[-5+$yyTop][1];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 46:  #line 270 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 48:  #line 275 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 49:  #line 276 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 50:  #line 277 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 51:  #line 281 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 282 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 288 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 54:  #line 288 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 55:  #line 298 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 56:  #line 298 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 57:  #line 306 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 58:  #line 306 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 59:  #line 319 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 60:  #line 320 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 61:  #line 324 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 62:  #line 325 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 63:  #line 329 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 64:  #line 333 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVals[-1+$yyTop] && $yyVal->parameters= array('default' => $yyVals[-1+$yyTop]);
    } break;

    case 65:  #line 338 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 66:  #line 346 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 67:  #line 347 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 68:  #line 351 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 69:  #line 352 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 70:  #line 356 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 71:  #line 357 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 72:  #line 361 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 73:  #line 362 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 74:  #line 366 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 75:  #line 367 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 82:  #line 379 "grammar/xp.jay"
    { $yyVal= '[]'; } break;

    case 83:  #line 380 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 84:  #line 388 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 86:  #line 393 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 87:  #line 394 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 88:  #line 398 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 89:  #line 398 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 90:  #line 401 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 91:  #line 401 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 92:  #line 406 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 93:  #line 406 "grammar/xp.jay"
    {
      $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 94:  #line 412 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 95:  #line 412 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      /* $1->assignment= $6; XX FIXME XX*/
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 96:  #line 417 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 97:  #line 417 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 98:  #line 421 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 99:  #line 421 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 100:  #line 425 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 101:  #line 425 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 102:  #line 430 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 103:  #line 430 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
    } break;

    case 106:  #line 438 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 107:  #line 439 "grammar/xp.jay"
    { $yyVal= array(NULL, $yyVals[0+$yyTop]); } break;

    case 108:  #line 443 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 109:  #line 444 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 110:  #line 448 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 111:  #line 449 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 112:  #line 449 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 113:  #line 454 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 114:  #line 455 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 115:  #line 459 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 116:  #line 460 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 117:  #line 464 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 118:  #line 464 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 119:  #line 472 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 121:  #line 477 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 122:  #line 477 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 123:  #line 485 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 125:  #line 490 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 126:  #line 491 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 127:  #line 495 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 129:  #line 500 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 130:  #line 506 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 132:  #line 515 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 133:  #line 515 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 134:  #line 518 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 135:  #line 518 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 136:  #line 523 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 137:  #line 523 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 138:  #line 528 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 139:  #line 528 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 140:  #line 534 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 141:  #line 534 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 142:  #line 540 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 143:  #line 541 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 144:  #line 544 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 145:  #line 547 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 146:  #line 550 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 147:  #line 553 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 148:  #line 557 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 149:  #line 563 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 150:  #line 569 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 151:  #line 578 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 152:  #line 579 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 153:  #line 579 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 154:  #line 583 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 155:  #line 588 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 156:  #line 589 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 157:  #line 590 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 158:  #line 591 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 159:  #line 595 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 161:  #line 600 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 162:  #line 601 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 163:  #line 605 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 164:  #line 609 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 165:  #line 610 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 166:  #line 611 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 167:  #line 612 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 168:  #line 613 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 169:  #line 614 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 170:  #line 618 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 171:  #line 619 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 172:  #line 620 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 173:  #line 621 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 174:  #line 622 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 175:  #line 623 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 176:  #line 627 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 177:  #line 628 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 178:  #line 629 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 179:  #line 630 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 180:  #line 631 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 181:  #line 632 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 182:  #line 636 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 183:  #line 637 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 184:  #line 638 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 185:  #line 639 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 640 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 641 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 188:  #line 645 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 189:  #line 646 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 190:  #line 651 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 192:  #line 656 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 193:  #line 656 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 194:  #line 659 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 195:  #line 663 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 196:  #line 663 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 197:  #line 667 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 200:  #line 678 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 201:  #line 679 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 202:  #line 683 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 203:  #line 687 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 204:  #line 688 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 206:  #line 693 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 207:  #line 697 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 208:  #line 698 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 209:  #line 704 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 210:  #line 705 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 211:  #line 709 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 212:  #line 710 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 213:  #line 714 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 214:  #line 715 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 215:  #line 716 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 216:  #line 717 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 217:  #line 718 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 218:  #line 719 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 219:  #line 720 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1891 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
