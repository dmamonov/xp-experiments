<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 51 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_DECIMAL',  263);
  define('TOKEN_T_HEX',  264);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_PACKAGE',  303);
  define('TOKEN_T_IMPORT',  304);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_T_DOUBLE_ARROW',  413);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          9,     9,     9,     4,     4,    12,     3,    16,     3,    18, 
          3,    13,    13,    14,    14,    19,    19,    21,    21,    15, 
         15,    22,    22,    22,    17,    17,    17,    26,    26,    28, 
         27,    29,    27,    23,    23,    33,    33,    32,    32,    32, 
         31,    31,    36,    24,    39,    24,    41,    24,    38,    38, 
         35,    35,    42,    42,    43,    43,    37,    37,    40,    40, 
         40,    40,    40,    40,    25,    25,    34,    34,    45,    44, 
         46,    44,    49,    44,    51,    44,    53,    44,    54,    44, 
         55,    44,    57,    44,    44,    52,    52,    47,    47,    48, 
         58,    48,    56,    56,    59,    59,    63,    62,    60,    60, 
         64,    61,    65,    65,    30,    68,    30,    69,    30,    70, 
         30,    71,    30,    72,    30,    30,    30,    30,    30,    30, 
         30,    30,    66,    78,    66,    80,    66,    66,    66,    66, 
         66,    79,    79,    81,    81,    82,    73,    73,    73,    73, 
         73,    73,    74,    74,    74,    74,    74,    74,    75,    75, 
         75,    75,    75,    75,    76,    76,    76,    76,    76,    76, 
         77,    77,    67,    67,    84,    83,    83,    85,    83,    83, 
         50,    50,    86,    86,    11,    11,    11,    87,    87,    88, 
         88,    20,    20,    10,    10,    89,    89,    90,    90,    90, 
         90,    90,    90,    90, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     6, 
          1,     1,     3,     1,     3,     0,     9,     0,     9,     0, 
          8,     0,     2,     0,     2,     0,     2,     0,     3,     2, 
          0,     1,     1,     4,     3,     1,     0,     1,     3,     0, 
          3,     0,     6,     5,     6,     0,     1,     2,     4,     4, 
          0,     2,     0,     9,     0,     8,     0,     9,     1,     3, 
          0,     1,     1,     3,     3,     3,     0,     2,     1,     1, 
          1,     1,     1,     1,     0,     1,     1,     2,     0,     4, 
          0,     7,     0,    10,     0,     8,     0,     6,     0,     7, 
          0,     6,     0,     4,     2,     3,     1,     1,     3,     0, 
          0,     3,     2,     1,     1,     2,     0,     9,     0,     1, 
          0,     5,     0,     1,     1,     0,     3,     0,     8,     0, 
          5,     0,     8,     0,     6,     3,     1,     1,     1,     1, 
          1,     5,     1,     0,     4,     0,     5,     1,     1,     1, 
          1,     0,     1,     1,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     2,     2,     2,     2,     2,     2, 
          2,     2,     0,     1,     0,     4,     2,     0,     6,     2, 
          0,     1,     1,     3,     1,     4,     3,     1,     3,     1, 
          3,     1,     3,     0,     1,     1,     2,     1,     1,     1, 
          1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,   198,   200,   199,   201,   203,   202,   204,     1,     0, 
        195,     0,     8,     0,     4,     0,    16,    20,    18,   197, 
         15,     0,     0,     0,     0,    12,     0,     0,     0,     0, 
          0,     0,     0,    10,     0,     0,     0,     0,     0,     0, 
          0,    13,   187,     0,   190,     0,     0,    23,     0,     0, 
          0,    27,    31,     0,     0,   186,     0,    25,    31,     0, 
          0,     0,   191,   189,     0,   193,     0,    21,     0,    30, 
         32,    33,     0,     0,     0,     0,    17,     0,     0,     0, 
          0,     0,     0,     0,    19,    31,     0,     0,     0,   134, 
          0,     0,     0,     0,     0,   141,   138,   140,   139,   116, 
         79,     0,    93,   118,    83,    87,    89,    85,    81,     0, 
          0,     0,     0,    76,     0,   115,   127,   128,   129,   130, 
        131,    55,    69,    70,    71,    72,    73,    74,     0,     0, 
          0,     0,    31,    41,     0,     0,    39,     0,     0,     0, 
          0,     0,     0,     0,   136,   124,     0,     0,    91,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    34,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   171,   172,     0,     0,     0,     0,     0,     0, 
         95,    78,     0,    57,     0,     0,    53,     0,     0,     0, 
          0,     0,     0,   182,     0,     0,   175,     0,   117,     0, 
          0,     0,     0,     0,     0,     0,     0,    98,     0,     0, 
          0,   126,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   153,   154,   155, 
        156,   157,   158,     0,     0,    62,     0,     0,     0,    48, 
          0,    47,     0,     0,     0,    44,    29,     0,     0,   135, 
          0,     0,   143,     0,     0,     0,     0,     0,    80,     0, 
         94,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    45,     0, 
         43,   184,     0,   137,     0,     0,     0,     0,   178,     0, 
          0,     0,     0,    99,     0,     0,     0,   121,     0,     0, 
         66,    65,     0,     0,    64,     0,    49,    50,     0,     0, 
        145,   125,   176,     0,   107,   111,    92,     0,   104,     0, 
          0,     0,    88,     0,     0,     0,     0,     0,    68,    59, 
          0,    56,     0,     0,     0,     0,     0,   103,   110,   106, 
          0,     0,    90,     0,     0,   101,    82,     0,     0,    58, 
         54,   179,     0,     0,   119,     0,    96,    86,     0,   123, 
         60,     0,     0,     0,   102,     0,   112,    84,     0,     0, 
          0,   108, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    19,   121,     4,     7,     8,    11,    38,    79, 
         61,    33,    48,    60,    71,    35,    84,    34,    50,    62, 
        144,    80,    81,    82,   122,    85,    86,    93,    94,   123, 
        199,   196,   253,   124,   245,   254,   314,   342,   193,   139, 
        248,   246,   247,   125,   158,   166,   219,   357,   162,   203, 
        165,   336,   163,   164,   212,   327,   160,   369,   328,   348, 
        329,   330,   346,   347,   298,   126,   209,   157,   161,   223, 
        224,   206,   127,   128,   129,   130,   131,   150,   262,   205, 
        263,   264,   210,   266,   324,   204,    56,    57,    21,    22, 
    );
    protected static $yySindex = array(         -290,
          0,     0,  -268,  -197,     0,   161,     0,  -268,    13,    19, 
       -192,     0,     0,     0,     0,     0,     0,     0,     0,  -120, 
          0,   161,     0,  -197,     0,    86,     0,     0,     0,     0, 
          0,   -39,  -197,  -197,  -197,     0,    87,    40,   -22,  -155, 
       -152,  -155,   -39,     0,    67,   -44,  -197,  -144,  -197,    47, 
       -144,     0,     0,  -139,     0,   111,   132,     0,  -197,    55, 
        139,     0,     0,    63,  -197,     0,   -44,     0,     0,  -197, 
        -28,   -73,     0,     0,    32,     0,    71,     0,  -189,     0, 
          0,     0,     0,    72,   145,   186,     0,  1689,    30,   342, 
       -106,  -240,   108,   193,     0,     0,   -73,  1889,  1889,     0, 
       1889,  1889,  1889,  1889,    26,     0,     0,     0,     0,     0, 
          0,   116,     0,     0,     0,     0,     0,     0,     0,  1889, 
       -150,   138,  1023,     0,  1689,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   231,    12, 
        235,   216,     0,     0,  1889,   210,     0,   -51,   -51,  1889, 
        -51,   -51,   -51,   -51,     0,     0,   -90,  1889,     0,  1889, 
       -197,   238,   239,  1723,   243,   244,  1140,     0,     0,  1889, 
       1889,  1889,  1889,  1889,  1889,  1889,  1889,  1889,  1889,  1889, 
       1889,  1889,     0,     0,  1889,  1889,  1889,  1889,  1889,  1889, 
          0,     0,  -197,     0,  -108,    12,     0,  1889,   223,    52, 
       1184,  1108,   194,     0,  1889,  1889,     0,    28,     0,   -90, 
       1230,  1689,  1279,   257,  1889,  1889,  1689,     0,   -62,  1889, 
       1889,     0,   -38,    44,   -51,   -51,   -51,   -51,   -51,   -51, 
       1306,   -51,   -51,   -51,   -51,   -51,   -51,     0,     0,     0, 
          0,     0,     0,   -40,   262,     0,   261,  -197,   270,     0, 
       1689,     0,   263,  -197,  1562,     0,     0,   108,  1889,     0, 
        175,   195,     0,   277,   282,  1889,   284,   -90,     0,   201, 
          0,  1889,   271,  1337,   215,   302,  1405,  1433,   -90,   303, 
       1889,     4,   216,    24,  -197,   305,   307,   228,     0,   315, 
          0,     0,  1889,     0,  1889,   -90,  1562,   264,     0,  -260, 
        318,  1889,  1723,     0,  1889,    38,  1723,     0,  1889,   -51, 
          0,     0,  -197,     2,     0,    24,     0,     0,    24,  1562, 
          0,     0,     0,  1889,     0,     0,     0,    35,     0,    37, 
        108,   323,     0,  1513,   -30,   345,    17,   359,     0,     0, 
       1689,     0,     2,     2,   365,   367,   285,     0,     0,     0, 
        -90,  1889,     0,    69,  1723,     0,     0,   -90,   286,     0, 
          0,     0,  -197,  1689,     0,   371,     0,     0,  1723,     0, 
          0,    79,   296,  1723,     0,   381,     0,     0,   300,  1689, 
        308,     0, 
    );
    protected static $yyRindex= array(          347,
          0,     0,   245,     0,     0,   -75,     0,   398,  1731,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   242,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   376,     0,  1788,  -111, 
        314,  -111,     0,     0,     0,     0,     0,   316,     0,     0, 
        316,     0,     0,     0,     0,     0,   386,     0,     0,     0, 
          5,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          9,   313,     0,     0,     9,     0,   144,     0,     0,     0, 
          0,     0,    -1,     0,   333,   -43,     0,   338,   -46,     0, 
          0,     0,    43,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    49,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   340,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   410,     0,     0,     0,  -107,     0,   203,   248,   377, 
        373,   476,   576,   599,     0,     0,    76,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,  -213,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   430,     0,     0,   413,     0,     0,     0,     9, 
          0,   183,     0,     0,   348,   434,     0,     0,     0,   103, 
          0,   338,     0,     0,   426,     0,   338,     0,     0,     0, 
          0,     0,     0,     0,   630,   667,   698,   726,   753,   784, 
          0,   811,   849,   874,   907,   983,  1051,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   445,   430,     0,     0, 
          0,     0,     0,   430,    36,     0,     0,    43,     0,     0, 
          0,     0,     0,   372,     0,   406,   -37,   148,     0,     0, 
          0,   434,     0,     0,     0,     0,     0,     0,    76,     0, 
          0,     0,    62,     6,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    76,   407,     0,     0,     0, 
          0,   426,     0,     0,     0,     0,     0,     0,   434,  1079, 
          0,     0,     0,     0,     0,     6,     0,     0,     6,   -27, 
          0,     0,     0,   434,     0,     0,     0,  1537,     0,  1524, 
        -10,     0,     0,     0,   460,     0,  1734,     0,     0,     0, 
        338,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         76,   434,     0,     0,     0,     0,     0,    76,     0,     0, 
          0,     0,     0,   338,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   338, 
          0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,  1955,     0,   514,     0,     0,   481,   526, 
         -5,     0,   491,   485,   -29,     0,     0,     0,     0,   -15, 
       -201,     0,     0,     0,   -33,   441,     0,     0,     0,  2073, 
        258,   344,     0,   -79,  -175,     0,  -165,  -239,     0,     0, 
          0,   272,     0,  -104,     0,     0,   -88,     0,     0,    53, 
          0,     0,     0,     0,     0,     0,     0,     0,   233,     0, 
        230,     0,     0,     0,     0,     0,  -153,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        269,     0,  -109,     0,     0,   306,   499,     0,   546,     0, 
    );
    protected static $yyTable = array(177,
        207,   282,    36,   177,   177,   177,   177,   177,   185,   177, 
        186,    22,     1,    14,   251,    38,   146,    35,    54,   141, 
        177,   177,   177,   177,   177,   177,    28,    40,    41,    42, 
         28,    28,    28,    28,    28,     5,    28,    46,    42,    75, 
         55,    58,    40,    68,    14,   192,   122,    28,    28,    28, 
         28,    28,    28,   177,    76,   177,   291,    40,    24,   218, 
        340,    55,     9,   192,    67,   156,   146,    26,    45,   132, 
         89,    24,   286,    92,   182,    24,    52,    25,   290,    52, 
         28,    38,    28,   325,   326,   133,    28,   177,   177,   133, 
        133,   133,   133,   133,    52,   133,    78,   146,    44,   142, 
        268,    28,    51,   360,   361,    51,   133,   133,   133,   133, 
        133,   133,   173,   200,    28,    28,   173,   173,   173,   173, 
        173,    40,   173,    40,   341,   308,   120,   192,    67,   351, 
         90,    32,    43,   173,   173,   173,   173,   173,   173,   174, 
         91,   133,   322,   174,   174,   174,   174,   174,   155,   174, 
        343,   249,   194,   344,    47,   214,    87,    49,   268,    53, 
        174,   174,   174,   174,   174,   174,    59,    28,   173,    63, 
         65,   288,    66,   133,   133,    67,   257,    69,   270,    27, 
         28,    29,    70,   275,   180,    72,    83,   244,   180,   180, 
        180,   180,   180,    88,   180,   174,    95,   365,   218,    22, 
        173,   173,   218,    96,   370,   180,   180,   180,   180,   180, 
        180,   175,   194,    14,   333,     9,   173,   171,   337,   172, 
         37,   174,   194,   183,   194,   194,   194,   174,   174,    97, 
        143,   250,   145,   140,   185,   170,   186,   176,   159,   167, 
        180,   183,   244,   167,   167,   167,   167,   167,   244,   167, 
        218,    12,    13,    14,    77,    16,    17,    18,   265,   168, 
        167,   167,   169,   167,   218,   167,   368,   273,   194,   218, 
        194,   195,   180,   180,   197,   183,   198,   215,   216,   244, 
        375,   256,   220,   221,   168,   378,   260,   267,   168,   168, 
        168,   168,   168,    14,   168,   167,   272,   339,   276,   283, 
        182,   279,   284,   280,   285,   168,   168,   359,   168,   287, 
        168,    12,    13,    14,    77,    16,    17,    18,   208,   294, 
        295,   289,   296,   299,   301,   300,   177,   167,   194,   302, 
        373,    12,    13,    14,    77,    16,    17,    18,   194,   304, 
        168,   305,   309,   311,   313,   316,   381,   317,   188,   187, 
        183,   184,   318,    28,   332,   319,   323,   372,   331,   189, 
        190,   338,   177,   177,   177,   177,   177,   177,   177,   177, 
        177,   177,   168,   177,   177,   177,   345,   335,   137,   326, 
        325,   352,   354,   135,   133,   355,   134,   356,   136,    28, 
         28,    28,    28,    28,    28,    28,    28,    28,    28,   358, 
         28,    28,    28,   201,   366,   362,   363,   364,   367,   165, 
        371,   374,   133,   165,   165,   165,   165,   165,   376,   165, 
        377,   379,   380,   201,   201,   201,   201,   201,   201,   201, 
        165,   165,   382,   165,    11,   165,    26,    37,    24,   173, 
         12,    13,    14,    15,    16,    17,    18,   188,   133,   133, 
        133,   133,   133,   133,   133,   133,   133,    36,    14,   133, 
        133,   133,    75,   201,    77,   165,   174,   138,    51,   181, 
         61,    46,   142,   201,   181,   173,   173,   173,   173,   173, 
        173,   173,   173,   173,   181,    63,   173,   173,   173,    12, 
         13,    14,    77,    16,    17,    18,   144,   165,   113,   114, 
         97,   196,   174,   174,   174,   174,   174,   174,   174,   174, 
        174,   180,   166,   174,   174,   174,   166,   166,   166,   166, 
        166,    23,   166,    52,     5,     5,     5,     5,     5,     5, 
          5,    20,    51,   166,   166,    64,   166,   147,   166,   252, 
        312,   196,   196,   196,     5,     5,     5,   180,   180,   180, 
        180,   180,   180,   180,   180,   180,   315,   349,   180,   180, 
        180,   196,   350,   321,   292,    74,   167,    30,   166,     0, 
          0,   196,     0,     0,   188,   187,   183,   184,   177,   178, 
        179,   180,   181,     0,     0,   189,   190,   293,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        166,     0,     0,     0,     0,     0,   167,   167,   167,   167, 
        167,   168,   169,     0,     0,   167,   169,   169,   169,   169, 
        169,     0,   169,     0,     0,     0,     2,     2,     2,     2, 
          2,     2,     2,   169,   169,   170,   169,     0,   169,   170, 
        170,   170,   170,   170,     0,   170,     2,     2,     2,     0, 
          2,   168,   168,   168,   168,   168,   170,   170,     0,   170, 
        168,   170,     0,     0,     0,     0,   147,     0,   169,     0, 
        147,   147,   147,   147,   147,     0,   147,     7,     7,     7, 
          7,     7,     7,     7,     0,     0,     0,   147,   147,     0, 
        147,   170,   147,     0,     0,     0,     0,     7,     7,     7, 
        169,     0,     0,   159,     0,     0,     0,   159,   159,   159, 
        159,   159,     0,   159,     0,     0,     0,     0,     0,     0, 
          0,     0,   147,   170,   159,   159,     0,   159,     0,   159, 
          0,     0,     0,     0,   160,     0,   165,     0,   160,   160, 
        160,   160,   160,     0,   160,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   147,   160,   160,     0,   160,   159, 
        160,     0,   161,     0,     0,     0,   161,   161,   161,   161, 
        161,     0,   161,     0,     0,     0,   165,   165,   165,   165, 
        165,     0,     0,   161,   161,   165,   161,     0,   161,   162, 
        160,   159,     0,   162,   162,   162,   162,   162,     0,   162, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        162,   162,     0,   162,     0,   162,     0,     0,   161,     0, 
        163,     0,   160,     0,   163,   163,   163,   163,   163,     0, 
        163,     0,     0,     0,     0,     0,     0,     0,     0,   166, 
          0,   163,   163,     0,   163,   162,   163,   148,     0,     0, 
        161,   148,   148,   148,   148,   148,     0,   148,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   148,   148, 
          0,   148,     0,   148,     0,     0,   163,   162,     0,   166, 
        166,   166,   166,   166,     0,   149,     0,     0,   166,   149, 
        149,   149,   149,   149,     0,   149,     0,     0,     0,     0, 
          0,     0,     0,   148,     0,     0,   149,   149,   163,   149, 
        150,   149,     0,     0,   150,   150,   150,   150,   150,     0, 
        150,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   150,   150,     0,   150,   148,   150,     0,     0,   169, 
          0,   149,     0,   151,     0,     0,     0,   151,   151,   151, 
        151,   151,     0,   151,     0,     0,     0,     0,     0,     0, 
          0,     0,   170,     0,   151,   151,   150,   151,     0,   151, 
          0,     0,     0,   149,     0,     0,     0,     0,     0,   169, 
        169,   169,   169,   169,     0,     0,     0,     0,   169,     0, 
          0,     0,     0,   147,     0,     0,     0,     0,   150,   151, 
          0,     0,   170,   170,   170,   170,   170,     0,     0,     0, 
          0,   170,     0,     0,     0,     0,     0,     0,     0,   152, 
          0,     0,     0,   152,   152,   152,   152,   152,     0,   152, 
        159,   151,     0,   147,   147,   147,   147,   147,     0,     0, 
        152,   152,   147,   152,     0,   152,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   175, 
          0,   160,     0,     0,   173,   171,     0,   172,     0,   174, 
        159,   159,   159,   159,   159,   152,     0,     0,     0,   159, 
          0,   191,   185,   170,   186,   176,     0,   164,     0,   161, 
          0,   164,   164,   164,   164,   164,     0,   164,     0,     0, 
          0,   160,   160,   160,   160,   160,     0,   152,   164,   164, 
        160,   164,     0,   164,     0,   132,   162,     0,     0,   132, 
        132,   132,   132,   132,     0,   132,     0,     0,     0,   161, 
        161,   161,   161,   161,     0,     0,   132,   132,   161,   132, 
          0,   132,     0,   164,   175,     0,     0,   163,   182,   173, 
        171,   259,   172,     0,   174,     0,   162,   162,   162,   162, 
        162,     0,     0,     0,     0,   162,     0,   185,   170,   186, 
        176,   132,     0,     0,   148,   164,   175,     0,     0,     0, 
        222,   173,   171,     0,   172,     0,   174,   163,   163,   163, 
        163,   163,     0,     0,     0,     0,   163,     0,     0,   185, 
        170,   186,   176,   132,     0,     0,     0,     0,     0,     0, 
          0,     0,   149,     0,   148,   148,   148,   148,   148,     0, 
        175,     0,     0,   148,   258,   173,   171,     0,   172,     0, 
        174,     0,     0,   182,     0,     0,     0,   150,     0,     0, 
          0,     0,     0,   185,   170,   186,   176,     0,     0,     0, 
          0,     0,   149,   149,   149,   149,   149,     0,     0,     0, 
          0,   149,     0,     0,     0,   182,   175,     0,     0,     0, 
        151,   173,   171,     0,   172,     0,   174,   150,   150,   150, 
        150,   150,     0,     0,     0,     0,   150,     0,   269,   185, 
        170,   186,   176,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   182, 
        151,   151,   151,   151,   151,   175,     0,     0,     0,   151, 
        173,   171,     0,   172,     0,   174,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   271,   185,   170, 
        186,   176,   175,     0,     0,     0,   152,   173,   171,     0, 
        172,     0,   174,     0,     0,   182,     0,     0,     0,     0, 
          0,     0,     0,   281,     0,   185,   170,   186,   176,     0, 
          0,     0,     0,   175,     0,     0,     0,   303,   173,   171, 
          0,   172,     0,   174,     0,     0,   152,   152,   152,   152, 
        152,     0,     0,     0,     0,   152,   185,   170,   186,   176, 
          0,     0,     0,     0,   182,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   164,     0,     0,     0,     0,     0, 
          0,     0,   188,   187,   183,   184,   177,   178,   179,   180, 
        181,   182,     0,   189,   190,     0,     0,     0,     0,     0, 
          0,   175,   132,     0,     0,     0,   173,   171,     0,   172, 
          0,   174,     0,     0,   164,   164,   164,   164,   164,     0, 
          0,     0,   182,   164,   185,   170,   186,   176,     0,   175, 
          0,     0,     0,   307,   173,   171,     0,   172,     0,   174, 
          0,     0,   132,   132,   132,   132,   132,     0,     0,     0, 
          0,   132,   185,   170,   186,   176,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   188,   187,   183, 
        184,   177,   178,   179,   180,   181,     0,     0,   189,   190, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        182,     0,     0,     0,     0,     0,     0,     0,     0,   188, 
        187,   183,   184,   177,   178,   179,   180,   181,     0,   175, 
        189,   190,     0,   353,   173,   171,   105,   172,   182,   174, 
          0,     0,     0,   105,     0,     0,   105,     0,   105,   109, 
          0,     0,   185,   170,   186,   176,   109,     0,     0,   109, 
          0,   109,     0,   188,   187,   183,   184,   177,   178,   179, 
        180,   181,     0,     0,   189,   190,     0,     0,   175,     0, 
          0,     0,     0,   173,   171,     0,   172,     0,   174,     0, 
          0,     0,     0,     0,   105,     0,     0,     0,     0,     0, 
          0,   185,   170,   186,   176,     0,     0,   109,     0,   188, 
        187,   183,   184,   177,   178,   179,   180,   181,   182,     0, 
        189,   190,     0,     0,     0,     0,     0,     0,   105,   105, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   109,   109,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   188,   187, 
        183,   184,   177,   178,   179,   180,   181,   182,     0,   189, 
        190,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   188,   187,   183,   184,   177, 
        178,   179,   180,   181,     0,     0,   189,   190,     0,     0, 
          0,   101,     0,     0,     0,     0,     0,     0,   120,     0, 
          0,    98,     0,    99,     0,     0,   188,   187,   183,   184, 
        177,   178,   179,   180,   181,     0,     0,   189,   190,     0, 
          0,     0,     0,     0,     0,   101,     0,     0,     0,     0, 
          0,     0,   120,     0,     0,    98,   100,    99,   306,     0, 
         14,     0,    14,   100,    14,     0,   100,     0,   100,   100, 
          0,     0,     0,   105,   105,   105,   105,   105,     0,    14, 
         14,     0,    14,     0,     0,     0,   109,   109,   109,   109, 
        109,     0,     0,     0,   188,   187,   183,   184,   177,   178, 
        179,   180,   181,   100,   102,   189,   190,     0,     0,     0, 
          0,    14,     0,     0,   100,     0,     0,   185,     0,   185, 
          0,   185,   188,   187,   183,   184,   177,   178,   179,   180, 
        181,     0,     0,   189,   190,   217,   185,     0,   102,   185, 
          0,     0,     0,    14,     0,     0,     0,     0,   100,   100, 
          0,     0,     0,   105,   105,   105,   105,     0,   105,   105, 
          0,     0,     0,     0,     0,     0,   109,   109,   109,   109, 
          0,     0,   109,   105,   105,   105,   105,     0,     0,     0, 
          0,     0,     0,   105,   105,     0,   109,   109,   109,   109, 
          0,     0,     0,     0,     0,     0,   109,   109,     0,     0, 
        185,     0,   188,   187,   183,   184,   177,   178,   179,   180, 
        181,   101,     0,   189,   190,   105,   105,     0,   120,     0, 
          0,    98,     0,    99,     0,     0,     0,     0,   109,   109, 
          0,     0,     0,     0,     0,     0,     0,     0,   105,   106, 
        107,   108,   109,     0,     0,     0,     0,     0,    10,     0, 
          0,   188,   187,   183,   184,   177,   178,   179,   180,   181, 
          0,     0,   189,   190,     0,     0,     0,     0,    31,   100, 
          0,     0,   105,   106,   107,   108,   109,    39,    39,    39, 
         14,     0,     0,   100,   100,   100,   100,   100,     0,     0, 
         39,    39,     0,    39,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    39,   102,     0,     0,     0,     0,    73, 
          0,    39,     0,     0,    39,     0,     0,     0,   110,   111, 
        112,   113,     0,    39,   114,     0,     0,     0,     0,     0, 
         14,    14,     0,     0,     0,     0,     0,   185,   115,   116, 
        117,   118,     0,     0,     0,     0,     0,     0,   119,     0, 
          0,     0,   110,   111,   112,   113,     0,     0,   114,     0, 
         14,     0,     0,   100,   100,   100,   100,     0,     0,   100, 
          0,     0,   115,   116,   117,   118,     0,     0,     0,     0, 
        103,   104,   119,   100,   100,   100,   100,   185,   185,     0, 
          0,     0,     0,   100,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    39,     0,     0,     0,     0, 
          0,     0,     0,     0,   103,   104,     0,   185,     0,     0, 
          0,     0,     0,     0,     0,   100,   100,     0,     0,     0, 
         14,     0,     0,     0,     0,     0,     0,    39,   105,   106, 
        107,   108,   109,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        148,   149,     0,   151,   152,   153,   154,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   167,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    39,     0,     0,     0,     0,     0,    39,     0, 
          0,     0,     0,     0,     0,     0,     0,   201,     0,     0, 
          0,     0,   202,     0,     0,     0,     0,     0,   110,     0, 
        211,     0,   213,     0,   114,     0,     0,     0,     0,    39, 
          0,     0,   225,   226,   227,   228,   229,   230,   231,   232, 
        233,   234,   235,   236,   237,     0,     0,   238,   239,   240, 
        241,   242,   243,     0,     0,     0,     0,    39,     0,     0, 
        255,     0,     0,     0,     0,     0,     0,   261,   202,     0, 
          0,     0,     0,     0,     0,     0,     0,   202,   274,     0, 
        103,   104,   277,   278,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    39,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   202,     0,     0,     0,     0,     0,     0,   297,     0, 
          0,     0,     0,     0,   202,     0,     0,     0,     0,     0, 
          0,     0,     0,   310,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   320,     0,   261,     0,     0, 
          0,     0,     0,     0,   202,     0,     0,   334,     0,     0, 
          0,   202,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   202,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   202, 
    );
    protected static $yyCheck = array(37,
         91,    42,    42,    41,    42,    43,    44,    45,    60,    47, 
         62,   123,   303,    60,   123,    59,    44,   125,    63,   260, 
         58,    59,    60,    61,    62,    63,    37,    33,    34,    35, 
         41,    42,    43,    44,    45,   304,    47,    60,    40,    69, 
         46,    47,    44,    59,    91,   125,   260,    58,    59,    60, 
         61,    62,    63,    91,    70,    93,   258,    59,    46,   164, 
         59,    67,   260,    59,    59,    40,    96,   260,    91,    40, 
        260,    46,   248,    79,   126,    46,    41,    59,   254,    44, 
         91,   125,    93,   344,   345,    37,    44,   125,   126,    41, 
         42,    43,    44,    45,    59,    47,   125,   125,    59,   340, 
        210,    59,    41,   343,   344,    44,    58,    59,    60,    61, 
         62,    63,    37,   143,   125,   126,    41,    42,    43,    44, 
         45,   123,    47,   125,   123,   279,   340,   123,   123,   331, 
        320,    46,    46,    58,    59,    60,    61,    62,    63,    37, 
        330,    93,   296,    41,    42,    43,    44,    45,   123,    47, 
        316,   260,   260,   319,   310,   161,   125,   310,   268,    93, 
         58,    59,    60,    61,    62,    63,   311,   125,    93,   123, 
        310,   251,    62,   125,   126,    44,   125,   123,   212,   300, 
        301,   302,    44,   217,    37,   123,   260,   193,    41,    42, 
         43,    44,    45,   123,    47,    93,   125,   351,   303,   311, 
        125,   126,   307,    59,   358,    58,    59,    60,    61,    62, 
         63,    37,   320,   260,   303,   260,    42,    43,   307,    45, 
        260,    47,   330,    41,   300,   301,   302,   125,   126,    44, 
        123,   340,    40,   340,    60,    61,    62,    63,   123,    37, 
         93,    59,   248,    41,    42,    43,    44,    45,   254,    47, 
        355,   280,   281,   282,   283,   284,   285,   286,   206,   410, 
         58,    59,   125,    61,   369,    63,   355,   215,   260,   374, 
         40,   260,   125,   126,    40,    93,    61,    40,    40,   285, 
        369,    59,    40,    40,    37,   374,    93,   260,    41,    42, 
         43,    44,    45,   340,    47,    93,    40,   313,   361,   340, 
        126,   340,    41,   260,    44,    58,    59,   341,    61,    40, 
         63,   280,   281,   282,   283,   284,   285,   286,   409,   125, 
         44,    59,    41,    40,   272,   125,   364,   125,   320,    59, 
        364,   280,   281,   282,   283,   284,   285,   286,   330,   125, 
         93,    40,    40,   340,   321,    41,   380,    41,   400,   401, 
        402,   403,   125,   364,   302,    41,    93,   363,    41,   411, 
        412,   309,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   409,   125,   411,   412,   413,   324,   340,    37,   345, 
        344,    59,   413,    42,    43,    41,    45,   371,    47,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   409,    41, 
        411,   412,   413,   260,   352,    41,    40,   123,   340,    37, 
        125,    41,   364,    41,    42,    43,    44,    45,   340,    47, 
        125,    41,   123,   280,   281,   282,   283,   284,   285,   286, 
         58,    59,   125,    61,    59,    63,   123,   125,   123,   364, 
        280,   281,   282,   283,   284,   285,   286,    62,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   125,   410,   411, 
        412,   413,   125,   320,   125,    93,   364,   126,    59,    93, 
         41,    59,   125,   330,    41,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    59,    41,   411,   412,   413,   280, 
        281,   282,   283,   284,   285,   286,   125,   125,    93,    93, 
         41,   260,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   364,    37,   411,   412,   413,    41,    42,    43,    44, 
         45,     8,    47,    43,   280,   281,   282,   283,   284,   285, 
        286,     6,    42,    58,    59,    51,    61,    97,    63,   196, 
        283,   300,   301,   302,   300,   301,   302,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   285,   328,   411,   412, 
        413,   320,   330,   295,   259,    67,   364,    22,    93,    -1, 
         -1,   330,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,   413,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        125,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,   364,    37,    -1,    -1,   413,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,   280,   281,   282,   283, 
        284,   285,   286,    58,    59,    37,    61,    -1,    63,    41, 
         42,    43,    44,    45,    -1,    47,   300,   301,   302,    -1, 
        304,   404,   405,   406,   407,   408,    58,    59,    -1,    61, 
        413,    63,    -1,    -1,    -1,    -1,    37,    -1,    93,    -1, 
         41,    42,    43,    44,    45,    -1,    47,   280,   281,   282, 
        283,   284,   285,   286,    -1,    -1,    -1,    58,    59,    -1, 
         61,    93,    63,    -1,    -1,    -1,    -1,   300,   301,   302, 
        125,    -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    93,   125,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,    -1,    37,    -1,   364,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   125,    58,    59,    -1,    61,    93, 
         63,    -1,    37,    -1,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    58,    59,   413,    61,    -1,    63,    37, 
         93,   125,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    93,    -1, 
         37,    -1,   125,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364, 
         -1,    58,    59,    -1,    61,    93,    63,    37,    -1,    -1, 
        125,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    93,   125,    -1,   404, 
        405,   406,   407,   408,    -1,    37,    -1,    -1,   413,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    -1,    -1,    58,    59,   125,    61, 
         37,    63,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,   125,    63,    -1,    -1,   364, 
         -1,    93,    -1,    37,    -1,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   364,    -1,    58,    59,    93,    61,    -1,    63, 
         -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,    -1, 
         -1,    -1,    -1,   364,    -1,    -1,    -1,    -1,   125,    93, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37, 
         -1,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
        364,   125,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         58,    59,   413,    61,    -1,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37, 
         -1,   364,    -1,    -1,    42,    43,    -1,    45,    -1,    47, 
        404,   405,   406,   407,   408,    93,    -1,    -1,    -1,   413, 
         -1,    59,    60,    61,    62,    63,    -1,    37,    -1,   364, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,   125,    58,    59, 
        413,    61,    -1,    63,    -1,    37,   364,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    58,    59,   413,    61, 
         -1,    63,    -1,    93,    37,    -1,    -1,   364,   126,    42, 
         43,    44,    45,    -1,    47,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,    -1,    60,    61,    62, 
         63,    93,    -1,    -1,   364,   125,    37,    -1,    -1,    -1, 
         41,    42,    43,    -1,    45,    -1,    47,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,    -1,    -1,    60, 
         61,    62,    63,   125,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   364,    -1,   404,   405,   406,   407,   408,    -1, 
         37,    -1,    -1,   413,    41,    42,    43,    -1,    45,    -1, 
         47,    -1,    -1,   126,    -1,    -1,    -1,   364,    -1,    -1, 
         -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,    -1,    -1,    -1,   126,    37,    -1,    -1,    -1, 
        364,    42,    43,    -1,    45,    -1,    47,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,    -1,    59,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126, 
        404,   405,   406,   407,   408,    37,    -1,    -1,    -1,   413, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,    61, 
         62,    63,    37,    -1,    -1,    -1,   364,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    -1,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   364,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   126,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1, 
         -1,    37,   364,    -1,    -1,    -1,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,   126,   413,    60,    61,    62,    63,    -1,    37, 
         -1,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    37, 
        411,   412,    -1,    41,    42,    43,    33,    45,   126,    47, 
         -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    45,    33, 
         -1,    -1,    60,    61,    62,    63,    40,    -1,    -1,    43, 
         -1,    45,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,    -1,    37,    -1, 
         -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1, 
         -1,    60,    61,    62,    63,    -1,    -1,    91,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   126,    -1, 
        411,   412,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   126,    -1,   411, 
        412,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,    -1, 
         -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1, 
         -1,    43,    -1,    45,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
         -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    -1, 
         -1,    -1,    40,    -1,    -1,    43,    33,    45,   364,    -1, 
         40,    -1,    42,    40,    44,    -1,    43,    -1,    45,    91, 
         -1,    -1,    -1,   260,   261,   262,   263,   264,    -1,    59, 
         60,    -1,    62,    -1,    -1,    -1,   260,   261,   262,   263, 
        264,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    91,   126,   411,   412,    -1,    -1,    -1, 
         -1,    91,    -1,    -1,    91,    -1,    -1,    40,    -1,    42, 
         -1,    44,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,   123,    59,    -1,   126,    62, 
         -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,   125,   126, 
         -1,    -1,    -1,   340,   341,   342,   343,    -1,   345,   346, 
         -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342,   343, 
         -1,    -1,   346,   360,   361,   362,   363,    -1,    -1,    -1, 
         -1,    -1,    -1,   370,   371,    -1,   360,   361,   362,   363, 
         -1,    -1,    -1,    -1,    -1,    -1,   370,   371,    -1,    -1, 
        123,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    33,    -1,   411,   412,   402,   403,    -1,    40,    -1, 
         -1,    43,    -1,    45,    -1,    -1,    -1,    -1,   402,   403, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,   261, 
        262,   263,   264,    -1,    -1,    -1,    -1,    -1,     4,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,    -1,    -1,    -1,    24,    91, 
         -1,    -1,   260,   261,   262,   263,   264,    33,    34,    35, 
        260,    -1,    -1,   260,   261,   262,   263,   264,    -1,    -1, 
         46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    59,   126,    -1,    -1,    -1,    -1,    65, 
         -1,    67,    -1,    -1,    70,    -1,    -1,    -1,   340,   341, 
        342,   343,    -1,    79,   346,    -1,    -1,    -1,    -1,    -1, 
        310,   311,    -1,    -1,    -1,    -1,    -1,   260,   360,   361, 
        362,   363,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1, 
         -1,    -1,   340,   341,   342,   343,    -1,    -1,   346,    -1, 
        340,    -1,    -1,   340,   341,   342,   343,    -1,    -1,   346, 
         -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,    -1, 
        402,   403,   370,   360,   361,   362,   363,   310,   311,    -1, 
         -1,    -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   161,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   402,   403,    -1,   340,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   402,   403,    -1,    -1,    -1, 
        410,    -1,    -1,    -1,    -1,    -1,    -1,   193,   260,   261, 
        262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         98,    99,    -1,   101,   102,   103,   104,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   248,    -1,    -1,    -1,    -1,    -1,   254,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,    -1, 
         -1,    -1,   150,    -1,    -1,    -1,    -1,    -1,   340,    -1, 
        158,    -1,   160,    -1,   346,    -1,    -1,    -1,    -1,   285, 
         -1,    -1,   170,   171,   172,   173,   174,   175,   176,   177, 
        178,   179,   180,   181,   182,    -1,    -1,   185,   186,   187, 
        188,   189,   190,    -1,    -1,    -1,    -1,   313,    -1,    -1, 
        198,    -1,    -1,    -1,    -1,    -1,    -1,   205,   206,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   215,   216,    -1, 
        402,   403,   220,   221,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   259,    -1,    -1,    -1,    -1,    -1,    -1,   266,    -1, 
         -1,    -1,    -1,    -1,   272,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   281,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   293,    -1,   295,    -1,    -1, 
         -1,    -1,    -1,    -1,   302,    -1,    -1,   305,    -1,    -1, 
         -1,   309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   324,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   352, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 
      'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 
      'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 
      'T_FOREACH', 'T_AS', 'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 
      'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      'T_OBJECT_OPERATOR', 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
      'T_DOUBLE_ARROW', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 117 "grammar/xp.jay"
    {
        $yyVal= new ParseTree();
        $yyVal->package= $yyVals[-2+$yyTop];
        $yyVal->imports= $yyVals[-1+$yyTop];
        $yyVal->declaration= $yyVals[0+$yyTop];
      } break;

    case 3:  #line 128 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 128 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 139 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 140 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 144 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 144 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 13:  #line 152 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 15:  #line 157 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 16:  #line 163 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 163 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 18:  #line 171 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 19:  #line 171 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 179 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 21:  #line 179 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 22:  #line 189 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 190 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 194 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 25:  #line 195 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 199 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 200 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 204 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 205 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 30:  #line 209 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 31:  #line 210 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 214 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 33:  #line 215 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 216 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 35:  #line 220 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 221 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 222 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 226 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 39:  #line 227 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 40:  #line 231 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 41:  #line 231 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 42:  #line 234 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 234 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 244 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
        $yyVal->modifiers= $yyVals[-4+$yyTop];
        $yyVal->type= $yyVals[-3+$yyTop];
        $yyVal->name= $yyVals[-2+$yyTop];
        $yyVal->initialization= $yyVals[-1+$yyTop];
      } break;

    case 45:  #line 250 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
        $yyVal->modifiers= $yyVals[-5+$yyTop];
        $yyVal->name= $yyVals[-3+$yyTop];
        $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
        $yyVal->get= $gs['get'];
        $yyVal->set= $gs['set'];
      } break;

    case 46:  #line 260 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 48:  #line 265 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 49:  #line 266 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 50:  #line 267 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 51:  #line 271 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 272 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 278 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 54:  #line 278 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
        $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
      } break;

    case 55:  #line 287 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 56:  #line 287 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
      } break;

    case 57:  #line 294 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 58:  #line 294 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 59:  #line 305 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 60:  #line 306 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 61:  #line 310 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 62:  #line 311 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 63:  #line 315 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 64:  #line 316 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 65:  #line 320 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 66:  #line 321 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 67:  #line 325 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 68:  #line 326 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 75:  #line 343 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 77:  #line 348 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 78:  #line 349 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 79:  #line 353 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 80:  #line 353 "grammar/xp.jay"
    { 
        $yyVal->expression= $yyVals[-1+$yyTop];
      } break;

    case 81:  #line 356 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 82:  #line 356 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
      } break;

    case 83:  #line 361 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 84:  #line 361 "grammar/xp.jay"
    {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
        $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
        $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 85:  #line 367 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 86:  #line 367 "grammar/xp.jay"
    {
        $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
        /* $1->assignment= $6; XX FIXME XX*/
        $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 87:  #line 372 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 88:  #line 372 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
        $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 89:  #line 376 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 90:  #line 376 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
      } break;

    case 91:  #line 380 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 92:  #line 380 "grammar/xp.jay"
    { 
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
        $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-4+$yyTop]; 
      } break;

    case 93:  #line 385 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 94:  #line 385 "grammar/xp.jay"
    { /* Throw statement */ 
        $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
      } break;

    case 96:  #line 392 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 97:  #line 393 "grammar/xp.jay"
    { $yyVal= array(NULL, $yyVals[0+$yyTop]); } break;

    case 98:  #line 397 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 99:  #line 398 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 100:  #line 402 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 101:  #line 403 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 102:  #line 403 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 103:  #line 408 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 104:  #line 409 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 105:  #line 413 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 106:  #line 414 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 107:  #line 418 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 108:  #line 418 "grammar/xp.jay"
    {
        $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
        $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
        $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
      } break;

    case 109:  #line 426 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 111:  #line 431 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 112:  #line 431 "grammar/xp.jay"
    {
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      } break;

    case 113:  #line 439 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 116:  #line 445 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 117:  #line 445 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 118:  #line 448 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InstanceCreationNode()); } break;

    case 119:  #line 448 "grammar/xp.jay"
    { 
      $yyVals[-7+$yyTop]->type= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-7+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 120:  #line 453 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 121:  #line 453 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 122:  #line 458 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 123:  #line 458 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 124:  #line 464 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 125:  #line 464 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 126:  #line 470 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 127:  #line 471 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); } break;

    case 128:  #line 472 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); } break;

    case 129:  #line 473 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); } break;

    case 130:  #line 474 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); } break;

    case 131:  #line 475 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); $yyVal->postfix= TRUE; } break;

    case 132:  #line 476 "grammar/xp.jay"
    { /* XXX Ternary */ } break;

    case 133:  #line 480 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 134:  #line 481 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 135:  #line 481 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 136:  #line 485 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]= $yyLex->create(new MapNode()); } break;

    case 137:  #line 485 "grammar/xp.jay"
    {
      $yyVals[-4+$yyTop]->elements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 138:  #line 489 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 139:  #line 490 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 140:  #line 491 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 141:  #line 492 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 142:  #line 496 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 144:  #line 501 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 145:  #line 502 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 146:  #line 506 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 147:  #line 510 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 148:  #line 511 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 149:  #line 512 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 150:  #line 513 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 151:  #line 514 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 152:  #line 515 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 153:  #line 519 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 154:  #line 520 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 155:  #line 521 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 156:  #line 522 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 157:  #line 523 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 158:  #line 524 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 159:  #line 528 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 160:  #line 529 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 161:  #line 530 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 162:  #line 531 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 163:  #line 532 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 164:  #line 533 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 165:  #line 537 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 166:  #line 538 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 167:  #line 539 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 168:  #line 540 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 169:  #line 541 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 170:  #line 542 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 171:  #line 546 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 172:  #line 547 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 173:  #line 552 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 175:  #line 557 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 176:  #line 557 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 177:  #line 560 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 178:  #line 564 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 179:  #line 564 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 180:  #line 568 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 181:  #line 572 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 183:  #line 577 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 184:  #line 578 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 185:  #line 584 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 186:  #line 585 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 187:  #line 586 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 188:  #line 590 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 189:  #line 591 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 191:  #line 596 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 192:  #line 600 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 193:  #line 601 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 194:  #line 607 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 195:  #line 608 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 196:  #line 612 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 197:  #line 613 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 198:  #line 617 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 199:  #line 618 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 200:  #line 619 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 201:  #line 620 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 202:  #line 621 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 203:  #line 622 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 204:  #line 623 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1667 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
