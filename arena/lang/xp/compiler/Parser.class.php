<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 51 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_DECIMAL',  263);
  define('TOKEN_T_HEX',  264);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_PACKAGE',  303);
  define('TOKEN_T_IMPORT',  304);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_T_DOUBLE_ARROW',  413);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          9,     9,     9,     4,     4,    12,     3,    16,     3,    18, 
          3,    13,    13,    14,    14,    19,    19,    21,    21,    15, 
         15,    22,    22,    22,    17,    17,    17,    26,    26,    28, 
         27,    29,    27,    23,    23,    33,    33,    32,    32,    32, 
         31,    31,    36,    24,    39,    24,    41,    24,    38,    38, 
         35,    35,    42,    42,    43,    43,    37,    37,    40,    40, 
         40,    40,    40,    40,    25,    25,    34,    34,    45,    44, 
         46,    44,    49,    44,    51,    44,    53,    44,    54,    44, 
         55,    44,    57,    44,    44,    44,    52,    52,    47,    47, 
         48,    58,    48,    56,    56,    59,    59,    63,    62,    60, 
         60,    64,    61,    50,    50,    65,    65,    66,    66,    30, 
         69,    30,    70,    30,    71,    30,    72,    30,    73,    30, 
         30,    30,    30,    30,    30,    30,    30,    67,    79,    67, 
         67,    67,    67,    67,    67,    80,    80,    81,    81,    82, 
         74,    74,    74,    74,    74,    74,    75,    75,    75,    75, 
         75,    75,    76,    76,    76,    76,    76,    76,    77,    77, 
         77,    77,    77,    77,    78,    78,    68,    68,    84,    83, 
         83,    85,    83,    83,    11,    11,    11,    86,    86,    87, 
         87,    20,    20,    10,    10,    88,    88,    89,    89,    89, 
         89,    89,    89,    89, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     6, 
          1,     1,     3,     1,     3,     0,     9,     0,     9,     0, 
          8,     0,     2,     0,     2,     0,     2,     0,     3,     2, 
          0,     1,     1,     4,     3,     1,     0,     1,     3,     0, 
          3,     0,     6,     5,     6,     0,     1,     2,     4,     4, 
          0,     2,     0,     9,     0,     8,     0,     9,     1,     3, 
          0,     1,     1,     3,     3,     3,     0,     2,     1,     1, 
          1,     1,     1,     1,     0,     1,     1,     2,     0,     4, 
          0,     7,     0,    10,     0,     8,     0,     6,     0,     7, 
          0,     6,     0,     4,     2,     1,     3,     1,     1,     3, 
          0,     0,     3,     2,     1,     1,     2,     0,     9,     0, 
          1,     0,     5,     0,     1,     1,     3,     0,     1,     1, 
          0,     3,     0,     8,     0,     5,     0,     8,     0,     6, 
          3,     1,     1,     1,     1,     1,     5,     1,     0,     4, 
          3,     1,     1,     1,     1,     0,     1,     1,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     2,     2, 
          2,     2,     2,     2,     2,     2,     0,     1,     0,     4, 
          2,     0,     6,     2,     1,     4,     3,     1,     3,     1, 
          3,     1,     3,     0,     1,     1,     2,     1,     1,     1, 
          1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,   198,   200,   199,   201,   203,   202,   204,     1,     0, 
        195,     0,     8,     0,     4,     0,    16,    20,    18,   197, 
         15,     0,     0,     0,     0,    12,     0,     0,     0,     0, 
          0,     0,     0,    10,     0,     0,     0,     0,     0,     0, 
          0,    13,   187,     0,   190,     0,     0,    23,     0,     0, 
          0,    27,    31,     0,     0,   186,     0,    25,    31,     0, 
          0,     0,   191,   189,     0,   193,     0,    21,     0,    30, 
         32,    33,     0,     0,     0,     0,    17,     0,     0,     0, 
          0,     0,     0,     0,    19,    31,     0,     0,     0,   139, 
          0,     0,     0,     0,     0,   145,   142,   144,   143,   121, 
         79,     0,    93,   123,    83,    87,    89,    85,    81,    96, 
          0,     0,     0,     0,     0,    76,     0,   120,   132,   133, 
        134,   135,   136,    55,    69,    70,    71,    72,    73,    74, 
          0,     0,     0,     0,    31,    41,     0,     0,    39,     0, 
          0,     0,     0,     0,     0,     0,   129,     0,     0,    91, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   147, 
          0,     0,     0,    34,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   175,   176,     0, 
          0,     0,     0,     0,     0,    95,    78,     0,    57,     0, 
          0,    53,     0,     0,     0,     0,     0,     0,   115,     0, 
        179,     0,   122,     0,     0,     0,     0,     0,     0,     0, 
          0,    99,     0,     0,     0,     0,   141,     0,   131,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   157,   158,   159,   160,   161,   162, 
          0,     0,    62,     0,     0,     0,    48,     0,    47,     0, 
          0,     0,    44,    29,     0,     0,   140,     0,     0,     0, 
          0,    80,     0,    94,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   149,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    45,     0,    43,   117,     0,     0, 
          0,   182,     0,     0,     0,     0,   100,     0,     0,     0, 
        126,     0,     0,    66,    65,     0,     0,    64,     0,    49, 
         50,     0,   130,   180,     0,   108,   112,    92,     0,   105, 
          0,     0,     0,    88,     0,     0,     0,     0,     0,    68, 
         59,     0,    56,     0,     0,     0,     0,     0,   104,   111, 
        107,     0,     0,    90,     0,     0,   102,    82,     0,     0, 
         58,    54,   183,     0,     0,   124,     0,    97,    86,     0, 
        128,    60,     0,     0,     0,   103,     0,   113,    84,     0, 
          0,     0,   109, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    19,   123,     4,     7,     8,    11,    38,    79, 
         61,    33,    48,    60,    71,    35,    84,    34,    50,    62, 
        146,    80,    81,    82,   124,    85,    86,    93,    94,   125, 
        204,   201,   260,   126,   252,   261,   317,   343,   198,   141, 
        255,   253,   254,   127,   159,   167,   223,   358,   163,   208, 
        166,   337,   164,   165,   216,   328,   161,   370,   329,   349, 
        330,   331,   347,   348,   209,   301,   128,   213,   158,   162, 
        230,   231,   210,   129,   130,   131,   132,   133,   152,   169, 
        170,   171,   214,   269,   325,    56,    57,    21,    22, 
    );
    protected static $yySindex = array(         -246,
          0,     0,  -245,  -193,     0,    40,     0,  -245,    30,    25, 
       -159,     0,     0,     0,     0,     0,     0,     0,     0,   -43, 
          0,    40,     0,  -193,     0,    84,     0,     0,     0,     0, 
          0,   -39,  -193,  -193,  -193,     0,    86,    90,    11,  -156, 
       -152,  -156,   -39,     0,    93,   -47,  -193,  -123,  -193,    71, 
       -123,     0,     0,  -106,     0,   154,   161,     0,  -193,   101, 
        183,     0,     0,   107,  -193,     0,   -47,     0,     0,  -193, 
        -30,   -29,     0,     0,    32,     0,   110,     0,  -187,     0, 
          0,     0,     0,   115,   184,   204,     0,  1926,    18,    -1, 
        -94,  -241,   137,   221,     0,     0,   -29,  1552,  1552,     0, 
       1552,  1552,  1552,  1552,    28,     0,     0,     0,     0,     0, 
          0,   147,     0,     0,     0,     0,     0,     0,     0,     0, 
       1552,  1552,  -138,   146,  1283,     0,  1926,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        244,    27,   246,   238,     0,     0,  1552,    62,     0,   -51, 
        -51,  1552,   -51,   -51,   -51,   -51,     0,   -90,  1552,     0, 
       1552,  -193,   262,   263,  2018,   264,   265,   202,   185,     0, 
        285,  1019,     0,     0,  1552,  1552,  1552,  1552,  1552,  1552, 
       1552,  1552,  1552,  1552,  1552,  1552,  1552,     0,     0,  1552, 
       1552,  1552,  1552,  1552,  1552,     0,     0,  -193,     0,  -108, 
         27,     0,  1552,   249,    51,  1133,  1167,   237,     0,  1552, 
          0,    78,     0,   -90,  1314,  1926,  1342,   299,  1552,  1552, 
       1926,     0,   -21,  1552,  1552,  1552,     0,  1552,     0,    13, 
         95,   -51,   -51,   -51,   -51,   -51,   -51,  1391,   -51,   -51, 
        -51,   -51,   -51,   -51,     0,     0,     0,     0,     0,     0, 
        -40,   315,     0,   333,  -193,   317,     0,  1926,     0,   300, 
       -193,  1763,     0,     0,   137,  1552,     0,   337,  1552,   339, 
        -90,     0,   255,     0,  1552,   322,  1428,   257,   175,   343, 
       1539,  1575,  1763,     0,   -90,   344,  1552,    45,   238,    65, 
       -193,   346,   347,   275,     0,   348,     0,     0,   -90,  1763, 
        312,     0,  -177,   365,  1552,  2018,     0,  1552,    67,  2018, 
          0,  1552,   -51,     0,     0,  -193,   -19,     0,    65,     0, 
          0,    65,     0,     0,  1552,     0,     0,     0,    64,     0, 
         68,   137,   352,     0,  1715,     6,   380,    53,   382,     0, 
          0,  1926,     0,   -19,   -19,   384,   386,   305,     0,     0, 
          0,   -90,  1552,     0,    97,  2018,     0,     0,   -90,   308, 
          0,     0,     0,  -193,  1926,     0,   389,     0,     0,  2018, 
          0,     0,    99,   310,  2018,     0,   400,     0,     0,   319, 
       1926,   318,     0, 
    );
    protected static $yyRindex= array(          450,
          0,     0,  -103,     0,     0,   -34,     0,    -4,  1353,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   144,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   388,     0,   963,  -111, 
        325,  -111,     0,     0,     0,     0,     0,   335,     0,     0, 
        335,     0,     0,     0,     0,     0,   401,     0,     0,     0, 
          1,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       -160,   340,     0,     0,  -160,     0,   313,     0,     0,     0, 
          0,     0,     3,     0,   345,   -20,     0,   350,   -46,     0, 
          0,     0,    26,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    49,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        360,     0,     0,     0,     0,     0,   361,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   409,     0,     0,     0,  -105,     0,   248, 
        373,   376,   476,   579,   604,   632,     0,    76,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        366,     0,  -199,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   430,     0,     0, 
        413,     0,     0,     0,  -160,     0,    38,     0,     0,   432, 
          0,     0,     0,   103,     0,   350,     0,     0,   431,     0, 
        350,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   665,   701,   724,   760,   813,   849,     0,   872,   908, 
       1054,  1099,  1144,  1202,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   451,   430,     0,     0,     0,     0,     0, 
        430,   112,     0,     0,    26,     0,     0,     0,   402,   -37, 
        148,     0,     0,     0,   432,     0,     0,     0,     0,     0, 
          0,     0,   -27,     0,    76,     0,     0,     0,   143,     4, 
          0,     0,     0,     0,     0,     0,     0,     0,    76,   403, 
          0,     0,     0,     0,   431,     0,     0,     0,     0,     0, 
          0,   432,  1247,     0,     0,     0,     0,     0,     4,     0, 
          0,     4,     0,     0,   432,     0,     0,     0,  1838,     0, 
       1664,   -10,     0,     0,     0,   452,     0,  1874,     0,     0, 
          0,   350,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    76,   432,     0,     0,     0,     0,     0,    76,     0, 
          0,     0,     0,     0,   350,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        350,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,  2260,     0,   489,     0,     0,   456,   494, 
       1833,     0,   459,   471,   -31,     0,     0,     0,     0,   -41, 
       -252,     0,     0,     0,  -139,   405,     0,     0,     0,  2250, 
        236,   326,     0,   -99,  -189,     0,  -216,  -172,     0,     0, 
          0,   235,     0,   -87,     0,     0,    52,     0,     0,   219, 
          0,     0,     0,     0,     0,     0,     0,     0,   197,     0, 
        200,     0,     0,     0,   266,     0,     0,  -230,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        302,     0,  -184,     0,     0,   466,     0,   514,     0, 
    );
    protected static $yyTable = array(181,
        211,   288,    36,   181,   181,   181,   181,   181,   190,   181, 
        191,    22,   297,    14,   258,    54,   150,    68,   143,    35, 
        181,   181,   181,   181,   181,   181,    28,   197,    76,   271, 
         28,    28,    28,    28,    28,   139,    28,    75,    38,   341, 
        137,   135,    42,   136,    14,   138,    40,    28,    28,    28, 
         28,    28,    28,   181,   311,   181,     1,   134,     5,   192, 
        127,    40,    67,    24,   148,   292,     9,   157,   323,    28, 
         46,   296,    89,    24,   187,    24,   273,   222,   116,   352, 
         28,   278,    28,    25,    28,   138,   271,   181,   181,   138, 
        138,   138,   138,   138,    78,   138,   116,   150,   144,   194, 
         26,    45,   344,   342,    38,   345,   138,   138,   138,   138, 
        138,   138,   177,   205,    28,    28,   177,   177,   177,   177, 
        177,   366,   177,   192,   140,    40,    67,    40,   371,    32, 
        116,    43,    90,   177,   177,   177,   177,   177,   177,   178, 
        125,   138,    91,   178,   178,   178,   178,   178,    44,   178, 
         28,   256,    52,    47,   194,    52,    87,    49,   294,   194, 
        178,   178,   178,   178,   178,   178,   326,   327,   177,   194, 
         52,   361,   362,   138,   138,   264,     5,     5,     5,     5, 
          5,     5,     5,    51,   184,    53,    51,    59,   184,   184, 
        184,   184,   184,    63,   184,   178,     5,     5,     5,    22, 
        177,   177,   360,    65,    67,   184,   184,   184,   184,   184, 
        184,   180,     9,    14,   194,    66,   178,   176,   222,   177, 
         37,   179,   222,    69,   194,   374,    70,   178,   178,    72, 
         83,   257,    88,   196,   190,   175,   191,   181,   180,    95, 
        184,   382,    96,   178,   176,   142,   177,    97,   179,    12, 
         13,    14,    77,    16,    17,    18,    27,    28,    29,   145, 
        147,   190,   175,   191,   181,   194,   194,   194,   222,   160, 
        174,   173,   184,   184,   340,     7,     7,     7,     7,     7, 
          7,     7,   222,   199,   171,   202,   200,   222,   171,   171, 
        171,   171,   171,    14,   171,     7,     7,     7,   203,   289, 
        187,   219,   220,   224,   225,   171,   171,   263,   171,   227, 
        171,    12,    13,    14,    77,    16,    17,    18,   212,    12, 
         13,    14,    15,    16,    17,    18,   181,   187,   228,   267, 
         12,    13,    14,    77,    16,    17,    18,   270,   275,   280, 
        171,    12,    13,    14,    77,    16,    17,    18,   193,   192, 
        188,   189,   285,    28,   286,   290,   293,   334,   295,   194, 
        195,   338,   181,   181,   181,   181,   181,   181,   181,   181, 
        181,   181,   171,   181,   181,   181,   291,   299,   302,   303, 
        305,   307,   308,   312,   314,   316,   319,   320,   322,    28, 
         28,    28,    28,    28,    28,    28,    28,    28,    28,   321, 
         28,    28,    28,   196,   324,   332,   336,   369,   327,   172, 
        353,   326,   138,   172,   172,   172,   172,   172,   355,   172, 
        356,   376,   359,   357,   363,   364,   379,   365,   268,   375, 
        172,   172,   372,   172,   378,   172,   368,   276,   377,   177, 
        380,   381,   383,   196,   196,   196,    11,    26,   138,   138, 
        138,   138,   138,   138,   138,   138,   138,    24,    14,   138, 
        138,   138,   188,   196,    37,   172,   178,    51,   114,    36, 
         61,    46,   114,   196,    75,   177,   177,   177,   177,   177, 
        177,   177,   177,   177,   146,    77,   177,   177,   177,   114, 
        148,    63,    98,   304,   118,   119,    23,   172,    52,    20, 
         51,   149,   178,   178,   178,   178,   178,   178,   178,   178, 
        178,   184,   169,   178,   178,   178,   169,   169,   169,   169, 
        169,    64,   169,   333,   315,   318,   259,   351,   350,   284, 
        339,   298,    74,   169,   169,    30,   169,     0,   169,     0, 
          0,     0,     0,   346,     0,     0,     0,   184,   184,   184, 
        184,   184,   184,   184,   184,   184,     0,     0,   184,   184, 
        184,     0,     0,     0,     0,     0,     0,     0,   169,     0, 
          0,   367,   201,     0,   193,   192,   188,   189,   182,   183, 
        184,   185,   186,     0,     0,   194,   195,   226,     0,     0, 
          0,     0,   201,   201,   201,   201,   201,   201,   201,     0, 
        169,   193,   192,   188,   189,   182,   183,   184,   185,   186, 
          0,   171,   194,   195,   226,   170,     0,     0,     0,   170, 
        170,   170,   170,   170,     0,   170,     0,     0,     0,     0, 
          0,     0,   201,     0,     0,     0,   170,   170,     0,   170, 
        173,   170,   201,     0,   173,   173,   173,   173,   173,     0, 
        173,   171,   171,   171,   171,   171,     0,     0,     0,     0, 
        171,   173,   173,     0,   173,     0,   173,     0,   174,     0, 
          0,   170,   174,   174,   174,   174,   174,     0,   174,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   174, 
        174,     0,   174,     0,   174,     0,   173,     0,     0,     0, 
          0,   151,     0,   170,     0,   151,   151,   151,   151,   151, 
          0,   151,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   151,   151,   174,   151,     0,   151,   173,     2, 
          2,     2,     2,     2,     2,     2,   172,   163,     0,     0, 
          0,   163,   163,   163,   163,   163,     0,   163,     0,     2, 
          2,     2,     0,     2,     0,     0,   174,   151,   163,   163, 
        164,   163,     0,   163,   164,   164,   164,   164,   164,     0, 
        164,     0,     0,     0,     0,     0,   172,   172,   172,   172, 
        172,   164,   164,     0,   164,   172,   164,     0,     0,   151, 
          0,     0,     0,   163,     0,     0,   165,     0,     0,     0, 
        165,   165,   165,   165,   165,     0,   165,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   164,   165,   165,     0, 
        165,     0,   165,     0,     0,   163,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   169, 
          0,     0,     0,     0,     0,     0,     0,     0,   164,   166, 
          0,     0,   165,   166,   166,   166,   166,   166,     0,   166, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        166,   166,     0,   166,     0,   166,     0,     0,     0,   169, 
        169,   169,   169,   169,   165,   167,     0,     0,   169,   167, 
        167,   167,   167,   167,     0,   167,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   166,   167,   167,   152,   167, 
          0,   167,   152,   152,   152,   152,   152,     0,   152,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   152, 
        152,     0,   152,     0,   152,     0,     0,   166,     0,     0, 
          0,   167,   170,     0,   153,     0,     0,     0,   153,   153, 
        153,   153,   153,     0,   153,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   152,   153,   153,   173,   153,     0, 
        153,     0,     0,   167,     0,     0,     0,     0,     0,     0, 
          0,     0,   170,   170,   170,   170,   170,     0,     0,     0, 
          0,   170,     0,     0,     0,   174,   152,     0,     0,     0, 
        153,     0,   185,     0,   185,     0,   185,   173,   173,   173, 
        173,   173,     0,     0,     0,     0,   173,     0,     0,     0, 
          0,   185,     0,     0,   185,     0,     0,     0,   151,     0, 
          0,     0,   153,     0,     0,   174,   174,   174,   174,   174, 
          0,     0,     0,     0,   174,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   180,     0,     0,     0,   229, 
        178,   176,     0,   177,   163,   179,     0,     0,   151,   151, 
        151,   151,   151,     0,     0,     0,     0,   151,   190,   175, 
        191,   181,     0,     0,     0,   185,     0,   164,     0,     0, 
        154,     0,     0,     0,   154,   154,   154,   154,   154,     0, 
        154,     0,     0,     0,   163,   163,   163,   163,   163,     0, 
          0,   154,   154,   163,   154,     0,   154,     0,     0,     0, 
          0,     0,     0,   165,     0,     0,     0,   164,   164,   164, 
        164,   164,     0,     0,     0,   155,   164,     0,     0,   155, 
        155,   155,   155,   155,   187,   155,   154,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   155,   155,     0,   155, 
          0,   155,     0,   165,   165,   165,   165,   165,     0,   180, 
          0,     0,   165,   265,   178,   176,   166,   177,   154,   179, 
        156,     0,     0,     0,   156,   156,   156,   156,   156,     0, 
        156,   155,   190,   175,   191,   181,     0,     0,     0,     0, 
          0,   156,   156,   180,   156,     0,   156,     0,   178,   176, 
        266,   177,   167,   179,     0,     0,   166,   166,   166,   166, 
        166,     0,   185,   155,     0,   166,   190,   175,   191,   181, 
          0,     0,     0,     0,     0,   152,   156,     0,   168,     0, 
          0,     0,   168,   168,   168,   168,   168,     0,   168,     0, 
          0,     0,   167,   167,   167,   167,   167,     0,   187,   168, 
        168,   167,   168,     0,   168,     0,     0,     0,   156,     0, 
          0,   153,   185,   185,     0,   152,   152,   152,   152,   152, 
          0,     0,     0,   137,   152,     0,     0,   137,   137,   137, 
        137,   137,   187,   137,   168,     0,     0,     0,     0,     0, 
          0,     0,   185,     0,   137,   137,     0,   137,     0,   137, 
          0,   153,   153,   153,   153,   153,     0,     0,     0,   180, 
        153,     0,     0,     0,   178,   176,   168,   177,     0,   179, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   137, 
          0,   196,   190,   175,   191,   181,     0,     0,     0,     0, 
        180,     0,     0,     0,     0,   178,   176,     0,   177,     0, 
        179,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   137,   272,   190,   175,   191,   181,     0,   180,     0, 
          0,     0,     0,   178,   176,     0,   177,     0,   179,     0, 
          0,     0,    14,     0,    14,     0,    14,     0,     0,     0, 
        274,   190,   175,   191,   181,     0,     0,     0,   187,     0, 
          0,    14,    14,     0,    14,     0,     0,   154,   193,   192, 
        188,   189,   182,   183,   184,   185,   186,   180,     0,   194, 
        195,     0,   178,   176,     0,   177,     0,   179,     0,   187, 
          0,     0,     0,    14,     0,     0,     0,     0,   287,     0, 
        190,   175,   191,   181,     0,     0,     0,   154,   154,   154, 
        154,   154,   155,     0,   180,     0,   154,   187,   306,   178, 
        176,     0,   177,     0,   179,    14,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   190,   175,   191, 
        181,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   155,   155,   155,   155,   155,   156,     0,     0, 
          0,   155,     0,     0,     0,     0,   187,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   193,   192,   188,   189,   182,   183,   184,   185, 
        186,     0,     0,   194,   195,     0,     0,   156,   156,   156, 
        156,   156,     0,   187,     0,     0,   156,     0,     0,     0, 
          0,     0,     0,     0,     0,   168,   193,   192,   188,   189, 
        182,   183,   184,   185,   186,   180,     0,   194,   195,     0, 
        178,   176,     0,   177,   101,   179,     0,     0,     0,     0, 
          0,   122,     0,     0,    98,     0,    99,     0,   190,   175, 
        191,   181,     0,     0,     0,   168,   168,   168,   168,   168, 
        137,   180,    14,     0,   168,   310,   178,   176,     0,   177, 
          0,   179,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   190,   175,   191,   181,     0,     0, 
          0,     0,   100,     0,     0,     0,     0,     0,     0,     0, 
        137,   137,   137,   137,   137,     0,     0,     0,     0,   137, 
          0,     0,    14,    14,   187,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   121,     0,     0,   102,     0,     0, 
          0,     0,   193,   192,   188,   189,   182,   183,   184,   185, 
        186,     0,    14,   194,   195,     0,   106,     0,     0,     0, 
        187,     0,     0,   106,     0,     0,   106,     0,   106,     0, 
          0,     0,     0,   193,   192,   188,   189,   182,   183,   184, 
        185,   186,   106,     0,   194,   195,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   193,   192,   188,   189,   182,   183,   184,   185,   186, 
          0,   180,   194,   195,   106,   354,   178,   176,     0,   177, 
          0,   179,    14,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   190,   175,   191,   181,     0,     0, 
          0,     0,     0,     0,     0,     0,   106,     0,   106,   106, 
        193,   192,   188,   189,   182,   183,   184,   185,   186,   180, 
          0,   194,   195,     0,   178,   176,     0,   177,     0,   179, 
          0,   105,   106,   107,   108,   109,     0,     0,     0,     0, 
          0,     0,   190,   175,   191,   181,     0,   193,   192,   188, 
        189,   182,   183,   184,   185,   186,     0,     0,   194,   195, 
        187,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    40,    41,    42,     0,     0, 
        110,     0,     0,     0,     0,     0,     0,   110,    55,    58, 
        110,     0,   110,     0,     0,     0,     0,     0,   187,     0, 
          0,   110,     0,     0,     0,     0,   110,   114,     0,    55, 
          0,     0,   309,     0,     0,     0,   101,     0,     0,     0, 
          0,    92,     0,   101,     0,     0,   101,     0,   101,     0, 
          0,     0,     0,   106,   106,   106,   106,   106,   110,     0, 
          0,     0,   101,     0,     0,     0,     0,     0,   193,   192, 
        188,   189,   182,   183,   184,   185,   186,     0,     0,   194, 
        195,     0,     0,   103,   104,     0,     0,     0,   101,     0, 
        110,     0,   110,   110,   101,   122,     0,     0,    98,     0, 
         99,     0,     0,     0,   193,   192,   188,   189,   182,   183, 
        184,   185,   186,     0,   120,   194,   195,     0,     0,     0, 
          0,     0,     0,     0,   218,     0,   101,     0,   101,   101, 
          0,     0,     0,   106,   106,   106,   106,     0,   106,   106, 
          0,     0,     0,     0,     0,     0,   100,     0,     0,     0, 
          0,     0,     0,   106,   106,   106,   106,     0,     0,     0, 
        251,     0,     0,   106,   106,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   121,     0, 
        101,   102,     0,     0,     0,     0,     0,   122,     0,     0, 
         98,     0,    99,     0,     0,   106,   106,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   120,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   251,     0,     0, 
          0,     0,     0,   251,     0,     0,     0,   110,   110,   110, 
        110,   110,     0,     0,     0,     0,     0,     0,   100,     0, 
          0,     0,     0,     0,   193,   192,   188,   189,   182,   183, 
        184,   185,   186,   251,     0,   194,   195,     0,     0,     0, 
          0,     0,     0,   101,   101,   101,   101,   101,     0,     0, 
        221,     0,     0,   102,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   193,   192,   188,   189,   182,   183,   184,   185, 
        186,     0,     0,   194,   195,     0,     0,   110,   110,   110, 
        110,     0,     0,   110,     0,   105,   106,   107,   108,   109, 
          0,     0,     0,     0,     0,     0,   373,   110,   110,   110, 
        110,     0,     0,     0,     0,     0,     0,   110,   110,     0, 
          0,     0,     0,   101,   101,   101,   101,     0,     0,   101, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   101,   101,   101,   101,     0,     0,   110, 
        110,     0,     0,   101,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    10,     0,   110,   111,   112,   113,     0, 
          0,   114,     0,     0,     0,   101,   101,   105,   106,   107, 
        108,   109,     0,    31,     0,   115,   116,   117,   118,     0, 
          0,     0,    39,    39,    39,   119,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    39,    39,     0,    39,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    39,     0, 
          0,     0,     0,     0,    73,     0,    39,   103,   104,    39, 
          0,     0,     0,     0,     0,     0,     0,     0,    39,     0, 
          0,     0,     0,     0,     0,     0,     0,   150,   151,     0, 
        153,   154,   155,   156,     0,     0,     0,   110,   111,   112, 
        113,     0,     0,   114,     0,     0,     0,     0,     0,     0, 
        168,   172,     0,     0,     0,     0,     0,   115,   116,   117, 
        118,     0,     0,     0,     0,     0,     0,   119,     0,     0, 
          0,     0,     0,     0,     0,     0,   206,     0,     0,     0, 
          0,   207,     0,     0,     0,     0,     0,     0,   215,     0, 
        217,     0,     0,     0,     0,     0,     0,     0,     0,   103, 
        104,    39,     0,     0,   232,   233,   234,   235,   236,   237, 
        238,   239,   240,   241,   242,   243,   244,     0,     0,   245, 
        246,   247,   248,   249,   250,     0,     0,     0,     0,     0, 
          0,     0,   262,     0,     0,     0,     0,    39,     0,   207, 
          0,     0,     0,     0,     0,     0,     0,     0,   207,   277, 
        279,     0,     0,   281,   282,   283,     0,   168,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    39,   207,     0,     0,   300,     0, 
         39,     0,     0,     0,   207,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   313,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         39,     0,     0,     0,   207,     0,     0,   335,     0,     0, 
          0,   207,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   207,    39,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   207,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    39, 
    );
    protected static $yyCheck = array(37,
         91,    42,    42,    41,    42,    43,    44,    45,    60,    47, 
         62,   123,   265,    60,   123,    63,    44,    59,   260,   125, 
         58,    59,    60,    61,    62,    63,    37,   127,    70,   214, 
         41,    42,    43,    44,    45,    37,    47,    69,    59,    59, 
         42,    43,    40,    45,    91,    47,    44,    58,    59,    60, 
         61,    62,    63,    91,   285,    93,   303,    40,   304,    59, 
        260,    59,    59,    46,    96,   255,   260,    40,   299,    44, 
         60,   261,   260,    46,   126,    46,   216,   165,    41,   332, 
         91,   221,    93,    59,    59,    37,   271,   125,   126,    41, 
         42,    43,    44,    45,   125,    47,    59,   125,   340,   260, 
        260,    91,   319,   123,   125,   322,    58,    59,    60,    61, 
         62,    63,    37,   145,   125,   126,    41,    42,    43,    44, 
         45,   352,    47,   123,   126,   123,   123,   125,   359,    46, 
         93,    46,   320,    58,    59,    60,    61,    62,    63,    37, 
        340,    93,   330,    41,    42,    43,    44,    45,    59,    47, 
        125,   260,    41,   310,   260,    44,   125,   310,   258,   320, 
         58,    59,    60,    61,    62,    63,   344,   345,    93,   330, 
         59,   344,   345,   125,   126,   125,   280,   281,   282,   283, 
        284,   285,   286,    41,    37,    93,    44,   311,    41,    42, 
         43,    44,    45,   123,    47,    93,   300,   301,   302,   311, 
        125,   126,   342,   310,    44,    58,    59,    60,    61,    62, 
         63,    37,   260,   260,   320,    62,    42,    43,   306,    45, 
        260,    47,   310,   123,   330,   365,    44,   125,   126,   123, 
        260,   340,   123,    59,    60,    61,    62,    63,    37,   125, 
         93,   381,    59,    42,    43,   340,    45,    44,    47,   280, 
        281,   282,   283,   284,   285,   286,   300,   301,   302,   123, 
         40,    60,    61,    62,    63,   300,   301,   302,   356,   123, 
        125,   410,   125,   126,   316,   280,   281,   282,   283,   284, 
        285,   286,   370,    40,    37,    40,   260,   375,    41,    42, 
         43,    44,    45,   340,    47,   300,   301,   302,    61,   340, 
        126,    40,    40,    40,    40,    58,    59,    59,    61,   125, 
         63,   280,   281,   282,   283,   284,   285,   286,   409,   280, 
        281,   282,   283,   284,   285,   286,   364,   126,    44,    93, 
        280,   281,   282,   283,   284,   285,   286,   260,    40,   361, 
         93,   280,   281,   282,   283,   284,   285,   286,   400,   401, 
        402,   403,   340,   364,   260,    41,    40,   306,    59,   411, 
        412,   310,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   409,   125,   411,   412,   413,    44,    41,    40,   125, 
         59,   125,    40,    40,   340,   321,    41,    41,    41,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   409,   125, 
        411,   412,   413,   260,    93,    41,   340,   356,   345,    37, 
         59,   344,   364,    41,    42,    43,    44,    45,   413,    47, 
         41,   370,    41,   371,    41,    40,   375,   123,   210,    41, 
         58,    59,   125,    61,   125,    63,   340,   219,   340,   364, 
         41,   123,   125,   300,   301,   302,    59,   123,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   123,   410,   411, 
        412,   413,    62,   320,   125,    93,   364,    59,    93,   125, 
         41,    59,    41,   330,   125,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   125,   125,   411,   412,   413,    59, 
        125,    41,    41,   275,    93,    93,     8,   125,    43,     6, 
         42,    97,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   364,    37,   411,   412,   413,    41,    42,    43,    44, 
         45,    51,    47,   305,   289,   291,   201,   331,   329,   228, 
        312,   266,    67,    58,    59,    22,    61,    -1,    63,    -1, 
         -1,    -1,    -1,   325,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
        413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,   353,   260,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,   413,    -1,    -1, 
         -1,    -1,   280,   281,   282,   283,   284,   285,   286,    -1, 
        125,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,   364,   411,   412,   413,    37,    -1,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,   320,    -1,    -1,    -1,    58,    59,    -1,    61, 
         37,    63,   330,    -1,    41,    42,    43,    44,    45,    -1, 
         47,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,    58,    59,    -1,    61,    -1,    63,    -1,    37,    -1, 
         -1,    93,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    93,    -1,    -1,    -1, 
         -1,    37,    -1,   125,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    93,    61,    -1,    63,   125,   280, 
        281,   282,   283,   284,   285,   286,   364,    37,    -1,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,   300, 
        301,   302,    -1,   304,    -1,    -1,   125,    93,    58,    59, 
         37,    61,    -1,    63,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    58,    59,    -1,    61,   413,    63,    -1,    -1,   125, 
         -1,    -1,    -1,    93,    -1,    -1,    37,    -1,    -1,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    93,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,   125,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    37, 
         -1,    -1,    93,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,   125,    37,    -1,    -1,   413,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    93,    58,    59,    37,    61, 
         -1,    63,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,   125,    -1,    -1, 
         -1,    93,   364,    -1,    37,    -1,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    93,    58,    59,   364,    61,    -1, 
         63,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,    -1,    -1,    -1,   364,   125,    -1,    -1,    -1, 
         93,    -1,    40,    -1,    42,    -1,    44,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,    -1,    -1,    -1, 
         -1,    59,    -1,    -1,    62,    -1,    -1,    -1,   364,    -1, 
         -1,    -1,   125,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41, 
         42,    43,    -1,    45,   364,    47,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,    60,    61, 
         62,    63,    -1,    -1,    -1,   123,    -1,   364,    -1,    -1, 
         37,    -1,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    58,    59,   413,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,   364,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    37,   413,    -1,    -1,    41, 
         42,    43,    44,    45,   126,    47,    93,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,   404,   405,   406,   407,   408,    -1,    37, 
         -1,    -1,   413,    41,    42,    43,   364,    45,   125,    47, 
         37,    -1,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    93,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    37,    61,    -1,    63,    -1,    42,    43, 
         44,    45,   364,    47,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,   260,   125,    -1,   413,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,    -1,   364,    93,    -1,    37,    -1, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,   126,    58, 
         59,   413,    61,    -1,    63,    -1,    -1,    -1,   125,    -1, 
         -1,   364,   310,   311,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    37,   413,    -1,    -1,    41,    42,    43, 
         44,    45,   126,    47,    93,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   340,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    37, 
        413,    -1,    -1,    -1,    42,    43,   125,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93, 
         -1,    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         37,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   125,    59,    60,    61,    62,    63,    -1,    37,    -1, 
         -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    40,    -1,    42,    -1,    44,    -1,    -1,    -1, 
         59,    60,    61,    62,    63,    -1,    -1,    -1,   126,    -1, 
         -1,    59,    60,    -1,    62,    -1,    -1,   364,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    37,    -1,   411, 
        412,    -1,    42,    43,    -1,    45,    -1,    47,    -1,   126, 
         -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    58,    -1, 
         60,    61,    62,    63,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,   364,    -1,    37,    -1,   413,   126,    41,    42, 
         43,    -1,    45,    -1,    47,   123,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,   364,    -1,    -1, 
         -1,   413,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,   126,    -1,    -1,   413,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   364,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    37,    -1,   411,   412,    -1, 
         42,    43,    -1,    45,    33,    47,    -1,    -1,    -1,    -1, 
         -1,    40,    -1,    -1,    43,    -1,    45,    -1,    60,    61, 
         62,    63,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
        364,    37,   260,    -1,   413,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,   413, 
         -1,    -1,   310,   311,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,   340,   411,   412,    -1,    33,    -1,    -1,    -1, 
        126,    -1,    -1,    40,    -1,    -1,    43,    -1,    45,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    59,    -1,   411,   412,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    37,   411,   412,    91,    41,    42,    43,    -1,    45, 
         -1,    47,   410,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,   125,   126, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    37, 
         -1,   411,   412,    -1,    42,    43,    -1,    45,    -1,    47, 
         -1,   260,   261,   262,   263,   264,    -1,    -1,    -1,    -1, 
         -1,    -1,    60,    61,    62,    63,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    33,    34,    35,    -1,    -1, 
         33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    46,    47, 
         43,    -1,    45,    -1,    -1,    -1,    -1,    -1,   126,    -1, 
         -1,   340,    -1,    -1,    -1,    -1,    59,   346,    -1,    67, 
         -1,    -1,   364,    -1,    -1,    -1,    33,    -1,    -1,    -1, 
         -1,    79,    -1,    40,    -1,    -1,    43,    -1,    45,    -1, 
         -1,    -1,    -1,   260,   261,   262,   263,   264,    91,    -1, 
         -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,    -1,   402,   403,    -1,    -1,    -1,    33,    -1, 
        123,    -1,   125,   126,    91,    40,    -1,    -1,    43,    -1, 
         45,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    59,   411,   412,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   162,    -1,   123,    -1,   125,   126, 
         -1,    -1,    -1,   340,   341,   342,   343,    -1,   345,   346, 
         -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1, 
         -1,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1, 
        198,    -1,    -1,   370,   371,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1, 
         33,   126,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1, 
         43,    -1,    45,    -1,    -1,   402,   403,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   255,    -1,    -1, 
         -1,    -1,    -1,   261,    -1,    -1,    -1,   260,   261,   262, 
        263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,   291,    -1,   411,   412,    -1,    -1,    -1, 
         -1,    -1,    -1,   260,   261,   262,   263,   264,    -1,    -1, 
        123,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,    -1,   340,   341,   342, 
        343,    -1,    -1,   346,    -1,   260,   261,   262,   263,   264, 
         -1,    -1,    -1,    -1,    -1,    -1,   364,   360,   361,   362, 
        363,    -1,    -1,    -1,    -1,    -1,    -1,   370,   371,    -1, 
         -1,    -1,    -1,   340,   341,   342,   343,    -1,    -1,   346, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   360,   361,   362,   363,    -1,    -1,   402, 
        403,    -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,     4,    -1,   340,   341,   342,   343,    -1, 
         -1,   346,    -1,    -1,    -1,   402,   403,   260,   261,   262, 
        263,   264,    -1,    24,    -1,   360,   361,   362,   363,    -1, 
         -1,    -1,    33,    34,    35,   370,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    46,    47,    -1,    49,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1, 
         -1,    -1,    -1,    -1,    65,    -1,    67,   402,   403,    70, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    79,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,    -1, 
        101,   102,   103,   104,    -1,    -1,    -1,   340,   341,   342, 
        343,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1, 
        121,   122,    -1,    -1,    -1,    -1,    -1,   360,   361,   362, 
        363,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   147,    -1,    -1,    -1, 
         -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,   159,    -1, 
        161,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402, 
        403,   162,    -1,    -1,   175,   176,   177,   178,   179,   180, 
        181,   182,   183,   184,   185,   186,   187,    -1,    -1,   190, 
        191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   203,    -1,    -1,    -1,    -1,   198,    -1,   210, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,   220, 
        221,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   255,   266,    -1,    -1,   269,    -1, 
        261,    -1,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        291,    -1,    -1,    -1,   305,    -1,    -1,   308,    -1,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   325,   316,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   364, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 
      'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 
      'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 
      'T_FOREACH', 'T_AS', 'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 
      'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      'T_OBJECT_OPERATOR', 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
      'T_DOUBLE_ARROW', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 117 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 128 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 128 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 139 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 140 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 144 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 144 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 13:  #line 152 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 15:  #line 157 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 16:  #line 163 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 163 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 18:  #line 171 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 19:  #line 171 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 179 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 21:  #line 179 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 22:  #line 189 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 190 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 194 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 25:  #line 195 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 199 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 200 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 204 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 205 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 30:  #line 209 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 31:  #line 210 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 214 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 33:  #line 215 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 216 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 35:  #line 220 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 221 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 222 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 226 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 39:  #line 227 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 40:  #line 231 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 41:  #line 231 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 42:  #line 234 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 234 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 244 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 45:  #line 250 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 46:  #line 260 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 48:  #line 265 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 49:  #line 266 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 50:  #line 267 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 51:  #line 271 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 272 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 278 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 54:  #line 278 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 55:  #line 287 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 56:  #line 287 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 57:  #line 294 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 58:  #line 294 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 59:  #line 305 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 60:  #line 306 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 61:  #line 310 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 62:  #line 311 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 63:  #line 315 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 64:  #line 316 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 65:  #line 320 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 66:  #line 321 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 67:  #line 325 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 68:  #line 326 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 75:  #line 345 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 77:  #line 350 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 78:  #line 351 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 79:  #line 355 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 80:  #line 355 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 81:  #line 358 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 82:  #line 358 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 83:  #line 363 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 84:  #line 363 "grammar/xp.jay"
    {
      $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 85:  #line 369 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 86:  #line 369 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      /* $1->assignment= $6; XX FIXME XX*/
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 87:  #line 374 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 88:  #line 374 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 89:  #line 378 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 90:  #line 378 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 91:  #line 382 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 92:  #line 382 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 93:  #line 387 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 94:  #line 387 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
    } break;

    case 97:  #line 395 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 98:  #line 396 "grammar/xp.jay"
    { $yyVal= array(NULL, $yyVals[0+$yyTop]); } break;

    case 99:  #line 400 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 100:  #line 401 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 101:  #line 405 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 102:  #line 406 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 103:  #line 406 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 104:  #line 411 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 105:  #line 412 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 106:  #line 416 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 107:  #line 417 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 108:  #line 421 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 109:  #line 421 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
  } break;

    case 110:  #line 429 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 112:  #line 434 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 113:  #line 434 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
  } break;

    case 114:  #line 442 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 116:  #line 447 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 117:  #line 448 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 118:  #line 452 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 121:  #line 458 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 122:  #line 458 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 123:  #line 461 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InstanceCreationNode()); } break;

    case 124:  #line 461 "grammar/xp.jay"
    { 
      $yyVals[-7+$yyTop]->type= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-7+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 125:  #line 466 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 126:  #line 466 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 127:  #line 471 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 128:  #line 471 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 129:  #line 477 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 130:  #line 477 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 131:  #line 483 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 132:  #line 484 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); } break;

    case 133:  #line 485 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); } break;

    case 134:  #line 486 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); } break;

    case 135:  #line 487 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); } break;

    case 136:  #line 488 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); $yyVal->postfix= TRUE; } break;

    case 137:  #line 489 "grammar/xp.jay"
    { /* XXX Ternary */ } break;

    case 138:  #line 493 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 139:  #line 494 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 140:  #line 494 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 141:  #line 498 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 142:  #line 503 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 143:  #line 504 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 144:  #line 505 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 145:  #line 506 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 146:  #line 510 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 148:  #line 515 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 149:  #line 516 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 150:  #line 520 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 151:  #line 524 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 152:  #line 525 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 153:  #line 526 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 154:  #line 527 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 155:  #line 528 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 156:  #line 529 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 157:  #line 533 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 158:  #line 534 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 159:  #line 535 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 160:  #line 536 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 161:  #line 537 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 162:  #line 538 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 163:  #line 542 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 164:  #line 543 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 165:  #line 544 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 166:  #line 545 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 167:  #line 546 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 168:  #line 547 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 169:  #line 551 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 170:  #line 552 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 171:  #line 553 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 172:  #line 554 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 173:  #line 555 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 174:  #line 556 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 175:  #line 560 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 176:  #line 561 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 177:  #line 566 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 179:  #line 571 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 180:  #line 571 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 181:  #line 574 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 182:  #line 578 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 183:  #line 578 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 184:  #line 582 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 185:  #line 588 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 186:  #line 589 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 187:  #line 590 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 188:  #line 594 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 189:  #line 595 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 191:  #line 600 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 192:  #line 604 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 193:  #line 605 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 194:  #line 611 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 195:  #line 612 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 196:  #line 616 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 197:  #line 617 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 198:  #line 621 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 199:  #line 622 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 200:  #line 623 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 201:  #line 624 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 202:  #line 625 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 203:  #line 626 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 204:  #line 627 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1705 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
