<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 48 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_PACKAGE',  303);
  define('TOKEN_T_IMPORT',  304);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          9,     9,     9,     4,     4,    12,     3,    16,     3,    18, 
          3,    13,    13,    14,    14,    19,    19,    21,    21,    15, 
         15,    22,    22,    22,    17,    17,    17,    26,    26,    28, 
         27,    29,    27,    23,    23,    33,    33,    32,    32,    32, 
         31,    31,    36,    24,    39,    24,    41,    24,    38,    38, 
         35,    35,    43,    43,    44,    44,    37,    37,    40,    40, 
         40,    40,    40,    40,    42,    42,    34,    34,    46,    45, 
         47,    45,    49,    45,    51,    45,    53,    45,    54,    45, 
         55,    45,    57,    45,    45,    52,    52,    25,    25,    48, 
         58,    48,    56,    56,    59,    59,    63,    62,    60,    60, 
         64,    61,    65,    65,    30,    66,    30,    67,    30,    30, 
         30,    69,    30,    70,    30,    71,    30,    72,    30,    73, 
         30,    30,    30,    30,    30,    30,    30,    30,    74,    74, 
         74,    74,    74,    74,    75,    75,    75,    75,    75,    75, 
         76,    76,    76,    76,    76,    76,    77,    77,    77,    77, 
         77,    77,    78,    78,    68,    68,    80,    79,    79,    81, 
         79,    79,    50,    50,    82,    82,    11,    11,    11,    83, 
         83,    84,    84,    20,    20,    10,    10,    85,    85,    86, 
         86,    86,    86,    86,    86,    86, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     6, 
          1,     1,     3,     1,     3,     0,     9,     0,     9,     0, 
          8,     0,     2,     0,     2,     0,     2,     0,     3,     2, 
          0,     1,     1,     2,     3,     1,     0,     1,     3,     0, 
          3,     0,     6,     5,     6,     0,     1,     2,     4,     4, 
          0,     2,     0,     9,     0,     8,     0,     9,     1,     3, 
          0,     1,     1,     3,     3,     3,     0,     2,     1,     1, 
          1,     1,     1,     1,     0,     1,     1,     2,     0,     4, 
          0,     7,     0,    10,     0,     8,     0,     6,     0,     7, 
          0,     6,     0,     4,     2,     4,     1,     1,     3,     0, 
          0,     3,     2,     1,     1,     2,     0,     9,     0,     1, 
          0,     5,     0,     1,     1,     0,     4,     0,     5,     1, 
          1,     0,     3,     0,     8,     0,     5,     0,     8,     0, 
          6,     3,     1,     1,     1,     1,     1,     5,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     2,     2,     2,     2, 
          2,     2,     2,     2,     0,     1,     0,     4,     2,     0, 
          6,     2,     0,     1,     1,     3,     1,     4,     3,     1, 
          3,     1,     3,     1,     3,     0,     1,     1,     2,     1, 
          1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,   190,   192,   191,   193,   195,   194,   196,     1,     0, 
        187,     0,     8,     0,     4,     0,    16,    20,    18,   189, 
         15,     0,     0,     0,     0,    12,     0,     0,     0,     0, 
          0,     0,     0,    10,     0,     0,     0,     0,     0,     0, 
          0,    13,   179,     0,   182,     0,     0,    23,     0,     0, 
          0,    27,    31,     0,     0,   178,     0,    25,    31,     0, 
          0,     0,   183,   181,     0,   185,     0,    21,     0,    30, 
         32,    33,     0,     0,     0,     0,    17,     0,     0,   116, 
          0,     0,     0,     0,     0,   121,   120,   122,    79,     0, 
         93,   124,    83,    87,    89,    85,    81,     0,     0,     0, 
         34,     0,    98,   133,   134,   135,   136,   137,     0,     0, 
          0,     0,     0,     0,    19,    31,     0,     0,     0,     0, 
          0,     0,     0,     0,   130,     0,     0,    91,     0,     0, 
          0,     0,     0,     0,     0,    76,     0,     0,     0,   118, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   163,   164,     0,     0,     0,     0, 
          0,     0,    95,    55,    69,    70,    71,    72,    73,    74, 
          0,     0,     0,     0,    31,    41,     0,     0,    39,     0, 
          0,   174,     0,   167,     0,   123,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    99,    78,   132,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   145,   146,   147,   148,   149, 
        150,     0,    57,     0,     0,    53,     0,     0,     0,     0, 
          0,   117,     0,     0,     0,     0,    80,     0,    94,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    62,     0,     0,     0,    48,     0,    47,     0,     0, 
          0,    44,    29,     0,   176,     0,     0,     0,   170,     0, 
          0,     0,     0,     0,     0,     0,   119,   127,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    45,     0,    43, 
        131,   168,     0,   107,   111,    92,     0,   104,     0,     0, 
          0,    88,     0,     0,     0,     0,     0,    66,    65,     0, 
          0,    64,     0,    49,    50,     0,     0,     0,     0,   103, 
        110,   106,     0,     0,    90,     0,     0,   101,    82,     0, 
         68,    59,     0,    56,     0,     0,   171,     0,     0,   125, 
          0,     0,    86,     0,   129,     0,    58,    54,     0,     0, 
          0,    96,   102,    60,     0,   112,    84,     0,     0,     0, 
        108, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    19,   110,     4,     7,     8,    11,    38,    79, 
         61,    33,    48,    60,    71,    35,    84,    34,    50,    62, 
        186,    80,    81,    82,   111,    85,    86,   123,   124,   112, 
        238,   235,   269,   146,   261,   270,   321,   344,   232,   181, 
        264,   147,   262,   263,   113,   137,   145,   339,   141,   191, 
        144,   315,   142,   143,   199,   306,   139,   354,   307,   330, 
        308,   309,   328,   329,   278,   130,   210,   196,   136,   140, 
        211,   212,   193,   114,   115,   116,   117,   118,   197,   244, 
        303,   192,    56,    57,    21,    22, 
    );
    protected static $yySindex = array(         -257,
          0,     0,  -181,  -116,     0,   137,     0,  -181,    54,    92, 
       -107,     0,     0,     0,     0,     0,     0,     0,     0,  -204, 
          0,   137,     0,  -116,     0,   109,     0,     0,     0,     0, 
          0,   -23,  -116,  -116,  -116,     0,   116,   111,   -20,  -131, 
       -129,  -131,   -23,     0,   100,   -34,  -116,  -117,  -116,    77, 
       -117,     0,     0,   -99,     0,   154,   174,     0,  -116,    99, 
        175,     0,     0,   104,  -116,     0,   -34,     0,     0,  -116, 
       -109,   -35,     0,     0,   -33,     0,  1231,     0,  -152,     0, 
          0,     0,     0,   118,   164,   202,     0,  1605,  1605,     0, 
       1605,  1605,  1605,  1605,    29,     0,     0,     0,     0,   131, 
          0,     0,     0,     0,     0,     0,     0,  1592,  1605,   -82, 
          0,   170,     0,     0,     0,     0,     0,     0,    32,    21, 
        -85,  -247,   142,   201,     0,     0,   -35,   -59,   -59,  1605, 
        -59,   -59,   -59,   -59,     0,   -89,  1605,     0,  1605,  -116, 
        227,   228,  1231,   232,   233,     0,   149,  1592,   197,     0, 
          0,  1605,  1605,  1605,  1605,  1605,  1605,  1605,  1605,  1605, 
       1605,  1605,  1605,  1605,     0,     0,  1605,  1605,  1605,  1605, 
       1605,  1605,     0,     0,     0,     0,     0,     0,     0,     0, 
        236,    24,   247,   225,     0,     0,  1605,   203,     0,   219, 
        199,     0,  1605,     0,    35,     0,   -89,   246,  1592,   274, 
        272,  1605,  1605,   -48,  1605,  1605,     0,     0,     0,  1605, 
        -26,    55,   -59,   -59,   -59,   -59,   -59,   -59,   366,   -59, 
        -59,   -59,   -59,   -59,   -59,     0,     0,     0,     0,     0, 
          0,  -116,     0,  -112,    24,     0,  1605,   259,    96,   650, 
       1605,     0,   281,  1605,   284,   -89,     0,   204,     0,  1605, 
        280,   677,   300,   699,   738,   253,   -89,   307,  1605,   -30, 
        308,     0,   312,  -116,   317,     0,  1592,     0,   299,  -116, 
        789,     0,     0,   142,     0,   -89,   789,   266,     0,  -224, 
        320,  1605,  1231,  1605,    22,  1231,     0,     0,  1605,   -59, 
         44,   225,    62,  -116,   345,   346,   264,     0,   363,     0, 
          0,     0,  1605,     0,     0,     0,    60,     0,    66,   142, 
        347,     0,   767,   353,   374,    59,   384,     0,     0,  -116, 
          1,     0,    62,     0,     0,    62,   391,   393,   313,     0, 
          0,     0,   -89,  1605,     0,   373,  1231,     0,     0,   -89, 
          0,     0,  1592,     0,     1,     1,     0,  -116,  1592,     0, 
        396,   101,     0,  1231,     0,   315,     0,     0,   113,   332, 
       1231,     0,     0,     0,   397,     0,     0,   319,  1592,   333, 
          0, 
    );
    protected static $yyRindex= array(          447,
          0,     0,   359,     0,     0,  -136,     0,   537,  1582,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    30,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   400,     0,    15,  -103, 
        337,  -103,     0,     0,     0,     0,     0,   338,     0,     0, 
        338,     0,     0,     0,     0,     0,   402,     0,     0,     0, 
          3,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       -138,   340,     0,     0,  -138,     0,    18,     0,     0,     0, 
          0,     0,   372,     0,   341,   -16,     0,     0,     0,     0, 
          0,     0,     0,     0,   -37,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   342,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   -46,     0, 
          0,     0,   226,     0,     0,     0,     0,   471,   824,   375, 
        847,   883,   892,   919,     0,    70,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   344,     0,     0, 
       -230,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   420,     0,     0,     0,  -110,     0,     6, 
          0,     0,   439,     0,     0,     0,    98,     0,   342,     0, 
          0,   431,     0,     0,     0,     0,     0,     0,     0,   375, 
          0,     0,   928,   955,   982,  1071,  1175,  1306,     0,  1333, 
       1360,  1369,  1396,  1405,  1443,     0,     0,     0,     0,     0, 
          0,   450,     0,     0,   434,     0,     0,     0,  -138,     0, 
          0,     0,     0,   401,   -10,   143,     0,     0,     0,   439, 
          0,     0,     0,     0,     0,     0,    70,     0,     0,     0, 
          0,     0,   455,   450,     0,     0,     0,     0,     0,   450, 
        108,     0,     0,   226,     0,    70,   418,     0,     0,     0, 
          0,   431,     0,     0,     0,     0,     0,     0,   439,  1466, 
          0,    50,    23,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   439,     0,     0,     0,  1626,     0,  1555,    43, 
          0,     0,     0,   476,     0,  1738,     0,     0,     0,     0, 
          0,     0,    23,     0,     0,    23,     0,     0,     0,     0, 
          0,     0,    70,   439,     0,     0,     0,     0,     0,    70, 
          0,     0,   342,     0,     0,     0,     0,     0,   342,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   342,     0, 
          0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,  2006,     0,   511,     0,     0,   477,   515, 
       1715,     0,   481,   473,   -31,     0,     0,     0,     0,   -42, 
        -75,     0,     0,     0,   102,   398,     0,     0,     0,  1957, 
        234,   292,     0,  -130,  -191,     0,  -282,  -148,     0,     0, 
          0,  -160,   239,     0,   -72,     0,     0,     0,     0,   329, 
          0,     0,     0,     0,     0,     0,     0,     0,   229,     0, 
        221,     0,     0,     0,     0,     0,     0,  -215,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,  -127,     0, 
          0,   294,   469,     0,   518,     0, 
    );
    protected static $yyTable = array(115,
        167,   194,   168,   115,   115,   115,   115,   115,   150,   115, 
        267,   291,   183,    14,    35,    78,    68,   208,    36,    22, 
        115,   115,   115,   115,   115,   115,   169,    76,    54,   128, 
        169,   169,   169,   169,   169,   148,   169,    75,   248,    46, 
        345,   288,    38,   346,    14,     1,   175,   169,   169,   169, 
        169,   169,   169,    14,   177,   115,   177,   179,   177,   342, 
        301,   184,   177,   175,   175,   176,   164,   178,   135,   246, 
         45,   174,   295,   177,    24,   148,   177,    24,   299,    28, 
        169,    67,   169,    28,    28,    28,    28,    28,   115,    28, 
         51,    87,   184,    51,   188,    27,    28,    29,   175,    24, 
         28,    28,    28,    28,    28,    28,   165,   119,    38,   126, 
        165,   165,   165,   165,   165,   169,   165,   350,   246,   304, 
        305,   186,     5,   343,   355,   184,   148,   165,   165,   165, 
        165,   165,   165,    28,   166,    28,   297,   177,   166,   166, 
        166,   166,   166,     9,   166,    67,   180,   265,    52,   186, 
         25,    52,    26,   239,    32,   166,   166,   166,   166,   166, 
        166,    43,   165,   186,   186,   186,    52,   120,    28,    44, 
         12,    13,    14,    77,    16,    17,    18,   121,    47,   172, 
         49,   186,   356,   172,   172,   172,   172,   172,   360,   172, 
        166,   186,    53,    59,   148,   165,   357,   358,   300,    63, 
        172,   172,   172,   172,   172,   172,   157,    22,   370,   186, 
         65,   155,   153,    14,   154,    66,   156,    67,    70,   186, 
        273,    69,   126,   166,    83,     9,    72,   266,   173,   167, 
        152,   168,   158,   157,   333,   172,    37,   209,   155,   153, 
        187,   154,   125,   156,   204,   127,    12,    13,    14,    77, 
         16,    17,    18,   138,   182,   157,   167,   152,   168,   158, 
        155,   153,   241,   154,   185,   156,   202,   203,   172,    28, 
        148,   205,   206,   207,   177,   233,   148,   341,   167,   152, 
        168,   158,   157,   234,    28,   237,   236,   155,   153,   188, 
        154,   242,   156,    14,   245,   164,   148,   193,   193,   193, 
        193,   193,   193,   193,   247,   167,   152,   168,   158,   292, 
        157,   250,   253,   257,   258,   155,   153,   272,   154,   195, 
        156,   276,   164,   279,   177,   177,   115,   151,   280,   188, 
        188,   188,   249,   167,   152,   168,   158,   193,   282,   284, 
        170,   169,   165,   166,   164,   287,   289,   193,   293,   188, 
         28,   171,   172,   169,   177,   294,   296,   298,   302,   188, 
        310,   314,   115,   115,   115,   115,   115,   115,   115,   115, 
        115,   164,    14,   115,   115,    12,    13,    14,    77,    16, 
         17,    18,   320,   318,   312,   323,   324,   316,   325,   169, 
        169,   169,   169,   169,   169,   169,   169,   169,   169,   164, 
        169,   169,   157,   326,   305,   334,    28,   155,   153,   304, 
        154,    42,   156,   336,   337,    40,    12,    13,    14,    15, 
         16,    17,    18,   259,   340,   167,   152,   168,   158,   338, 
         40,   347,   348,   165,   352,   349,   361,   368,   353,   364, 
        362,   369,    28,    28,    28,    28,    28,    28,    28,    28, 
         28,    28,   365,    28,    28,   363,   366,   371,    11,    26, 
         24,   166,   367,   180,    37,    36,    75,   173,    77,   165, 
        165,   165,   165,   165,   165,   165,   165,   165,    51,   173, 
        165,   165,    12,    13,    14,    77,    16,    17,    18,   173, 
         61,   164,    46,   113,    40,    63,    40,   166,   166,   166, 
        166,   166,   166,   166,   166,   166,   172,   159,   166,   166, 
        114,   159,   159,   159,   159,   159,    97,   159,    23,    52, 
         20,   243,    51,    64,   189,   319,   268,   331,   159,   159, 
        251,   159,   322,   159,   275,    74,     0,   332,   256,    30, 
          0,     0,   172,   172,   172,   172,   172,   172,   172,   172, 
        172,     0,     0,   172,   172,     0,     0,     0,     0,     0, 
          0,     0,     0,   159,     0,     0,     0,     0,     0,   170, 
        169,   165,   166,   159,   160,   161,   162,   163,   281,     0, 
        171,   172,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   170,   169,   165,   166, 
        159,   160,   161,   162,   163,     0,     0,   171,   172,     0, 
        311,     0,     0,     0,     0,     0,     0,   317,   170,   169, 
        165,   166,   159,   160,   161,   162,   163,     0,     0,   171, 
        172,   327,     0,     0,     0,     0,     0,     0,     5,     5, 
          5,     5,     5,     5,     5,   170,   169,   165,   166,   159, 
        160,   161,   162,   163,     0,     0,   171,   172,     5,     5, 
          5,     0,   351,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   170,   169,   165,   166,   159,   160,   161, 
        162,   163,     0,     0,   171,   172,   157,     0,     0,     0, 
        274,   155,   153,     0,   154,     0,   156,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   167, 
        152,   168,   158,   157,     0,     0,     0,   283,   155,   153, 
          0,   154,     0,   156,     0,     0,     2,     2,     2,     2, 
          2,     2,     2,     0,     0,   157,   167,   152,   168,   158, 
        155,   153,     0,   154,     0,   156,     2,     2,     2,     0, 
          2,     0,     0,     0,     0,     0,     0,     0,   167,   152, 
        168,   158,     0,     0,     0,   170,   169,   165,   166,   159, 
        160,   161,   162,   163,   157,   164,   171,   172,   286,   155, 
        153,     0,   154,     0,   156,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   167,   152,   168, 
        158,     0,   164,   157,     0,     0,     0,   335,   155,   153, 
          0,   154,     0,   156,     0,     0,     7,     7,     7,     7, 
          7,     7,     7,     0,   164,   157,   167,   152,   168,   158, 
        155,   153,     0,   154,   159,   156,     7,     7,     7,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   167,   152, 
        168,   158,     0,     0,     0,     0,     0,     0,     0,     0, 
        160,     0,     0,   164,   160,   160,   160,   160,   160,     0, 
        160,     0,     0,     0,   159,   159,   159,   159,   159,     0, 
          0,   160,   160,   157,   160,     0,   160,   157,   157,   157, 
        157,   157,   164,   157,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   157,   157,     0,   157,     0,   157, 
          0,     0,     0,     0,   164,     0,   160,     0,     0,   158, 
          0,     0,     0,   158,   158,   158,   158,   158,   161,   158, 
          0,     0,   161,   161,   161,   161,   161,     0,   161,   157, 
        158,   158,     0,   158,     0,   158,     0,     0,     0,   161, 
        161,     0,   161,     0,   161,   162,     0,     0,     0,   162, 
        162,   162,   162,   162,   139,   162,     0,     0,   139,   139, 
        139,   139,   139,     0,   139,   158,   162,   162,     0,   162, 
          0,   162,     0,     0,   161,   139,   139,     0,   139,     0, 
        139,   151,     0,     0,     0,   151,   151,   151,   151,   151, 
          0,   151,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   162,   151,   151,     0,   151,     0,   151,   152,     0, 
        139,     0,   152,   152,   152,   152,   152,     0,   152,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   152, 
        152,     0,   152,     0,   152,     0,     0,   151,     0,   170, 
        169,   165,   166,   159,   160,   161,   162,   163,     0,     0, 
        171,   172,   285,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   152,     0,   170,   169,   165,   166, 
        159,   160,   161,   162,   163,     0,     0,   171,   172,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   170,   169, 
        165,   166,   159,   160,   161,   162,   163,   153,     0,   171, 
        172,   153,   153,   153,   153,   153,     0,   153,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   153,   153, 
          0,   153,     0,   153,     0,     0,     0,   170,   169,   165, 
        166,   159,   160,   161,   162,   163,     0,     0,   171,   172, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   153,     0,     0,   170,   169,   165,   166, 
        159,   160,   161,   162,   163,     0,     0,   171,   172,     0, 
          0,     0,     0,     0,     0,     0,     0,   160,   170,   169, 
        165,   166,   159,   160,   161,   162,   163,     0,     0,   171, 
        172,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        157,   154,     0,     0,     0,   154,   154,   154,   154,   154, 
          0,   154,     0,     0,     0,     0,     0,   160,   160,   160, 
        160,   160,   154,   154,     0,   154,     0,   154,     0,     0, 
          0,     0,     0,     0,     0,     0,   158,     0,     0,     0, 
        157,   157,   157,   157,   157,   161,     0,     0,     0,     0, 
          0,     0,     0,    91,     0,     0,     0,   154,     0,     0, 
        109,     0,     0,    88,     0,    89,     0,     0,     0,     0, 
          0,     0,   162,     0,     0,     0,   158,   158,   158,   158, 
        158,   139,     0,     0,     0,   161,   161,   161,   161,   161, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   151,     0, 
          0,    90,   162,   162,   162,   162,   162,     0,     0,     0, 
          0,   139,   139,   139,   139,   139,     0,     0,     0,     0, 
          0,     0,   155,     0,     0,   152,   155,   155,   155,   155, 
        155,     0,   155,   108,     0,     0,    92,     0,   151,   151, 
        151,   151,   151,   155,   155,     0,   155,     0,   155,   140, 
          0,     0,     0,   140,   140,   140,   140,   140,     0,   140, 
          0,     0,     0,     0,     0,   152,   152,   152,   152,   152, 
        140,   140,     0,   140,     0,   140,   141,     0,   155,     0, 
        141,   141,   141,   141,   141,   142,   141,     0,     0,   142, 
        142,   142,   142,   142,     0,   142,     0,   141,   141,     0, 
        141,     0,   141,     0,     0,   140,   142,   142,     0,   142, 
          0,   142,   143,     0,   153,     0,   143,   143,   143,   143, 
        143,   144,   143,     0,     0,   144,   144,   144,   144,   144, 
          0,   144,   141,   143,   143,     0,   143,     0,   143,     0, 
          0,   142,   144,   144,     0,   144,     0,   144,     0,     0, 
          0,     0,     0,     0,   153,   153,   153,   153,   153,   156, 
          0,     0,     0,   156,   156,   156,   156,   156,   143,   156, 
         95,    96,    97,     0,     0,     0,     0,   144,     0,     0, 
        156,   156,   138,   156,     0,   156,   138,   138,   138,   138, 
        138,     0,   138,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   138,   138,     0,   138,     0,   138,     0, 
          0,     0,     0,     0,     0,   156,     0,     0,   154,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   138,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         98,    99,   100,   101,     0,     0,   102,     0,   154,   154, 
        154,   154,   154,     0,     0,     0,     0,   105,     0,     0, 
        103,   104,   105,   106,   105,     0,     0,   105,     0,   105, 
        107,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    14,     0,    14,    91,    14,     0,     0,     0,     0, 
          0,   109,    93,    94,    88,     0,    89,    91,     0,     0, 
         14,    14,     0,    14,   109,   105,     0,    88,     0,    89, 
          0,     0,     0,     0,     0,     0,     0,     0,   109,     0, 
          0,     0,     0,     0,     0,   109,     0,     0,   109,   155, 
        109,     0,    14,     0,     0,     0,     0,     0,     0,   105, 
        105,     0,    90,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    90,   140,     0,     0,     0, 
          0,     0,     0,     0,    14,     0,     0,     0,     0,   155, 
        155,   155,   155,   155,     0,     0,   109,    92,     0,     0, 
          0,     0,     0,   141,     0,     0,     0,     0,     0,     0, 
         92,     0,   142,     0,     0,     0,   140,   140,   140,   140, 
        140,     0,     0,     0,     0,     0,     0,    40,    41,    42, 
        109,   109,     0,     0,     0,     0,     0,     0,     0,   143, 
         55,    58,     0,   141,   141,   141,   141,   141,   144,     0, 
        100,     0,   142,   142,   142,   142,   142,   100,     0,     0, 
        100,    55,   100,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   122,     0,     0,     0,     0,     0,   143, 
        143,   143,   143,   143,     0,     0,   156,     0,   144,   144, 
        144,   144,   144,     0,   105,   105,   105,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   100,   138, 
          0,     0,     0,     0,   105,   105,   105,   105,   105,   105, 
        105,    14,     0,     0,     0,     0,   156,   156,   156,   156, 
        156,    95,    96,    97,   201,     0,     0,     0,     0,     0, 
          0,     0,   100,   100,    95,    96,    97,     0,     0,   138, 
        138,   138,   138,   138,   105,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   105,   109,   109,   109,     0,     0, 
          0,    14,    14,     0,   105,   105,   105,   105,     0,   105, 
        105,     0,     0,     0,     0,   109,   109,   109,   109,   109, 
        109,   109,     0,     0,   105,   105,   105,   105,     0,     0, 
          0,    14,     0,     0,   105,   105,     0,     0,     0,     0, 
          0,    98,    99,   100,   101,     0,     0,   102,     0,     0, 
          0,     0,     0,     0,    98,   109,   260,     0,     0,     0, 
        102,   103,   104,   105,   106,   109,   105,   105,     0,     0, 
          0,   107,     0,     0,     0,   109,   109,   109,   109,     0, 
          0,   109,     0,     0,     0,     0,     0,     0,   260,     0, 
          0,     0,     0,     0,   260,   109,   109,   109,   109,     0, 
          0,    14,     0,    93,    94,   109,   109,   100,   100,   100, 
          0,     0,     0,     0,     0,     0,    93,    94,   260,    10, 
          0,     0,     0,     0,     0,     0,     0,   100,   100,   100, 
        100,   100,   100,   100,     0,     0,     0,   109,   109,    31, 
          0,     0,     0,     0,     0,     0,     0,     0,    39,    39, 
         39,     0,     0,     0,   128,   129,     0,   131,   132,   133, 
        134,    39,    39,     0,    39,     0,     0,   100,     0,     0, 
          0,     0,   359,     0,    39,   149,     0,   100,     0,     0, 
         73,     0,    39,     0,     0,    39,     0,   100,   100,   100, 
        100,     0,     0,   100,    39,     0,   190,     0,     0,     0, 
          0,     0,     0,   198,     0,   200,     0,   100,   100,   100, 
        100,     0,     0,     0,     0,     0,     0,   100,   213,   214, 
        215,   216,   217,   218,   219,   220,   221,   222,   223,   224, 
        225,     0,     0,   226,   227,   228,   229,   230,   231,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   100, 
        100,     0,     0,   240,     0,    39,     0,     0,     0,   190, 
          0,     0,     0,     0,     0,     0,     0,     0,   190,   252, 
          0,   254,   255,     0,     0,     0,   190,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   271,     0,     0,     0,   190,     0,     0, 
        277,     0,     0,     0,     0,     0,   190,     0,     0,     0, 
          0,     0,     0,     0,     0,   290,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    39,   190,     0, 
        313,     0,     0,     0,     0,   190,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   190, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    39, 
          0,     0,     0,     0,     0,    39,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        190,     0,     0,     0,     0,     0,     0,     0,     0,    39, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    39,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    39, 
    );
    protected static $yyCheck = array(37,
         60,    91,    62,    41,    42,    43,    44,    45,    91,    47, 
        123,    42,   260,    60,   125,   125,    59,   148,    42,   123, 
         58,    59,    60,    61,    62,    63,    37,    70,    63,   260, 
         41,    42,    43,    44,    45,   108,    47,    69,   199,    60, 
        323,   257,    59,   326,    91,   303,    41,    58,    59,    60, 
         61,    62,    63,    91,    40,    93,    42,    37,    44,    59, 
        276,    59,    42,    43,    59,    45,   126,    47,    40,   197, 
         91,    40,   264,    59,    46,   148,    62,    46,   270,    37, 
         91,    59,    93,    41,    42,    43,    44,    45,   126,    47, 
         41,   125,   340,    44,   126,   300,   301,   302,    93,    46, 
         58,    59,    60,    61,    62,    63,    37,   260,   125,   340, 
         41,    42,    43,    44,    45,   126,    47,   333,   246,   344, 
        345,   260,   304,   123,   340,   123,   199,    58,    59,    60, 
         61,    62,    63,    91,    37,    93,   267,   123,    41,    42, 
         43,    44,    45,   260,    47,   123,   126,   260,    41,   260, 
         59,    44,   260,   185,    46,    58,    59,    60,    61,    62, 
         63,    46,    93,   300,   301,   302,    59,   320,   126,    59, 
        280,   281,   282,   283,   284,   285,   286,   330,   310,    37, 
        310,   320,   343,    41,    42,    43,    44,    45,   349,    47, 
         93,   330,    93,   311,   267,   126,   345,   346,   274,   123, 
         58,    59,    60,    61,    62,    63,    37,   311,   369,   320, 
        310,    42,    43,   260,    45,    62,    47,    44,    44,   330, 
        125,   123,    59,   126,   260,   260,   123,   340,    59,    60, 
         61,    62,    63,    37,   310,    93,   260,    41,    42,    43, 
         40,    45,   125,    47,   143,    44,   280,   281,   282,   283, 
        284,   285,   286,   123,   340,    37,    60,    61,    62,    63, 
         42,    43,    44,    45,   123,    47,    40,    40,   126,    44, 
        343,    40,    40,   125,   260,    40,   349,   320,    60,    61, 
         62,    63,    37,   260,    59,    61,    40,    42,    43,   260, 
         45,    93,    47,   340,   260,   126,   369,   280,   281,   282, 
        283,   284,   285,   286,    59,    60,    61,    62,    63,   340, 
         37,    40,   361,   340,   260,    42,    43,    59,    45,   409, 
         47,    41,   126,    40,   310,   311,   364,   410,   125,   300, 
        301,   302,    59,    60,    61,    62,    63,   320,    59,    40, 
        400,   401,   402,   403,   126,    93,    40,   330,    41,   320, 
        125,   411,   412,   364,   340,    44,    40,    59,    93,   330, 
         41,   340,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   126,   410,   411,   412,   280,   281,   282,   283,   284, 
        285,   286,   321,   340,   283,    41,    41,   286,   125,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   409,   126, 
        411,   412,    37,    41,   345,    59,   364,    42,    43,   344, 
         45,    40,    47,    61,    41,    44,   280,   281,   282,   283, 
        284,   285,   286,    58,    41,    60,    61,    62,    63,   371, 
         59,    41,    40,   364,    62,   123,    41,    41,   337,   125, 
        340,   123,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   409,   340,   411,   412,   354,   125,   125,    59,   123, 
        123,   364,   361,    62,   125,   125,   125,    93,   125,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    59,    41, 
        411,   412,   280,   281,   282,   283,   284,   285,   286,    59, 
         41,   126,    59,    93,   123,    41,   125,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   364,    37,   411,   412, 
         93,    41,    42,    43,    44,    45,    41,    47,     8,    43, 
          6,   193,    42,    51,   127,   292,   235,   307,    58,    59, 
        202,    61,   294,    63,   241,    67,    -1,   309,   210,    22, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   250,    -1, 
        411,   412,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        282,    -1,    -1,    -1,    -1,    -1,    -1,   289,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,   303,    -1,    -1,    -1,    -1,    -1,    -1,   280,   281, 
        282,   283,   284,   285,   286,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,   300,   301, 
        302,    -1,   334,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    37,    -1,    -1,    -1, 
         41,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    37,    -1,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,   280,   281,   282,   283, 
        284,   285,   286,    -1,    -1,    37,    60,    61,    62,    63, 
         42,    43,    -1,    45,    -1,    47,   300,   301,   302,    -1, 
        304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61, 
         62,    63,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    37,   126,   411,   412,    41,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62, 
         63,    -1,   126,    37,    -1,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,   280,   281,   282,   283, 
        284,   285,   286,    -1,   126,    37,    60,    61,    62,    63, 
         42,    43,    -1,    45,   364,    47,   300,   301,   302,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         37,    -1,    -1,   126,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    58,    59,    37,    61,    -1,    63,    41,    42,    43, 
         44,    45,   126,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,    -1,   126,    -1,    93,    -1,    -1,    37, 
         -1,    -1,    -1,    41,    42,    43,    44,    45,    37,    47, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,    93, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    37,    -1,    -1,    -1,    41, 
         42,    43,    44,    45,    37,    47,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    93,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    93,    58,    59,    -1,    61,    -1, 
         63,    37,    -1,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    58,    59,    -1,    61,    -1,    63,    37,    -1, 
         93,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    93,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    93,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    37,    -1,   411, 
        412,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        364,    37,    -1,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   364,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,   364,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    33,    -1,    -1,    -1,    93,    -1,    -1, 
         40,    -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1, 
         -1,    -1,   364,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,   364,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,    -1, 
         -1,    91,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
         -1,    -1,    37,    -1,    -1,   364,    41,    42,    43,    44, 
         45,    -1,    47,   123,    -1,    -1,   126,    -1,   404,   405, 
        406,   407,   408,    58,    59,    -1,    61,    -1,    63,    37, 
         -1,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         58,    59,    -1,    61,    -1,    63,    37,    -1,    93,    -1, 
         41,    42,    43,    44,    45,    37,    47,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    93,    58,    59,    -1,    61, 
         -1,    63,    37,    -1,   364,    -1,    41,    42,    43,    44, 
         45,    37,    47,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    93,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    93,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    37, 
         -1,    -1,    -1,    41,    42,    43,    44,    45,    93,    47, 
        260,   261,   262,    -1,    -1,    -1,    -1,    93,    -1,    -1, 
         58,    59,    37,    61,    -1,    63,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,   364,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        340,   341,   342,   343,    -1,    -1,   346,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,    33,    -1,    -1, 
        360,   361,   362,   363,    40,    -1,    -1,    43,    -1,    45, 
        370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    40,    -1,    42,    33,    44,    -1,    -1,    -1,    -1, 
         -1,    40,   402,   403,    43,    -1,    45,    33,    -1,    -1, 
         59,    60,    -1,    62,    40,    91,    -1,    43,    -1,    45, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1, 
         -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,   364, 
         45,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,   125, 
        126,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    91,   364,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    91,   126,    -1,    -1, 
         -1,    -1,    -1,   364,    -1,    -1,    -1,    -1,    -1,    -1, 
        126,    -1,   364,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,    -1,    -1,    33,    34,    35, 
        125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364, 
         46,    47,    -1,   404,   405,   406,   407,   408,   364,    -1, 
         33,    -1,   404,   405,   406,   407,   408,    40,    -1,    -1, 
         43,    67,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   364,    -1,   404,   405, 
        406,   407,   408,    -1,   260,   261,   262,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,   364, 
         -1,    -1,    -1,    -1,   280,   281,   282,   283,   284,   285, 
        286,   260,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,   260,   261,   262,   140,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   125,   126,   260,   261,   262,    -1,    -1,   404, 
        405,   406,   407,   408,   320,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   330,   260,   261,   262,    -1,    -1, 
         -1,   310,   311,    -1,   340,   341,   342,   343,    -1,   345, 
        346,    -1,    -1,    -1,    -1,   280,   281,   282,   283,   284, 
        285,   286,    -1,    -1,   360,   361,   362,   363,    -1,    -1, 
         -1,   340,    -1,    -1,   370,   371,    -1,    -1,    -1,    -1, 
         -1,   340,   341,   342,   343,    -1,    -1,   346,    -1,    -1, 
         -1,    -1,    -1,    -1,   340,   320,   232,    -1,    -1,    -1, 
        346,   360,   361,   362,   363,   330,   402,   403,    -1,    -1, 
         -1,   370,    -1,    -1,    -1,   340,   341,   342,   343,    -1, 
         -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,   264,    -1, 
         -1,    -1,    -1,    -1,   270,   360,   361,   362,   363,    -1, 
         -1,   410,    -1,   402,   403,   370,   371,   260,   261,   262, 
         -1,    -1,    -1,    -1,    -1,    -1,   402,   403,   294,     4, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,   281,   282, 
        283,   284,   285,   286,    -1,    -1,    -1,   402,   403,    24, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    34, 
         35,    -1,    -1,    -1,    88,    89,    -1,    91,    92,    93, 
         94,    46,    47,    -1,    49,    -1,    -1,   320,    -1,    -1, 
         -1,    -1,   348,    -1,    59,   109,    -1,   330,    -1,    -1, 
         65,    -1,    67,    -1,    -1,    70,    -1,   340,   341,   342, 
        343,    -1,    -1,   346,    79,    -1,   130,    -1,    -1,    -1, 
         -1,    -1,    -1,   137,    -1,   139,    -1,   360,   361,   362, 
        363,    -1,    -1,    -1,    -1,    -1,    -1,   370,   152,   153, 
        154,   155,   156,   157,   158,   159,   160,   161,   162,   163, 
        164,    -1,    -1,   167,   168,   169,   170,   171,   172,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402, 
        403,    -1,    -1,   187,    -1,   140,    -1,    -1,    -1,   193, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   202,   203, 
         -1,   205,   206,    -1,    -1,    -1,   210,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   237,    -1,    -1,    -1,   241,    -1,    -1, 
        244,    -1,    -1,    -1,    -1,    -1,   250,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   259,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   232,   282,    -1, 
        284,    -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   303, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264, 
         -1,    -1,    -1,    -1,    -1,   270,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        334,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   320,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   348, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 'T_FINAL', 
      'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 'T_PACKAGE', 
      'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 'T_IMPLEMENTS', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 'T_THROWS', NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 
      'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_AS', 
      'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 
      'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 'T_OBJECT_OPERATOR', 
      'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 111 "grammar/xp.jay"
    {
        $yyVal= new ParseTree();
        $yyVal->package= $yyVals[-2+$yyTop];
        $yyVal->imports= $yyVals[-1+$yyTop];
        $yyVal->declaration= $yyVals[0+$yyTop];
      } break;

    case 3:  #line 122 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 122 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 133 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 134 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 138 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 138 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 13:  #line 146 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 15:  #line 151 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 16:  #line 157 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 157 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 18:  #line 165 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 19:  #line 165 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 173 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 21:  #line 173 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 22:  #line 183 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 184 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 188 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 25:  #line 189 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 193 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 194 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 198 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 199 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 30:  #line 203 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 31:  #line 204 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 208 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 33:  #line 209 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 210 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[0+$yyTop]); } break;

    case 35:  #line 214 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 215 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 216 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 220 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 39:  #line 221 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 40:  #line 225 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 41:  #line 225 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 42:  #line 228 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 228 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 238 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
        $yyVal->modifiers= $yyVals[-4+$yyTop];
        $yyVal->type= $yyVals[-3+$yyTop];
        $yyVal->name= $yyVals[-2+$yyTop];
        $yyVal->initialization= $yyVals[-1+$yyTop];
      } break;

    case 45:  #line 244 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
        $yyVal->modifiers= $yyVals[-5+$yyTop];
        $yyVal->name= $yyVals[-3+$yyTop];
        $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
        $yyVal->get= $gs['get'];
        $yyVal->set= $gs['set'];
      } break;

    case 46:  #line 254 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 48:  #line 259 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 49:  #line 260 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 50:  #line 261 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 51:  #line 265 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 266 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 272 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 54:  #line 272 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
        $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
      } break;

    case 55:  #line 281 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 56:  #line 281 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
      } break;

    case 57:  #line 288 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 58:  #line 288 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 59:  #line 299 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 60:  #line 300 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 61:  #line 304 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 62:  #line 305 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 63:  #line 309 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 64:  #line 310 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 65:  #line 314 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 66:  #line 315 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 67:  #line 319 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 68:  #line 320 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 75:  #line 337 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 77:  #line 342 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 78:  #line 343 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 79:  #line 347 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 80:  #line 347 "grammar/xp.jay"
    { 
        $yyVal->expression= $yyVals[-1+$yyTop];
      } break;

    case 81:  #line 350 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 82:  #line 350 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
      } break;

    case 83:  #line 355 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 84:  #line 355 "grammar/xp.jay"
    {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
        $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
        $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 85:  #line 361 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 86:  #line 361 "grammar/xp.jay"
    {
        $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
        /* $1->assignment= $6; XX FIXME XX*/
        $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 87:  #line 366 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 88:  #line 366 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
        $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 89:  #line 370 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 90:  #line 370 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
      } break;

    case 91:  #line 374 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 92:  #line 374 "grammar/xp.jay"
    { 
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
        $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-4+$yyTop]; 
      } break;

    case 93:  #line 379 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 94:  #line 379 "grammar/xp.jay"
    { /* Throw statement */ 
        $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
      } break;

    case 96:  #line 386 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop], $yyVals[0+$yyTop]); } break;

    case 97:  #line 387 "grammar/xp.jay"
    { $yyVal= array(NULL, $yyVals[0+$yyTop]); } break;

    case 98:  #line 391 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 99:  #line 392 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 100:  #line 396 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 101:  #line 397 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 102:  #line 397 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 103:  #line 402 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 104:  #line 403 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 105:  #line 407 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 106:  #line 408 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 107:  #line 412 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 108:  #line 412 "grammar/xp.jay"
    {
        $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
        $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
        $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
      } break;

    case 109:  #line 420 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 111:  #line 425 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 112:  #line 425 "grammar/xp.jay"
    {
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      } break;

    case 113:  #line 433 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 115:  #line 438 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 116:  #line 439 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 117:  #line 439 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 118:  #line 443 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 119:  #line 443 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= new TypeName($yyVals[-4+$yyTop]);
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 120:  #line 448 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 121:  #line 449 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 122:  #line 450 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 123:  #line 450 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 124:  #line 453 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InstanceCreationNode()); } break;

    case 125:  #line 453 "grammar/xp.jay"
    { 
      $yyVals[-7+$yyTop]->type= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-7+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 126:  #line 458 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 127:  #line 458 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 128:  #line 463 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 129:  #line 463 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 130:  #line 469 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 131:  #line 469 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 132:  #line 475 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 133:  #line 476 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); } break;

    case 134:  #line 477 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); } break;

    case 135:  #line 478 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); } break;

    case 136:  #line 479 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); } break;

    case 137:  #line 480 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); $yyVal->postfix= TRUE; } break;

    case 138:  #line 481 "grammar/xp.jay"
    { /* XXX Ternary */ } break;

    case 139:  #line 485 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 140:  #line 486 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 141:  #line 487 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 142:  #line 488 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 143:  #line 489 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 144:  #line 490 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 145:  #line 494 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 146:  #line 495 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 147:  #line 496 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 148:  #line 497 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 149:  #line 498 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 150:  #line 499 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 151:  #line 503 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 152:  #line 504 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 153:  #line 505 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 154:  #line 506 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 155:  #line 507 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 156:  #line 508 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 157:  #line 512 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 158:  #line 513 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 159:  #line 514 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 160:  #line 515 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 161:  #line 516 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 162:  #line 517 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 163:  #line 521 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 164:  #line 522 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 165:  #line 527 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 167:  #line 532 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 168:  #line 532 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 169:  #line 535 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 170:  #line 539 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 171:  #line 539 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 172:  #line 543 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 173:  #line 547 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 175:  #line 552 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 176:  #line 553 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 177:  #line 559 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 178:  #line 560 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 179:  #line 561 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 180:  #line 565 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 181:  #line 566 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 183:  #line 571 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 184:  #line 575 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 185:  #line 576 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 186:  #line 582 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 187:  #line 583 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 188:  #line 587 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 189:  #line 588 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 190:  #line 592 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 191:  #line 593 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 192:  #line 594 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 193:  #line 595 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 194:  #line 596 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 195:  #line 597 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 196:  #line 598 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1624 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
