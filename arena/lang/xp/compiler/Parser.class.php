<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.InstanceOfNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.SwitchNode',
    'xp.compiler.ast.CaseNode',
    'xp.compiler.ast.DefaultNode',
    'xp.compiler.ast.BreakNode',
    'xp.compiler.ast.ContinueNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 60 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_MOD_EQUAL= 408;
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_INSTANCEOF= 312;
    const T_INC= 402;
    const T_DEC= 403;
    const T_SE= 401;
    const T_GE= 400;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_PROPERTY= 330;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_NEW= 346;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          9,     9,     9,     4,     4,    12,     3,    16,     3,    18, 
          3,    13,    13,    14,    14,    19,    19,    21,    21,    15, 
         15,    22,    22,    22,    17,    17,    17,    26,    26,    28, 
         27,    29,    27,    23,    23,    34,    34,    33,    33,    33, 
         32,    32,    37,    24,    40,    24,    42,    24,    10,    10, 
         43,    43,    45,    45,    45,    39,    39,    36,    36,    48, 
         48,    49,    49,    38,    38,    41,    41,    41,    41,    41, 
         41,    41,    41,    25,    25,    35,    35,    51,    50,    52, 
         50,    55,    50,    57,    50,    58,    50,    59,    50,    60, 
         50,    62,    50,    64,    50,    65,    50,    66,    50,    50, 
         50,    61,    61,    67,    67,    69,    68,    70,    68,    53, 
         53,    54,    71,    54,    63,    63,    72,    72,    76,    75, 
         73,    73,    77,    74,    56,    56,    78,    78,    46,    46, 
         79,    79,    80,    80,    80,    30,    83,    30,    84,    30, 
         85,    30,    86,    30,    30,    30,    30,    30,    30,    30, 
         30,    30,    30,    30,    81,    81,    92,    81,    81,    81, 
         81,    81,    81,    93,    93,    47,    47,    94,    87,    87, 
         87,    87,    87,    87,    88,    88,    88,    88,    88,    88, 
         89,    89,    89,    89,    89,    89,    90,    90,    90,    90, 
         90,    90,    91,    91,    82,    82,    95,    95,    97,    96, 
         96,    98,    96,    31,    31,    11,    11,    99,   100,   100, 
        101,   101,    20,    20,    44,    44,   102,   102,   103,   103, 
        103,   103,   103,   103,   103,   103, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     6, 
          1,     1,     3,     1,     3,     0,     9,     0,     9,     0, 
          8,     0,     2,     0,     2,     0,     2,     0,     3,     2, 
          0,     1,     1,     4,     3,     1,     0,     1,     3,     0, 
          3,     0,     6,     5,     6,     0,     1,     2,     4,     4, 
          0,     2,     0,     9,     0,     8,     0,    10,     4,     1, 
          1,     3,     2,     5,     5,     1,     3,     0,     1,     1, 
          3,     3,     3,     0,     2,     1,     1,     1,     1,     1, 
          1,     2,     3,     0,     1,     1,     2,     0,     4,     0, 
          7,     0,    10,     0,     8,     0,     6,     0,     7,     0, 
          8,     0,     6,     0,     3,     0,     3,     0,     4,     2, 
          1,     0,     1,     1,     2,     0,     5,     0,     4,     1, 
          3,     0,     0,     3,     2,     1,     1,     2,     0,     9, 
          0,     1,     0,     5,     0,     1,     1,     3,     0,     1, 
          5,     6,     1,     1,     4,     1,     0,     3,     0,     4, 
          0,     5,     0,     6,     3,     1,     1,     1,     1,     1, 
          5,     3,     3,     3,     1,     3,     0,     4,     3,     1, 
          1,     1,     1,     0,     1,     1,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     2,     2,     2,     2, 
          2,     2,     2,     2,     0,     1,     1,     2,     0,     4, 
          2,     0,     6,     1,     1,     1,     4,     3,     1,     3, 
          1,     3,     1,     3,     0,     1,     1,     2,     1,     1, 
          1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   229,   231,   230,   232,   234,   233,   235,   236, 
          1,     0,    60,   226,     0,     8,     0,     4,     0,     0, 
          0,     0,    16,    20,    18,   228,    15,     0,     0,     0, 
          0,     0,     0,     0,    12,     0,     0,     0,    59,    62, 
          0,     0,     0,     0,     0,    10,     0,     0,   167,     0, 
          0,     0,     0,     0,   173,   170,   172,   171,   147,   149, 
          0,     0,     0,     0,     0,     0,   146,   156,   157,   158, 
        159,   160,     0,     0,     0,     0,     0,     0,     0,    13, 
          0,     0,     0,     0,     0,     0,     0,   153,     0,     0, 
          0,   175,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   203,   204,     0,     0,     0,     0,     0,     0,     0, 
         64,    65,     0,     0,     0,   214,   221,   215,     0,     0, 
         23,     0,     0,     0,    27,    31,     0,     0,     0,   136, 
          0,   209,     0,   148,   206,     0,     0,     0,     0,   169, 
        155,   166,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   164,     0,     0,     0,     0,     0, 
        185,   186,   187,   188,   189,   190,     0,   177,     0,     0, 
        217,     0,    25,    31,     0,     0,     0,     0,   168,     0, 
          0,     0,   208,     0,     0,   150,     0,   144,     0,     0, 
        222,   218,   220,     0,   224,     0,    21,     0,    30,    32, 
         33,     0,     0,     0,     0,   138,     0,     0,   212,     0, 
          0,     0,   152,     0,    17,     0,     0,     0,     0,     0, 
          0,    19,    31,     0,   154,   210,     0,     0,     0,     0, 
         88,     0,   108,    92,    96,    98,    94,   104,   106,    90, 
        100,   111,     0,     0,    85,     0,    55,     0,     0,     0, 
          0,    31,    41,     0,     0,    39,     0,     0,   141,   145, 
          0,   102,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    34,   110,    87,     0,     0,     0,    53,    80,    76, 
         77,    78,    79,     0,    81,     0,     0,     0,     0,     0, 
        213,   142,     0,     0,     0,     0,     0,     0,   120,     0, 
          0,   105,   107,     0,     0,     0,     0,    69,     0,     0, 
         48,     0,    47,     0,     0,    82,     0,    57,     0,    44, 
         29,     0,    89,     0,   109,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    45, 
          0,    83,     0,    43,     0,     0,     0,   121,     0,     0, 
          0,     0,    73,    72,     0,     0,    71,    49,    50,     0, 
          0,   129,   133,   103,     0,   126,     0,     0,    97,     0, 
          0,     0,     0,    75,    66,     0,    56,     0,     0,     0, 
          0,   125,   132,   128,     0,    99,     0,   123,    91,   116, 
        118,     0,   113,     0,     0,    54,     0,     0,     0,     0, 
         95,     0,     0,     0,   101,   115,    67,    58,     0,     0, 
          0,   124,     0,     0,     0,   134,    93,     0,   119,     0, 
        117,     0,     0,   130, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    21,    73,     4,     7,     8,    11,    47,   218, 
        136,    42,    86,   143,   196,    44,   223,    43,    88,   145, 
        273,   219,   220,   221,   263,   224,   225,   240,   241,   264, 
        326,   308,   297,   334,   265,   327,   335,   376,   397,   295, 
        306,   363,    31,    23,    32,    75,   102,   328,   329,   266, 
        281,   290,   320,   409,   284,   149,   287,   285,   286,   291, 
        412,   314,   384,   288,   289,   283,   413,   414,   423,   424, 
        422,   385,   402,   386,   387,   400,   401,   150,   159,   209, 
         77,   154,    99,   100,   163,   151,    78,    79,    80,    81, 
         82,    93,   103,    83,   155,   156,   201,   247,   138,   139, 
        140,    24,    25, 
    );
    protected static $yySindex = array(         -230,
          0,     0,  -201,  -150,     0,   135,     0,  -201,    73,   100, 
        -94,   109,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   -25,     0,     0,   503,     0,  -150,     0,   159,  -150, 
        115,   173,     0,     0,     0,     0,     0,   -37,   180,   503, 
        109,  -150,  -150,  -150,     0,   176,   165,  2013,     0,     0, 
        174,   -63,   -62,   -63,   -37,     0,  2013,  2013,     0,  2013, 
       2013,  2013,  2013,   203,     0,     0,     0,     0,     0,     0, 
       2013,  2013,  -148,   573,   222,   223,     0,     0,     0,     0, 
          0,     0,   229,   -57,  -150,   -31,  -150,   158,   -31,     0, 
         -5,    -5,  2013,   438,   438,   438,   438,     0,    45,  -150, 
        573,     0,   161,   600,   -11,  2013,  2013,  2013,  2013,  2013, 
       2013,  2013,  2013,  2013,  2013,  -150,  2013,  2013,  2013,  2013, 
       2013,     0,     0,  2013,  2013,  2013,  2013,  2013,  2013,  2013, 
          0,     0,  2013,   -20,   139,     0,     0,     0,   231,   251, 
          0,  -150,   187,   252,     0,     0,   191,   643,   204,     0, 
       2013,     0,    56,     0,     0,    45,   151,   263,    45,     0, 
          0,     0,  -183,  1879,  1879,  1273,   260,  1879,  1879,  1879, 
       1879,  1879,  1879,  1879,     0,    -5,    -5,   438,   438,   438, 
          0,     0,     0,     0,     0,     0,  1273,     0,  -150,   248, 
          0,   -57,     0,     0,  -150,    65,    82,  2013,     0,   302, 
       2013,   314,     0,   267,  2013,     0,   316,     0,    45,  2013, 
          0,     0,     0,   230,     0,   238,     0,  -216,     0,     0, 
          0,     0,   237,   304,   320,     0,    45,   272,     0,   243, 
        327,  2013,     0,  1879,     0,  2597,   221,    29,  -185,   258, 
        348,     0,     0,    82,     0,     0,  2013,  2013,   258,   350, 
          0,   269,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   274,   670,     0,  2597,     0,   140,   354,    11, 
        340,     0,     0,  2013,   372,     0,   361,   278,     0,     0, 
       2013,     0,  2013,   364,   365,  2684,   368,   351,   352,   369, 
        373,     0,     0,     0,  -150,  -112,   140,     0,     0,     0, 
          0,     0,     0,   -71,     0,   384,  2013,   353,   345,   697, 
          0,     0,   366,  2597,   719,  2013,  2013,  2597,     0,    76, 
         86,     0,     0,  2013,  2013,   -38,   403,     0,   401,   412, 
          0,  2597,     0,   395,  -150,     0,   378,     0,  1273,     0, 
          0,   258,     0,   347,     0,   414,   839,   349,   518,   440, 
        114,   897,  1095,   150,   340,   170,  -150,   467,   399,     0, 
        468,     0,  -150,     0,  -284,  2013,  2684,     0,  2013,  2013, 
       2684,   402,     0,     0,  -150,    35,     0,     0,     0,   170, 
        485,     0,     0,     0,   182,     0,   184,   471,     0,  1122, 
       1150,   172,  -172,     0,     0,  2597,     0,    35,   170,   504, 
        427,     0,     0,     0,  2013,     0,  2684,     0,     0,     0, 
          0,   426,     0,  -172,   429,     0,    35,  -150,  2597,   511, 
          0,  2684,  2013,   498,     0,     0,     0,     0,   217,   433, 
       2684,     0,  1219,  2597,   521,     0,     0,  2597,     0,   436, 
          0,  2597,   441,     0, 
    );
    protected static $yyRindex= array(          175,
          0,     0,   607,     0,     0,    33,     0,  1135,   -28,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   -56,     0,     0,     0,     0,     0, 
          0,   474,     0,     0,     0,     0,     0,     0,    15,    28, 
          0,     0,     0,     0,     0,   509,     0,   530,     0,     0, 
         27,  -113,   449,  -113,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   264,     0,     0,     0,     0,     0,     0, 
        450,     0,     0,   533,     0,     0,     0,     0,     0,     0, 
          0,     0,   -12,     0,     0,   459,     0,     0,   459,     0, 
       1674,  1743,   490,  1285,  1316,  1339,  1424,     0,   406,     0, 
          0,     0,     0,     0,  -178,     0,     0,   531,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   -41,     0,     0,     0,     0,   525, 
          0,     0,     0,    42,     0,     0,     0,   -14,     0,     0, 
        549,     0,     0,     0,     0,   460,   551,     0,   406,     0, 
          0,     0,     0,  1164,  1756,   128,     0,  1842,  1854,  1929, 
       1941,  1977,  2004,  2049,     0,  1803,  1815,  1545,  1602,  1718, 
          0,     0,     0,     0,     0,     0,    43,     0,     0,     0, 
          0,     0,     0,     0,     0,  -214,   479,     0,     0,     0, 
        499,    81,     0,     0,   549,     0,   134,     0,   406,     0, 
          0,     0,     0,  -214,     0,   465,     0,     0,     0,     0, 
          0,     7,     0,   486,   -18,     0,   406,     0,     0,   572, 
          0,   549,     0,  2138,     0,   488,   -42,     0,     0,     8, 
          0,     0,     0,     0,     0,     0,   549,   489,   194,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,  -123,     0,     0,     0,     0, 
        558,     0,     0,     0,   -97,     0,     0,     0,     0,     0, 
        560,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   580,     0,   564,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,  -214,     0, 
          0,     0,     0,   488,     0,   565,     0,   488,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   597,     0, 
          0,     0,     0,     0,   580,     0,     0,     0,   529,     0, 
          0,     8,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   120,    47,     0,     0,     0,     0, 
          0,     0,   580,     0,     0,   565,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    47, 
          0,     0,     0,     0,  2477,     0,  2406,     0,     0,     0, 
          0,  2529,   514,     0,     0,   488,     0,     0,    47,     0, 
          0,     0,     0,     0,   549,     0,     0,     0,     0,     0, 
          0,     0,     0,   515,     0,     0,     0,     0,   488,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,  -105,     0,     0,     0,  -105,     0,     0, 
          0,   488,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   640,     0,     0,   594,   644, 
        228,     0,   619,   562,   -43,     0,     0,     0,     0,  -117, 
       -242,     0,     0,     0,  -102,   437,     0,     0,     0,  2365, 
         -8,   328,   385,     0,  -149,  -181,     0,  -337,  -283,     0, 
          0,     0,   648,   651,     0,   -72,   -40,   335,   380,  -262, 
          0,     0,   162,     0,     0,  -101,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   279,     0,     0,     0, 
          0,   307,     0,   310,     0,     0,     0,   502,     0,     0, 
          0,   -60,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   540,     0,     0,     0,     0,   505, 
          0,   676,     0, 
    );
    protected static $yyTable = array(10,
        216,    86,   216,   354,    45,   134,   279,    76,    14,    22, 
        332,    14,    14,    14,    14,    14,    14,    14,    14,    84, 
        216,   336,    37,   319,   193,    39,   137,    35,   176,    14, 
         14,    14,    14,    14,    14,   167,   119,    51,    51,    51, 
         38,   120,   398,   237,   137,   225,    42,   299,    14,   200, 
         40,    28,   302,   300,   124,   301,   125,   303,    63,   382, 
        383,   417,    14,   216,    14,    40,    28,   216,   216,   216, 
        216,   216,     1,   216,   269,   137,   207,   215,   137,   135, 
         51,   151,    51,   178,   216,   216,   178,   216,   216,   216, 
        153,   158,   188,   395,    14,   157,    14,    14,   206,   364, 
        223,   304,     5,   231,   319,    74,    38,    63,   319,     9, 
        137,    51,   176,   238,   416,   225,   294,   211,    27,   216, 
        121,   211,   211,   211,   211,   211,   211,   211,   228,    40, 
        250,    40,    28,   428,   270,   152,   305,    51,   211,   211, 
        211,   211,   211,   211,   319,   277,   278,   330,   233,   216, 
        214,   216,   216,   361,   271,    12,   208,   396,    28,   319, 
         51,   151,   225,    51,   223,    29,   245,   178,   319,    74, 
        143,   211,    30,   211,   143,   143,   143,   143,   143,   143, 
        143,   381,   359,   137,   211,   140,   140,   135,     9,   217, 
         51,   143,   143,   143,   143,   143,   143,    22,    84,   275, 
        410,   411,     9,   227,    38,   211,   211,    40,   313,   239, 
         84,   344,    51,   135,   346,   348,    41,    14,   216,    48, 
        140,    55,    46,    56,   143,    12,   143,   331,   309,   190, 
         28,    14,   225,    84,    28,    28,    28,    28,    28,    28, 
         28,   204,    98,   227,   227,   227,    85,    87,    27,    86, 
         86,    28,    28,    28,    28,    28,    28,   394,   143,   143, 
        267,   105,   131,   132,   388,     2,    27,    84,    84,    52, 
         53,    54,   133,   227,    33,    34,    35,    14,   216,   142, 
        146,    14,    14,    14,    28,   160,    28,   225,   162,   189, 
        135,    14,   191,   415,   192,   195,   199,    14,   216,   135, 
        165,   355,   205,   420,   165,   165,   165,   165,   165,   194, 
        165,    14,   141,   197,   144,   202,   430,   210,    28,    28, 
         12,   165,   165,   165,   165,   165,   165,   225,   225,   225, 
        135,   439,   225,   225,   225,   441,   216,   216,   216,   443, 
        212,   222,   227,   175,    13,    14,    15,   216,    17,    18, 
         19,    20,   135,   229,   235,   232,   165,   225,   135,   230, 
        236,   242,   243,   244,   246,   248,   216,   249,   268,   144, 
         51,    14,    14,    14,    14,    14,    14,    14,    14,    14, 
        272,    14,    14,    14,    14,    14,    14,   274,   165,   165, 
        280,   282,   211,   298,   127,   126,   122,   123,   292,   296, 
        307,   311,   312,   316,   317,   128,   129,   321,   324,   322, 
        323,   340,   325,    51,    13,    14,    15,    16,    17,    18, 
         19,    20,   144,   338,   343,   351,   216,   216,   216,   216, 
        216,   216,   216,   216,   216,    12,   350,   216,   216,   216, 
        216,   216,   205,   356,   357,   143,   205,   205,   205,   205, 
        205,   358,   205,   360,     2,     2,     2,     2,     2,     2, 
          2,     2,    12,   205,   205,   205,   205,   205,   205,   341, 
        362,   365,   366,   368,     2,     2,     2,   370,     2,   369, 
        211,   211,   211,   211,   211,   211,   211,   211,   211,   373, 
        375,   211,   211,   211,   211,   211,   207,   124,   205,   125, 
        207,   207,   207,   207,   207,    28,   207,   378,   380,    13, 
         14,    15,   216,    17,    18,    19,    20,   207,   207,   207, 
        207,   207,   207,   379,   393,   399,   383,   382,   389,   405, 
        205,   205,   392,   143,   143,   143,   143,   143,   143,   143, 
        143,   143,   408,   418,   143,   143,   143,   143,   143,   419, 
        425,   431,   207,   427,   107,   434,   435,   436,   442,   119, 
        117,   440,   118,   121,   120,   444,    61,    11,   421,    52, 
        139,    26,    52,   140,   174,   165,   293,   124,   106,   125, 
        108,    24,   135,   432,   207,   207,   219,    52,   139,   135, 
        216,   139,   437,    28,    28,    28,    28,    28,    28,    28, 
         28,    28,   144,    37,    28,    28,    28,    28,    28,   107, 
         36,   218,    84,   135,   119,   117,    51,   118,   139,   120, 
         68,    52,    46,   135,    13,    14,    15,   216,    17,    18, 
         19,    20,   124,   106,   125,   108,   107,    70,   112,   114, 
        161,   119,   117,   121,   118,   429,   120,    26,    90,    22, 
        147,    13,    14,    15,   216,    17,    18,    19,    20,   124, 
        106,   125,   108,   165,   165,   165,   165,   165,   165,   165, 
        165,   165,    89,    14,   165,   165,   165,   165,   165,   107, 
        276,   333,   374,   337,   119,   117,   198,   118,    50,   120, 
         49,   377,   426,   404,   403,   203,   213,     5,   121,   226, 
         36,     0,   124,   106,   125,   108,   107,     0,     0,     0, 
          0,   119,   117,     0,   118,     0,   120,   205,     0,     0, 
          0,     0,     0,     0,   232,   121,     0,     0,   293,   124, 
        106,   125,   108,   107,     0,     0,     0,   342,   119,   117, 
          0,   118,     0,   120,   232,   232,   232,   232,   232,   232, 
        232,   232,     0,     0,     0,   107,   124,   106,   125,   108, 
        119,   117,     0,   118,     0,   120,     0,     0,   121,     0, 
          0,   207,     0,     0,     0,     0,     0,   345,   124,   106, 
        125,   108,    13,    14,    15,    16,    17,    18,    19,    20, 
          0,     0,     0,     0,   232,   121,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   205,   205,   205,   205,   205, 
        205,   205,   205,   205,     0,     0,   205,   205,   205,   205, 
        205,     0,   121,     0,     0,     0,     0,     0,     0,   116, 
          0,     0,     0,     0,     0,     0,     0,   127,   126,   122, 
        123,     0,     0,     0,   121,     0,     0,     0,   128,   129, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   207, 
        207,   207,   207,   207,   207,   207,   207,   207,     0,     0, 
        207,   207,   207,   207,   207,   107,     0,     0,     0,   367, 
        119,   117,     0,   118,   116,   120,     5,     5,     5,     5, 
          5,     5,     5,     5,     0,     0,     0,     0,   124,   106, 
        125,   108,     0,     0,     0,     0,     5,     5,     5,     0, 
          0,   116,     0,     0,     0,     0,     0,   127,   126,   122, 
        123,   109,   110,   111,   112,   113,     0,     0,   128,   129, 
        130,   114,   115,   107,     0,     0,     0,   371,   119,   117, 
          0,   118,     0,   120,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   116,     0,   124,   106,   125,   108, 
          0,     0,     0,     0,   121,     0,     0,     0,     0,     0, 
          0,     0,   127,   126,   122,   123,   109,   110,   111,   112, 
        113,   116,     0,   128,   129,   130,   114,   115,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   127, 
        126,   122,   123,   109,   110,   111,   112,   113,   116,     0, 
        128,   129,     0,   114,   115,     0,     0,     0,     0,     0, 
          0,     0,   121,     0,     0,     0,     0,     0,     0,     0, 
        116,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   127,   126,   122,   123,   109,   110,   111,   112, 
        113,     0,     0,   128,   129,     0,   114,   115,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   127, 
        126,   122,   123,   109,   110,   111,   112,   113,     0,     0, 
        128,   129,     0,   114,   115,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   127,   126,   122,   123, 
        109,   110,   111,   112,   113,     0,     0,   128,   129,     0, 
        114,   115,     0,     0,     0,     0,     0,     0,   127,   126, 
        122,   123,   109,   110,   111,   112,   113,     0,     0,   128, 
        129,   107,   114,   115,     0,   372,   119,   117,     0,   118, 
          0,   120,     0,     0,     0,     0,     0,     0,     0,     0, 
        116,     0,     0,     0,   124,   106,   125,   108,   107,     0, 
          0,     0,   406,   119,   117,     0,   118,     0,   120,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   124,   106,   125,   108,     0,   107,     0,     0,     0, 
        407,   119,   117,     0,   118,     0,   120,     0,     0,     0, 
        179,     0,     0,     0,   179,     0,     0,   179,   116,   124, 
        106,   125,   108,     0,     0,     0,     0,     0,     0,     0, 
        121,   179,   179,     0,   179,     7,   179,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   127,   126, 
        122,   123,   109,   110,   111,   112,   113,   121,     0,   128, 
        129,     0,   114,   115,     0,   107,   179,     0,     0,     0, 
        119,   117,     0,   118,     0,   120,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   121,   438,     0,   124,   106, 
        125,   108,     0,     0,     0,     0,     0,     0,   179,     0, 
          0,     0,     0,     0,     0,     0,   127,   126,   122,   123, 
        109,   110,   111,   112,   113,     0,     0,   128,   129,   107, 
        114,   115,     0,     0,   119,   117,     0,   118,     0,   120, 
          0,   197,     0,     0,     0,   197,   197,   197,   197,   197, 
          0,   197,   124,   106,   125,   108,     0,     0,     0,     0, 
          0,     0,   197,   197,   121,   197,     0,   197,     0,     0, 
          0,     0,   198,     0,     0,     0,   198,   198,   198,   198, 
        198,     0,   198,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   198,   198,   201,   198,   197,   198,   201, 
        201,   201,   201,   201,     0,   201,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   201,   201,   121,   201, 
          0,   201,     0,     0,     0,     0,   116,     0,   198,   197, 
          0,     0,     0,     0,     7,     7,     7,     7,     7,     7, 
          7,     7,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   201,     0,   116,     7,     7,     7,     0,     0,     0, 
        198,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        202,   116,     0,   201,   202,   202,   202,   202,   202,     0, 
        202,     0,     0,     0,     0,   179,     0,     0,     0,     0, 
          0,   202,   202,     0,   202,     0,   202,     0,     0,     0, 
          0,     0,     0,     0,   127,   126,   122,   123,   109,   110, 
        111,   112,   113,     0,     0,   128,   129,     0,   114,   115, 
          0,     0,     0,     0,     0,     0,   202,     0,     0,     0, 
          0,   127,   126,   122,   123,   109,   110,   111,   112,   113, 
        116,     0,   128,   129,     0,   114,   115,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   202,   127, 
        126,   122,   123,   109,   110,   111,   112,   113,     0,     0, 
        128,   129,     0,   114,   115,     0,     0,   179,   179,   179, 
        179,   179,     0,     0,     0,     0,   179,   179,   179,     0, 
          0,   193,     0,     0,   116,   193,   193,   193,   193,   193, 
          0,   193,     0,     0,     0,     0,   197,     0,     0,     0, 
          0,     0,   193,   193,     0,   193,     0,   193,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   127,   126, 
        122,   123,   109,   110,   111,   112,   113,   198,     0,   128, 
        129,     0,   114,   115,     0,     0,     0,   193,   194,     0, 
          0,     0,   194,   194,   194,   194,   194,     0,   194,     0, 
        201,     0,     0,     0,     0,     0,     0,     0,     0,   194, 
        194,     0,   194,     0,   194,     0,     0,     0,     0,   193, 
          0,     0,   127,   126,   122,   123,   109,   110,   111,   112, 
        113,     0,     0,   128,   129,     0,   114,   115,   197,   197, 
        197,   197,   197,     0,   194,     0,     0,   197,   197,   197, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        199,     0,     0,     0,   199,     0,   199,   199,   199,   198, 
        198,   198,   198,   198,     0,     0,   194,     0,   198,   198, 
        198,   199,   199,     0,   199,   202,   199,     0,     0,     0, 
          0,     0,   201,   201,   201,   201,   201,     0,     0,     0, 
          0,   201,   201,   201,   196,     0,     0,     0,   196,   196, 
        196,   196,   196,     0,   196,     0,   199,     0,     0,     0, 
          0,     0,     0,     0,     0,   196,   196,     0,   196,   200, 
        196,     0,     0,   200,     0,   200,   200,   200,     0,     0, 
          0,     0,   195,     0,     0,     0,   195,     0,   199,   195, 
        200,   200,     0,   200,     0,   200,     0,     0,     0,     0, 
        196,     0,     0,   195,   195,     0,   195,     0,   195,     0, 
          0,     0,     0,     0,     0,     0,     0,   202,   202,   202, 
        202,   202,     0,     0,     0,   200,   202,   202,   202,   191, 
          0,     0,   196,   191,     0,   191,   191,   191,   195,     0, 
          0,   192,     0,     0,     0,   192,   193,   192,   192,   192, 
        191,   191,     0,   191,     0,   191,     0,   200,     0,     0, 
          0,     0,   192,   192,     0,   192,     0,   192,   180,     0, 
        195,     0,   180,     0,     0,   180,     0,     0,     0,     0, 
        181,     0,     0,     0,   181,   191,     0,   181,     0,   180, 
        180,     0,   180,     0,   180,     0,     0,   192,     0,     0, 
          0,   181,   181,   194,   181,     0,   181,     0,     0,     0, 
        119,   117,     0,   118,     0,   120,     0,   191,     0,     0, 
          0,     0,     0,     0,   180,     0,     0,     0,   124,   192, 
        125,     0,     0,     0,     0,     0,   181,     0,   193,   193, 
        193,   193,   193,     0,     0,     0,     0,   193,   193,   193, 
          0,     0,     0,     0,     0,   182,   180,     0,     0,   182, 
          0,     0,   182,     0,     0,     0,     0,   183,   181,     0, 
          0,   183,     0,     0,   183,   199,   182,   182,     0,   182, 
          0,   182,     0,     0,     0,     0,     0,     0,   183,   183, 
          0,   183,     0,   183,   121,   194,   194,   194,   194,   194, 
          0,     0,     0,   184,   194,   194,   194,   184,     0,     0, 
        184,   182,     0,     0,     0,     0,     0,     0,     0,   196, 
          0,     0,     0,   183,   184,   184,     0,   184,     0,   184, 
        162,     0,     0,     0,   162,    60,     0,   162,     0,     0, 
          0,     0,    72,   182,   200,    57,     0,    58,     0,     0, 
          0,   162,   162,     0,   162,   183,   162,   195,     0,   184, 
          0,     0,     0,     0,     0,     0,     0,   199,   199,   199, 
        199,   199,     0,     0,     0,   163,   199,   199,   199,   163, 
          0,     0,   163,     0,     0,     0,   162,     0,     0,     0, 
          0,   184,     0,    59,     0,     0,   163,   163,     0,   163, 
          0,   163,     0,     0,   191,     0,     0,     0,     0,     0, 
          0,   196,   196,   196,   196,   196,   192,     0,   162,     0, 
        196,   196,   196,     0,     0,    71,     0,     0,    61,     0, 
          0,   163,     0,     0,     0,     0,   200,   200,   200,   200, 
        200,     0,     0,   180,     0,   200,   200,   200,     0,   195, 
        195,   195,   195,   195,     0,   181,     0,     0,   195,   195, 
        195,     0,     0,   163,   161,     0,     0,     0,   161,     0, 
          0,   161,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   161,   161,     0,   161,     0, 
        161,     0,     0,     0,     0,     0,   191,   191,   191,   191, 
        191,     0,     0,     0,     0,   191,   191,   191,   192,   192, 
        192,   192,   192,     0,     0,     0,     0,   192,   192,   192, 
        161,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        182,     0,     0,     0,     0,   180,   180,   180,   180,   180, 
          0,     0,   183,     0,   180,   180,   180,   181,   181,   181, 
        181,   181,   161,     0,     0,     0,   181,   181,   181,     0, 
          0,     0,    64,    65,    66,    67,    68,     0,   127,   126, 
        122,   123,     0,     0,     0,     0,     0,     0,   184,   128, 
        129,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   162,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   182,   182,   182,   182,   182,     0,     0,     0, 
          0,   182,   182,   182,   183,   183,   183,   183,   183,     0, 
          0,     0,    69,   183,   183,   183,     0,     0,    70,     0, 
        163,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        184,   184,   184,   184,   184,     0,     0,     0,     0,   184, 
        184,   184,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   162,   162,   162, 
        162,   162,    74,     0,    62,    63,   162,   162,   162,     0, 
          0,    91,    92,     0,    94,    95,    96,    97,     0,     0, 
          0,     0,     0,     0,     0,   101,   104,     0,   127,     0, 
          0,     0,     0,     0,     0,   127,     0,     0,   127,   161, 
        127,     0,   163,   163,   163,   163,   163,   148,     0,     0, 
          0,   163,   163,   163,   127,     0,     0,     0,     0,     0, 
        164,   165,   166,   168,   169,   170,   171,   172,   173,   174, 
          0,   176,   177,   178,   179,   180,     0,     0,   181,   182, 
        183,   184,   185,   186,   187,     0,   127,   101,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   131, 
          0,     0,     0,     0,     0,   148,   131,     0,     0,   131, 
          0,   131,     0,     0,     0,     0,     0,     0,   127,     0, 
        127,   127,     0,     0,     0,   131,     0,     0,     0,     0, 
          0,   161,   161,   161,   161,   161,     0,     0,     0,     0, 
        161,   161,   161,     0,     0,     0,     0,     0,     0,     0, 
          0,   122,   148,     0,     0,   166,     0,   131,   122,   148, 
          0,   122,     0,   122,   234,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   122,     0,     0, 
          0,     0,     0,     0,     0,     0,   148,     0,     0,   131, 
          0,   131,   131,     0,     0,     0,     0,     0,     0,     0, 
          0,   148,   148,     0,     0,     0,     0,     0,     0,   122, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    60, 
          0,     0,     0,     0,     0,     0,    72,     0,   310,    57, 
          0,    58,     0,     0,     0,   166,     0,   315,     0,     0, 
          0,   122,     0,   122,   122,   262,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   127,   127,   127,   127,   127, 
          0,   339,     0,     0,     0,     0,     0,     0,     0,     0, 
        148,   347,   349,     0,     0,     0,     0,    59,   352,   353, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    60,     0,     0,    71, 
          0,     0,    61,    72,     0,     0,    57,     0,    58,     0, 
        148,     0,     0,   390,   391,     0,   131,   131,   131,   131, 
        131,     0,   262,     0,     0,   127,   127,   127,   127,     0, 
        127,   127,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   127,   127,   127,   127,   148, 
        127,   127,     0,     0,    59,   127,   127,   127,   127,   127, 
          0,     0,     0,     0,     0,     0,     0,   433,   122,   122, 
        122,   122,   122,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   318,   127,   127,    61, 
          0,     0,     0,     0,     0,     0,   131,   131,   131,   131, 
          0,     0,   131,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   131,   131,   131,   131, 
          0,   131,   131,     0,     0,     0,   131,   131,   131,   131, 
        131,     0,     0,     0,     0,     0,    64,    65,    66,    67, 
         68,     0,     0,     0,     0,     0,     0,     0,   122,   122, 
        122,   122,     0,     0,   122,     0,     0,     0,   131,   131, 
          0,     0,     0,     0,     0,     0,     0,     0,   122,   122, 
        122,   122,     0,   122,   122,     0,     0,     0,   122,     0, 
        122,   122,   122,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        122,   122,     0,     0,     0,     0,    69,   251,   252,   253, 
          0,     0,    70,    64,    65,    66,    67,    68,     0,     0, 
          0,     0,     0,     0,     0,     0,   254,   255,   256,   257, 
          0,   258,   259,     0,     0,     0,   260,     0,   261,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    62,    63, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    69,   251,   252,   253,     0,     0,    70, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   254,   255,   256,   257,     0,   258,   259, 
          0,     0,     0,   260,     0,   261,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    62,    63, 
    );
    protected static $yyCheck = array(4,
         42,   125,    44,    42,    42,    63,   249,    48,    37,   123, 
        123,    40,    41,    42,    43,    44,    45,    60,    47,   125, 
         62,    93,    27,   286,   142,    30,    41,   125,    41,    58, 
         59,    60,    61,    62,    63,   108,    42,    42,    43,    44, 
         59,    47,   380,   260,    59,   260,    40,    37,    91,   151, 
         44,    44,    42,    43,    60,    45,    62,    47,    44,   344, 
        345,   399,    91,    37,    93,    59,    59,    41,    42,    43, 
         44,    45,   303,    47,   260,    84,   260,   195,    93,    84, 
         85,   260,    87,    41,    58,    59,    44,    61,    62,    63, 
         46,   100,   133,    59,   123,   100,   125,   126,   159,   342, 
         59,    91,   304,   205,   367,    59,   125,    93,   371,   260, 
        125,   116,   125,   330,   398,   330,   266,    37,    46,    93, 
        126,    41,    42,    43,    44,    45,    46,    47,   201,   123, 
        232,   125,   125,   417,   320,    91,   126,   142,    58,    59, 
         60,    61,    62,    63,   407,   247,   248,   260,   209,   123, 
        194,   125,   126,   335,   340,    91,   340,   123,    59,   422, 
         41,   340,   260,    44,   123,   260,   227,   125,   431,   123, 
         37,    91,    64,    93,    41,    42,    43,    44,    45,    46, 
         47,   363,   332,   192,   189,    58,    59,   192,   260,   125, 
        195,    58,    59,    60,    61,    62,    63,   311,    60,   243, 
        373,   374,   260,   260,    46,   125,   126,    93,   281,   218, 
         60,   314,    93,   218,   316,   318,    44,   260,   260,    40, 
         93,    46,   260,    59,    91,    91,    93,   340,   272,    91, 
         37,   260,   330,    60,    41,    42,    43,    44,    45,    46, 
         47,    91,    40,   300,   301,   302,   310,   310,    46,   373, 
        374,    58,    59,    60,    61,    62,    63,   375,   125,   126, 
         40,   410,    41,    41,   366,    91,    46,   373,   374,    42, 
         43,    44,    44,   330,   300,   301,   302,   320,   320,   311, 
        123,   310,   311,   312,    91,   125,    93,   260,   300,   310, 
        295,   320,    62,   396,    44,    44,    93,   340,   340,   304, 
         37,   340,    40,   405,    41,    42,    43,    44,    45,   123, 
         47,   340,    85,   123,    87,   260,   419,    58,   125,   126, 
         91,    58,    59,    60,    61,    62,    63,   300,   301,   302, 
        335,   434,   300,   301,   302,   438,   310,   311,   312,   442, 
         93,   260,    41,   116,   280,   281,   282,   283,   284,   285, 
        286,   287,   357,    40,   125,    40,    93,   330,   363,    93, 
        123,   125,    59,    44,    93,   123,   340,    41,   340,   142, 
        375,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
        123,   410,   411,   412,   413,   414,   415,    40,   125,   126, 
         41,   123,   312,    40,   400,   401,   402,   403,   125,   260, 
         61,    41,   125,    40,    40,   411,   412,    40,    40,    59, 
         59,    59,    40,   418,   280,   281,   282,   283,   284,   285, 
        286,   287,   195,    40,    59,   340,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    91,   361,   411,   412,   413, 
        414,   415,    37,    41,    44,   312,    41,    42,    43,    44, 
         45,    40,    47,    59,   280,   281,   282,   283,   284,   285, 
        286,   287,    91,    58,    59,    60,    61,    62,    63,   125, 
         93,   125,    59,   125,   300,   301,   302,   364,   304,    40, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   340, 
        321,   411,   412,   413,   414,   415,    37,    60,    93,    62, 
         41,    42,    43,    44,    45,   312,    47,    41,    41,   280, 
        281,   282,   283,   284,   285,   286,   287,    58,    59,    60, 
         61,    62,    63,   125,   123,    41,   345,   344,   367,    59, 
        125,   126,   371,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   371,    40,   411,   412,   413,   414,   415,   123, 
        125,    41,    93,   125,    37,    58,   340,   125,   123,    42, 
         43,    41,    45,   126,    47,   125,    93,    59,   407,    41, 
         41,   123,    44,    41,   125,   312,    59,    60,    61,    62, 
         63,   123,    93,   422,   125,   126,    62,    59,    58,    41, 
         40,    93,   431,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   375,   125,   411,   412,   413,   414,   415,    37, 
        125,    40,   125,   125,    42,    43,    59,    45,    59,    47, 
         41,    93,    59,    59,   280,   281,   282,   283,   284,   285, 
        286,   287,    60,    61,    62,    63,    37,    41,   125,   125, 
         41,    42,    43,   126,    45,   418,    47,     8,    55,     6, 
         89,   280,   281,   282,   283,   284,   285,   286,   287,    60, 
         61,    62,    63,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    54,   410,   411,   412,   413,   414,   415,    37, 
        244,   297,   355,   304,    42,    43,    44,    45,    41,    47, 
         40,   357,   414,   387,   385,   156,   192,    91,   126,   198, 
         25,    -1,    60,    61,    62,    63,    37,    -1,    -1,    -1, 
         -1,    42,    43,    -1,    45,    -1,    47,   312,    -1,    -1, 
         -1,    -1,    -1,    -1,   260,   126,    -1,    -1,    59,    60, 
         61,    62,    63,    37,    -1,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,   280,   281,   282,   283,   284,   285, 
        286,   287,    -1,    -1,    -1,    37,    60,    61,    62,    63, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,   126,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    59,    60,    61, 
         62,    63,   280,   281,   282,   283,   284,   285,   286,   287, 
         -1,    -1,    -1,    -1,   330,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,   413,   414, 
        415,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   312, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,    -1,    -1,    -1,   126,    -1,    -1,    -1,   411,   412, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,   413,   414,   415,    37,    -1,    -1,    -1,    41, 
         42,    43,    -1,    45,   312,    47,   280,   281,   282,   283, 
        284,   285,   286,   287,    -1,    -1,    -1,    -1,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,   300,   301,   302,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
        413,   414,   415,    37,    -1,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   312,    -1,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   312,    -1,   411,   412,   413,   414,   415,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   312,    -1, 
        411,   412,    -1,   414,   415,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    37,   414,   415,    -1,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        312,    -1,    -1,    -1,    60,    61,    62,    63,    37,    -1, 
         -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    60,    61,    62,    63,    -1,    37,    -1,    -1,    -1, 
         41,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         37,    -1,    -1,    -1,    41,    -1,    -1,    44,   312,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        126,    58,    59,    -1,    61,    91,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   126,    -1,   411, 
        412,    -1,   414,   415,    -1,    37,    93,    -1,    -1,    -1, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   126,    58,    -1,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    37, 
        414,   415,    -1,    -1,    42,    43,    -1,    45,    -1,    47, 
         -1,    37,    -1,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,   126,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    37,    61,    93,    63,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,   126,    61, 
         -1,    63,    -1,    -1,    -1,    -1,   312,    -1,    93,   125, 
         -1,    -1,    -1,    -1,   280,   281,   282,   283,   284,   285, 
        286,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    -1,   312,   300,   301,   302,    -1,    -1,    -1, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         37,   312,    -1,   125,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
         -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
        312,    -1,   411,   412,    -1,   414,   415,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,    -1, 
         -1,    37,    -1,    -1,   312,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   312,    -1,   411, 
        412,    -1,   414,   415,    -1,    -1,    -1,    93,    37,    -1, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,   125, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   404,   405, 
        406,   407,   408,    -1,    93,    -1,    -1,   413,   414,   415, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         37,    -1,    -1,    -1,    41,    -1,    43,    44,    45,   404, 
        405,   406,   407,   408,    -1,    -1,   125,    -1,   413,   414, 
        415,    58,    59,    -1,    61,   312,    63,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,    37,    -1,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    93,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    37, 
         63,    -1,    -1,    41,    -1,    43,    44,    45,    -1,    -1, 
         -1,    -1,    37,    -1,    -1,    -1,    41,    -1,   125,    44, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1, 
         93,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    93,   413,   414,   415,    37, 
         -1,    -1,   125,    41,    -1,    43,    44,    45,    93,    -1, 
         -1,    37,    -1,    -1,    -1,    41,   312,    43,    44,    45, 
         58,    59,    -1,    61,    -1,    63,    -1,   125,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    37,    -1, 
        125,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1, 
         37,    -1,    -1,    -1,    41,    93,    -1,    44,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    93,    -1,    -1, 
         -1,    58,    59,   312,    61,    -1,    63,    -1,    -1,    -1, 
         42,    43,    -1,    45,    -1,    47,    -1,   125,    -1,    -1, 
         -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,    60,   125, 
         62,    -1,    -1,    -1,    -1,    -1,    93,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
         -1,    -1,    -1,    -1,    -1,    37,   125,    -1,    -1,    41, 
         -1,    -1,    44,    -1,    -1,    -1,    -1,    37,   125,    -1, 
         -1,    41,    -1,    -1,    44,   312,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,   126,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    37,   413,   414,   415,    41,    -1,    -1, 
         44,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312, 
         -1,    -1,    -1,    93,    58,    59,    -1,    61,    -1,    63, 
         37,    -1,    -1,    -1,    41,    33,    -1,    44,    -1,    -1, 
         -1,    -1,    40,   125,   312,    43,    -1,    45,    -1,    -1, 
         -1,    58,    59,    -1,    61,   125,    63,   312,    -1,    93, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    37,   413,   414,   415,    41, 
         -1,    -1,    44,    -1,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,   125,    -1,    91,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,   312,    -1,   125,    -1, 
        413,   414,   415,    -1,    -1,   123,    -1,    -1,   126,    -1, 
         -1,    93,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,   312,    -1,   413,   414,   415,    -1,   404, 
        405,   406,   407,   408,    -1,   312,    -1,    -1,   413,   414, 
        415,    -1,    -1,   125,    37,    -1,    -1,    -1,    41,    -1, 
         -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,   414,   415,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
         93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        312,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,   312,    -1,   413,   414,   415,   404,   405,   406, 
        407,   408,   125,    -1,    -1,    -1,   413,   414,   415,    -1, 
         -1,    -1,   260,   261,   262,   263,   264,    -1,   400,   401, 
        402,   403,    -1,    -1,    -1,    -1,    -1,    -1,   312,   411, 
        412,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,   340,   413,   414,   415,    -1,    -1,   346,    -1, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,   413, 
        414,   415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    48,    -1,   402,   403,   413,   414,   415,    -1, 
         -1,    57,    58,    -1,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    71,    72,    -1,    33,    -1, 
         -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,   312, 
         45,    -1,   404,   405,   406,   407,   408,    93,    -1,    -1, 
         -1,   413,   414,   415,    59,    -1,    -1,    -1,    -1,    -1, 
        106,   107,   108,   109,   110,   111,   112,   113,   114,   115, 
         -1,   117,   118,   119,   120,   121,    -1,    -1,   124,   125, 
        126,   127,   128,   129,   130,    -1,    91,   133,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33, 
         -1,    -1,    -1,    -1,    -1,   151,    40,    -1,    -1,    43, 
         -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1, 
        125,   126,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    33,   198,    -1,    -1,   201,    -1,    91,    40,   205, 
         -1,    43,    -1,    45,   210,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,   123, 
         -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   247,   248,    -1,    -1,    -1,    -1,    -1,    -1,    91, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33, 
         -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,   274,    43, 
         -1,    45,    -1,    -1,    -1,   281,    -1,   283,    -1,    -1, 
         -1,   123,    -1,   125,   126,    59,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   260,   261,   262,   263,   264, 
         -1,   307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        316,   317,   318,    -1,    -1,    -1,    -1,    91,   324,   325, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,   123, 
         -1,    -1,   126,    40,    -1,    -1,    43,    -1,    45,    -1, 
        366,    -1,    -1,   369,   370,    -1,   260,   261,   262,   263, 
        264,    -1,    59,    -1,    -1,   340,   341,   342,   343,    -1, 
        345,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363,   405, 
        365,   366,    -1,    -1,    91,   370,   371,   372,   373,   374, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   423,   260,   261, 
        262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   123,   402,   403,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342,   343, 
         -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363, 
         -1,   365,   366,    -1,    -1,    -1,   370,   371,   372,   373, 
        374,    -1,    -1,    -1,    -1,    -1,   260,   261,   262,   263, 
        264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341, 
        342,   343,    -1,    -1,   346,    -1,    -1,    -1,   402,   403, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361, 
        362,   363,    -1,   365,   366,    -1,    -1,    -1,   370,    -1, 
        372,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        402,   403,    -1,    -1,    -1,    -1,   340,   341,   342,   343, 
         -1,    -1,   346,   260,   261,   262,   263,   264,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363, 
         -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   340,   341,   342,   343,    -1,    -1,   346, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   360,   361,   362,   363,    -1,   365,   366, 
         -1,    -1,    -1,   370,    -1,   372,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_PROPERTY', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', NULL, 'T_DOUBLE_COLON', 
      'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 
      'T_BOOLEAN_AND', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 131 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 143 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 143 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 154 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 155 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 159 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 159 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 13:  #line 167 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 15:  #line 172 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 16:  #line 178 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 178 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 18:  #line 187 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 19:  #line 187 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 196 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 21:  #line 196 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 22:  #line 207 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 208 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 212 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 25:  #line 213 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 217 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 218 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 222 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 223 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 30:  #line 227 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 31:  #line 228 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 232 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 33:  #line 233 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 234 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 35:  #line 238 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 239 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 240 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 244 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 39:  #line 245 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 40:  #line 249 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 41:  #line 249 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 42:  #line 252 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 252 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 262 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 45:  #line 269 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop][0];
      $yyVal->annotations= $yyVals[-5+$yyTop][1];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 46:  #line 280 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 48:  #line 285 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 49:  #line 286 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 50:  #line 287 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 51:  #line 291 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 292 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 298 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 54:  #line 298 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 55:  #line 308 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 56:  #line 308 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 57:  #line 316 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 58:  #line 316 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 59:  #line 329 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 60:  #line 330 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 61:  #line 334 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 62:  #line 335 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 63:  #line 339 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 64:  #line 343 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVals[-1+$yyTop] && $yyVal->parameters= array('default' => $yyVals[-1+$yyTop]);
    } break;

    case 65:  #line 348 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 66:  #line 356 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 67:  #line 357 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 68:  #line 361 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 69:  #line 362 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 70:  #line 366 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 71:  #line 367 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 72:  #line 371 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 73:  #line 372 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 74:  #line 376 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 75:  #line 377 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 82:  #line 389 "grammar/xp.jay"
    { $yyVal= '[]'; } break;

    case 83:  #line 390 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 84:  #line 398 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 86:  #line 403 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 87:  #line 404 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 88:  #line 408 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 89:  #line 408 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 90:  #line 411 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 91:  #line 411 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 92:  #line 416 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 93:  #line 416 "grammar/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= array();
        foreach ($yyVals[-6+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->initialization[]= $stmt;
        }
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= array();
        foreach ($yyVals[-2+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->loop[]= $stmt;
        }
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 94:  #line 434 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 95:  #line 434 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 96:  #line 439 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 97:  #line 439 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 98:  #line 443 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 99:  #line 443 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 100:  #line 447 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 101:  #line 447 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 102:  #line 451 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 103:  #line 451 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 104:  #line 456 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 106:  #line 457 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 108:  #line 458 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 109:  #line 458 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 110:  #line 461 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->free= TRUE; } break;

    case 112:  #line 466 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 114:  #line 471 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 115:  #line 472 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 116:  #line 476 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 117:  #line 476 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 118:  #line 480 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 119:  #line 480 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 120:  #line 486 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 121:  #line 487 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 122:  #line 491 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 123:  #line 492 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 124:  #line 492 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 125:  #line 497 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 126:  #line 498 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 127:  #line 502 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 128:  #line 503 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 129:  #line 507 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 130:  #line 507 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 131:  #line 515 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 133:  #line 520 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 134:  #line 520 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 135:  #line 528 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 137:  #line 533 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 138:  #line 534 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 139:  #line 538 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 141:  #line 543 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 142:  #line 549 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 143:  #line 557 "grammar/xp.jay"
    { 
      /* TBI: Constant */ 
    } break;

    case 144:  #line 560 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 145:  #line 563 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new InvocationNode(array('name' => $yyVals[-3+$yyTop]))); 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 147:  #line 571 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 148:  #line 571 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 149:  #line 574 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 150:  #line 574 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 151:  #line 579 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 152:  #line 579 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyVals[-1+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 153:  #line 584 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 154:  #line 584 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 155:  #line 590 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 156:  #line 591 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 157:  #line 594 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 158:  #line 597 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 159:  #line 600 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 160:  #line 603 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 161:  #line 607 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 162:  #line 613 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 163:  #line 619 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 164:  #line 625 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 165:  #line 633 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 166:  #line 634 "grammar/xp.jay"
    { /* XXX class literal */ } break;

    case 167:  #line 635 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 168:  #line 635 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 169:  #line 639 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 170:  #line 644 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 171:  #line 645 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 172:  #line 646 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 173:  #line 647 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 174:  #line 651 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 176:  #line 656 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 177:  #line 657 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 178:  #line 661 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 179:  #line 665 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 180:  #line 666 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 181:  #line 667 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 182:  #line 668 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 183:  #line 669 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 184:  #line 670 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 185:  #line 674 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 675 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 676 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 188:  #line 677 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 189:  #line 678 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 190:  #line 679 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 191:  #line 683 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 192:  #line 684 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 193:  #line 685 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 194:  #line 686 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 195:  #line 687 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 196:  #line 688 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 197:  #line 692 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 198:  #line 693 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 199:  #line 694 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 200:  #line 695 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 201:  #line 696 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 202:  #line 697 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 203:  #line 701 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 204:  #line 702 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 205:  #line 707 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 208:  #line 713 "grammar/xp.jay"
    {  $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 209:  #line 717 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 210:  #line 717 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 211:  #line 720 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 212:  #line 723 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 213:  #line 723 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 216:  #line 737 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 217:  #line 738 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 218:  #line 742 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 219:  #line 746 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 220:  #line 747 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 222:  #line 752 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 223:  #line 756 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 224:  #line 757 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 225:  #line 763 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 226:  #line 764 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 227:  #line 768 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 228:  #line 769 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 229:  #line 773 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 230:  #line 774 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 231:  #line 775 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 232:  #line 776 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 233:  #line 777 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 234:  #line 778 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 235:  #line 779 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;

    case 236:  #line 780 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2001 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
