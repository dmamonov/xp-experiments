<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.SwitchNode',
    'xp.compiler.ast.CaseNode',
    'xp.compiler.ast.DefaultNode',
    'xp.compiler.ast.BreakNode',
    'xp.compiler.ast.ContinueNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 59 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_MOD_EQUAL= 408;
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_INC= 402;
    const T_DEC= 403;
    const T_SE= 401;
    const T_GE= 400;
    const T_OBJECT_OPERATOR= 409;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_PROPERTY= 330;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_NEW= 346;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_AS= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          9,     9,     9,     4,     4,    12,     3,    16,     3,    18, 
          3,    13,    13,    14,    14,    19,    19,    21,    21,    15, 
         15,    22,    22,    22,    17,    17,    17,    26,    26,    28, 
         27,    29,    27,    23,    23,    34,    34,    33,    33,    33, 
         32,    32,    37,    24,    40,    24,    42,    24,    10,    10, 
         43,    43,    45,    45,    45,    39,    39,    36,    36,    48, 
         48,    49,    49,    38,    38,    41,    41,    41,    41,    41, 
         41,    41,    41,    25,    25,    35,    35,    51,    50,    52, 
         50,    55,    50,    57,    50,    59,    50,    60,    50,    61, 
         50,    63,    50,    65,    50,    66,    50,    67,    50,    50, 
         50,    62,    62,    68,    68,    70,    69,    71,    69,    58, 
         58,    53,    53,    54,    72,    54,    64,    64,    73,    73, 
         77,    76,    74,    74,    78,    75,    56,    56,    79,    79, 
         46,    46,    80,    80,    81,    81,    81,    30,    84,    30, 
         85,    30,    86,    30,    87,    30,    30,    30,    30,    30, 
         30,    30,    30,    30,    30,    82,    82,    93,    82,    82, 
         82,    82,    82,    82,    94,    94,    47,    47,    95,    88, 
         88,    88,    88,    88,    88,    89,    89,    89,    89,    89, 
         89,    90,    90,    90,    90,    90,    90,    91,    91,    91, 
         91,    91,    91,    92,    92,    83,    83,    96,    96,    98, 
         97,    97,    99,    97,    31,    31,    11,    11,   100,   101, 
        101,   102,   102,    20,    20,    44,    44,   103,   103,   104, 
        104,   104,   104,   104,   104,   104,   104, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     6, 
          1,     1,     3,     1,     3,     0,     9,     0,     9,     0, 
          8,     0,     2,     0,     2,     0,     2,     0,     3,     2, 
          0,     1,     1,     4,     3,     1,     0,     1,     3,     0, 
          3,     0,     6,     5,     6,     0,     1,     2,     4,     4, 
          0,     2,     0,     9,     0,     8,     0,    10,     4,     1, 
          1,     3,     2,     5,     5,     1,     3,     0,     1,     1, 
          3,     3,     3,     0,     2,     1,     1,     1,     1,     1, 
          1,     2,     3,     0,     1,     1,     2,     0,     4,     0, 
          7,     0,    10,     0,     8,     0,     6,     0,     7,     0, 
          8,     0,     6,     0,     3,     0,     3,     0,     4,     2, 
          1,     0,     1,     1,     2,     0,     5,     0,     4,     3, 
          1,     1,     3,     0,     0,     3,     2,     1,     1,     2, 
          0,     9,     0,     1,     0,     5,     0,     1,     1,     3, 
          0,     1,     5,     6,     1,     1,     4,     1,     0,     3, 
          0,     4,     0,     5,     0,     6,     3,     1,     1,     1, 
          1,     1,     5,     3,     3,     1,     3,     0,     4,     3, 
          1,     1,     1,     1,     0,     1,     1,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     2,     2,     2, 
          2,     2,     2,     2,     2,     0,     1,     1,     2,     0, 
          4,     2,     0,     6,     1,     1,     1,     4,     3,     1, 
          3,     1,     3,     1,     3,     0,     1,     1,     2,     1, 
          1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   230,   232,   231,   233,   235,   234,   236,   237, 
          1,     0,    60,   227,     0,     8,     0,     4,     0,     0, 
          0,     0,    16,    20,    18,   229,    15,     0,     0,     0, 
          0,     0,     0,     0,    12,     0,     0,     0,    59,    62, 
          0,     0,     0,     0,     0,    10,     0,     0,   168,     0, 
          0,     0,     0,     0,   174,   171,   173,   172,   149,   151, 
          0,     0,     0,     0,     0,     0,   148,   158,   159,   160, 
        161,   162,     0,     0,     0,     0,     0,     0,     0,    13, 
          0,     0,     0,     0,     0,     0,     0,   155,     0,     0, 
          0,   176,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        204,   205,     0,     0,     0,     0,     0,     0,     0,    64, 
         65,     0,     0,     0,   215,   222,   216,     0,     0,    23, 
          0,     0,     0,    27,    31,     0,     0,     0,   138,     0, 
        210,     0,   150,   207,     0,     0,     0,     0,   170,   157, 
        167,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   186,   187, 
        188,   189,   190,   191,     0,   178,     0,     0,   218,     0, 
         25,    31,     0,     0,     0,     0,   169,     0,     0,     0, 
        209,     0,     0,   152,     0,   146,     0,     0,   223,   219, 
        221,     0,   225,     0,    21,     0,    30,    32,    33,     0, 
          0,     0,     0,   140,     0,     0,   213,     0,     0,     0, 
        154,     0,    17,     0,     0,     0,     0,     0,     0,    19, 
         31,     0,   156,   211,     0,     0,     0,     0,    88,     0, 
        108,    92,    96,    98,    94,   104,   106,    90,   100,   111, 
          0,     0,    85,     0,    55,     0,     0,     0,     0,    31, 
         41,     0,     0,    39,     0,     0,   143,   147,     0,   102, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    34, 
        110,    87,     0,     0,     0,    53,    80,    76,    77,    78, 
         79,     0,    81,     0,     0,     0,     0,     0,   214,   144, 
          0,     0,     0,     0,     0,     0,   122,     0,     0,   105, 
        107,     0,     0,     0,     0,    69,     0,     0,    48,     0, 
         47,     0,     0,    82,     0,    57,     0,    44,    29,     0, 
         89,     0,   109,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    45,     0,    83, 
          0,    43,     0,     0,     0,   123,     0,     0,     0,     0, 
         73,    72,     0,     0,    71,    49,    50,     0,     0,   131, 
        135,   103,     0,   128,     0,     0,    97,     0,     0,     0, 
          0,     0,    75,    66,     0,    56,     0,     0,     0,     0, 
        127,   134,   130,     0,    99,     0,     0,   125,    91,   116, 
        118,     0,   113,     0,     0,    54,     0,     0,     0,     0, 
        120,    95,     0,     0,     0,   101,   115,    67,    58,     0, 
          0,     0,   126,     0,     0,     0,   136,    93,     0,   119, 
          0,   117,     0,     0,   132, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    21,    73,     4,     7,     8,    11,    47,   216, 
        135,    42,    86,   142,   194,    44,   221,    43,    88,   144, 
        271,   217,   218,   219,   261,   222,   223,   238,   239,   262, 
        324,   306,   295,   332,   263,   325,   333,   374,   396,   293, 
        304,   361,    31,    23,    32,    75,   102,   326,   327,   264, 
        279,   288,   318,   409,   282,   148,   285,   390,   283,   284, 
        289,   412,   312,   382,   286,   287,   281,   413,   414,   424, 
        425,   423,   383,   401,   384,   385,   399,   400,   149,   158, 
        207,    77,   153,    99,   100,   162,   150,    78,    79,    80, 
         81,    82,    93,   103,    83,   154,   155,   199,   245,   137, 
        138,   139,    24,    25, 
    );
    protected static $yySindex = array(         -237,
          0,     0,  -213,  -193,     0,   314,     0,  -213,    47,    51, 
       -125,    55,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,  -141,     0,     0,   493,     0,  -193,     0,   117,  -193, 
         74,   124,     0,     0,     0,     0,     0,   -32,   144,   493, 
         55,  -193,  -193,  -193,     0,   141,   148,  2015,     0,     0, 
        149,   -77,   -50,   -77,   -32,     0,  2015,  2015,     0,  2015, 
       2015,  2015,  2015,   239,     0,     0,     0,     0,     0,     0, 
       2015,  2015,  -175,   263,   211,   221,     0,     0,     0,     0, 
          0,     0,   219,   -58,  -193,   -25,  -193,   160,   -25,     0, 
        353,   353,  2015,   151,   151,   151,   151,     0,   -90,  -193, 
        263,     0,   147,   300,    -9,  2015,  2015,  2015,  2015,  2015, 
       2015,  2015,  2015,  2015,  2015,  2015,  2015,  2015,  2015,  2015, 
          0,     0,  2015,  2015,  2015,  2015,  2015,  2015,  2015,     0, 
          0,  2015,    -1,   -14,     0,     0,     0,   235,   270,     0, 
       -193,   184,   272,     0,     0,   195,   406,   228,     0,  2015, 
          0,    67,     0,     0,   -90,   119,   288,   -90,     0,     0, 
          0,  -208,   156,   156,   963,   276,   156,   156,   156,   156, 
        156,   156,   156,   353,   353,   151,   151,   151,     0,     0, 
          0,     0,     0,     0,   963,     0,  -193,   237,     0,   -58, 
          0,     0,  -193,   136,    75,  2015,     0,   297,  2015,   299, 
          0,   247,  2015,     0,   304,     0,   -90,  2015,     0,     0, 
          0,   190,     0,   225,     0,  -231,     0,     0,     0,     0, 
        227,   291,   311,     0,   -90,   265,     0,   242,   325,  2015, 
          0,   156,     0,  2625,   244,    28,  -204,   248,   330,     0, 
          0,    75,     0,     0,  2015,  2015,   248,   341,     0,   267, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        268,   461,     0,  2625,     0,   128,   352,    64,   333,     0, 
          0,  2015,   408,     0,   355,   274,     0,     0,  2015,     0, 
       2015,   357,   361,  2659,   362,   344,   345,   366,   371,     0, 
          0,     0,  -193,  -116,   128,     0,     0,     0,     0,     0, 
          0,   -75,     0,   372,  2015,   365,   605,   676,     0,     0, 
        698,  2625,   725,  2015,  2015,  2625,     0,    84,  2015,     0, 
          0,  2015,  2015,   -39,   384,     0,   402,   407,     0,  2625, 
          0,   393,  -193,     0,   363,     0,   963,     0,     0,   248, 
          0,   329,     0,   396,   785,   332,   233,   418,   837,   865, 
        892,   120,   333,   140,  -193,   423,   340,     0,   437,     0, 
       -193,     0,  -294,  2015,  2659,     0,  2015,   150,  2659,   373, 
          0,     0,  -193,    33,     0,     0,     0,   140,   459,     0, 
          0,     0,   157,     0,   161,   448,     0,   919,   105,   478, 
        154,  -314,     0,     0,  2625,     0,    33,   140,   487,   405, 
          0,     0,     0,  2015,     0,   209,  2659,     0,     0,     0, 
          0,   425,     0,  -314,   430,     0,    33,  -193,  2625,   519, 
          0,     0,  2659,  2015,   503,     0,     0,     0,     0,   224, 
        440,  2659,     0,   941,  2625,   525,     0,     0,  2625,     0, 
        446,     0,  2625,   447,     0, 
    );
    protected static $yyRindex= array(          929,
          0,     0,   229,     0,     0,   -70,     0,  1458,  1822,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   -56,     0,     0,     0,     0,     0, 
          0,   480,     0,     0,     0,     0,     0,     0,    61,   107, 
          0,     0,     0,     0,     0,   512,     0,   533,     0,     0, 
        -23,  -103,   453,  -103,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   133,     0,     0,     0,     0,     0,     0, 
        450,     0,     0,   536,     0,     0,     0,     0,     0,     0, 
          0,     0,   -13,     0,     0,   465,     0,     0,   465,     0, 
       1438,  1497,   511,   993,  1101,  1161,  1368,     0,   178,     0, 
          0,     0,     0,     0,  -207,     0,     0,   547,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    13,     0,     0,     0,     0,   553,     0, 
          0,     0,    35,     0,     0,     0,    20,     0,     0,   575, 
          0,     0,     0,     0,   206,   582,     0,   178,     0,     0, 
          0,     0,  1567,  1579,    88,     0,  1612,  1624,  1637,  1670, 
       2028,  2051,  2064,  1542,  1554,  1393,  1426,  1485,     0,     0, 
          0,     0,     0,     0,   -17,     0,     0,     0,     0,     0, 
          0,     0,     0,  -216,   506,     0,     0,     0,   539,   -28, 
          0,     0,   575,     0,    27,     0,   178,     0,     0,     0, 
          0,  -216,     0,   343,     0,     0,     0,     0,     0,     3, 
          0,   518,    23,     0,   178,     0,     0,   609,     0,   575, 
          0,  2076,     0,   526,   -18,     0,     0,   -22,     0,     0, 
          0,     0,     0,     0,   575,   527,    80,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,  -119,     0,     0,     0,     0,   591,     0, 
          0,     0,  -113,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   612,     0,   595,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,  -216,     0,     0,     0, 
          0,   526,     0,   597,     0,   526,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   616,     0,     0,     0, 
          0,     0,   612,     0,     0,     0,   305,     0,     0,   -22, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   121,    43,     0,     0,     0,     0,     0,     0, 
        612,     0,     0,   597,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    43,     0,     0, 
          0,     0,  2465,     0,  2278,     0,     0,     0,   617,     0, 
       2510,   534,     0,     0,   526,     0,     0,    43,     0,     0, 
          0,     0,     0,   575,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   535,     0,     0,     0,     0,   526,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,  -117,     0,     0,     0,  -117,     0, 
          0,     0,   526,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   653,     0,     0,   607,   666, 
        269,     0,   625,   592,   -41,     0,     0,     0,     0,  -139, 
       -236,     0,     0,     0,   620,   438,     0,     0,     0,  2181, 
        -59,   331,   388,     0,  -180,  -285,     0,  -320,  -248,     0, 
          0,     0,   644,   646,     0,  -104,    -3,   354,   397,  -235, 
          0,     0,    94,     0,     0,   452,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   296,     0,     0, 
          0,     0,   335,     0,   339,     0,     0,     0,   520,     0, 
          0,     0,   -43,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   569,     0,     0,     0,     0, 
        537,     0,   700,     0, 
    );
    protected static $yyTable = array(10,
        151,   191,   352,   166,   133,    86,   330,    84,   212,    45, 
        277,    35,   212,   212,   212,   212,   212,   334,   212,    22, 
        217,    28,    37,   179,   136,    39,   179,   177,   235,   212, 
        212,   212,   212,   212,   212,   217,    28,    51,    51,    51, 
        157,    14,    42,   226,    76,    84,    40,   359,   317,   380, 
        381,   205,   153,   213,   217,   267,   217,   397,   410,   411, 
        139,    40,   212,   145,   212,     1,     9,   145,   145,   145, 
        145,   145,    14,   145,   217,   379,   188,   417,   139,   134, 
         51,    38,    51,   292,   145,   145,   145,   145,   145,   145, 
          5,   394,    27,   224,   226,   156,   212,   212,   236,   217, 
        297,    74,    28,   362,    63,   300,   298,   179,   299,    28, 
        301,   177,   139,   226,   204,   268,    28,   145,    30,   145, 
         28,    28,    28,    28,    28,    40,    28,    40,   186,   317, 
        136,   206,   153,   317,    29,   269,    51,    28,    28,    28, 
         28,    28,    28,   328,   139,   142,   226,    38,   416,   357, 
        212,   145,   145,    63,   302,   395,   237,   224,    33,    34, 
         35,    51,    38,   231,    51,    74,    40,    41,   429,   166, 
         28,   317,    28,   166,   166,   166,   166,   166,    84,   166, 
        142,   243,   209,    48,     9,   134,    55,   317,    51,   303, 
        166,   166,   166,   166,   166,   166,   317,   118,   116,   273, 
        117,     9,   119,   228,    28,    28,    56,    22,    84,   202, 
        123,   134,   124,    51,   206,   123,   226,   124,   206,   206, 
        206,   206,   206,   329,   206,   166,    12,    46,   307,   226, 
        226,   226,    85,   393,   105,   206,   206,   206,   206,   206, 
        206,    14,   208,   228,   228,   228,   208,   208,   208,   208, 
        208,   130,   208,    86,    86,    84,    84,   166,   166,    87, 
        215,   131,   132,   208,   208,   208,   208,   208,   208,   107, 
        206,   159,   217,   228,   118,   116,   120,   117,    98,   119, 
         12,   120,   145,   265,    27,   141,   217,   217,   134,    27, 
        161,   291,   123,   106,   124,   108,   189,   134,   208,   107, 
        353,    14,   206,   206,   118,   116,   192,   117,   187,   119, 
         52,    53,    54,   190,   233,   193,   217,   195,   152,     5, 
        197,    14,   123,   106,   124,   108,   200,   203,   134,   210, 
        208,   208,   217,   208,   220,   212,   107,   225,   227,   228, 
        160,   118,   116,   230,   117,    52,   119,   234,    52,   241, 
        134,   240,   217,   140,   242,   143,   134,   244,   120,   123, 
        106,   124,   108,    52,   246,   247,   226,   266,    51,   272, 
        270,   212,   212,   212,   212,   212,   212,   212,   212,   212, 
        212,   278,   212,   212,   212,   212,   212,   294,   120,   280, 
        145,   296,   290,   305,   118,   309,   314,    52,   310,   119, 
        315,   319,   320,   321,    12,   322,   226,   226,   226,   143, 
        323,   336,   123,    51,   124,    13,    14,    15,   214,    17, 
         18,    19,    20,   338,   354,   120,   145,   145,   145,   145, 
        145,   145,   145,   145,   145,   145,   226,   145,   145,   145, 
        145,   145,   107,    28,   348,   355,   356,   118,   116,   196, 
        117,   358,   119,   363,   364,   360,   366,   367,   387,   371, 
        373,   143,   391,   376,   377,   123,   106,   124,   108,    13, 
         14,    15,   214,    17,    18,    19,    20,   378,   120,    28, 
         28,    28,    28,    28,    28,    28,    28,    28,    28,   389, 
         28,    28,    28,    28,    28,   392,   166,   107,    12,   398, 
        422,   381,   118,   116,   380,   117,   404,   119,     5,     5, 
          5,     5,     5,     5,     5,     5,   433,   406,   407,   291, 
        123,   106,   124,   108,   408,   438,   418,   419,     5,     5, 
          5,   120,   166,   166,   166,   166,   166,   166,   166,   166, 
        166,   206,    14,   166,   166,   166,   166,   166,   421,   426, 
        126,   125,   121,   122,   428,   126,   125,   121,   122,   432, 
        435,   127,   128,   436,   437,   441,   127,   128,   443,   208, 
         11,   445,    61,   141,   175,    26,   142,   206,   206,   206, 
        206,   206,   206,   206,   206,   206,   120,    24,   206,   206, 
        206,   206,   206,    13,    14,    15,    16,    17,    18,    19, 
         20,   198,   233,   137,   141,   208,   208,   208,   208,   208, 
        208,   208,   208,   208,   220,   137,   208,   208,   208,   208, 
        208,   217,   233,   233,   233,   233,   233,   233,   233,   233, 
         37,   141,   126,   125,   121,   122,   109,   110,   111,   112, 
        113,   143,    36,   127,   128,   129,   114,   115,   219,    51, 
         84,   137,    68,    46,   229,   137,    70,   121,   112,   114, 
         26,    90,   126,   125,   121,   122,   109,   110,   111,   112, 
        113,    22,   233,   127,   128,   129,   114,   115,    89,   274, 
        146,   248,   331,   372,    50,    49,   430,    13,    14,    15, 
        214,    17,    18,    19,    20,    12,   275,   276,   335,   126, 
        125,   121,   122,   109,   110,   111,   112,   113,   375,   427, 
        127,   128,   107,   114,   115,   224,   340,   118,   116,   403, 
        117,   402,   119,   201,    36,     0,   211,     0,     0,   339, 
          0,     0,     0,     0,   107,   123,   106,   124,   108,   118, 
        116,     0,   117,     0,   119,     0,     0,     0,     0,     0, 
          0,     0,   126,   125,   121,   122,   341,   123,   106,   124, 
        108,   107,     0,   127,   128,   344,   118,   116,     0,   117, 
          0,   119,    13,    14,    15,    16,    17,    18,    19,    20, 
          0,     0,     0,   343,   123,   106,   124,   108,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   120,     0,     0,     0,   126,   125,   121,   122,   109, 
        110,   111,   112,   113,     0,   386,   127,   128,     0,   114, 
        115,   107,     0,   120,     0,   365,   118,   116,     0,   117, 
          0,   119,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   123,   106,   124,   108,     0,     0, 
        120,     0,     0,     0,     0,   420,     0,     0,     0,     0, 
        126,   125,   121,   122,   109,   110,   111,   112,   113,     0, 
          0,   127,   128,   107,   114,   115,     0,     0,   118,   116, 
          0,   117,     0,   119,    13,    14,    15,   214,    17,    18, 
         19,    20,     0,     0,     0,     0,   123,   106,   124,   108, 
          0,   107,     0,     0,     0,   369,   118,   116,     0,   117, 
        120,   119,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   123,   106,   124,   108,   107,     0, 
          0,   342,   370,   118,   116,   346,   117,     0,   119,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   123,   106,   124,   108,   107,     0,     0,     0,   405, 
        118,   116,   120,   117,     0,   119,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   107,   123,   106, 
        124,   108,   118,   116,     0,   117,     0,   119,     0,     0, 
        120,     0,     0,     0,     0,     0,     0,     0,   439,   107, 
        123,   106,   124,   108,   118,   116,     0,   117,     0,   119, 
          0,     0,     0,     0,   415,     0,     0,   120,     0,     2, 
          0,     0,   123,   106,   124,   108,     0,     0,     0,   198, 
          0,     0,     0,   198,   198,   198,   198,   198,   431,   198, 
          0,     0,     0,     0,   120,     0,     0,     0,     0,     0, 
        198,   198,     0,   198,   440,   198,     0,     0,   442,     0, 
          0,     0,   444,     0,     0,     0,   120,     0,     0,     0, 
          0,     0,     0,     0,     0,   126,   125,   121,   122,   109, 
        110,   111,   112,   113,     0,   198,   127,   128,   120,   114, 
        115,     0,     0,     0,     0,     0,     0,   126,   125,   121, 
        122,   109,   110,   111,   112,   113,     0,     0,   127,   128, 
          0,   114,   115,     0,     0,     0,     0,   198,     0,     0, 
          0,     0,     0,     0,   126,   125,   121,   122,   109,   110, 
        111,   112,   113,     0,     0,   127,   128,   199,   114,   115, 
          0,   199,   199,   199,   199,   199,     0,   199,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   199,   199, 
          0,   199,     0,   199,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   126,   125,   121,   122,   109,   110, 
        111,   112,   113,   199,     0,   127,   128,   202,   114,   115, 
        368,   202,   202,   202,   202,   202,     0,   202,     2,     2, 
          2,     2,     2,     2,     2,     2,     0,     0,   202,   202, 
          0,   202,     0,   202,     0,   199,     0,     0,     2,     2, 
          2,     0,     2,     0,     0,     0,   126,   125,   121,   122, 
        109,   110,   111,   112,   113,     0,     0,   127,   128,     0, 
        114,   115,     0,   202,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   126,   125,   121,   122,   109,   110, 
        111,   112,   113,     0,     0,   127,   128,     0,   114,   115, 
          0,     0,     0,     0,     0,   202,     0,     0,     0,     0, 
          0,   126,   125,   121,   122,   109,   110,   111,   112,   113, 
          0,     0,   127,   128,     0,   114,   115,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   126,   125, 
        121,   122,   109,   110,   111,   112,   113,     0,     0,   127, 
        128,     0,   114,   115,     0,     0,     0,     0,     0,     0, 
        126,   125,   121,   122,   109,   110,   111,   112,   113,     0, 
          0,   127,   128,     0,   114,   115,   198,     0,     0,     0, 
          0,     0,   126,   125,   121,   122,   109,   110,   111,   112, 
        113,     0,     0,   127,   128,     0,   114,   115,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   198,   198,   198,   198, 
        198,     0,     0,     0,   203,   198,   198,   198,   203,   203, 
        203,   203,   203,     0,   203,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   203,   203,     0,   203,   194, 
        203,     0,     0,   194,   194,   194,   194,   194,     0,   194, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        194,   194,     0,   194,     0,   194,     0,     0,     0,     0, 
        203,     0,   195,     0,   199,     0,   195,   195,   195,   195, 
        195,     0,   195,     0,   200,     0,     0,     0,   200,     0, 
        200,   200,   200,   195,   195,   194,   195,     0,   195,     0, 
          0,     0,   203,     0,     0,   200,   200,     0,   200,     0, 
        200,     0,     0,     0,   199,   199,   199,   199,   199,     0, 
          0,     0,     0,   199,   199,   199,     0,   194,   195,     0, 
          0,   197,     0,     0,   202,   197,   197,   197,   197,   197, 
        200,   197,     0,   201,     0,     0,     0,   201,     0,   201, 
        201,   201,   197,   197,     0,   197,     0,   197,     7,     0, 
        195,     0,     0,     0,   201,   201,     0,   201,     0,   201, 
          0,     0,   200,     0,   202,   202,   202,   202,   202,     0, 
          0,     0,     0,   202,   202,   202,     0,   197,   192,     0, 
          0,     0,   192,     0,   192,   192,   192,     0,     0,   201, 
        193,     0,     0,     0,   193,     0,   193,   193,   193,   192, 
        192,     0,   192,   180,   192,     0,     0,   180,     0,   197, 
        180,   193,   193,     0,   193,   196,   193,     0,     0,   196, 
          0,   201,   196,     0,   180,   180,     0,   180,     0,   180, 
          0,     0,     0,     0,   192,     0,   196,   196,     0,   196, 
          0,   196,     0,     0,     0,     0,   193,     0,   181,     0, 
          0,     0,   181,     0,     0,   181,     0,     0,     0,   180, 
        182,     0,     0,     0,   182,     0,   192,   182,     0,   181, 
        181,   196,   181,   183,   181,     0,     0,   183,   193,     0, 
        183,   182,   182,     0,   182,     0,   182,     0,     0,     0, 
          0,   180,     0,     0,   183,   183,     0,   183,     0,   183, 
          0,     0,     0,   196,   181,     0,   184,     0,     0,     0, 
        184,     0,     0,   184,     0,     0,   182,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   184,   184,   183, 
        184,   203,   184,     0,     0,     0,   181,     7,     7,     7, 
          7,     7,     7,     7,     7,     0,     0,     0,   182,     0, 
          0,     0,     0,     0,     0,     0,   194,     7,     7,     7, 
          0,   183,   184,     0,     0,     0,     0,     0,     0,     0, 
          0,   203,   203,   203,   203,   203,     0,     0,     0,     0, 
        203,   203,   203,     0,     0,     0,     0,     0,     0,   195, 
          0,     0,     0,     0,   184,     0,   194,   194,   194,   194, 
        194,   200,     0,     0,     0,   194,   194,   194,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   195, 
        195,   195,   195,   195,     0,     0,     0,     0,   195,   195, 
        195,   200,   200,   200,   200,   200,     0,     0,   197,     0, 
        200,   200,   200,     0,     0,     0,     0,     0,     0,     0, 
        201,    14,     0,    14,     0,    14,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         14,    14,     0,    14,     0,     0,     0,     0,   197,   197, 
        197,   197,   197,     0,     0,     0,     0,   197,   197,   197, 
        201,   201,   201,   201,   201,   192,     0,     0,     0,   201, 
        201,   201,    14,     0,    14,     0,     0,   193,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        180,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   196,     0,    14,   192,   192,   192,   192,   192, 
          0,     0,     0,     0,   192,   192,   192,   193,   193,   193, 
        193,   193,     0,     0,     0,     0,   193,   193,   193,     0, 
        180,   180,   180,   180,   180,   181,     0,     0,     0,   180, 
        180,   180,   196,   196,   196,   196,   196,   182,     0,     0, 
          0,   196,   196,   196,     0,     0,     0,     0,     0,     0, 
        183,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   181,   181,   181,   181,   181, 
          0,     0,     0,     0,   181,   181,   181,   182,   182,   182, 
        182,   182,     0,   184,     0,     0,   182,   182,   182,     0, 
        183,   183,   183,   183,   183,     0,     0,    60,     0,   183, 
        183,   183,     0,     0,    72,     0,     0,    57,     0,    58, 
          0,     0,     0,     0,   185,     0,     0,     0,   185,     0, 
          0,   185,     0,   184,   184,   184,   184,   184,     0,     0, 
          0,    14,   184,   184,   184,   185,   185,   164,   185,     0, 
        185,   164,     0,     0,   164,     0,     0,     0,     0,     0, 
        165,     0,     0,     0,   165,    59,     0,   165,   164,   164, 
          0,   164,   163,   164,     0,     0,   163,     0,     0,   163, 
        185,   165,   165,     0,   165,     0,   165,     0,     0,     0, 
          0,    14,    14,   163,   163,     0,   163,    71,   163,     0, 
         61,    14,     0,   164,     0,     0,     0,     0,     0,     0, 
          0,     0,   185,     0,     0,     0,   165,     0,     0,     0, 
          0,    14,     0,     0,     0,     0,     0,     0,   163,     0, 
          0,     0,     0,     0,     0,   164,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   165,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        163,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    74,     0, 
          0,    14,     0,     0,     0,     0,     0,    91,    92,     0, 
         94,    95,    96,    97,     0,     0,     0,     0,     0,     0, 
          0,   101,   104,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   147,    64,    65,    66,    67,    68,     0, 
          0,     0,     0,     0,     0,     0,   163,   164,   165,   167, 
        168,   169,   170,   171,   172,   173,   174,   175,   176,   177, 
        178,     0,     0,   179,   180,   181,   182,   183,   184,   185, 
        129,     0,   101,     0,     0,     0,     0,   129,     0,     0, 
        129,     0,   129,     0,     0,     0,     0,     0,     0,     0, 
        147,     0,     0,     0,     0,     0,   129,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    69,     0,     0,     0,     0,     0, 
         70,     0,     0,     0,     0,     0,     0,     0,   129,     0, 
          0,     0,     0,     0,     0,     0,   147,     0,     0,   165, 
          0,     0,     0,   147,     0,     0,     0,     0,   232,     0, 
          0,   185,     0,     0,     0,     0,     0,     0,     0,     0, 
        129,     0,   129,   129,     0,     0,     0,     0,     0,     0, 
        147,     0,     0,     0,   164,     0,    62,    63,     0,     0, 
          0,     0,     0,     0,     0,   147,   147,   165,     0,     0, 
          0,   185,   185,   185,   185,   185,     0,     0,     0,   163, 
        185,   185,   185,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   308,     0,   164,   164,   164,   164,   164,   311, 
          0,   313,     0,   164,   164,   164,     0,   165,   165,   165, 
        165,   165,     0,     0,     0,     0,   165,   165,   165,   163, 
        163,   163,   163,   163,     0,   337,     0,     0,   163,   163, 
        163,     0,     0,     0,   147,   345,   347,   133,     0,   349, 
          0,     0,   350,   351,   133,     0,     0,   133,     0,   133, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   133,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   129,   129,   129, 
        129,   129,   124,     0,   147,     0,     0,   388,     0,   124, 
          0,     0,   124,     0,   124,   133,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   124,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   147,     0,     0,   133,     0,   133, 
        133,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        124,     0,     0,     0,   434,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   129,   129,   129, 
        129,     0,   129,   129,     0,     0,     0,     0,     0,     0, 
          0,     0,   124,     0,   124,   124,     0,   129,   129,   129, 
        129,     0,   129,   129,     0,     0,     0,   129,   129,   129, 
        129,   129,     0,     0,     0,     0,     0,    60,     0,     0, 
          0,     0,     0,     0,    72,     0,     0,    57,     0,    58, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   129, 
        129,     0,     0,   260,     0,     0,     0,     0,     0,     0, 
          0,    60,     0,     0,     0,     0,     0,     0,    72,     0, 
          0,    57,     0,    58,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    59,     0,   260,     0,     0, 
          0,     0,     0,     0,   133,   133,   133,   133,   133,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    71,     0,    59, 
         61,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   124, 
        124,   124,   124,   124,     0,     0,     0,     0,     0,     0, 
          0,   316,     0,     0,    61,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   133,   133,   133,   133,     0,     0, 
        133,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   133,   133,   133,   133,     0,   133, 
        133,     0,     0,     0,   133,   133,   133,   133,   133,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   124, 
        124,   124,   124,     0,     0,   124,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   133,   133,     0,   124, 
        124,   124,   124,     0,   124,   124,     0,     0,     0,   124, 
          0,   124,   124,   124,    64,    65,    66,    67,    68,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   124,   124,     0,     0,     0,     0,     0,    64,    65, 
         66,    67,    68,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    69,   249,   250,   251,     0,     0, 
         70,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   252,   253,   254,   255,     0,   256, 
        257,     0,     0,     0,   258,     0,   259,     0,    69,   249, 
        250,   251,     0,     0,    70,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   252,   253, 
        254,   255,     0,   256,   257,     0,    62,    63,   258,     0, 
        259,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         62,    63, 
    );
    protected static $yyCheck = array(4,
         91,   141,    42,   108,    63,   125,   123,   125,    37,    42, 
        247,   125,    41,    42,    43,    44,    45,    93,    47,   123, 
         44,    44,    27,    41,    84,    30,    44,    41,   260,    58, 
         59,    60,    61,    62,    63,    59,    59,    42,    43,    44, 
        100,    60,    40,   260,    48,    60,    44,   333,   284,   344, 
        345,   260,   260,   193,    42,   260,    44,   378,   373,   374, 
         41,    59,    91,    37,    93,   303,   260,    41,    42,    43, 
         44,    45,    91,    47,    62,   361,    91,   398,    59,    84, 
         85,    59,    87,   264,    58,    59,    60,    61,    62,    63, 
        304,    59,    46,    59,   199,   100,   125,   126,   330,   123, 
         37,    59,   125,   340,    44,    42,    43,   125,    45,    59, 
         47,   125,    93,   330,   158,   320,    37,    91,    64,    93, 
         41,    42,    43,    44,    45,   123,    47,   125,   132,   365, 
        190,   340,   340,   369,   260,   340,   141,    58,    59,    60, 
         61,    62,    63,   260,   125,    58,   260,   125,   397,   330, 
        192,   125,   126,    93,    91,   123,   216,   123,   300,   301, 
        302,    41,    46,   207,    44,   123,    93,    44,   417,    37, 
         91,   407,    93,    41,    42,    43,    44,    45,    60,    47, 
         93,   225,   187,    40,   260,   190,    46,   423,   193,   126, 
         58,    59,    60,    61,    62,    63,   432,    42,    43,   241, 
         45,   260,    47,   260,   125,   126,    59,   311,    60,    91, 
         60,   216,    62,    93,    37,    60,   330,    62,    41,    42, 
         43,    44,    45,   340,    47,    93,    91,   260,   270,   300, 
        301,   302,   310,   373,   410,    58,    59,    60,    61,    62, 
         63,   260,    37,   300,   301,   302,    41,    42,    43,    44, 
         45,    41,    47,   373,   374,   373,   374,   125,   126,   310, 
        125,    41,    44,    58,    59,    60,    61,    62,    63,    37, 
         93,   125,   260,   330,    42,    43,   126,    45,    40,    47, 
         91,   126,   123,    40,    46,   311,   310,   311,   293,    46, 
        300,    59,    60,    61,    62,    63,    62,   302,    93,    37, 
        340,   320,   125,   126,    42,    43,   123,    45,   310,    47, 
         42,    43,    44,    44,   125,    44,   340,   123,   409,    91, 
         93,   340,    60,    61,    62,    63,   260,    40,   333,    93, 
        125,   126,   320,    58,   260,   364,    37,    41,    40,    93, 
         41,    42,    43,    40,    45,    41,    47,   123,    44,    59, 
        355,   125,   340,    85,    44,    87,   361,    93,   126,    60, 
         61,    62,    63,    59,   123,    41,   260,   340,   373,    40, 
        123,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
        409,    41,   411,   412,   413,   414,   415,   260,   126,   123, 
        364,    40,   125,    61,    42,    41,    40,    93,   125,    47, 
         40,    40,    59,    59,    91,    40,   300,   301,   302,   141, 
         40,    40,    60,   418,    62,   280,   281,   282,   283,   284, 
        285,   286,   287,    59,    41,   126,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   409,   330,   411,   412,   413, 
        414,   415,    37,   364,   361,    44,    40,    42,    43,    44, 
         45,    59,    47,   125,    59,    93,   125,    40,   365,   340, 
        321,   193,   369,    41,   125,    60,    61,    62,    63,   280, 
        281,   282,   283,   284,   285,   286,   287,    41,   126,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   409,   340, 
        411,   412,   413,   414,   415,   123,   364,    37,    91,    41, 
        407,   345,    42,    43,   344,    45,    59,    47,   280,   281, 
        282,   283,   284,   285,   286,   287,   423,   413,    41,    59, 
         60,    61,    62,    63,   371,   432,    40,   123,   300,   301, 
        302,   126,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   364,   410,   411,   412,   413,   414,   415,   340,   125, 
        400,   401,   402,   403,   125,   400,   401,   402,   403,    41, 
         58,   411,   412,   340,   125,    41,   411,   412,   123,   364, 
         59,   125,    93,    41,   125,   123,    41,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   126,   123,   411,   412, 
        413,   414,   415,   280,   281,   282,   283,   284,   285,   286, 
        287,   150,   260,    93,    58,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    62,    41,   411,   412,   413,   414, 
        415,    40,   280,   281,   282,   283,   284,   285,   286,   287, 
        125,    93,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   373,   125,   411,   412,   413,   414,   415,    40,    59, 
        125,   125,    41,    59,   203,    59,    41,    41,   125,   125, 
          8,    55,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,     6,   330,   411,   412,   413,   414,   415,    54,   242, 
         89,   230,   295,   353,    41,    40,   418,   280,   281,   282, 
        283,   284,   285,   286,   287,    91,   245,   246,   302,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   355,   414, 
        411,   412,    37,   414,   415,   196,    41,    42,    43,   385, 
         45,   383,    47,   155,    25,    -1,   190,    -1,    -1,   125, 
         -1,    -1,    -1,    -1,    37,    60,    61,    62,    63,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,    59,    60,    61,    62, 
         63,    37,    -1,   411,   412,   314,    42,    43,    -1,    45, 
         -1,    47,   280,   281,   282,   283,   284,   285,   286,   287, 
         -1,    -1,    -1,    59,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   126,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,   364,   411,   412,    -1,   414, 
        415,    37,    -1,   126,    -1,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1, 
        126,    -1,    -1,    -1,    -1,   404,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    37,   414,   415,    -1,    -1,    42,    43, 
         -1,    45,    -1,    47,   280,   281,   282,   283,   284,   285, 
        286,   287,    -1,    -1,    -1,    -1,    60,    61,    62,    63, 
         -1,    37,    -1,    -1,    -1,    41,    42,    43,    -1,    45, 
        126,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    37,    -1, 
         -1,   312,    41,    42,    43,   316,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    60,    61,    62,    63,    37,    -1,    -1,    -1,    41, 
         42,    43,   126,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    60,    61, 
         62,    63,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    37, 
         60,    61,    62,    63,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,   395,    -1,    -1,   126,    -1,    91, 
         -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1,    37, 
         -1,    -1,    -1,    41,    42,    43,    44,    45,   419,    47, 
         -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,   435,    63,    -1,    -1,   439,    -1, 
         -1,    -1,   443,    -1,    -1,    -1,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    93,   411,   412,   126,   414, 
        415,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,    -1,    -1,    -1,    -1,   125,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    37,   414,   415, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    93,    -1,   411,   412,    37,   414,   415, 
        364,    41,    42,    43,    44,    45,    -1,    47,   280,   281, 
        282,   283,   284,   285,   286,   287,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,   125,    -1,    -1,   300,   301, 
        302,    -1,   304,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
         -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   364,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    37,   413,   414,   415,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    37, 
         63,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1, 
         93,    -1,    37,    -1,   364,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    37,    -1,    -1,    -1,    41,    -1, 
         43,    44,    45,    58,    59,    93,    61,    -1,    63,    -1, 
         -1,    -1,   125,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,    -1,   125,    93,    -1, 
         -1,    37,    -1,    -1,   364,    41,    42,    43,    44,    45, 
         93,    47,    -1,    37,    -1,    -1,    -1,    41,    -1,    43, 
         44,    45,    58,    59,    -1,    61,    -1,    63,    91,    -1, 
        125,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,   125,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,    -1,    93,    37,    -1, 
         -1,    -1,    41,    -1,    43,    44,    45,    -1,    -1,    93, 
         37,    -1,    -1,    -1,    41,    -1,    43,    44,    45,    58, 
         59,    -1,    61,    37,    63,    -1,    -1,    41,    -1,   125, 
         44,    58,    59,    -1,    61,    37,    63,    -1,    -1,    41, 
         -1,   125,    44,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,    -1,    93,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    93,    -1,    37,    -1, 
         -1,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    93, 
         37,    -1,    -1,    -1,    41,    -1,   125,    44,    -1,    58, 
         59,    93,    61,    37,    63,    -1,    -1,    41,   125,    -1, 
         44,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,   125,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,   125,    93,    -1,    37,    -1,    -1,    -1, 
         41,    -1,    -1,    44,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    93, 
         61,   364,    63,    -1,    -1,    -1,   125,   280,   281,   282, 
        283,   284,   285,   286,   287,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   364,   300,   301,   302, 
         -1,   125,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1,   364, 
         -1,    -1,    -1,    -1,   125,    -1,   404,   405,   406,   407, 
        408,   364,    -1,    -1,    -1,   413,   414,   415,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,   404,   405,   406,   407,   408,    -1,    -1,   364,    -1, 
        413,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        364,    40,    -1,    42,    -1,    44,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         59,    60,    -1,    62,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
        404,   405,   406,   407,   408,   364,    -1,    -1,    -1,   413, 
        414,   415,    91,    -1,    93,    -1,    -1,   364,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   364,    -1,   123,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,    -1, 
        404,   405,   406,   407,   408,   364,    -1,    -1,    -1,   413, 
        414,   415,   404,   405,   406,   407,   408,   364,    -1,    -1, 
         -1,   413,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1, 
        364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,   404,   405,   406, 
        407,   408,    -1,   364,    -1,    -1,   413,   414,   415,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    33,    -1,   413, 
        414,   415,    -1,    -1,    40,    -1,    -1,    43,    -1,    45, 
         -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1, 
         -1,    44,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,   260,   413,   414,   415,    58,    59,    37,    61,    -1, 
         63,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1, 
         37,    -1,    -1,    -1,    41,    91,    -1,    44,    58,    59, 
         -1,    61,    37,    63,    -1,    -1,    41,    -1,    -1,    44, 
         93,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,   310,   311,    58,    59,    -1,    61,   123,    63,    -1, 
        126,   320,    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   125,    -1,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,   340,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1, 
         -1,   410,    -1,    -1,    -1,    -1,    -1,    57,    58,    -1, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,   260,   261,   262,   263,   264,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109, 
        110,   111,   112,   113,   114,   115,   116,   117,   118,   119, 
        120,    -1,    -1,   123,   124,   125,   126,   127,   128,   129, 
         33,    -1,   132,    -1,    -1,    -1,    -1,    40,    -1,    -1, 
         43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        150,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,    -1, 
        346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,   199, 
         -1,    -1,    -1,   203,    -1,    -1,    -1,    -1,   208,    -1, 
         -1,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
        230,    -1,    -1,    -1,   364,    -1,   402,   403,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   245,   246,   364,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,   364, 
        413,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   272,    -1,   404,   405,   406,   407,   408,   279, 
         -1,   281,    -1,   413,   414,   415,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,   404, 
        405,   406,   407,   408,    -1,   305,    -1,    -1,   413,   414, 
        415,    -1,    -1,    -1,   314,   315,   316,    33,    -1,   319, 
         -1,    -1,   322,   323,    40,    -1,    -1,    43,    -1,    45, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,   261,   262, 
        263,   264,    33,    -1,   364,    -1,    -1,   367,    -1,    40, 
         -1,    -1,    43,    -1,    45,    91,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,    -1,    -1,   123,    -1,   125, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         91,    -1,    -1,    -1,   424,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342, 
        343,    -1,   345,   346,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   123,    -1,   125,   126,    -1,   360,   361,   362, 
        363,    -1,   365,   366,    -1,    -1,    -1,   370,   371,   372, 
        373,   374,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1, 
         -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    45, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402, 
        403,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1, 
         -1,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    91,    -1,    59,    -1,    -1, 
         -1,    -1,    -1,    -1,   260,   261,   262,   263,   264,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    91, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   340,   341,   342,   343,    -1,    -1, 
        346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   360,   361,   362,   363,    -1,   365, 
        366,    -1,    -1,    -1,   370,   371,   372,   373,   374,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340, 
        341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   402,   403,    -1,   360, 
        361,   362,   363,    -1,   365,   366,    -1,    -1,    -1,   370, 
         -1,   372,   373,   374,   260,   261,   262,   263,   264,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403,    -1,    -1,    -1,    -1,    -1,   260,   261, 
        262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   340,   341,   342,   343,    -1,    -1, 
        346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   360,   361,   362,   363,    -1,   365, 
        366,    -1,    -1,    -1,   370,    -1,   372,    -1,   340,   341, 
        342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361, 
        362,   363,    -1,   365,   366,    -1,   402,   403,   370,    -1, 
        372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 
      'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 
      'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 
      'T_FOREACH', 'T_AS', 'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 
      'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      'T_OBJECT_OPERATOR', 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
      'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 'T_BOOLEAN_AND', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 130 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 142 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 142 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 153 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 154 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 158 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 158 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 13:  #line 166 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 15:  #line 171 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 16:  #line 177 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 177 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 18:  #line 186 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 19:  #line 186 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 195 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 21:  #line 195 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 22:  #line 206 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 207 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 211 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 25:  #line 212 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 216 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 217 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 221 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 222 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 30:  #line 226 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 31:  #line 227 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 231 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 33:  #line 232 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 233 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 35:  #line 237 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 238 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 239 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 243 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 39:  #line 244 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 40:  #line 248 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 41:  #line 248 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 42:  #line 251 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 251 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 261 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 45:  #line 268 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop][0];
      $yyVal->annotations= $yyVals[-5+$yyTop][1];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 46:  #line 279 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 48:  #line 284 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 49:  #line 285 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 50:  #line 286 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 51:  #line 290 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 291 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 297 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 54:  #line 297 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 55:  #line 307 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 56:  #line 307 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 57:  #line 315 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 58:  #line 315 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 59:  #line 328 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 60:  #line 329 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 61:  #line 333 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 62:  #line 334 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 63:  #line 338 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 64:  #line 342 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVals[-1+$yyTop] && $yyVal->parameters= array('default' => $yyVals[-1+$yyTop]);
    } break;

    case 65:  #line 347 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 66:  #line 355 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 67:  #line 356 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 68:  #line 360 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 69:  #line 361 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 70:  #line 365 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 71:  #line 366 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 72:  #line 370 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 73:  #line 371 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 74:  #line 375 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 75:  #line 376 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 82:  #line 388 "grammar/xp.jay"
    { $yyVal= '[]'; } break;

    case 83:  #line 389 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 84:  #line 397 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 86:  #line 402 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 87:  #line 403 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 88:  #line 407 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 89:  #line 407 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 90:  #line 410 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 91:  #line 410 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 92:  #line 415 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 93:  #line 415 "grammar/xp.jay"
    {
      $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 94:  #line 421 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 95:  #line 421 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      /* $1->assignment= $6; XX FIXME XX*/
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 96:  #line 426 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 97:  #line 426 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 98:  #line 430 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 99:  #line 430 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 100:  #line 434 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 101:  #line 434 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 102:  #line 438 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 103:  #line 438 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 104:  #line 443 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 106:  #line 444 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 108:  #line 445 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 109:  #line 445 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 112:  #line 453 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 114:  #line 458 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 115:  #line 459 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 116:  #line 463 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 117:  #line 463 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 118:  #line 467 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 119:  #line 467 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 120:  #line 473 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 121:  #line 474 "grammar/xp.jay"
    { $yyVal= array(NULL, $yyVals[0+$yyTop]); } break;

    case 122:  #line 478 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 123:  #line 479 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 124:  #line 483 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 125:  #line 484 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 126:  #line 484 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 127:  #line 489 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 128:  #line 490 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 129:  #line 494 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 130:  #line 495 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 131:  #line 499 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 132:  #line 499 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 133:  #line 507 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 135:  #line 512 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 136:  #line 512 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 137:  #line 520 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 139:  #line 525 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 140:  #line 526 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 141:  #line 530 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 143:  #line 535 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 144:  #line 541 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 145:  #line 549 "grammar/xp.jay"
    { 
      /* TBI: Constant */ 
    } break;

    case 146:  #line 552 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 147:  #line 555 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new InvocationNode(array('name' => $yyVals[-3+$yyTop]))); 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 149:  #line 563 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 150:  #line 563 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 151:  #line 566 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 152:  #line 566 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 153:  #line 571 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 154:  #line 571 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyVals[-1+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 155:  #line 576 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 156:  #line 576 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 157:  #line 582 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 158:  #line 583 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 159:  #line 586 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 160:  #line 589 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 161:  #line 592 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 162:  #line 595 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 163:  #line 599 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 164:  #line 605 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 165:  #line 611 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 166:  #line 620 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 167:  #line 621 "grammar/xp.jay"
    { /* XXX class literal */ } break;

    case 168:  #line 622 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 169:  #line 622 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 170:  #line 626 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 171:  #line 631 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 172:  #line 632 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 173:  #line 633 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 174:  #line 634 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 175:  #line 638 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 177:  #line 643 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 178:  #line 644 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 179:  #line 648 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 180:  #line 652 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 181:  #line 653 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 182:  #line 654 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 183:  #line 655 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 184:  #line 656 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 185:  #line 657 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 661 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 662 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 188:  #line 663 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 189:  #line 664 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 190:  #line 665 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 191:  #line 666 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 192:  #line 670 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 193:  #line 671 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 194:  #line 672 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 195:  #line 673 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 196:  #line 674 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 197:  #line 675 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 198:  #line 679 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 199:  #line 680 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 200:  #line 681 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 201:  #line 682 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 202:  #line 683 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 203:  #line 684 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 204:  #line 688 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 205:  #line 689 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 206:  #line 694 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 209:  #line 700 "grammar/xp.jay"
    {  $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 210:  #line 704 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 211:  #line 704 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 212:  #line 707 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 213:  #line 710 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 214:  #line 710 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 217:  #line 724 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 218:  #line 725 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 219:  #line 729 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 220:  #line 733 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 221:  #line 734 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 223:  #line 739 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 224:  #line 743 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 225:  #line 744 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 226:  #line 750 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 227:  #line 751 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 228:  #line 755 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 229:  #line 756 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 230:  #line 760 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 231:  #line 761 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 232:  #line 762 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 233:  #line 763 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 234:  #line 764 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 235:  #line 765 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 236:  #line 766 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;

    case 237:  #line 767 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 1979 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
