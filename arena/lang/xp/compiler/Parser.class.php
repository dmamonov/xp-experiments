<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.StaticImportNode',
    'xp.compiler.ast.NativeImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.InstanceOfNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.SwitchNode',
    'xp.compiler.ast.CaseNode',
    'xp.compiler.ast.DefaultNode',
    'xp.compiler.ast.BreakNode',
    'xp.compiler.ast.ContinueNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 62 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_MOD_EQUAL= 408;
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_INSTANCEOF= 312;
    const T_CONCAT_EQUAL= 416;
    const T_INC= 402;
    const T_DEC= 403;
    const T_SE= 401;
    const T_GE= 400;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_PROPERTY= 330;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_NEW= 346;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     9,     7, 
          8,     8,     8,    10,    10,    10,     4,     4,    13,     3, 
         17,     3,    19,     3,    14,    14,    15,    15,    20,    20, 
         22,    22,    16,    16,    23,    23,    23,    18,    18,    18, 
         27,    27,    29,    28,    30,    28,    24,    24,    34,    34, 
         35,    35,    37,    37,    37,    33,    33,    39,    25,    42, 
         25,    44,    25,    11,    11,    45,    45,    47,    47,    47, 
         41,    41,    38,    38,    36,    36,    50,    50,    40,    40, 
         43,    43,    43,    43,    43,    43,    43,    43,    26,    26, 
         51,    51,    53,    52,    54,    52,    57,    52,    59,    52, 
         60,    52,    61,    52,    62,    52,    64,    52,    66,    52, 
         67,    52,    68,    52,    52,    52,    63,    63,    69,    69, 
         71,    70,    72,    70,    55,    55,    56,    73,    56,    65, 
         65,    74,    74,    78,    77,    75,    75,    79,    76,    58, 
         58,    80,    80,    48,    48,    81,    81,    82,    82,    82, 
         31,    85,    31,    86,    31,    87,    31,    88,    31,    31, 
         31,    31,    31,    31,    31,    31,    31,    31,    31,    83, 
         83,    94,    83,    83,    83,    83,    83,    83,    95,    95, 
         49,    49,    96,    89,    89,    89,    89,    89,    89,    89, 
         90,    90,    90,    90,    90,    90,    91,    91,    91,    91, 
         91,    91,    92,    92,    92,    92,    92,    92,    93,    93, 
         84,    84,    97,    97,    99,    98,    98,   100,    98,    32, 
         32,    12,    12,   101,   102,   102,   103,   103,    21,    21, 
         46,    46,   104,   104,   105,   105,   105,   105,   105,   105, 
        105,   105, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     7, 
          0,     1,     1,     1,     1,     3,     1,     3,     0,     9, 
          0,     9,     0,     8,     0,     2,     0,     2,     0,     2, 
          0,     3,     2,     0,     1,     1,     4,     3,     1,     0, 
          1,     3,     0,     3,     0,     6,     5,     6,     1,     4, 
          1,     2,     2,     4,     4,     0,     2,     0,     9,     0, 
          8,     0,    10,     4,     1,     1,     3,     2,     5,     5, 
          1,     3,     0,     1,     1,     3,     3,     3,     0,     2, 
          1,     1,     1,     1,     1,     1,     2,     3,     0,     1, 
          1,     2,     0,     4,     0,     7,     0,    10,     0,     8, 
          0,     6,     0,     7,     0,     8,     0,     6,     0,     3, 
          0,     3,     0,     4,     2,     1,     0,     1,     1,     2, 
          0,     5,     0,     4,     1,     3,     0,     0,     3,     2, 
          1,     1,     2,     0,     9,     0,     1,     0,     5,     0, 
          1,     1,     3,     0,     1,     5,     6,     1,     1,     4, 
          1,     0,     3,     0,     4,     0,     5,     0,     6,     3, 
          1,     1,     1,     1,     1,     5,     3,     3,     3,     1, 
          3,     0,     4,     3,     1,     1,     1,     1,     0,     1, 
          1,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     2,     2,     2,     2,     2,     2,     2,     2, 
          0,     1,     1,     2,     0,     4,     2,     0,     6,     1, 
          1,     1,     4,     3,     1,     3,     1,     3,     1,     3, 
          0,     1,     1,     2,     1,     1,     1,     1,     1,     1, 
          1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   235,   237,   236,   238,   240,   239,   241,   242, 
          1,     0,    65,   232,     0,     8,     0,     4,    12,    13, 
          0,     0,     0,     0,    19,    23,    21,   234,    18,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    64,    67, 
          0,     0,     0,     0,    15,     0,     0,     0,     0,   172, 
          0,     0,     0,     0,     0,   178,   175,   177,   176,   152, 
        154,     0,     0,     0,     0,     0,     0,   151,   161,   162, 
        163,   164,   165,     0,     0,     0,     0,     0,     0,     0, 
          0,    10,     0,     0,     0,     0,     0,     0,     0,   158, 
          0,     0,     0,   180,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   209,   210,     0,     0,     0,     0, 
          0,     0,     0,    69,    70,     0,     0,     0,   220,   227, 
        221,     0,     0,    26,     0,     0,     0,    30,    34,     0, 
         16,     0,     0,   141,     0,   215,     0,   153,   212,     0, 
          0,     0,     0,   174,   160,   171,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   169,     0, 
          0,     0,     0,     0,     0,   191,   192,   193,   194,   195, 
        196,     0,   182,     0,     0,   223,     0,    28,    34,     0, 
          0,     0,     0,   173,     0,     0,     0,   214,     0,     0, 
        155,     0,   149,     0,     0,   228,   224,   226,     0,   230, 
          0,    24,     0,    33,    35,    36,     0,     0,     0,     0, 
        143,     0,     0,   218,     0,     0,     0,   157,     0,    20, 
          0,     0,     0,     0,     0,    22,    34,     0,   159,   216, 
          0,     0,     0,     0,    93,     0,   113,    97,   101,   103, 
         99,   109,   111,    95,   105,   116,     0,     0,    90,     0, 
         60,     0,     0,     0,     0,    34,    44,     0,     0,    42, 
          0,     0,   146,   150,     0,   107,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    37,   115,    92,     0,     0, 
         58,    85,    81,    82,    83,    84,     0,    86,     0,     0, 
          0,     0,     0,     0,   219,   147,     0,     0,     0,     0, 
          0,     0,   125,     0,     0,   110,   112,     0,     0,     0, 
         74,     0,     0,     0,     0,    87,     0,    62,     0,    47, 
          0,     0,     0,    32,     0,    94,     0,   114,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         50,     0,    88,     0,     0,    53,     0,    48,    52,    46, 
          0,     0,     0,   126,     0,     0,     0,     0,    78,    77, 
          0,     0,    76,     0,     0,     0,     0,   134,   138,   108, 
          0,   131,     0,     0,   102,     0,     0,     0,     0,    80, 
         71,     0,    61,     0,     0,    54,    55,     0,     0,   130, 
        137,   133,     0,   104,     0,   128,    96,   121,   123,     0, 
        118,     0,     0,    59,     0,     0,     0,     0,   100,     0, 
          0,     0,   106,   120,    72,    63,     0,     0,     0,   129, 
          0,     0,     0,   139,    98,     0,   124,     0,   122,     0, 
          0,   135, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    21,    74,     4,     7,     8,    31,    11,    57, 
        223,   139,    44,    87,   146,   201,    46,   228,    45,    89, 
        148,   277,   224,   225,   226,   267,   229,   230,   244,   245, 
        268,   330,   311,   275,   342,   331,   343,   332,   335,   382, 
        403,   299,   309,   364,    33,    23,    34,    76,   104,   333, 
        269,   270,   285,   294,   324,   417,   288,   153,   291,   289, 
        290,   295,   420,   318,   390,   292,   293,   287,   421,   422, 
        431,   432,   430,   391,   410,   392,   393,   408,   409,   154, 
        163,   214,    78,   158,   101,   102,   167,   155,    79,    80, 
         81,    82,    83,    95,   105,    84,   159,   160,   206,   251, 
        141,   142,   143,    24,    25, 
    );
    protected static $yySindex = array(         -256,
          0,     0,  -253,  -200,     0,   252,     0,  -253,    21,    28, 
       -112,    25,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    32,     0,     0,    39,     0,  -200,     0,     0,     0, 
       -169,  -200,    91,   155,     0,     0,     0,     0,     0,   168, 
        201,    39,    25,  -200,  -200,  -200,   -32,  3021,     0,     0, 
        191,   -55,   -53,   -55,     0,   225,   232,  3021,  3021,     0, 
       3021,  3021,  3021,  3021,     3,     0,     0,     0,     0,     0, 
          0,  3021,  3021,  -117,   665,   264,   267,     0,     0,     0, 
          0,     0,     0,   265,   -51,  -200,     2,  -200,   188,     2, 
        -32,     0,   444,   444,  3021,   -54,   -54,   -54,   -54,     0, 
        133,  -200,   665,     0,   205,   724,    37,  3021,  3021,  3021, 
       3021,  3021,  3021,  3021,  3021,  3021,  3021,  -200,  3021,  3021, 
       3021,  3021,  3021,  3021,     0,     0,  3021,  3021,  3021,  3021, 
       3021,  3021,  3021,     0,     0,  3021,    31,   -27,     0,     0, 
          0,   276,   298,     0,  -200,   227,   310,     0,     0,   236, 
          0,   779,   268,     0,  3021,     0,   103,     0,     0,   133, 
        192,   322,   133,     0,     0,     0,  -228,   178,   178,  1337, 
        307,   178,   178,   178,   178,   178,   178,   178,     0,   178, 
        444,   444,   -54,   -54,   -54,     0,     0,     0,     0,     0, 
          0,  1337,     0,  -200,   273,     0,   -51,     0,     0,  -200, 
        380,   108,  3021,     0,   328,  3021,   331,     0,   279,  3021, 
          0,   333,     0,   133,  3021,     0,     0,     0,   405,     0, 
        251,     0,   115,     0,     0,     0,     0,   253,   317,   336, 
          0,   133,   299,     0,   278,   367,  3021,     0,   178,     0, 
       2927,    10,  -235,   286,   372,     0,     0,   108,     0,     0, 
       3021,  3021,   286,   375,     0,   300,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   296,   822,     0,  2927, 
          0,   143,    16,   363,   302,     0,     0,  3021,   319,     0, 
        385,   303,     0,     0,  3021,     0,  3021,   389,   390,  2993, 
        391,   373,   374,   394,   408,     0,     0,     0,  -200,  -200, 
          0,     0,     0,     0,     0,     0,   -78,     0,   409,  3021, 
        392,   179,   590,   849,     0,     0,   393,  2927,   931,  3021, 
       3021,  2927,     0,    89,   123,     0,     0,  3021,  3021,   -41, 
          0,   412,   420,   379,  -200,     0,   388,     0,  1337,     0, 
       -104,   340,   179,     0,   286,     0,   341,     0,   423,  1045, 
        342,   637,   428,   121,  1105,  1155,   147,   363,   162,  -200, 
          0,   447,     0,  -200,   449,     0,  2927,     0,     0,     0, 
        -69,  3021,  2993,     0,  3021,  3021,  2993,   376,     0,     0, 
       -200,   -28,     0,   162,   457,   459,   377,     0,     0,     0, 
        156,     0,   159,   467,     0,  1225,  1252,   145,   -73,     0, 
          0,  2927,     0,   -28,   162,     0,     0,   487,   406,     0, 
          0,     0,  3021,     0,  2993,     0,     0,     0,     0,   415, 
          0,   -73,   416,     0,   -28,  -200,  2927,   501,     0,  2993, 
       3021,   485,     0,     0,     0,     0,   213,   429,  2993,     0, 
       1307,  2927,   521,     0,     0,  2927,     0,   440,     0,  2927, 
        439,     0, 
    );
    protected static $yyRindex= array(          193,
          0,     0,   113,     0,     0,    51,     0,   437,   107,     0, 
        312,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   -12,     0,     0,     0,     0,     0, 
          0,     0,     0,   480,     0,     0,     0,     0,     0,     0, 
        102,    14,     0,     0,     0,     0,     0,   533,     0,     0, 
        144,  -110,   452,  -110,     0,   517,     0,     0,     0,     0, 
          0,     0,     0,     0,   524,     0,     0,     0,     0,     0, 
          0,   466,     0,     0,   536,     0,     0,     0,     0,     0, 
          0,     0,     0,   -25,     0,     0,   474,     0,     0,   474, 
          0,     0,  1878,  1931,   514,  1365,  1481,  1549,  1638,     0, 
        551,     0,     0,     0,     0,     0,  -215,     0,     0,   550, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   -33,     0,     0, 
          0,     0,   553,     0,     0,     0,    40,     0,     0,     0, 
          0,    52,     0,     0,   577,     0,     0,     0,     0,   610, 
        588,     0,   551,     0,     0,     0,     0,  1819,  2030,    15, 
          0,  2075,  2104,  2204,  2261,  2336,  2359,  2410,     0,  2488, 
       1954,  1977,  1745,  1773,  1806,     0,     0,     0,     0,     0, 
          0,   120,     0,     0,     0,     0,     0,     0,     0,     0, 
        369,   520,     0,     0,     0,   555,   219,     0,     0,   577, 
          0,   344,     0,   551,     0,     0,     0,     0,   369,     0, 
        356,     0,     0,     0,     0,     0,    50,     0,   534,   -29, 
          0,   551,     0,     0,   606,     0,   577,     0,  2501,     0, 
        558,   -34,     0,   172,     0,     0,     0,     0,     0,     0, 
        577,   568,   399,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,  -120, 
          0,   535,     0,   616,     0,     0,     0,     0,  -105,     0, 
          0,     0,     0,     0,   619,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   653,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   369,     0,     0,     0,     0,   558,     0,   636, 
          0,   558,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    -5,     0,   653,     0,     0,     0,   153,     0, 
          0,     0,   576,     0,   172,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    -7,   119,     0, 
          0,     0,     0,   653,     0,     0,   558,     0,     0,     0, 
          0,   636,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   119,     0,     0,     0,     0,     0,     0, 
       2669,     0,  2582,     0,     0,     0,     0,  2737,   579,     0, 
          0,   558,     0,     0,   119,     0,     0,     0,     0,     0, 
          0,     0,   577,     0,     0,     0,     0,     0,     0,     0, 
          0,   580,     0,     0,     0,     0,   558,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,  -101,     0,     0,     0,  -101,     0,     0,     0,   558, 
          0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   698,     0,     0,     0,   618, 
        707,   -42,     0,   660,   626,  -172,     0,     0,     0,     0, 
       -138,  -239,     0,     0,     0,  -270,   481,     0,     0,     0, 
          7,   -64,   382,     0,   387,  -282,     0,  -281,     0,  -166, 
       -157,     0,     0,     0,   688,   690,     0,   -93,   -26,   426, 
        464,   -75,     0,     0,  -338,     0,     0,    -2,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   320,     0, 
          0,     0,     0,   348,     0,   352,     0,     0,     0,   559, 
          0,     0,     0,    -3,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   593,     0,     0,     0, 
          0,   557,     0,   739,     0, 
    );
    protected static $yyTable = array(10,
        357,    52,    53,    54,    91,   127,   198,   128,   222,    55, 
        222,   137,    25,   283,   336,   181,   171,   334,   367,    38, 
        140,    77,    39,    89,   272,    17,   219,    41,   222,    41, 
        401,   212,    85,    56,   395,    75,    56,   162,   398,    51, 
         51,    51,   100,   144,   156,   147,     1,   347,    27,   271, 
          5,   351,   302,   362,    75,    27,    17,   305,   303,     9, 
        304,   220,   306,   195,    93,    94,    27,    96,    97,    98, 
         99,   124,   145,   145,   279,   179,   429,   383,   103,   106, 
        138,    51,   385,    51,   273,    56,    28,    75,    32,    45, 
         40,   440,   142,    43,   402,    41,   387,   161,   229,   181, 
        445,   152,   147,   313,   274,   370,   307,   145,    43,   193, 
        142,   213,   233,    51,   168,   169,   170,   172,   173,   174, 
        175,   176,   177,   178,   156,   180,   181,   182,   183,   184, 
        185,   423,   140,   186,   187,   188,   189,   190,   191,   192, 
         51,   308,   103,    17,   142,    68,    17,    17,    17,    17, 
         17,    17,   205,    17,   231,   365,   438,   147,   243,   211, 
        183,   152,   229,   183,    17,    17,    17,    17,    17,    17, 
         29,   447,    43,    30,    43,   449,   142,    79,   157,   451, 
        222,     9,   301,    42,   222,   222,   222,   222,   222,   216, 
        222,   317,   138,    57,    68,    51,    57,    17,    43,    17, 
         25,   222,   222,     5,   222,   222,   222,   236,     9,   152, 
        238,    57,   170,    47,   323,    31,   152,   404,   138,   122, 
        120,   239,   121,   156,   123,    17,   222,    56,   249,    17, 
         31,    17,    17,   300,   254,   366,   222,   127,   425,   128, 
         48,    79,   400,   152,   183,    57,   424,   233,   281,   282, 
         85,    85,    91,    91,    86,   217,    88,   152,   152,   217, 
        217,   217,   217,   217,   217,   217,   222,   436,   222,   222, 
         91,    89,    89,   231,   388,   389,   217,   217,   217,   217, 
        217,   217,   209,     2,   314,    17,   222,   233,   233,   233, 
         92,   170,   107,   319,   138,   138,    31,   323,   358,   418, 
        419,   323,   138,   124,   134,    17,   222,   135,   136,   217, 
        149,   217,   145,   231,   231,   231,   339,   349,    13,    14, 
         15,    16,    17,    18,    19,    20,   152,   350,   352,   164, 
        138,    35,    36,    37,   355,   356,   166,   196,   147,   323, 
        194,   197,    12,   217,   217,   130,   129,   125,   126,   199, 
        231,   231,   231,   200,   323,   138,   131,   132,   202,   138, 
        204,   210,   207,   323,   215,   217,    17,   227,   232,   394, 
        234,   235,   237,   241,   242,   247,    51,   246,   152,   248, 
        148,   396,   397,   437,   148,   148,   148,   148,   148,   148, 
        148,   250,     5,     5,     5,     5,     5,     5,     5,     5, 
        252,   148,   148,   148,   148,   148,   148,   253,   276,    12, 
        428,   278,     5,     5,     5,   284,    17,    17,    17,   152, 
        296,    51,   286,   310,   312,   315,    17,   316,   320,   321, 
        325,   326,   327,   328,   148,    31,   148,   441,   341,    31, 
         31,    31,    31,    31,    31,    31,    17,   329,   338,   353, 
        340,   346,   359,   222,   222,   222,    31,    31,    31,    31, 
         31,    31,   354,   360,   368,   371,   374,   375,   148,   148, 
         12,   361,     2,     2,     2,     2,     2,     2,     2,     2, 
        363,   372,   381,   222,   376,   122,   379,   384,   386,    31, 
        123,    31,     2,     2,     2,    12,     2,   405,   399,   406, 
        389,   407,   388,   127,   222,   128,    17,    17,    17,    17, 
         17,    17,    17,    17,    17,   416,    17,    17,    17,    17, 
         17,    17,    17,    31,    31,   413,   426,     7,   427,   240, 
        217,    13,    14,    15,    16,    17,    18,    19,    20,   433, 
        435,   439,   442,   222,   222,   222,   222,   222,   222,   222, 
        222,   222,   443,   444,   222,   222,   222,   222,   222,   222, 
        170,   448,   450,   452,   170,   170,   170,   170,   170,   124, 
        170,    11,    66,   144,    29,    14,   145,   130,   129,   125, 
        126,   170,   170,   170,   170,   170,   170,   211,   131,   132, 
        179,   211,   211,   211,   211,   211,    27,   211,    13,    14, 
         15,   221,    17,    18,    19,    20,   140,   144,   211,   211, 
        211,   211,   211,   211,   225,   238,   170,   140,   217,   217, 
        217,   217,   217,   217,   217,   217,   217,   222,   231,   217, 
        217,   217,   217,   217,   217,   238,   238,   238,   238,   238, 
        238,   238,   238,   211,    40,   224,   213,   144,   170,   170, 
        213,   213,   213,   213,   213,   148,   213,    49,    39,    13, 
         14,    15,   221,    17,    18,    19,    20,   213,   213,   213, 
        213,   213,   213,   109,    56,   211,   211,   144,   122,   120, 
         12,   121,    89,   123,    13,    14,    15,   221,    17,    18, 
         19,    20,   140,    73,   140,   297,   127,   108,   128,   110, 
         51,   109,   213,   117,   119,    26,   122,   120,   151,   121, 
         31,   123,    22,    90,   344,   150,     7,     7,     7,     7, 
          7,     7,     7,     7,   127,   108,   128,   110,   280,   369, 
         50,    49,   337,   298,   213,   213,     7,     7,     7,   380, 
        412,   434,   411,   148,   148,   148,   148,   148,   148,   148, 
        148,   148,   208,   218,   148,   148,   148,   148,   148,   148, 
        109,   231,   124,    38,   165,   122,   120,     0,   121,     0, 
        123,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   127,   108,   128,   110,     0,     0,     0, 
        124,     0,     0,     0,     0,     0,     0,     0,    31,    31, 
         31,    31,    31,    31,    31,    31,    31,     0,     0,    31, 
         31,    31,    31,    31,    31,   109,     0,     0,     0,     0, 
        122,   120,   203,   121,     0,   123,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   170,     0,     0,   127,   108, 
        128,   110,     0,   130,   129,   125,   126,     0,     0,   124, 
          0,     0,     0,     0,   131,   132,     0,     0,   109,     0, 
          0,     0,   211,   122,   120,     0,   121,     0,   123,    13, 
         14,    15,   221,    17,    18,    19,    20,     0,     0,     0, 
        297,   127,   108,   128,   110,   109,     0,     0,     0,   345, 
        122,   120,     0,   121,     0,   123,     0,     0,     0,     0, 
          0,     0,     0,     0,   124,     0,     0,     0,   127,   108, 
        128,   110,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   213,     0,   170,   170,   170,   170,   170,   170,   170, 
        170,   170,     0,    17,   170,   170,   170,   170,   170,   170, 
          0,     0,     0,     0,     0,     0,     0,   124,   118,     0, 
        211,   211,   211,   211,   211,   211,   211,   211,   211,     0, 
          0,   211,   211,   211,   211,   211,   211,   109,     0,     0, 
          0,     0,   122,   120,   124,   121,   118,   123,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   348, 
        127,   108,   128,   110,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   213, 
        213,   213,   213,   213,   213,   213,   213,   213,     0,     0, 
        213,   213,   213,   213,   213,   213,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   118,   130,   129,   125,   126, 
        111,   112,   113,   114,   115,     0,     0,   131,   132,   133, 
        116,   117,   119,     0,     0,     0,   124,     0,     0,     0, 
          0,     0,     0,     0,   130,   129,   125,   126,   111,   112, 
        113,   114,   115,     0,     0,   131,   132,   133,   116,   117, 
        119,   109,     0,     0,     0,   373,   122,   120,     0,   121, 
        118,   123,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   127,   108,   128,   110,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   130,   129,   125,   126,   111,   112,   113, 
        114,   115,     0,   118,   131,   132,     0,   116,   117,   119, 
          0,   109,     0,     0,     0,   377,   122,   120,     0,   121, 
          0,   123,     0,     0,     0,     0,     0,     0,     0,     0, 
        118,     0,     0,     0,   127,   108,   128,   110,     0,     0, 
        124,     0,     0,     0,     0,     0,     0,     0,   130,   129, 
        125,   126,   111,   112,   113,   114,   115,     0,     0,   131, 
        132,   109,   116,   117,   119,   378,   122,   120,     0,   121, 
          0,   123,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   127,   108,   128,   110,     0,     0, 
          0,   130,   129,   125,   126,   111,   112,   113,   114,   115, 
        124,     0,   131,   132,     0,   116,   117,   119,     0,     0, 
          0,     0,   118,     0,     0,     0,     0,     0,   130,   129, 
        125,   126,   111,   112,   113,   114,   115,     0,     0,   131, 
        132,   109,   116,   117,   119,   414,   122,   120,     0,   121, 
          0,   123,     0,     0,     0,     0,     0,     0,     0,     0, 
        124,     0,     0,     0,   127,   108,   128,   110,   109,     0, 
          0,     0,   415,   122,   120,     0,   121,     0,   123,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   127,   108,   128,   110,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        130,   129,   125,   126,   111,   112,   113,   114,   115,     0, 
          0,   131,   132,   109,   116,   117,   119,     0,   122,   120, 
        124,   121,     0,   123,     0,     0,   118,     0,     0,     0, 
          0,     0,     0,     0,   446,     0,   127,   108,   128,   110, 
          0,     0,     0,   109,     0,     0,     0,   124,   122,   120, 
          0,   121,     0,   123,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   127,   108,   128,   110, 
          0,   203,     0,     0,     0,   203,   203,   203,   203,   203, 
          0,   203,     0,     0,     0,     0,   118,     0,     0,     0, 
          0,     0,   203,   203,     0,   203,     0,   203,     0,     0, 
          0,     0,   124,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   130,   129,   125,   126,   111,   112, 
        113,   114,   115,     0,     0,   131,   132,   203,   116,   117, 
        119,     0,   124,     0,     0,     0,   118,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   203, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   130,   129,   125,   126,   111,   112, 
        113,   114,   115,     0,     0,   131,   132,   204,   116,   117, 
        119,   204,   204,   204,   204,   204,     0,   204,     0,     0, 
          0,     0,     0,     0,     0,     0,   118,     0,   204,   204, 
          0,   204,     0,   204,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   130,   129,   125,   126,   111,   112, 
        113,   114,   115,   118,     0,   131,   132,     0,   116,   117, 
        119,     0,     0,   204,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   207,     0,     0,     0,   207, 
        207,   207,   207,   207,     0,   207,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   204,   207,   207,     0,   207, 
          0,   207,     0,     0,     0,     0,     0,     0,   118,     0, 
          0,     0,     0,     0,   130,   129,   125,   126,   111,   112, 
        113,   114,   115,     0,     0,   131,   132,     0,   116,   117, 
        119,   207,     0,     0,     0,     0,     0,     0,   118,     0, 
          0,   130,   129,   125,   126,   111,   112,   113,   114,   115, 
          0,     0,   131,   132,     0,   116,   117,   119,     0,     0, 
          0,     0,     0,   207,   208,     0,   203,     0,   208,   208, 
        208,   208,   208,     0,   208,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   208,   208,     0,   208,     0, 
        208,     0,     0,     0,     0,     0,   130,   129,   125,   126, 
        111,   112,   113,   114,   115,     0,     0,   131,   132,     0, 
        116,   117,   119,     0,     0,     0,     0,     0,     0,     0, 
        208,     0,     0,     0,     0,     0,   130,   129,   125,   126, 
        111,   112,   113,   114,   115,     0,     0,   131,   132,     0, 
        116,   117,   119,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   208,     0,     0,     0,     0,     0,   203,   203, 
        203,   203,   203,     0,     0,     0,     0,   203,   203,   203, 
        203,   199,     0,     0,     0,   199,   199,   199,   199,   199, 
          0,   199,   204,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   199,   199,     0,   199,     0,   199,     0,   200, 
          0,     0,     0,   200,   200,   200,   200,   200,     0,   200, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        200,   200,     0,   200,     0,   200,     0,   199,     0,     0, 
          0,     0,   202,     0,     0,     0,   202,   202,   202,   202, 
        202,     0,   202,     0,     0,   184,     0,     0,     0,   184, 
        207,     0,   184,   202,   202,   200,   202,     0,   202,   199, 
          0,     0,     0,     0,     0,     0,   184,   184,     0,   184, 
          0,   184,     0,     0,   204,   204,   204,   204,   204,     0, 
          0,     0,     0,   204,   204,   204,   204,   200,   202,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   184,     0,     0,   205,     0,     0,     0,   205,     0, 
        205,   205,   205,     0,     0,     0,     0,     0,     0,     0, 
        202,     0,     0,     0,     0,   205,   205,     0,   205,     0, 
        205,     0,     0,   184,     0,     0,     0,     0,     0,   208, 
          0,     0,   207,   207,   207,   207,   207,     0,     0,     0, 
          0,   207,   207,   207,   207,     0,     0,   206,     0,     0, 
        205,   206,     0,   206,   206,   206,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   206,   206, 
        197,   206,     0,   206,   197,     0,   197,   197,   197,     0, 
          0,     0,   205,     0,     0,     0,     0,     0,     0,     0, 
          0,   197,   197,   198,   197,     0,   197,   198,     0,   198, 
        198,   198,     0,   206,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   198,   198,     0,   198,     0,   198, 
          0,   208,   208,   208,   208,   208,   197,     0,     0,     0, 
        208,   208,   208,   208,     0,   206,   199,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   201,     0,     0,   198, 
        201,     0,     0,   201,     0,     0,     0,     0,   197,     0, 
          0,     0,     0,     0,   200,     0,     0,   201,   201,     0, 
        201,     0,   201,     0,     0,     0,     0,     0,     0,     0, 
          0,   198,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   185,     0,     0,     0,   185,     0,   202,   185,     0, 
          0,     0,   201,     0,     0,     0,     0,     0,     0,     0, 
        184,     0,   185,   185,     0,   185,     0,   185,     0,     0, 
        186,     0,     0,     0,   186,     0,     0,   186,   199,   199, 
        199,   199,   199,     0,   201,     0,     0,   199,   199,   199, 
        199,   186,   186,     0,   186,     0,   186,   185,     0,     0, 
          0,     0,     0,     0,     0,     0,   200,   200,   200,   200, 
        200,     0,     0,     0,     0,   200,   200,   200,   200,   205, 
          0,     0,     0,     0,     0,     0,   186,     0,     0,   185, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   202, 
        202,   202,   202,   202,     0,     0,     0,     0,   202,   202, 
        202,   202,   184,   184,   184,   184,   184,     0,   186,     0, 
          0,   184,   184,   184,   184,     0,     0,     0,     0,     0, 
        187,     0,   206,     0,   187,     0,     0,   187,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   187,   187,     0,   187,   197,   187,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   205,   205,   205,   205,   205,     0,     0,   198,     0, 
        205,   205,   205,   205,     0,     0,   187,   188,     0,     0, 
          0,   188,     0,     0,   188,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   188,   188, 
          0,   188,     0,   188,     0,     0,     0,     0,   187,     0, 
          0,     0,     0,     0,   206,   206,   206,   206,   206,     0, 
          0,   201,     0,   206,   206,   206,   206,     0,     0,     0, 
          0,     0,     0,   188,     0,     0,     0,   197,   197,   197, 
        197,   197,     0,     0,     0,     0,   197,   197,   197,   197, 
          0,     0,   189,     0,     0,     0,   189,     0,     0,   189, 
        198,   198,   198,   198,   198,   188,   185,     0,     0,   198, 
        198,   198,   198,   189,   189,   167,   189,     0,   189,   167, 
          0,     0,   167,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   186,   167,   167,     0,   167, 
          0,   167,     0,     0,     0,     0,     0,     0,   189,     0, 
          0,     0,     0,   201,   201,   201,   201,   201,     0,     0, 
          0,     0,   201,   201,   201,   201,   168,     0,     0,     0, 
        168,   167,     0,   168,     0,     0,     0,     0,     0,     0, 
        189,     0,     0,     0,     0,     0,     0,   168,   168,     0, 
        168,     0,   168,     0,     0,     0,     0,     0,   185,   185, 
        185,   185,   185,   167,     0,     0,     0,   185,   185,   185, 
        185,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   168,     0,     0,     0,     0,   186,   186,   186, 
        186,   186,     0,     0,     0,   187,   186,   186,   186,   186, 
          0,     0,     0,     0,   190,     0,     0,     0,   190,     0, 
          0,   190,     0,     0,   168,     0,     0,   166,     0,     0, 
          0,   166,     0,     0,   166,   190,   190,     0,   190,     0, 
        190,     0,     0,     0,     0,     0,     0,     0,   166,   166, 
          0,   166,     0,   166,     0,     0,     0,     0,     0,     0, 
          0,     0,   188,     0,     0,     0,     0,     0,     0,     0, 
        190,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   166,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   187,   187,   187, 
        187,   187,   190,     0,   132,     0,   187,   187,   187,   187, 
          0,   132,     0,     0,   132,   166,   132,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        132,     0,     0,     0,     0,     0,     0,   189,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   188,   188,   188,   188,   188,     0, 
        167,     0,   132,   188,   188,   188,   188,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   136,     0,     0,   132,     0,   132,   132,   136,     0, 
          0,   136,     0,   136,     0,     0,     0,     0,     0,     0, 
          0,   168,     0,     0,     0,     0,     0,   136,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   189, 
        189,   189,   189,   189,     0,     0,     0,     0,   189,   189, 
        189,   189,     0,     0,     0,     0,     0,     0,     0,   136, 
          0,     0,   167,   167,   167,   167,   167,     0,     0,   127, 
          0,   167,   167,   167,   167,     0,   127,     0,     0,   127, 
          0,   127,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   136,     0,   136,   136,   127,     0,     0,     0,   190, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   166,   168,   168,   168,   168,   168,     0,     0, 
          0,     0,   168,   168,   168,   168,     0,   127,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   132,   132,   132,   132,   132,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   127, 
          0,   127,   127,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   190,   190,   190,   190,   190,     0,     0,     0,     0, 
        190,   190,   190,   190,   166,   166,   166,   166,   166,     0, 
          0,     0,     0,   166,   166,   166,   166,     0,     0,     0, 
          0,   132,   132,   132,   132,     0,   132,   132,   136,   136, 
        136,   136,   136,     0,     0,     0,     0,     0,     0,     0, 
          0,   132,   132,   132,   132,     0,   132,   132,     0,     0, 
          0,   132,   132,   132,   132,   132,     0,     0,     0,    61, 
          0,     0,     0,     0,     0,     0,    73,     0,     0,    58, 
          0,    59,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   132,   132,   266,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   127,   127,   127,   127, 
        127,     0,     0,     0,     0,     0,     0,     0,   136,   136, 
        136,   136,     0,     0,   136,     0,     0,    60,     0,     0, 
          0,     0,     0,     0,     0,    61,     0,     0,   136,   136, 
        136,   136,    73,   136,   136,    58,     0,    59,   136,   136, 
        136,   136,   136,     0,     0,     0,     0,     0,     0,    72, 
          0,   266,    62,    61,     0,     0,     0,     0,     0,     0, 
         73,     0,     0,    58,     0,    59,     0,     0,     0,     0, 
        136,   136,     0,     0,     0,     0,   127,   127,   127,   127, 
          0,     0,   127,    60,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   127,   127,   127,   127, 
          0,   127,   127,     0,     0,     0,   127,     0,   127,   127, 
        127,    60,     0,     0,     0,   322,     0,     0,    62,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   127,   127, 
          0,     0,     0,    72,     0,     0,    62,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    65,    66,    67,    68, 
         69,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    65,    66,    67,    68,    69,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    70,   255,   256,   257, 
          0,     0,    71,     0,     0,     0,     0,     0,     0,     0, 
         65,    66,    67,    68,    69,     0,   258,   259,   260,   261, 
          0,   262,   263,     0,     0,     0,   264,     0,   265,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    63,    64, 
          0,     0,    70,   255,   256,   257,     0,     0,    71,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   258,   259,   260,   261,     0,   262,   263,     0, 
         70,     0,   264,     0,   265,     0,    71,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    63,    64,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    63,    64, 
    );
    protected static $yyCheck = array(4,
         42,    44,    45,    46,   125,    60,   145,    62,    42,    42, 
         44,    63,   123,   253,    93,    41,   110,   300,   123,   125, 
         85,    48,    27,   125,   260,    60,   199,    32,    62,    59, 
         59,   260,    60,    41,   373,    41,    44,   102,   377,    44, 
         45,    46,    40,    86,   260,    88,   303,   318,    46,    40, 
        304,   322,    37,   335,    48,    46,    91,    42,    43,   260, 
         45,   200,    47,    91,    58,    59,    46,    61,    62,    63, 
         64,   126,    58,    59,   247,   118,   415,   360,    72,    73, 
         85,    86,   364,    88,   320,    93,    59,    93,    64,    40, 
        260,   430,    41,    44,   123,   125,   367,   102,    59,   125, 
        439,    95,   145,   276,   340,   345,    91,    93,    59,   136, 
         59,   340,   206,   118,   108,   109,   110,   111,   112,   113, 
        114,   115,   116,   117,   340,   119,   120,   121,   122,   123, 
        124,   402,   197,   127,   128,   129,   130,   131,   132,   133, 
        145,   126,   136,    37,    93,    44,    40,    41,    42,    43, 
         44,    45,   155,    47,   260,   260,   427,   200,   223,   163, 
         41,   155,   123,    44,    58,    59,    60,    61,    62,    63, 
        283,   442,   123,   286,   125,   446,   125,    59,    46,   450, 
         37,   260,    40,    93,    41,    42,    43,    44,    45,   194, 
         47,   285,   197,    41,    93,   200,    44,    91,    44,    93, 
        311,    58,    59,    91,    61,    62,    63,   210,   260,   203, 
        214,    59,   206,    46,   290,    44,   210,   384,   223,    42, 
         43,   215,    45,    91,    47,   260,   260,   260,   232,   123, 
         59,   125,   126,    91,   237,   340,    93,    60,   405,    62, 
         40,   123,   381,   237,   125,    93,   404,   260,   251,   252, 
         60,    60,   373,   374,   310,    37,   310,   251,   252,    41, 
         42,    43,    44,    45,    46,    47,   123,   425,   125,   126, 
         46,   373,   374,   260,   344,   345,    58,    59,    60,    61, 
         62,    63,    91,    91,   278,   320,   320,   300,   301,   302, 
         59,   285,   410,   287,   299,   300,   125,   373,   340,   373, 
        374,   377,   307,   126,    41,   340,   340,    41,    44,    91, 
        123,    93,   311,   300,   301,   302,   310,   320,   280,   281, 
        282,   283,   284,   285,   286,   287,   320,   321,   322,   125, 
        335,   300,   301,   302,   328,   329,   300,    62,   381,   415, 
        310,    44,    91,   125,   126,   400,   401,   402,   403,   123, 
        300,   301,   302,    44,   430,   360,   411,   412,   123,   364, 
         93,    40,   260,   439,    58,    93,   260,   260,    41,   372, 
         40,    93,    40,   123,   260,    59,   381,   125,   372,    44, 
         37,   375,   376,   426,    41,    42,    43,    44,    45,    46, 
         47,    93,   280,   281,   282,   283,   284,   285,   286,   287, 
        123,    58,    59,    60,    61,    62,    63,    41,   123,    91, 
        413,    40,   300,   301,   302,    41,   310,   311,   312,   413, 
        125,   426,   123,    61,   123,    41,   320,   125,    40,    40, 
         40,    59,    59,    40,    91,    37,    93,   431,   260,    41, 
         42,    43,    44,    45,    46,    47,   340,    40,    40,   361, 
         59,    59,    41,   310,   311,   312,    58,    59,    60,    61, 
         62,    63,   340,    44,   125,   125,   125,    40,   125,   126, 
         91,    93,   280,   281,   282,   283,   284,   285,   286,   287, 
         93,    59,   321,   340,   364,    42,   340,    41,    40,    91, 
         47,    93,   300,   301,   302,    91,   304,    41,   123,    41, 
        345,   125,   344,    60,   125,    62,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   371,   410,   411,   412,   413, 
        414,   415,   416,   125,   126,    59,    40,    91,   123,   125, 
        312,   280,   281,   282,   283,   284,   285,   286,   287,   125, 
        125,    41,    58,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   340,   125,   411,   412,   413,   414,   415,   416, 
         37,    41,   123,   125,    41,    42,    43,    44,    45,   126, 
         47,   260,    93,    41,   123,    59,    41,   400,   401,   402, 
        403,    58,    59,    60,    61,    62,    63,    37,   411,   412, 
        125,    41,    42,    43,    44,    45,   123,    47,   280,   281, 
        282,   283,   284,   285,   286,   287,    93,    58,    58,    59, 
         60,    61,    62,    63,    62,   260,    93,    41,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    40,   260,   411, 
        412,   413,   414,   415,   416,   280,   281,   282,   283,   284, 
        285,   286,   287,    93,   125,    40,    37,    93,   125,   126, 
         41,    42,    43,    44,    45,   312,    47,   123,   125,   280, 
        281,   282,   283,   284,   285,   286,   287,    58,    59,    60, 
         61,    62,    63,    37,    59,   125,   126,    59,    42,    43, 
         91,    45,   125,    47,   280,   281,   282,   283,   284,   285, 
        286,   287,   125,    41,    59,    59,    60,    61,    62,    63, 
        125,    37,    93,   125,   125,     8,    42,    43,    91,    45, 
        312,    47,     6,    54,   125,    90,   280,   281,   282,   283, 
        284,   285,   286,   287,    60,    61,    62,    63,   248,   343, 
         43,    42,   307,   270,   125,   126,   300,   301,   302,   358, 
        393,   422,   391,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   160,   197,   411,   412,   413,   414,   415,   416, 
         37,   203,   126,    25,    41,    42,    43,    -1,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,   413,   414,   415,   416,    37,    -1,    -1,    -1,    -1, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    60,    61, 
         62,    63,    -1,   400,   401,   402,   403,    -1,    -1,   126, 
         -1,    -1,    -1,    -1,   411,   412,    -1,    -1,    37,    -1, 
         -1,    -1,   312,    42,    43,    -1,    45,    -1,    47,   280, 
        281,   282,   283,   284,   285,   286,   287,    -1,    -1,    -1, 
         59,    60,    61,    62,    63,    37,    -1,    -1,    -1,    41, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   312,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,   410,   411,   412,   413,   414,   415,   416, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,   312,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,   413,   414,   415,   416,    37,    -1,    -1, 
         -1,    -1,    42,    43,   126,    45,   312,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,   413,   414,   415,   416,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   312,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,   413, 
        414,   415,   416,    -1,    -1,    -1,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,   413,   414,   415, 
        416,    37,    -1,    -1,    -1,    41,    42,    43,    -1,    45, 
        312,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,   312,   411,   412,    -1,   414,   415,   416, 
         -1,    37,    -1,    -1,    -1,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        312,    -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    37,   414,   415,   416,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
        126,    -1,   411,   412,    -1,   414,   415,   416,    -1,    -1, 
         -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    37,   414,   415,   416,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        126,    -1,    -1,    -1,    60,    61,    62,    63,    37,    -1, 
         -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    37,   414,   415,   416,    -1,    42,    43, 
        126,    45,    -1,    47,    -1,    -1,   312,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    -1,    60,    61,    62,    63, 
         -1,    -1,    -1,    37,    -1,    -1,    -1,   126,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63, 
         -1,    37,    -1,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    93,   414,   415, 
        416,    -1,   126,    -1,    -1,    -1,   312,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    37,   414,   415, 
        416,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,   312,    -1,   411,   412,    -1,   414,   415, 
        416,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   125,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,    93,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,    -1,    -1, 
         -1,    -1,    -1,   125,    37,    -1,   312,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         93,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
        416,    37,    -1,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    37, 
         -1,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,    93,    -1,    -1, 
         -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    37,    -1,    -1,    -1,    41, 
        312,    -1,    44,    58,    59,    93,    61,    -1,    63,   125, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,   416,   125,    93,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1, 
         43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        125,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,   312, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,   416,    -1,    -1,    37,    -1,    -1, 
         93,    41,    -1,    43,    44,    45,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         37,    61,    -1,    63,    41,    -1,    43,    44,    45,    -1, 
         -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    37,    61,    -1,    63,    41,    -1,    43, 
         44,    45,    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,   404,   405,   406,   407,   408,    93,    -1,    -1,    -1, 
        413,   414,   415,   416,    -1,   125,   312,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    93, 
         41,    -1,    -1,    44,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,   312,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    37,    -1,    -1,    -1,    41,    -1,   312,    44,    -1, 
         -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        312,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         37,    -1,    -1,    -1,    41,    -1,    -1,    44,   404,   405, 
        406,   407,   408,    -1,   125,    -1,    -1,   413,   414,   415, 
        416,    58,    59,    -1,    61,    -1,    63,    93,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,   414,   415,   416,   312, 
         -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,   125, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,   416,   404,   405,   406,   407,   408,    -1,   125,    -1, 
         -1,   413,   414,   415,   416,    -1,    -1,    -1,    -1,    -1, 
         37,    -1,   312,    -1,    41,    -1,    -1,    44,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,   312,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,   312,    -1, 
        413,   414,   415,   416,    -1,    -1,    93,    37,    -1,    -1, 
         -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,   312,    -1,   413,   414,   415,   416,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,   416, 
         -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44, 
        404,   405,   406,   407,   408,   125,   312,    -1,    -1,   413, 
        414,   415,   416,    58,    59,    37,    61,    -1,    63,    41, 
         -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   312,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,   414,   415,   416,    37,    -1,    -1,    -1, 
         41,    93,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,   125,    -1,    -1,    -1,   413,   414,   415, 
        416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    93,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,   312,   413,   414,   415,   416, 
         -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1, 
         -1,    44,    -1,    -1,   125,    -1,    -1,    37,    -1,    -1, 
         -1,    41,    -1,    -1,    44,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,   125,    -1,    33,    -1,   413,   414,   415,   416, 
         -1,    40,    -1,    -1,    43,   125,    45,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         59,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
        312,    -1,    91,   413,   414,   415,   416,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    33,    -1,    -1,   123,    -1,   125,   126,    40,    -1, 
         -1,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,   416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    33, 
         -1,   413,   414,   415,   416,    -1,    40,    -1,    -1,    43, 
         -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   123,    -1,   125,   126,    59,    -1,    -1,    -1,   312, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   312,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,   414,   415,   416,    -1,    91,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   260,   261,   262,   263,   264,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123, 
         -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,   416,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,   416,    -1,    -1,    -1, 
         -1,   340,   341,   342,   343,    -1,   345,   346,   260,   261, 
        262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   360,   361,   362,   363,    -1,   365,   366,    -1,    -1, 
         -1,   370,   371,   372,   373,   374,    -1,    -1,    -1,    33, 
         -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43, 
         -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   402,   403,    59,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   260,   261,   262,   263, 
        264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341, 
        342,   343,    -1,    -1,   346,    -1,    -1,    91,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,   360,   361, 
        362,   363,    40,   365,   366,    43,    -1,    45,   370,   371, 
        372,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,   123, 
         -1,    59,   126,    33,    -1,    -1,    -1,    -1,    -1,    -1, 
         40,    -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1, 
        402,   403,    -1,    -1,    -1,    -1,   340,   341,   342,   343, 
         -1,    -1,   346,    91,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363, 
         -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,   373, 
        374,    91,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403, 
         -1,    -1,    -1,   123,    -1,    -1,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   260,   261,   262,   263, 
        264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   260,   261,   262,   263,   264,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342,   343, 
         -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        260,   261,   262,   263,   264,    -1,   360,   361,   362,   363, 
         -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403, 
         -1,    -1,   340,   341,   342,   343,    -1,    -1,   346,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   360,   361,   362,   363,    -1,   365,   366,    -1, 
        340,    -1,   370,    -1,   372,    -1,   346,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   402,   403,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_PROPERTY', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', NULL, 'T_DOUBLE_COLON', 
      'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 
      'T_BOOLEAN_AND', 'T_CONCAT_EQUAL', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 134 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 146 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 146 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 157 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 158 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 162 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 10:  #line 162 "grammar/xp.jay"
    {
      $yyVals[-4+$yyTop]->position= $p;
      $yyVals[-4+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 11:  #line 170 "grammar/xp.jay"
    { $yyVal= new ImportNode(); } break;

    case 12:  #line 171 "grammar/xp.jay"
    { $yyVal= new StaticImportNode(); } break;

    case 13:  #line 172 "grammar/xp.jay"
    { $yyVal= new NativeImportNode(); } break;

    case 16:  #line 178 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 18:  #line 183 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 19:  #line 189 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 20:  #line 189 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 21:  #line 198 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 22:  #line 198 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 23:  #line 207 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 24:  #line 207 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 25:  #line 218 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 26:  #line 219 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 27:  #line 223 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 28:  #line 224 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 29:  #line 228 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 30:  #line 229 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 31:  #line 233 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 234 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 33:  #line 238 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 34:  #line 239 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 35:  #line 243 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 36:  #line 244 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 245 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 38:  #line 249 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 39:  #line 250 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 40:  #line 251 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 41:  #line 255 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 42:  #line 256 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 43:  #line 260 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 44:  #line 260 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 45:  #line 263 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 46:  #line 263 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 47:  #line 273 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 48:  #line 280 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->modifiers= $yyVals[-5+$yyTop][0];
      $yyVals[-3+$yyTop]->annotations= $yyVals[-5+$yyTop][1];
      $yyVals[-3+$yyTop]->type= $yyVals[-4+$yyTop];
      $yyVals[-3+$yyTop]->handlers= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 49:  #line 290 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 50:  #line 291 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[-3+$yyTop], 'arguments' => $yyVals[-1+$yyTop]))); } break;

    case 51:  #line 295 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 52:  #line 296 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 53:  #line 300 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 54:  #line 301 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 55:  #line 302 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 56:  #line 306 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 57:  #line 307 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 58:  #line 313 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 59:  #line 313 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 60:  #line 323 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 61:  #line 323 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 62:  #line 331 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 63:  #line 331 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 64:  #line 344 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 65:  #line 345 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 66:  #line 349 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 67:  #line 350 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 68:  #line 354 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 69:  #line 358 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVals[-1+$yyTop] && $yyVal->parameters= array('default' => $yyVals[-1+$yyTop]);
    } break;

    case 70:  #line 363 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 71:  #line 371 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 72:  #line 372 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 73:  #line 376 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 74:  #line 377 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 75:  #line 381 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 76:  #line 382 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 77:  #line 386 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 78:  #line 387 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 79:  #line 391 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 80:  #line 392 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 87:  #line 404 "grammar/xp.jay"
    { $yyVal= '[]'; } break;

    case 88:  #line 405 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 89:  #line 413 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 91:  #line 418 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 92:  #line 419 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 93:  #line 423 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 94:  #line 423 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 95:  #line 426 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 96:  #line 426 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 97:  #line 431 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 98:  #line 431 "grammar/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= array();
        foreach ($yyVals[-6+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->initialization[]= $stmt;
        }
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= array();
        foreach ($yyVals[-2+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->loop[]= $stmt;
        }
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 99:  #line 449 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 100:  #line 449 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 101:  #line 454 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 102:  #line 454 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 103:  #line 458 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 104:  #line 458 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 105:  #line 462 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 106:  #line 462 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 107:  #line 466 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 108:  #line 466 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 109:  #line 471 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 111:  #line 472 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 113:  #line 473 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 114:  #line 473 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 115:  #line 476 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->free= TRUE; } break;

    case 117:  #line 481 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 119:  #line 486 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 120:  #line 487 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 121:  #line 491 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 122:  #line 491 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 123:  #line 495 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 124:  #line 495 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 125:  #line 501 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 126:  #line 502 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 127:  #line 506 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 128:  #line 507 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 129:  #line 507 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 130:  #line 512 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 131:  #line 513 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 132:  #line 517 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 133:  #line 518 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 134:  #line 522 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 135:  #line 522 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 136:  #line 530 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 138:  #line 535 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 139:  #line 535 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 140:  #line 543 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 142:  #line 548 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 143:  #line 549 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 144:  #line 553 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 146:  #line 558 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 147:  #line 564 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 148:  #line 572 "grammar/xp.jay"
    { 
      /* TBI: Constant */ 
    } break;

    case 149:  #line 575 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 150:  #line 578 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new InvocationNode(array('name' => $yyVals[-3+$yyTop]))); 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 152:  #line 586 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 153:  #line 586 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 154:  #line 589 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 155:  #line 589 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 156:  #line 594 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 157:  #line 594 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyVals[-1+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 158:  #line 599 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 159:  #line 599 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 160:  #line 605 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 161:  #line 606 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 162:  #line 609 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 163:  #line 612 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 164:  #line 615 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 165:  #line 618 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 166:  #line 622 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 167:  #line 628 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 168:  #line 634 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 169:  #line 640 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 170:  #line 648 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 171:  #line 649 "grammar/xp.jay"
    { /* XXX class literal */ } break;

    case 172:  #line 650 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 173:  #line 650 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 174:  #line 654 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 175:  #line 659 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 176:  #line 660 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 177:  #line 661 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 178:  #line 662 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 179:  #line 666 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 181:  #line 671 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 182:  #line 672 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 183:  #line 676 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 184:  #line 680 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 185:  #line 681 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 682 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 683 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 188:  #line 684 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 189:  #line 685 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 190:  #line 686 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 191:  #line 690 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 192:  #line 691 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 193:  #line 692 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 194:  #line 693 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 195:  #line 694 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 196:  #line 695 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 197:  #line 699 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 198:  #line 700 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 199:  #line 701 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 200:  #line 702 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 201:  #line 703 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 202:  #line 704 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 203:  #line 708 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 204:  #line 709 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 205:  #line 710 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 206:  #line 711 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 207:  #line 712 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 208:  #line 713 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 209:  #line 717 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 210:  #line 718 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 211:  #line 723 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 214:  #line 729 "grammar/xp.jay"
    {  $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 215:  #line 733 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 216:  #line 733 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 217:  #line 736 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 218:  #line 739 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 219:  #line 739 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 222:  #line 753 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 223:  #line 754 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 224:  #line 758 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 225:  #line 762 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 226:  #line 763 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 228:  #line 768 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 229:  #line 772 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 230:  #line 773 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 231:  #line 779 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 232:  #line 780 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 233:  #line 784 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 234:  #line 785 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 235:  #line 789 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 236:  #line 790 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 237:  #line 791 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 238:  #line 792 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 239:  #line 793 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 240:  #line 794 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 241:  #line 795 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;

    case 242:  #line 796 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2099 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
