<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 51 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_DECIMAL',  263);
  define('TOKEN_T_HEX',  264);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_PACKAGE',  303);
  define('TOKEN_T_IMPORT',  304);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_T_DOUBLE_ARROW',  413);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          9,     9,     9,     4,     4,    12,     3,    16,     3,    18, 
          3,    13,    13,    14,    14,    19,    19,    21,    21,    15, 
         15,    22,    22,    22,    17,    17,    17,    26,    26,    28, 
         27,    29,    27,    23,    23,    33,    33,    32,    32,    32, 
         31,    31,    36,    24,    39,    24,    41,    24,    38,    38, 
         35,    35,    42,    42,    43,    43,    37,    37,    40,    40, 
         40,    40,    40,    40,    25,    25,    34,    34,    45,    44, 
         46,    44,    49,    44,    51,    44,    53,    44,    54,    44, 
         55,    44,    57,    44,    44,    52,    52,    47,    47,    48, 
         58,    48,    56,    56,    59,    59,    63,    62,    60,    60, 
         64,    61,    65,    65,    30,    68,    30,    69,    30,    70, 
         30,    71,    30,    72,    30,    30,    30,    30,    30,    30, 
         30,    30,    66,    78,    66,    80,    66,    66,    66,    66, 
         66,    79,    79,    81,    81,    82,    73,    73,    73,    73, 
         73,    73,    74,    74,    74,    74,    74,    74,    75,    75, 
         75,    75,    75,    75,    76,    76,    76,    76,    76,    76, 
         77,    77,    67,    67,    84,    83,    83,    85,    83,    83, 
         50,    50,    86,    86,    11,    11,    11,    87,    87,    88, 
         88,    20,    20,    10,    10,    89,    89,    90,    90,    90, 
         90,    90,    90,    90, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     6, 
          1,     1,     3,     1,     3,     0,     9,     0,     9,     0, 
          8,     0,     2,     0,     2,     0,     2,     0,     3,     2, 
          0,     1,     1,     4,     3,     1,     0,     1,     3,     0, 
          3,     0,     6,     5,     6,     0,     1,     2,     4,     4, 
          0,     2,     0,     9,     0,     8,     0,     9,     1,     3, 
          0,     1,     1,     3,     3,     3,     0,     2,     1,     1, 
          1,     1,     1,     1,     0,     1,     1,     2,     0,     4, 
          0,     7,     0,    10,     0,     8,     0,     6,     0,     7, 
          0,     6,     0,     4,     2,     3,     1,     1,     3,     0, 
          0,     3,     2,     1,     1,     2,     0,     9,     0,     1, 
          0,     5,     0,     1,     1,     0,     3,     0,     8,     0, 
          5,     0,     8,     0,     6,     3,     1,     1,     1,     1, 
          1,     5,     1,     0,     4,     0,     4,     1,     1,     1, 
          1,     0,     1,     1,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     2,     2,     2,     2,     2,     2, 
          2,     2,     0,     1,     0,     4,     2,     0,     6,     2, 
          0,     1,     1,     3,     1,     4,     3,     1,     3,     1, 
          3,     1,     3,     0,     1,     1,     2,     1,     1,     1, 
          1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,   198,   200,   199,   201,   203,   202,   204,     1,     0, 
        195,     0,     8,     0,     4,     0,    16,    20,    18,   197, 
         15,     0,     0,     0,     0,    12,     0,     0,     0,     0, 
          0,     0,     0,    10,     0,     0,     0,     0,     0,     0, 
          0,    13,   187,     0,   190,     0,     0,    23,     0,     0, 
          0,    27,    31,     0,     0,   186,     0,    25,    31,     0, 
          0,     0,   191,   189,     0,   193,     0,    21,     0,    30, 
         32,    33,     0,     0,     0,     0,    17,     0,     0,     0, 
          0,     0,     0,     0,    19,    31,     0,     0,     0,   134, 
          0,     0,     0,     0,     0,   141,   138,   140,   139,   116, 
         79,     0,    93,   118,    83,    87,    89,    85,    81,   136, 
          0,     0,     0,     0,    76,     0,   115,   127,   128,   129, 
        130,   131,    55,    69,    70,    71,    72,    73,    74,     0, 
          0,     0,     0,    31,    41,     0,     0,    39,     0,     0, 
          0,     0,     0,     0,     0,   124,     0,     0,    91,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    34, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   171,   172,     0,     0,     0,     0,     0, 
          0,    95,    78,     0,    57,     0,     0,    53,     0,     0, 
          0,     0,     0,     0,   182,     0,   175,     0,   117,     0, 
          0,     0,     0,     0,     0,     0,     0,    98,     0,     0, 
          0,     0,     0,   143,     0,   126,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   153,   154,   155,   156,   157,   158,     0,     0,    62, 
          0,     0,     0,    48,     0,    47,     0,     0,     0,    44, 
         29,     0,     0,   135,     0,     0,     0,     0,    80,     0, 
         94,     0,     0,     0,     0,     0,     0,     0,     0,   137, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    45,     0,    43,   184,     0,     0,     0,   178,     0, 
          0,     0,     0,    99,     0,     0,     0,     0,   145,   121, 
          0,     0,    66,    65,     0,     0,    64,     0,    49,    50, 
          0,   125,   176,     0,   107,   111,    92,     0,   104,     0, 
          0,     0,    88,     0,     0,     0,     0,     0,    68,    59, 
          0,    56,     0,     0,     0,     0,     0,   103,   110,   106, 
          0,     0,    90,     0,     0,   101,    82,     0,     0,    58, 
         54,   179,     0,     0,   119,     0,    96,    86,     0,   123, 
         60,     0,     0,     0,   102,     0,   112,    84,     0,     0, 
          0,   108, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    19,   122,     4,     7,     8,    11,    38,    79, 
         61,    33,    48,    60,    71,    35,    84,    34,    50,    62, 
        145,    80,    81,    82,   123,    85,    86,    93,    94,   124, 
        200,   197,   257,   125,   249,   258,   316,   342,   194,   140, 
        252,   250,   251,   126,   158,   166,   219,   357,   162,   204, 
        165,   336,   163,   164,   212,   327,   160,   369,   328,   348, 
        329,   330,   346,   347,   298,   127,   209,   157,   161,   227, 
        228,   206,   128,   129,   130,   131,   132,   151,   223,   167, 
        224,   225,   210,   266,   324,   205,    56,    57,    21,    22, 
    );
    protected static $yySindex = array(         -237,
          0,     0,  -236,  -159,     0,   141,     0,  -236,    41,    71, 
       -127,     0,     0,     0,     0,     0,     0,     0,     0,  -145, 
          0,   141,     0,  -159,     0,    95,     0,     0,     0,     0, 
          0,   -29,  -159,  -159,  -159,     0,   121,   113,   -32,  -129, 
       -128,  -129,   -29,     0,    84,   -46,  -159,  -125,  -159,    60, 
       -125,     0,     0,  -126,     0,   142,   161,     0,  -159,    93, 
        177,     0,     0,    96,  -159,     0,   -46,     0,     0,  -159, 
        -28,   -35,     0,     0,    -3,     0,   104,     0,  -133,     0, 
          0,     0,     0,   101,   180,   190,     0,  1734,    18,    -1, 
        -98,  -197,   120,   209,     0,     0,   -35,  1898,  1898,     0, 
       1898,  1898,  1898,  1898,    27,     0,     0,     0,     0,     0, 
          0,   137,     0,     0,     0,     0,     0,     0,     0,     0, 
       1898,  -141,   143,  1023,     0,  1734,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   231, 
         12,   236,   223,     0,     0,  1898,   162,     0,   -51,   -51, 
       1898,   -51,   -51,   -51,   -51,     0,   -90,  1898,     0,  1898, 
       -159,   246,   247,  1889,   254,   258,  1898,  1140,     0,     0, 
       1898,  1898,  1898,  1898,  1898,  1898,  1898,  1898,  1898,  1898, 
       1898,  1898,  1898,     0,     0,  1898,  1898,  1898,  1898,  1898, 
       1898,     0,     0,  -159,     0,  -108,    12,     0,  1898,   229, 
         99,  1184,  1108,   206,     0,  1898,     0,    42,     0,   -90, 
       1230,  1734,  1279,   263,  1898,  1898,  1734,     0,   -57,  1898, 
       1898,   175,   183,     0,   261,     0,   -22,    52,   -51,   -51, 
        -51,   -51,   -51,   -51,  1306,   -51,   -51,   -51,   -51,   -51, 
        -51,     0,     0,     0,     0,     0,     0,   -40,   280,     0, 
        278,  -159,   284,     0,  1734,     0,   266,  -159,  1562,     0, 
          0,   120,  1898,     0,   285,  1898,   289,   -90,     0,   205, 
          0,  1898,   272,  1337,   208,   297,  1405,  1433,  1898,     0, 
       1898,   -90,   299,  1898,     2,   223,    19,  -159,   303,   305, 
        222,     0,   307,     0,     0,   -90,  1562,   260,     0,  -239, 
        314,  1898,  1889,     0,  1898,    16,  1889,  1562,     0,     0, 
       1898,   -51,     0,     0,  -159,   -21,     0,    19,     0,     0, 
         19,     0,     0,  1898,     0,     0,     0,    13,     0,    33, 
        120,   298,     0,  1513,   -54,   321,     7,   346,     0,     0, 
       1734,     0,   -21,   -21,   363,   348,   283,     0,     0,     0, 
        -90,  1898,     0,    67,  1889,     0,     0,   -90,   286,     0, 
          0,     0,  -159,  1734,     0,   367,     0,     0,  1889,     0, 
          0,    69,   287,  1889,     0,   388,     0,     0,   310,  1734, 
        312,     0, 
    );
    protected static $yyRindex= array(          347,
          0,     0,   398,     0,     0,  -142,     0,   645,  1692,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    15,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   371,     0,     3,  -111, 
        315,  -111,     0,     0,     0,     0,     0,   316,     0,     0, 
        316,     0,     0,     0,     0,     0,   396,     0,     0,     0, 
        -20,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       -132,   338,     0,     0,  -132,     0,   210,     0,     0,     0, 
          0,     0,    55,     0,   339,   -43,     0,   340,   -30,     0, 
          0,     0,    26,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    49,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   343,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   376,     0,     0,     0,  -107,     0,   203,   248, 
        378,   373,   476,   576,   599,     0,    76,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   349,     0,  -186,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   431,     0,     0,   414,     0,     0,     0, 
       -132,     0,   174,     0,     0,   434,     0,     0,     0,   103, 
          0,   340,     0,     0,   426,     0,   340,     0,     0,     0, 
          0,     0,     0,     0,   361,     0,     0,     0,   630,   667, 
        698,   726,   753,   784,     0,   811,   849,   874,   907,   983, 
       1051,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        456,   431,     0,     0,     0,     0,     0,   431,   135,     0, 
          0,    26,     0,     0,     0,   406,   -37,   148,     0,     0, 
          0,   434,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    76,     0,     0,     0,    35,   -19,     0,     0,     0, 
          0,     0,     0,     0,     0,    76,   407,     0,     0,     0, 
          0,   426,     0,     0,     0,     0,     0,   -25,     0,     0, 
        434,  1079,     0,     0,     0,     0,     0,   -19,     0,     0, 
        -19,     0,     0,   434,     0,     0,     0,  1537,     0,  1524, 
        -10,     0,     0,     0,   460,     0,  1723,     0,     0,     0, 
        340,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         76,   434,     0,     0,     0,     0,     0,    76,     0,     0, 
          0,     0,     0,   340,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   340, 
          0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,  2054,     0,   494,     0,     0,   479,   518, 
       1856,     0,   483,   475,   -12,     0,     0,     0,     0,   -56, 
       -233,     0,     0,     0,   -44,   430,     0,     0,     0,  2172, 
        242,   332,     0,  -106,  -180,     0,  -241,  -173,     0,     0, 
          0,   243,     0,  -104,     0,     0,    31,     0,     0,   117, 
          0,     0,     0,     0,     0,     0,     0,     0,   202,     0, 
        213,     0,     0,     0,     0,     0,  -227,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        252,     0,  -139,     0,     0,   273,   471,     0,   520,     0, 
    );
    protected static $yyTable = array(177,
        207,   285,    68,   177,   177,   177,   177,   177,   186,   177, 
        187,    22,    36,    76,   255,    38,    54,    35,   146,   193, 
        177,   177,   177,   177,   177,   177,    28,    46,   294,    14, 
         28,    28,    28,    28,    28,   138,    28,   340,   192,    67, 
        136,   134,   185,   135,   185,   137,   185,    28,    28,    28, 
         28,    28,    28,   177,   310,   177,    75,   133,    45,   218, 
         14,   185,   142,    24,   185,     1,   156,     5,   322,    28, 
        268,   289,    24,   122,   183,    51,   343,   293,    51,   344, 
         28,    38,    28,   147,    28,   133,    24,   177,   177,   133, 
        133,   133,   133,   133,    42,   133,    78,   351,    40,   146, 
          9,   341,   192,    67,   325,   326,   133,   133,   133,   133, 
        133,   133,   173,    40,    28,    28,   173,   173,   173,   173, 
        173,    87,   173,   365,   139,   185,    89,   194,   268,    25, 
        370,   201,    26,   173,   173,   173,   173,   173,   173,   174, 
         32,   133,   143,   174,   174,   174,   174,   174,   291,   174, 
         28,   253,   194,   120,    27,    28,    29,   194,   194,   194, 
        174,   174,   174,   174,   174,   174,    43,   270,   173,   360, 
        361,    44,   275,   133,   133,    52,    53,    40,    52,    40, 
         47,    49,    63,    65,   180,    59,    90,   194,   180,   180, 
        180,   180,   180,    52,   180,   174,    91,   194,   218,    22, 
        173,   173,   218,    66,    67,   180,   180,   180,   180,   180, 
        180,   176,   194,     9,   183,    69,   174,   172,    72,   173, 
         70,   175,   194,   261,    83,    95,    88,   174,   174,    14, 
         37,   254,   183,    97,   186,   171,   187,   177,    96,   167, 
        180,   141,   144,   167,   167,   167,   167,   167,   146,   167, 
        218,    12,    13,    14,    77,    16,    17,    18,   339,   159, 
        167,   167,   185,   167,   218,   167,   183,   170,   169,   218, 
        195,   196,   180,   180,   196,   198,    12,    13,    14,    77, 
         16,    17,    18,   199,   168,   215,   216,   260,   168,   168, 
        168,   168,   168,   220,   168,   167,   359,   221,   264,   286, 
        183,   267,   272,   276,   281,   168,   168,   280,   168,    14, 
        168,   283,   185,   185,   196,   196,   196,   282,   208,   373, 
        287,   288,   265,   290,   292,   296,   177,   167,   299,   300, 
        302,   273,   304,   333,   196,   381,   305,   337,   311,   315, 
        168,   313,   185,   318,   196,   319,   320,   321,   189,   188, 
        184,   185,   323,    28,   331,   335,   352,   326,   354,   190, 
        191,   355,   177,   177,   177,   177,   177,   177,   177,   177, 
        177,   177,   168,   177,   177,   177,   325,   356,    12,    13, 
         14,    77,    16,    17,    18,   368,   358,   363,   301,    28, 
         28,    28,    28,    28,    28,    28,    28,    28,    28,   375, 
         28,    28,    28,   362,   378,   364,   367,   374,   376,   165, 
        371,   377,   133,   165,   165,   165,   165,   165,   332,   165, 
         12,    13,    14,    15,    16,    17,    18,   338,   379,    11, 
        165,   165,   380,   165,    51,   165,   382,    26,    24,   173, 
        345,    12,    13,    14,    77,    16,    17,    18,   133,   133, 
        133,   133,   133,   133,   133,   133,   133,   188,    14,   133, 
        133,   133,    37,    36,    75,   165,   174,    77,   366,   201, 
        181,    61,    46,   142,   181,   173,   173,   173,   173,   173, 
        173,   173,   173,   173,   181,   144,   173,   173,   173,   201, 
        201,   201,   201,   201,   201,   201,    63,   165,   113,   114, 
         97,    23,   174,   174,   174,   174,   174,   174,   174,   174, 
        174,   180,   166,   174,   174,   174,   166,   166,   166,   166, 
        166,    52,   166,    20,    51,    64,   148,   314,   256,   201, 
        317,   350,   309,   166,   166,   295,   166,    74,   166,   201, 
        349,    30,     0,     0,     0,     0,     0,   180,   180,   180, 
        180,   180,   180,   180,   180,   180,     0,     0,   180,   180, 
        180,     0,     0,     0,     0,     0,   167,     0,   166,     0, 
          0,     0,     0,     0,   189,   188,   184,   185,   178,   179, 
        180,   181,   182,     0,     0,   190,   191,   279,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        166,     0,     0,     0,     0,     0,   167,   167,   167,   167, 
        167,   168,   169,     0,     0,   167,   169,   169,   169,   169, 
        169,     0,   169,     0,     0,     0,     2,     2,     2,     2, 
          2,     2,     2,   169,   169,   170,   169,     0,   169,   170, 
        170,   170,   170,   170,     0,   170,     2,     2,     2,     0, 
          2,   168,   168,   168,   168,   168,   170,   170,     0,   170, 
        168,   170,     0,     0,     0,     0,   147,     0,   169,     0, 
        147,   147,   147,   147,   147,     0,   147,     5,     5,     5, 
          5,     5,     5,     5,     0,     0,     0,   147,   147,     0, 
        147,   170,   147,     0,     0,     0,     0,     5,     5,     5, 
        169,     0,     0,   159,     0,     0,     0,   159,   159,   159, 
        159,   159,     0,   159,     0,     0,     0,     0,     0,     0, 
          0,     0,   147,   170,   159,   159,     0,   159,     0,   159, 
          0,     0,     0,     0,   160,     0,   165,     0,   160,   160, 
        160,   160,   160,     0,   160,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   147,   160,   160,     0,   160,   159, 
        160,     0,   161,     0,     0,     0,   161,   161,   161,   161, 
        161,     0,   161,     0,     0,     0,   165,   165,   165,   165, 
        165,     0,     0,   161,   161,   165,   161,     0,   161,   162, 
        160,   159,     0,   162,   162,   162,   162,   162,     0,   162, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        162,   162,     0,   162,     0,   162,     0,     0,   161,     0, 
        163,     0,   160,     0,   163,   163,   163,   163,   163,     0, 
        163,     0,     0,     0,     0,     0,     0,     0,     0,   166, 
          0,   163,   163,     0,   163,   162,   163,   148,     0,     0, 
        161,   148,   148,   148,   148,   148,     0,   148,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   148,   148, 
          0,   148,     0,   148,     0,     0,   163,   162,     0,   166, 
        166,   166,   166,   166,     0,   149,     0,     0,   166,   149, 
        149,   149,   149,   149,     0,   149,     0,     0,     0,     0, 
          0,     0,     0,   148,     0,     0,   149,   149,   163,   149, 
        150,   149,     0,     0,   150,   150,   150,   150,   150,     0, 
        150,     0,     0,     0,     7,     7,     7,     7,     7,     7, 
          7,   150,   150,     0,   150,   148,   150,     0,     0,   169, 
          0,   149,     0,   151,     7,     7,     7,   151,   151,   151, 
        151,   151,     0,   151,     0,     0,     0,     0,     0,     0, 
          0,     0,   170,     0,   151,   151,   150,   151,     0,   151, 
          0,     0,     0,   149,     0,     0,     0,     0,     0,   169, 
        169,   169,   169,   169,     0,     0,     0,     0,   169,     0, 
          0,     0,     0,   147,     0,     0,     0,     0,   150,   151, 
          0,     0,   170,   170,   170,   170,   170,     0,     0,     0, 
          0,   170,     0,     0,     0,     0,     0,     0,     0,   152, 
          0,     0,     0,   152,   152,   152,   152,   152,     0,   152, 
        159,   151,     0,   147,   147,   147,   147,   147,     0,     0, 
        152,   152,   147,   152,     0,   152,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   176, 
          0,   160,     0,     0,   174,   172,     0,   173,     0,   175, 
        159,   159,   159,   159,   159,   152,     0,     0,     0,   159, 
          0,   192,   186,   171,   187,   177,     0,   164,     0,   161, 
          0,   164,   164,   164,   164,   164,     0,   164,     0,     0, 
          0,   160,   160,   160,   160,   160,     0,   152,   164,   164, 
        160,   164,     0,   164,     0,   132,   162,     0,     0,   132, 
        132,   132,   132,   132,     0,   132,     0,     0,     0,   161, 
        161,   161,   161,   161,     0,     0,   132,   132,   161,   132, 
          0,   132,     0,   164,   176,     0,     0,   163,   183,   174, 
        172,   263,   173,     0,   175,     0,   162,   162,   162,   162, 
        162,     0,     0,     0,     0,   162,     0,   186,   171,   187, 
        177,   132,     0,     0,   148,   164,   176,     0,     0,     0, 
        226,   174,   172,     0,   173,     0,   175,   163,   163,   163, 
        163,   163,     0,     0,     0,     0,   163,     0,     0,   186, 
        171,   187,   177,   132,     0,     0,     0,     0,     0,     0, 
          0,     0,   149,     0,   148,   148,   148,   148,   148,     0, 
        176,     0,     0,   148,   262,   174,   172,     0,   173,     0, 
        175,     0,     0,   183,     0,     0,     0,   150,     0,     0, 
          0,     0,     0,   186,   171,   187,   177,     0,     0,     0, 
          0,     0,   149,   149,   149,   149,   149,     0,     0,     0, 
          0,   149,     0,     0,     0,   183,   176,     0,     0,     0, 
        151,   174,   172,     0,   173,     0,   175,   150,   150,   150, 
        150,   150,     0,     0,     0,     0,   150,     0,   269,   186, 
        171,   187,   177,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   183, 
        151,   151,   151,   151,   151,   176,     0,     0,     0,   151, 
        174,   172,     0,   173,     0,   175,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   271,   186,   171, 
        187,   177,   176,     0,     0,     0,   152,   174,   172,     0, 
        173,     0,   175,     0,     0,   183,     0,     0,     0,     0, 
          0,     0,     0,   284,     0,   186,   171,   187,   177,     0, 
          0,     0,     0,   176,     0,     0,     0,   303,   174,   172, 
          0,   173,     0,   175,     0,     0,   152,   152,   152,   152, 
        152,     0,     0,     0,     0,   152,   186,   171,   187,   177, 
          0,     0,     0,     0,   183,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   164,     0,     0,     0,     0,     0, 
          0,     0,   189,   188,   184,   185,   178,   179,   180,   181, 
        182,   183,     0,   190,   191,     0,     0,     0,     0,     0, 
          0,   176,   132,     0,     0,     0,   174,   172,     0,   173, 
          0,   175,     0,     0,   164,   164,   164,   164,   164,     0, 
          0,     0,   183,   164,   186,   171,   187,   177,     0,   176, 
          0,     0,     0,   307,   174,   172,     0,   173,     0,   175, 
          0,     0,   132,   132,   132,   132,   132,     0,     0,     0, 
          0,   132,   186,   171,   187,   177,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   189,   188,   184, 
        185,   178,   179,   180,   181,   182,     0,     0,   190,   191, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        183,     0,     0,     0,     0,     0,     0,     0,     0,   189, 
        188,   184,   185,   178,   179,   180,   181,   182,     0,   176, 
        190,   191,     0,   353,   174,   172,   105,   173,   183,   175, 
          0,     0,     0,   105,     0,     0,   105,     0,   105,   109, 
          0,     0,   186,   171,   187,   177,   109,     0,     0,   109, 
          0,   109,     0,   189,   188,   184,   185,   178,   179,   180, 
        181,   182,     0,     0,   190,   191,     0,     0,   176,     0, 
          0,     0,     0,   174,   172,     0,   173,     0,   175,     0, 
          0,     0,     0,     0,   105,     0,     0,     0,     0,     0, 
          0,   186,   171,   187,   177,     0,     0,   109,     0,   189, 
        188,   184,   185,   178,   179,   180,   181,   182,   183,     0, 
        190,   191,     0,     0,     0,     0,   105,     0,   105,   105, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   109, 
          0,   109,   109,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   189,   188, 
        184,   185,   178,   179,   180,   181,   182,   183,     0,   190, 
        191,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   189,   188,   184,   185,   178, 
        179,   180,   181,   182,     0,     0,   190,   191,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    14,     0,    14,     0,    14,   189,   188,   184,   185, 
        178,   179,   180,   181,   182,     0,     0,   190,   191,     0, 
         14,    14,     0,    14,     0,   100,     0,     0,     0,     0, 
          0,     0,   100,     0,     0,   100,   101,   100,   306,     0, 
          0,     0,     0,   121,     0,     0,    98,     0,    99,     0, 
          0,     0,    14,   105,   105,   105,   105,   105,     0,     0, 
          0,     0,     0,     0,     0,     0,   109,   109,   109,   109, 
        109,     0,     0,     0,   189,   188,   184,   185,   178,   179, 
        180,   181,   182,   100,    14,   190,   191,     0,     0,     0, 
          0,     0,     0,     0,   100,     0,     0,     0,     0,     0, 
          0,     0,   189,   188,   184,   185,   178,   179,   180,   181, 
        182,     0,     0,   190,   191,   100,     0,   100,   100,     0, 
          0,     0,     0,     0,     0,     0,   120,     0,     0,   102, 
          0,     0,     0,   105,   105,   105,   105,     0,   105,   105, 
          0,     0,     0,     0,     0,     0,   109,   109,   109,   109, 
          0,     0,   109,   105,   105,   105,   105,     0,    40,    41, 
         42,     0,     0,   105,   105,     0,   109,   109,   109,   109, 
          0,    55,    58,     0,     0,     0,   109,   109,     0,     0, 
          0,     0,   189,   188,   184,   185,   178,   179,   180,   181, 
        182,   101,    55,   190,   191,   105,   105,     0,   121,     0, 
        101,    98,     0,    99,    92,     0,     0,   121,   109,   109, 
         98,     0,    99,     0,     0,     0,     0,     0,     0,     0, 
          0,    14,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   189,   188,   184,   185,   178,   179,   180,   181,   182, 
          0,     0,   190,   191,     0,     0,     0,     0,     0,   100, 
          0,     0,   100,   100,   100,   100,   100,     0,   100,     0, 
          0,     0,     0,   105,   106,   107,   108,   109,     0,     0, 
          0,    14,    14,     0,     0,     0,     0,     0,     0,     0, 
          0,   217,     0,     0,   102,     0,   214,     0,     0,     0, 
        120,     0,     0,   102,     0,     0,     0,     0,     0,     0, 
          0,    14,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   248, 
          0,     0,     0,     0,     0,     0,     0,    10,     0,     0, 
          0,     0,   100,   100,   100,   100,     0,     0,   100,     0, 
          0,     0,     0,   110,   111,   112,   113,    31,     0,   114, 
          0,     0,   100,   100,   100,   100,    39,    39,    39,     0, 
          0,     0,   100,   115,   116,   117,   118,     0,     0,    39, 
         39,    14,    39,   119,     0,     0,     0,   248,     0,     0, 
          0,     0,    39,   248,     0,     0,     0,     0,    73,     0, 
         39,     0,     0,    39,   100,   100,     0,     0,     0,     0, 
          0,     0,    39,     0,     0,   103,   104,     0,     0,     0, 
          0,     0,     0,   248,     0,     0,     0,     0,   105,   106, 
        107,   108,   109,     0,     0,     0,     0,   105,   106,   107, 
        108,   109,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    39,     0,     0,     0,   372,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   110,   111, 
        112,   113,     0,     0,   114,     0,     0,   110,     0,     0, 
          0,     0,     0,   114,     0,     0,     0,    39,   115,   116, 
        117,   118,     0,     0,     0,     0,     0,     0,   119,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   149, 
        150,     0,   152,   153,   154,   155,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        103,   104,   168,     0,     0,     0,     0,     0,     0,   103, 
        104,     0,     0,     0,     0,    39,     0,     0,     0,     0, 
          0,    39,     0,     0,     0,     0,     0,   202,     0,     0, 
          0,     0,   203,     0,     0,     0,     0,     0,     0,   211, 
          0,   213,     0,     0,     0,     0,     0,     0,   222,     0, 
          0,    39,   229,   230,   231,   232,   233,   234,   235,   236, 
        237,   238,   239,   240,   241,     0,     0,   242,   243,   244, 
        245,   246,   247,     0,     0,     0,     0,     0,    39,     0, 
        259,     0,     0,     0,     0,     0,     0,   203,     0,     0, 
          0,     0,     0,     0,     0,     0,   203,   274,     0,     0, 
          0,   277,   278,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    39,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   203,     0,     0,   297,     0,     0, 
          0,     0,     0,   203,     0,     0,     0,     0,     0,     0, 
        308,     0,   222,     0,     0,   312,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   203,     0,     0,   334,     0,     0,     0, 
          0,     0,   203,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   203,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   203, 
    );
    protected static $yyCheck = array(37,
         91,    42,    59,    41,    42,    43,    44,    45,    60,    47, 
         62,   123,    42,    70,   123,    59,    63,   125,    44,   126, 
         58,    59,    60,    61,    62,    63,    37,    60,   262,    60, 
         41,    42,    43,    44,    45,    37,    47,    59,    59,    59, 
         42,    43,    40,    45,    42,    47,    44,    58,    59,    60, 
         61,    62,    63,    91,   282,    93,    69,    40,    91,   164, 
         91,    59,   260,    46,    62,   303,    40,   304,   296,    44, 
        210,   252,    46,   260,   126,    41,   318,   258,    44,   321, 
         91,   125,    93,    96,    59,    37,    46,   125,   126,    41, 
         42,    43,    44,    45,    40,    47,   125,   331,    44,   125, 
        260,   123,   123,   123,   344,   345,    58,    59,    60,    61, 
         62,    63,    37,    59,   125,   126,    41,    42,    43,    44, 
         45,   125,    47,   351,   126,   123,   260,   260,   268,    59, 
        358,   144,   260,    58,    59,    60,    61,    62,    63,    37, 
         46,    93,   340,    41,    42,    43,    44,    45,   255,    47, 
        125,   260,   260,   340,   300,   301,   302,   300,   301,   302, 
         58,    59,    60,    61,    62,    63,    46,   212,    93,   343, 
        344,    59,   217,   125,   126,    41,    93,   123,    44,   125, 
        310,   310,   123,   310,    37,   311,   320,   320,    41,    42, 
         43,    44,    45,    59,    47,    93,   330,   330,   303,   311, 
        125,   126,   307,    62,    44,    58,    59,    60,    61,    62, 
         63,    37,   320,   260,    41,   123,    42,    43,   123,    45, 
         44,    47,   330,   125,   260,   125,   123,   125,   126,   260, 
        260,   340,    59,    44,    60,    61,    62,    63,    59,    37, 
         93,   340,   123,    41,    42,    43,    44,    45,    40,    47, 
        355,   280,   281,   282,   283,   284,   285,   286,   315,   123, 
         58,    59,   260,    61,   369,    63,    93,   125,   410,   374, 
         40,   260,   125,   126,   260,    40,   280,   281,   282,   283, 
        284,   285,   286,    61,    37,    40,    40,    59,    41,    42, 
         43,    44,    45,    40,    47,    93,   341,    40,    93,   340, 
        126,   260,    40,   361,    44,    58,    59,   125,    61,   340, 
         63,   260,   310,   311,   300,   301,   302,   340,   409,   364, 
         41,    44,   206,    40,    59,    41,   364,   125,    40,   125, 
         59,   215,   125,   303,   320,   380,    40,   307,    40,   321, 
         93,   340,   340,    41,   330,    41,   125,    41,   400,   401, 
        402,   403,    93,   364,    41,   340,    59,   345,   413,   411, 
        412,    41,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   409,   125,   411,   412,   413,   344,   371,   280,   281, 
        282,   283,   284,   285,   286,   355,    41,    40,   272,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   409,   369, 
        411,   412,   413,    41,   374,   123,   340,    41,   340,    37, 
        125,   125,   364,    41,    42,    43,    44,    45,   302,    47, 
        280,   281,   282,   283,   284,   285,   286,   311,    41,    59, 
         58,    59,   123,    61,    59,    63,   125,   123,   123,   364, 
        324,   280,   281,   282,   283,   284,   285,   286,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    62,   410,   411, 
        412,   413,   125,   125,   125,    93,   364,   125,   352,   260, 
         93,    41,    59,   125,    41,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    59,   125,   411,   412,   413,   280, 
        281,   282,   283,   284,   285,   286,    41,   125,    93,    93, 
         41,     8,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   364,    37,   411,   412,   413,    41,    42,    43,    44, 
         45,    43,    47,     6,    42,    51,    97,   286,   197,   320, 
        288,   330,   281,    58,    59,   263,    61,    67,    63,   330, 
        328,    22,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
        413,    -1,    -1,    -1,    -1,    -1,   364,    -1,    93,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,   413,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        125,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,   364,    37,    -1,    -1,   413,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,   280,   281,   282,   283, 
        284,   285,   286,    58,    59,    37,    61,    -1,    63,    41, 
         42,    43,    44,    45,    -1,    47,   300,   301,   302,    -1, 
        304,   404,   405,   406,   407,   408,    58,    59,    -1,    61, 
        413,    63,    -1,    -1,    -1,    -1,    37,    -1,    93,    -1, 
         41,    42,    43,    44,    45,    -1,    47,   280,   281,   282, 
        283,   284,   285,   286,    -1,    -1,    -1,    58,    59,    -1, 
         61,    93,    63,    -1,    -1,    -1,    -1,   300,   301,   302, 
        125,    -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    93,   125,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,    -1,    37,    -1,   364,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   125,    58,    59,    -1,    61,    93, 
         63,    -1,    37,    -1,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    58,    59,   413,    61,    -1,    63,    37, 
         93,   125,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    93,    -1, 
         37,    -1,   125,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364, 
         -1,    58,    59,    -1,    61,    93,    63,    37,    -1,    -1, 
        125,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    93,   125,    -1,   404, 
        405,   406,   407,   408,    -1,    37,    -1,    -1,   413,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    -1,    -1,    58,    59,   125,    61, 
         37,    63,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,   280,   281,   282,   283,   284,   285, 
        286,    58,    59,    -1,    61,   125,    63,    -1,    -1,   364, 
         -1,    93,    -1,    37,   300,   301,   302,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   364,    -1,    58,    59,    93,    61,    -1,    63, 
         -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,    -1, 
         -1,    -1,    -1,   364,    -1,    -1,    -1,    -1,   125,    93, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37, 
         -1,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
        364,   125,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         58,    59,   413,    61,    -1,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37, 
         -1,   364,    -1,    -1,    42,    43,    -1,    45,    -1,    47, 
        404,   405,   406,   407,   408,    93,    -1,    -1,    -1,   413, 
         -1,    59,    60,    61,    62,    63,    -1,    37,    -1,   364, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,   125,    58,    59, 
        413,    61,    -1,    63,    -1,    37,   364,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    58,    59,   413,    61, 
         -1,    63,    -1,    93,    37,    -1,    -1,   364,   126,    42, 
         43,    44,    45,    -1,    47,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,    -1,    60,    61,    62, 
         63,    93,    -1,    -1,   364,   125,    37,    -1,    -1,    -1, 
         41,    42,    43,    -1,    45,    -1,    47,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,    -1,    -1,    60, 
         61,    62,    63,   125,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   364,    -1,   404,   405,   406,   407,   408,    -1, 
         37,    -1,    -1,   413,    41,    42,    43,    -1,    45,    -1, 
         47,    -1,    -1,   126,    -1,    -1,    -1,   364,    -1,    -1, 
         -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,    -1,    -1,    -1,   126,    37,    -1,    -1,    -1, 
        364,    42,    43,    -1,    45,    -1,    47,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,    -1,    59,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126, 
        404,   405,   406,   407,   408,    37,    -1,    -1,    -1,   413, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,    61, 
         62,    63,    37,    -1,    -1,    -1,   364,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    -1,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   364,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   126,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1, 
         -1,    37,   364,    -1,    -1,    -1,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,   126,   413,    60,    61,    62,    63,    -1,    37, 
         -1,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    37, 
        411,   412,    -1,    41,    42,    43,    33,    45,   126,    47, 
         -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    45,    33, 
         -1,    -1,    60,    61,    62,    63,    40,    -1,    -1,    43, 
         -1,    45,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,    -1,    37,    -1, 
         -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1, 
         -1,    60,    61,    62,    63,    -1,    -1,    91,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   126,    -1, 
        411,   412,    -1,    -1,    -1,    -1,   123,    -1,   125,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123, 
         -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   126,    -1,   411, 
        412,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    40,    -1,    42,    -1,    44,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
         59,    60,    -1,    62,    -1,    33,    -1,    -1,    -1,    -1, 
         -1,    -1,    40,    -1,    -1,    43,    33,    45,   364,    -1, 
         -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    45,    -1, 
         -1,    -1,    91,   260,   261,   262,   263,   264,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   260,   261,   262,   263, 
        264,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    91,   123,   411,   412,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,   123,    -1,   125,   126,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,   126, 
         -1,    -1,    -1,   340,   341,   342,   343,    -1,   345,   346, 
         -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342,   343, 
         -1,    -1,   346,   360,   361,   362,   363,    -1,    33,    34, 
         35,    -1,    -1,   370,   371,    -1,   360,   361,   362,   363, 
         -1,    46,    47,    -1,    -1,    -1,   370,   371,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    33,    67,   411,   412,   402,   403,    -1,    40,    -1, 
         33,    43,    -1,    45,    79,    -1,    -1,    40,   402,   403, 
         43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   260,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1,    91, 
         -1,    -1,   260,   261,   262,   263,   264,    -1,    91,    -1, 
         -1,    -1,    -1,   260,   261,   262,   263,   264,    -1,    -1, 
         -1,   310,   311,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   123,    -1,    -1,   126,    -1,   161,    -1,    -1,    -1, 
        123,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   340,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,    -1,    -1, 
         -1,    -1,   340,   341,   342,   343,    -1,    -1,   346,    -1, 
         -1,    -1,    -1,   340,   341,   342,   343,    24,    -1,   346, 
         -1,    -1,   360,   361,   362,   363,    33,    34,    35,    -1, 
         -1,    -1,   370,   360,   361,   362,   363,    -1,    -1,    46, 
         47,   410,    49,   370,    -1,    -1,    -1,   252,    -1,    -1, 
         -1,    -1,    59,   258,    -1,    -1,    -1,    -1,    65,    -1, 
         67,    -1,    -1,    70,   402,   403,    -1,    -1,    -1,    -1, 
         -1,    -1,    79,    -1,    -1,   402,   403,    -1,    -1,    -1, 
         -1,    -1,    -1,   288,    -1,    -1,    -1,    -1,   260,   261, 
        262,   263,   264,    -1,    -1,    -1,    -1,   260,   261,   262, 
        263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   161,    -1,    -1,    -1,   363,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341, 
        342,   343,    -1,    -1,   346,    -1,    -1,   340,    -1,    -1, 
         -1,    -1,    -1,   346,    -1,    -1,    -1,   194,   360,   361, 
        362,   363,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98, 
         99,    -1,   101,   102,   103,   104,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        402,   403,   121,    -1,    -1,    -1,    -1,    -1,    -1,   402, 
        403,    -1,    -1,    -1,    -1,   252,    -1,    -1,    -1,    -1, 
         -1,   258,    -1,    -1,    -1,    -1,    -1,   146,    -1,    -1, 
         -1,    -1,   151,    -1,    -1,    -1,    -1,    -1,    -1,   158, 
         -1,   160,    -1,    -1,    -1,    -1,    -1,    -1,   167,    -1, 
         -1,   288,   171,   172,   173,   174,   175,   176,   177,   178, 
        179,   180,   181,   182,   183,    -1,    -1,   186,   187,   188, 
        189,   190,   191,    -1,    -1,    -1,    -1,    -1,   315,    -1, 
        199,    -1,    -1,    -1,    -1,    -1,    -1,   206,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   215,   216,    -1,    -1, 
         -1,   220,   221,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   363,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   263,    -1,    -1,   266,    -1,    -1, 
         -1,    -1,    -1,   272,    -1,    -1,    -1,    -1,    -1,    -1, 
        279,    -1,   281,    -1,    -1,   284,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   302,    -1,    -1,   305,    -1,    -1,    -1, 
         -1,    -1,   311,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   324,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   352, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 
      'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 
      'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 
      'T_FOREACH', 'T_AS', 'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 
      'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      'T_OBJECT_OPERATOR', 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
      'T_DOUBLE_ARROW', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 117 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 128 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 128 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 139 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 140 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 144 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 144 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 13:  #line 152 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 15:  #line 157 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 16:  #line 163 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 163 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 18:  #line 171 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 19:  #line 171 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 179 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 21:  #line 179 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 22:  #line 189 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 190 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 194 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 25:  #line 195 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 199 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 200 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 204 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 205 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 30:  #line 209 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 31:  #line 210 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 214 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 33:  #line 215 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 216 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 35:  #line 220 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 221 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 222 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 226 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 39:  #line 227 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 40:  #line 231 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 41:  #line 231 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 42:  #line 234 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 234 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 244 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 45:  #line 250 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 46:  #line 260 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 48:  #line 265 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 49:  #line 266 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 50:  #line 267 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 51:  #line 271 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 272 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 278 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 54:  #line 278 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 55:  #line 287 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 56:  #line 287 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 57:  #line 294 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 58:  #line 294 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 59:  #line 305 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 60:  #line 306 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 61:  #line 310 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 62:  #line 311 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 63:  #line 315 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 64:  #line 316 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 65:  #line 320 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 66:  #line 321 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 67:  #line 325 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 68:  #line 326 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 75:  #line 345 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 77:  #line 350 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 78:  #line 351 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 79:  #line 355 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 80:  #line 355 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 81:  #line 358 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 82:  #line 358 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 83:  #line 363 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 84:  #line 363 "grammar/xp.jay"
    {
      $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 85:  #line 369 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 86:  #line 369 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      /* $1->assignment= $6; XX FIXME XX*/
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 87:  #line 374 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 88:  #line 374 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 89:  #line 378 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 90:  #line 378 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 91:  #line 382 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 92:  #line 382 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 93:  #line 387 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 94:  #line 387 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
    } break;

    case 96:  #line 394 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 97:  #line 395 "grammar/xp.jay"
    { $yyVal= array(NULL, $yyVals[0+$yyTop]); } break;

    case 98:  #line 399 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 99:  #line 400 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 100:  #line 404 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 101:  #line 405 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 102:  #line 405 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 103:  #line 410 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 104:  #line 411 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 105:  #line 415 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 106:  #line 416 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 107:  #line 420 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 108:  #line 420 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
  } break;

    case 109:  #line 428 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 111:  #line 433 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 112:  #line 433 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
  } break;

    case 113:  #line 441 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 116:  #line 447 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 117:  #line 447 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 118:  #line 450 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InstanceCreationNode()); } break;

    case 119:  #line 450 "grammar/xp.jay"
    { 
      $yyVals[-7+$yyTop]->type= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-7+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 120:  #line 455 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 121:  #line 455 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 122:  #line 460 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 123:  #line 460 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 124:  #line 466 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 125:  #line 466 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 126:  #line 472 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 127:  #line 473 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); } break;

    case 128:  #line 474 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); } break;

    case 129:  #line 475 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); } break;

    case 130:  #line 476 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); } break;

    case 131:  #line 477 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); $yyVal->postfix= TRUE; } break;

    case 132:  #line 478 "grammar/xp.jay"
    { /* XXX Ternary */ } break;

    case 133:  #line 482 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 134:  #line 483 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 135:  #line 483 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 136:  #line 487 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MapNode()); } break;

    case 137:  #line 487 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->elements= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 138:  #line 491 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 139:  #line 492 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 140:  #line 493 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 141:  #line 494 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 142:  #line 498 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 144:  #line 503 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 145:  #line 504 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 146:  #line 508 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 147:  #line 512 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 148:  #line 513 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 149:  #line 514 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 150:  #line 515 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 151:  #line 516 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 152:  #line 517 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 153:  #line 521 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 154:  #line 522 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 155:  #line 523 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 156:  #line 524 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 157:  #line 525 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 158:  #line 526 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 159:  #line 530 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 160:  #line 531 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 161:  #line 532 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 162:  #line 533 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 163:  #line 534 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 164:  #line 535 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 165:  #line 539 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 166:  #line 540 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 167:  #line 541 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 168:  #line 542 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 169:  #line 543 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 170:  #line 544 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 171:  #line 548 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 172:  #line 549 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 173:  #line 554 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 175:  #line 559 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 176:  #line 559 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 177:  #line 562 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 178:  #line 566 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 179:  #line 566 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 180:  #line 570 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 181:  #line 574 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 183:  #line 579 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 184:  #line 580 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 185:  #line 586 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 186:  #line 587 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 187:  #line 588 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 188:  #line 592 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 189:  #line 593 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 191:  #line 598 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 192:  #line 602 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 193:  #line 603 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 194:  #line 609 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 195:  #line 610 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 196:  #line 614 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 197:  #line 615 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 198:  #line 619 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 199:  #line 620 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 200:  #line 621 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 201:  #line 622 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 202:  #line 623 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 203:  #line 624 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 204:  #line 625 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1687 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
