<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.SwitchNode',
    'xp.compiler.ast.CaseNode',
    'xp.compiler.ast.DefaultNode',
    'xp.compiler.ast.BreakNode',
    'xp.compiler.ast.ContinueNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 59 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_MOD_EQUAL= 408;
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_INC= 402;
    const T_DEC= 403;
    const T_SE= 401;
    const T_GE= 400;
    const T_OBJECT_OPERATOR= 409;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_PROPERTY= 330;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_NEW= 346;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          9,     9,     9,     4,     4,    12,     3,    16,     3,    18, 
          3,    13,    13,    14,    14,    19,    19,    21,    21,    15, 
         15,    22,    22,    22,    17,    17,    17,    26,    26,    28, 
         27,    29,    27,    23,    23,    34,    34,    33,    33,    33, 
         32,    32,    37,    24,    40,    24,    42,    24,    10,    10, 
         43,    43,    45,    45,    45,    39,    39,    36,    36,    48, 
         48,    49,    49,    38,    38,    41,    41,    41,    41,    41, 
         41,    41,    41,    25,    25,    35,    35,    51,    50,    52, 
         50,    55,    50,    57,    50,    58,    50,    59,    50,    60, 
         50,    62,    50,    64,    50,    65,    50,    66,    50,    50, 
         50,    61,    61,    67,    67,    69,    68,    70,    68,    53, 
         53,    54,    71,    54,    63,    63,    72,    72,    76,    75, 
         73,    73,    77,    74,    56,    56,    78,    78,    46,    46, 
         79,    79,    80,    80,    80,    30,    83,    30,    84,    30, 
         85,    30,    86,    30,    30,    30,    30,    30,    30,    30, 
         30,    30,    30,    81,    81,    92,    81,    81,    81,    81, 
         81,    81,    93,    93,    47,    47,    94,    87,    87,    87, 
         87,    87,    87,    88,    88,    88,    88,    88,    88,    89, 
         89,    89,    89,    89,    89,    90,    90,    90,    90,    90, 
         90,    91,    91,    82,    82,    95,    95,    97,    96,    96, 
         98,    96,    31,    31,    11,    11,    99,   100,   100,   101, 
        101,    20,    20,    44,    44,   102,   102,   103,   103,   103, 
        103,   103,   103,   103,   103, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     6, 
          1,     1,     3,     1,     3,     0,     9,     0,     9,     0, 
          8,     0,     2,     0,     2,     0,     2,     0,     3,     2, 
          0,     1,     1,     4,     3,     1,     0,     1,     3,     0, 
          3,     0,     6,     5,     6,     0,     1,     2,     4,     4, 
          0,     2,     0,     9,     0,     8,     0,    10,     4,     1, 
          1,     3,     2,     5,     5,     1,     3,     0,     1,     1, 
          3,     3,     3,     0,     2,     1,     1,     1,     1,     1, 
          1,     2,     3,     0,     1,     1,     2,     0,     4,     0, 
          7,     0,    10,     0,     8,     0,     6,     0,     7,     0, 
          8,     0,     6,     0,     3,     0,     3,     0,     4,     2, 
          1,     0,     1,     1,     2,     0,     5,     0,     4,     1, 
          3,     0,     0,     3,     2,     1,     1,     2,     0,     9, 
          0,     1,     0,     5,     0,     1,     1,     3,     0,     1, 
          5,     6,     1,     1,     4,     1,     0,     3,     0,     4, 
          0,     5,     0,     6,     3,     1,     1,     1,     1,     1, 
          5,     3,     3,     1,     3,     0,     4,     3,     1,     1, 
          1,     1,     0,     1,     1,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     2,     2,     2,     2,     2, 
          2,     2,     2,     0,     1,     1,     2,     0,     4,     2, 
          0,     6,     1,     1,     1,     4,     3,     1,     3,     1, 
          3,     1,     3,     0,     1,     1,     2,     1,     1,     1, 
          1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   228,   230,   229,   231,   233,   232,   234,   235, 
          1,     0,    60,   225,     0,     8,     0,     4,     0,     0, 
          0,     0,    16,    20,    18,   227,    15,     0,     0,     0, 
          0,     0,     0,     0,    12,     0,     0,     0,    59,    62, 
          0,     0,     0,     0,     0,    10,     0,     0,   166,     0, 
          0,     0,     0,     0,   172,   169,   171,   170,   147,   149, 
          0,     0,     0,     0,     0,     0,   146,   156,   157,   158, 
        159,   160,     0,     0,     0,     0,     0,     0,     0,    13, 
          0,     0,     0,     0,     0,     0,     0,   153,     0,     0, 
          0,   174,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        202,   203,     0,     0,     0,     0,     0,     0,     0,    64, 
         65,     0,     0,     0,   213,   220,   214,     0,     0,    23, 
          0,     0,     0,    27,    31,     0,     0,     0,   136,     0, 
        208,     0,   148,   205,     0,     0,     0,     0,   168,   155, 
        165,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   184,   185, 
        186,   187,   188,   189,     0,   176,     0,     0,   216,     0, 
         25,    31,     0,     0,     0,     0,   167,     0,     0,     0, 
        207,     0,     0,   150,     0,   144,     0,     0,   221,   217, 
        219,     0,   223,     0,    21,     0,    30,    32,    33,     0, 
          0,     0,     0,   138,     0,     0,   211,     0,     0,     0, 
        152,     0,    17,     0,     0,     0,     0,     0,     0,    19, 
         31,     0,   154,   209,     0,     0,     0,     0,    88,     0, 
        108,    92,    96,    98,    94,   104,   106,    90,   100,   111, 
          0,     0,    85,     0,    55,     0,     0,     0,     0,    31, 
         41,     0,     0,    39,     0,     0,   141,   145,     0,   102, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    34, 
        110,    87,     0,     0,     0,    53,    80,    76,    77,    78, 
         79,     0,    81,     0,     0,     0,     0,     0,   212,   142, 
          0,     0,     0,     0,     0,     0,   120,     0,     0,   105, 
        107,     0,     0,     0,     0,    69,     0,     0,    48,     0, 
         47,     0,     0,    82,     0,    57,     0,    44,    29,     0, 
         89,     0,   109,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    45,     0,    83, 
          0,    43,     0,     0,     0,   121,     0,     0,     0,     0, 
         73,    72,     0,     0,    71,    49,    50,     0,     0,   129, 
        133,   103,     0,   126,     0,     0,    97,     0,     0,     0, 
          0,    75,    66,     0,    56,     0,     0,     0,     0,   125, 
        132,   128,     0,    99,     0,   123,    91,   116,   118,     0, 
        113,     0,     0,    54,     0,     0,     0,     0,    95,     0, 
          0,     0,   101,   115,    67,    58,     0,     0,     0,   124, 
          0,     0,     0,   134,    93,     0,   119,     0,   117,     0, 
          0,   130, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    21,    73,     4,     7,     8,    11,    47,   216, 
        135,    42,    86,   142,   194,    44,   221,    43,    88,   144, 
        271,   217,   218,   219,   261,   222,   223,   238,   239,   262, 
        324,   306,   295,   332,   263,   325,   333,   374,   395,   293, 
        304,   361,    31,    23,    32,    75,   102,   326,   327,   264, 
        279,   288,   318,   407,   282,   148,   285,   283,   284,   289, 
        410,   312,   382,   286,   287,   281,   411,   412,   421,   422, 
        420,   383,   400,   384,   385,   398,   399,   149,   158,   207, 
         77,   153,    99,   100,   162,   150,    78,    79,    80,    81, 
         82,    93,   103,    83,   154,   155,   199,   245,   137,   138, 
        139,    24,    25, 
    );
    protected static $yySindex = array(         -242,
          0,     0,  -227,  -176,     0,   268,     0,  -227,    40,    58, 
       -109,    90,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    12,     0,     0,   338,     0,  -176,     0,   121,  -176, 
         79,   130,     0,     0,     0,     0,     0,   -34,   144,   338, 
         90,  -176,  -176,  -176,     0,   142,   148,   136,     0,     0, 
        151,   -78,   -64,   -78,   -34,     0,   136,   136,     0,   136, 
        136,   136,   136,    49,     0,     0,     0,     0,     0,     0, 
        136,   136,  -160,   262,   223,   227,     0,     0,     0,     0, 
          0,     0,   234,   -52,  -176,   -35,  -176,   157,   -35,     0, 
       1700,  1700,   136,   371,   371,   371,   371,     0,   -89,  -176, 
        262,     0,   163,   303,     6,   136,   136,   136,   136,   136, 
        136,   136,   136,   136,   136,   136,   136,   136,   136,   136, 
          0,     0,   136,   136,   136,   136,   136,   136,   136,     0, 
          0,   136,   -10,   -12,     0,     0,     0,   246,   252,     0, 
       -176,   187,   277,     0,     0,   205,   393,   249,     0,   136, 
          0,    83,     0,     0,   -89,     2,   307,   -89,     0,     0, 
          0,  -217,   568,   568,   995,   291,   568,   568,   568,   568, 
        568,   568,   568,  1700,  1700,   371,   371,   371,     0,     0, 
          0,     0,     0,     0,   995,     0,  -176,   267,     0,   -52, 
          0,     0,  -176,   122,    95,   136,     0,   320,   136,   322, 
          0,   274,   136,     0,   328,     0,   -89,   136,     0,     0, 
          0,   298,     0,   247,     0,  -218,     0,     0,     0,     0, 
        257,   312,   346,     0,   -89,   299,     0,   271,   350,   136, 
          0,   568,     0,  2323,   225,    61,  -118,   288,   370,     0, 
          0,    95,     0,     0,   136,   136,   288,   391,     0,   311, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        314,   483,     0,  2323,     0,   181,   402,    45,   382,     0, 
          0,   136,   628,     0,   403,   321,     0,     0,   136,     0, 
        136,   407,   408,  2389,   409,   392,   399,   410,   412,     0, 
          0,     0,  -176,  -119,   181,     0,     0,     0,     0,     0, 
          0,   -66,     0,   417,   136,   401,   368,   683,     0,     0, 
        705,  2323,   773,   136,   136,  2323,     0,   100,   123,     0, 
          0,   136,   136,   -39,   421,     0,   420,   425,     0,  2323, 
          0,   424,  -176,     0,   394,     0,   995,     0,     0,   288, 
          0,   360,     0,   427,   800,   363,   232,   450,   127,   859, 
        886,   152,   382,   173,  -176,   455,   373,     0,   458,     0, 
       -176,     0,   -14,   136,  2389,     0,   136,   136,  2389,   377, 
          0,     0,  -176,    72,     0,     0,     0,   173,   460,     0, 
          0,     0,   167,     0,   158,   462,     0,   913,   941,   153, 
       -169,     0,     0,  2323,     0,    72,   173,   482,   400,     0, 
          0,     0,   136,     0,  2389,     0,     0,     0,     0,   404, 
          0,  -169,   406,     0,    72,  -176,  2323,   486,     0,  2389, 
        136,   474,     0,     0,     0,     0,   194,   415,  2389,     0, 
        973,  2323,   492,     0,     0,  2323,     0,   418,     0,  2323, 
        447,     0, 
    );
    protected static $yyRindex= array(           52,
          0,     0,   398,     0,     0,    15,     0,   475,  1630,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   235,     0,     0,     0,     0,     0, 
          0,   481,     0,     0,     0,     0,     0,     0,    26,   287, 
          0,     0,     0,     0,     0,   516,     0,   535,     0,     0, 
        -38,   -87,   454,   -87,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   103,     0,     0,     0,     0,     0,     0, 
        461,     0,     0,   549,     0,     0,     0,     0,     0,     0, 
          0,     0,    27,     0,     0,   468,     0,     0,   468,     0, 
       1478,  1490,   499,   812,  1007,  1096,  1187,     0,   156,     0, 
          0,     0,     0,     0,  -155,     0,     0,   544,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   -37,     0,     0,     0,     0,   541,     0, 
          0,     0,    97,     0,     0,     0,     8,     0,     0,   571, 
          0,     0,     0,     0,   193,   574,     0,   156,     0,     0, 
          0,     0,  1580,  1593,    77,     0,  1605,  1618,  1641,  1666, 
       1678,  1691,  1714,  1515,  1568,  1382,  1405,  1436,     0,     0, 
          0,     0,     0,     0,    50,     0,     0,     0,     0,     0, 
          0,     0,     0,  -214,   501,     0,     0,     0,   534,   -28, 
          0,     0,   571,     0,    13,     0,   156,     0,     0,     0, 
          0,  -214,     0,   793,     0,     0,     0,     0,     0,     7, 
          0,   504,    43,     0,   156,     0,     0,   591,     0,   571, 
          0,  1741,     0,   517,   -50,     0,     0,    55,     0,     0, 
          0,     0,     0,     0,   571,   531,    66,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,  -113,     0,     0,     0,     0,   582,     0, 
          0,     0,  -105,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   616,     0,   599,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,  -214,     0,     0,     0, 
          0,   517,     0,   600,     0,   517,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   619,     0,     0,     0, 
          0,     0,   616,     0,     0,     0,   204,     0,     0,    55, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   165,   118,     0,     0,     0,     0,     0,     0, 
        616,     0,     0,   600,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   118,     0,     0, 
          0,     0,  2200,     0,  2148,     0,     0,     0,     0,  2269, 
        536,     0,     0,   517,     0,     0,   118,     0,     0,     0, 
          0,     0,   571,     0,     0,     0,     0,     0,     0,     0, 
          0,   546,     0,     0,     0,     0,   517,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,  -107,     0,     0,     0,  -107,     0,     0,     0,   517, 
          0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   664,     0,     0,   631,   681, 
        200,     0,   634,   601,   -92,     0,     0,     0,     0,  -140, 
       -225,     0,     0,     0,   385,   449,     0,     0,     0,  2102, 
        -56,   336,   397,     0,  -143,  -309,     0,  -333,  -337,     0, 
          0,     0,   652,   655,     0,   -79,    21,   341,   411,  -247, 
          0,     0,   358,     0,     0,    81,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   290,     0,     0,     0, 
          0,   327,     0,   333,     0,     0,     0,   525,     0,     0, 
          0,    32,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   567,     0,     0,     0,     0,   539, 
          0,   706,     0, 
    );
    protected static $yyTable = array(10,
        191,   151,   352,   330,   215,   215,   215,    45,   210,    14, 
        133,    86,   210,   210,   210,   210,   210,    84,   210,    35, 
        215,   277,    37,   359,   215,    39,   334,   136,   166,   210, 
        210,   210,   210,   210,   210,    22,   317,    51,    51,    51, 
         14,   235,   205,   157,   396,   224,    42,    84,   137,   143, 
         40,   379,   213,   143,   143,   143,   143,   143,   414,   143, 
          1,    84,   210,   415,   210,    40,   137,   175,    76,    63, 
        143,   143,   143,   143,   143,   143,     5,   426,   188,   134, 
         51,   297,    51,     9,   215,    27,   300,   298,    98,   299, 
        177,   301,   202,   177,    27,   156,   210,   210,    28,   212, 
        137,    38,    28,   143,   151,   143,    28,    28,    28,    28, 
         28,   236,    28,    28,   362,   224,    28,   317,    63,   226, 
        292,   317,   206,    28,    28,    28,    28,    28,    28,    40, 
        393,    40,   137,   136,   140,   302,    51,   143,   143,   164, 
        328,   267,     2,   164,   164,   164,   164,   164,   273,   164, 
         29,   175,   186,    30,   224,   222,    28,   317,    28,   237, 
        164,   164,   164,   164,   164,   164,    38,    38,    60,   140, 
        303,    40,   317,    41,   177,    72,    74,   307,    57,    28, 
         58,   317,   209,    48,   151,   134,   357,    55,    51,   204, 
         28,    28,   204,     9,   394,   164,   204,   204,   204,   204, 
        204,   268,   204,   408,   409,    51,    56,     9,    51,    14, 
         84,   134,    12,   204,   204,   204,   204,   204,   204,   222, 
        329,   269,   215,    22,   224,    46,    59,   164,   164,   206, 
        198,    85,   392,   206,   206,   206,   206,   206,   231,   206, 
         74,    52,    53,    54,    52,    87,   215,    52,   204,   105, 
        206,   206,   206,   206,   206,   206,   243,    51,    71,    86, 
         86,    61,    52,   130,   265,    84,    84,   131,   107,    14, 
         27,   215,   215,   118,   116,   141,   117,   132,   119,   145, 
        204,   204,   215,   229,   140,   206,   143,   159,   134,    14, 
        291,   123,   106,   124,   108,   190,    52,   134,   107,   187, 
        353,   215,   215,   118,   116,   161,   117,   189,   119,   192, 
        248,    33,    34,    35,   224,   224,   224,   206,   206,   152, 
        193,   123,   106,   124,   108,   275,   276,   195,   134,   380, 
        381,     2,     2,     2,     2,     2,     2,     2,     2,   107, 
        143,   197,   200,   160,   118,   116,   203,   117,   208,   119, 
        134,     2,     2,     2,   220,     2,   134,   120,    12,   210, 
        225,   227,   123,   106,   124,   108,   228,   230,    51,   234, 
        241,   210,   210,   210,   210,   210,   210,   210,   210,   210, 
        210,   240,   210,   210,   210,   210,   210,   120,    12,   242, 
        247,   244,   143,   246,   344,    64,    65,    66,    67,    68, 
        266,    13,    14,    15,   214,    17,    18,    19,    20,   272, 
        270,    51,   143,   143,   143,   143,   143,   143,   143,   143, 
        143,   143,   233,   143,   143,   143,   143,   143,   120,   107, 
        123,   278,   124,   280,   118,   116,   196,   117,   290,   119, 
        294,   296,   305,   309,   386,   310,   314,   315,   319,   322, 
        320,   323,   123,   106,   124,   108,   336,   321,    12,   338, 
        348,   354,   349,   355,   356,    28,    28,    28,    28,    28, 
         28,    28,    28,    28,    28,    69,    28,    28,    28,    28, 
         28,    70,   358,   418,   363,   364,   360,   366,     5,   367, 
        368,   371,   339,   373,   226,   376,   120,   377,   378,   391, 
        397,   380,   164,   164,   164,   164,   164,   164,   164,   164, 
        164,   381,    14,   164,   164,   164,   164,   164,   120,   107, 
        403,   416,   417,   406,   118,   116,   429,   117,   423,   119, 
        425,   432,   438,   433,   226,   226,   226,    62,    63,   434, 
        440,   291,   123,   106,   124,   108,   224,    13,    14,    15, 
         16,    17,    18,    19,    20,   204,   204,   204,   204,   204, 
        204,   204,   204,   204,   226,     7,   204,   204,   204,   204, 
        204,   442,   143,    61,    11,   139,    26,    13,    14,    15, 
        214,    17,    18,    19,    20,   173,   224,   224,   224,   140, 
         24,   135,   206,   206,   206,   206,   206,   206,   206,   206, 
        206,   139,   218,   206,   206,   206,   206,   206,   120,   118, 
        116,   135,   117,   215,   119,   427,   224,    13,    14,    15, 
         16,    17,    18,    19,    20,    37,   139,   123,    36,   124, 
        217,   126,   125,   121,   122,   109,   110,   111,   112,   113, 
         51,    84,   127,   128,   129,   114,   115,    13,    14,    15, 
        214,    17,    18,    19,    20,   135,    68,    46,   135,    70, 
        112,   126,   125,   121,   122,   109,   110,   111,   112,   113, 
        114,    26,   127,   128,   129,   114,   115,     5,     5,     5, 
          5,     5,     5,     5,     5,    90,    22,    89,   372,   146, 
        274,   331,    50,   120,    49,   375,   342,     5,     5,     5, 
        346,   424,   126,   125,   121,   122,   109,   110,   111,   112, 
        113,   402,   335,   127,   128,   401,   114,   115,    12,   107, 
        224,   201,   387,   340,   118,   116,   390,   117,   211,   119, 
         36,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   107,   123,   106,   124,   108,   118,   116,     0,   117, 
          0,   119,     0,     0,     7,     7,     7,     7,     7,     7, 
          7,     7,   419,   341,   123,   106,   124,   108,     0,     0, 
        126,   125,   121,   122,     7,     7,     7,   430,   413,     0, 
          0,   127,   128,     0,     0,     0,   435,     0,     0,     0, 
          0,     0,   126,   125,   121,   122,   109,   110,   111,   112, 
        113,   428,     0,   127,   128,     0,   114,   115,   120,   107, 
          0,     0,     0,     0,   118,   116,   437,   117,     0,   119, 
        439,     0,     0,     0,   441,     0,     0,     0,     0,     0, 
        120,   343,   123,   106,   124,   108,   107,     0,     0,     0, 
        365,   118,   116,     0,   117,     0,   119,     0,   196,     0, 
          0,     0,   196,   196,   196,   196,   196,     0,   196,   123, 
        106,   124,   108,     0,     0,     0,     0,     0,     0,   196, 
        196,     0,   196,     0,   196,     0,     0,     0,     0,     0, 
          0,     0,   126,   125,   121,   122,   109,   110,   111,   112, 
        113,     0,     0,   127,   128,   107,   114,   115,   120,   369, 
        118,   116,     0,   117,   196,   119,     0,    13,    14,    15, 
        214,    17,    18,    19,    20,     0,     0,     0,   123,   106, 
        124,   108,   107,     0,     0,   120,   370,   118,   116,     0, 
        117,     0,   119,     0,     0,     0,   196,     0,     0,     0, 
          0,     0,     0,     0,     0,   123,   106,   124,   108,   107, 
          0,     0,     0,   404,   118,   116,     0,   117,     0,   119, 
          0,     0,     0,     0,     0,     0,     0,   126,   125,   121, 
        122,     0,   123,   106,   124,   108,     0,   107,   127,   128, 
          0,   405,   118,   116,   120,   117,     0,   119,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        123,   106,   124,   108,     0,     0,     0,     0,     0,   107, 
          0,   120,     0,     0,   118,   116,     0,   117,     0,   119, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        436,   107,   123,   106,   124,   108,   118,   116,   120,   117, 
          0,   119,     0,   197,     0,     0,     0,   197,   197,   197, 
        197,   197,   231,   197,   123,   106,   124,   108,     0,     0, 
          0,     0,     0,     0,   197,   197,   120,   197,     0,   197, 
          0,     0,   231,   231,   231,   231,   231,   231,   231,   231, 
          0,     0,   126,   125,   121,   122,   109,   110,   111,   112, 
        113,     0,     0,   127,   128,     0,   114,   115,   120,   197, 
          0,     0,     0,     0,   126,   125,   121,   122,   109,   110, 
        111,   112,   113,     0,     0,   127,   128,     0,   114,   115, 
        120,     0,   231,     0,     0,     0,     0,     0,     0,     0, 
          0,   197,   200,     0,     0,     0,   200,   200,   200,   200, 
        200,     0,   200,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   200,   200,     0,   200,     0,   200,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   126,   125,   121,   122,   109,   110,   111,   112, 
        113,     0,     0,   127,   128,     0,   114,   115,   200,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   126, 
        125,   121,   122,   109,   110,   111,   112,   113,     0,     0, 
        127,   128,     0,   114,   115,   196,   196,   196,   196,   196, 
        200,     0,     0,   201,   196,   196,   196,   201,   201,   201, 
        201,   201,     0,   201,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   201,   201,     0,   201,     0,   201, 
          0,     0,     0,     0,     0,     0,     0,     0,   126,   125, 
        121,   122,   109,   110,   111,   112,   113,     0,     0,   127, 
        128,     0,   114,   115,     0,     0,     0,     0,     0,   201, 
          0,     0,     0,     0,     0,   126,   125,   121,   122,   109, 
        110,   111,   112,   113,     0,     0,   127,   128,     0,   114, 
        115,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   201,   126,   125,   121,   122,   109,   110,   111,   112, 
        113,     0,     0,   127,   128,     0,   114,   115,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        126,   125,   121,   122,   109,   110,   111,   112,   113,     0, 
          0,   127,   128,     0,   114,   115,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   126,   125,   121,   122,   109,   110,   111,   112, 
        113,     0,     0,   127,   128,     0,   114,   115,     0,     0, 
          0,     0,     0,     0,   126,   125,   121,   122,   109,   110, 
        111,   112,   113,     0,     0,   127,   128,     0,   114,   115, 
        197,   197,   197,   197,   197,     0,     0,     0,   192,   197, 
        197,   197,   192,   192,   192,   192,   192,     0,   192,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   192, 
        192,   193,   192,     0,   192,   193,   193,   193,   193,   193, 
          0,   193,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   193,   193,     0,   193,     0,   193,     0,     0, 
          0,     0,   195,     0,   192,     0,   195,   195,   195,   195, 
        195,     0,   195,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   195,   195,     0,   195,   193,   195,   200, 
        200,   200,   200,   200,     0,     0,   192,     0,   200,   200, 
        200,     0,     0,     0,   198,     0,     0,     0,   198,     0, 
        198,   198,   198,     0,     0,     0,   199,     0,   195,   193, 
        199,     0,   199,   199,   199,   198,   198,     0,   198,     0, 
        198,     0,     0,     0,     0,     0,     0,   199,   199,     0, 
        199,   190,   199,     0,     0,   190,     0,   190,   190,   190, 
        195,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        198,     0,   190,   190,     0,   190,     0,   190,     0,     0, 
          0,     0,   199,     0,     0,     0,     0,     0,     0,     0, 
        201,   201,   201,   201,   201,     0,     0,     0,     0,   201, 
        201,   201,   198,     0,   191,     0,     0,   190,   191,     0, 
        191,   191,   191,     0,   199,     0,   178,     0,     0,     0, 
        178,     0,     0,   178,     0,   191,   191,     0,   191,   194, 
        191,     0,     0,   194,     0,     0,   194,   178,   178,   190, 
        178,   179,   178,     0,     0,   179,     0,     0,   179,     0, 
        194,   194,     0,   194,   180,   194,     0,     0,   180,     0, 
        191,   180,   179,   179,     0,   179,     0,   179,     0,    14, 
          0,    14,   178,    14,     0,   180,   180,   181,   180,     0, 
        180,   181,     0,     0,   181,   194,     0,     0,    14,    14, 
          0,    14,   191,     0,     0,     0,     0,   179,   181,   181, 
          0,   181,   182,   181,   178,     0,   182,     0,     0,   182, 
        180,     0,     0,     0,   183,     0,     0,   194,   183,     0, 
         14,   183,    14,   182,   182,     0,   182,   162,   182,   179, 
          0,   162,     0,   181,   162,   183,   183,     0,   183,     0, 
        183,   118,   180,     0,     0,     0,   119,     0,   162,   162, 
        163,   162,    14,   162,   163,     0,     0,   163,   182,   123, 
          0,   124,     0,     0,     0,   181,     0,     0,     0,     0, 
        183,   163,   163,     0,   163,     0,   163,   161,     0,     0, 
          0,   161,     0,   162,   161,   192,   192,   192,   192,   192, 
        182,     0,     0,     0,   192,   192,   192,     0,   161,   161, 
          0,   161,   183,   161,     0,     0,   163,     0,   193,   193, 
        193,   193,   193,     0,     0,   162,     0,   193,   193,   193, 
          0,     0,     0,     0,     0,   120,     0,     0,     0,     0, 
          0,     0,     0,   161,     0,     0,     0,     0,   163,   195, 
        195,   195,   195,   195,     0,     0,     0,     0,   195,   195, 
        195,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   161,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   198,   198,   198,   198,   198,     0,     0,     0,    14, 
        198,   198,   198,   199,   199,   199,   199,   199,     0,     0, 
          0,     0,   199,   199,   199,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   190,   190, 
        190,   190,   190,     0,     0,     0,     0,   190,   190,   190, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    14, 
         14,     0,     0,     0,     0,     0,     0,     0,     0,    14, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    14, 
          0,   191,   191,   191,   191,   191,     0,     0,     0,     0, 
        191,   191,   191,   178,   178,   178,   178,   178,     0,     0, 
          0,     0,   178,   178,   178,     0,   194,   194,   194,   194, 
        194,     0,     0,     0,     0,   194,   194,   194,   179,   179, 
        179,   179,   179,     0,     0,     0,     0,   179,   179,   179, 
          0,   180,   180,   180,   180,   180,     0,     0,     0,     0, 
        180,   180,   180,     0,     0,     0,     0,     0,     0,    14, 
          0,     0,     0,     0,   181,   181,   181,   181,   181,     0, 
          0,     0,     0,   181,   181,   181,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   182, 
        182,   182,   182,   182,     0,     0,     0,     0,   182,   182, 
        182,   183,   183,   183,   183,   183,     0,     0,     0,     0, 
        183,   183,   183,     0,   162,   162,   162,   162,   162,   126, 
        125,   121,   122,   162,   162,   162,     0,     0,     0,     0, 
        127,   128,     0,     0,     0,     0,     0,   163,   163,   163, 
        163,   163,     0,     0,     0,     0,   163,   163,   163,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   161,   161,   161,   161,   161,    74, 
          0,     0,     0,   161,   161,   161,     0,     0,    91,    92, 
          0,    94,    95,    96,    97,     0,     0,     0,     0,     0, 
          0,     0,   101,   104,     0,     0,     0,     0,     0,     0, 
        127,     0,     0,     0,     0,     0,     0,   127,     0,     0, 
        127,     0,   127,     0,   147,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   127,   163,   164,   165, 
        167,   168,   169,   170,   171,   172,   173,   174,   175,   176, 
        177,   178,     0,     0,   179,   180,   181,   182,   183,   184, 
        185,     0,   131,   101,     0,     0,     0,     0,   127,   131, 
          0,     0,   131,     0,   131,     0,     0,     0,     0,     0, 
          0,   147,     0,     0,     0,     0,     0,     0,   131,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        127,     0,   127,   127,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        131,     0,     0,     0,     0,     0,     0,   147,     0,     0, 
        165,   122,     0,     0,   147,     0,     0,     0,   122,   232, 
          0,   122,     0,   122,     0,     0,     0,     0,     0,     0, 
          0,     0,   131,     0,   131,   131,     0,   122,     0,     0, 
          0,   147,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   147,   147,     0,     0, 
          0,     0,     0,     0,     0,    60,     0,     0,     0,   122, 
          0,     0,    72,     0,     0,    57,     0,    58,     0,     0, 
          0,     0,     0,   308,     0,     0,     0,     0,     0,     0, 
        311,   260,   313,     0,     0,     0,     0,     0,     0,     0, 
          0,   122,     0,   122,   122,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   337,   127,   127,   127, 
        127,   127,     0,    59,     0,   147,   345,   347,     0,     0, 
          0,    60,     0,   350,   351,     0,     0,     0,    72,     0, 
          0,    57,     0,    58,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    71,     0,   260,    61,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   131, 
        131,   131,   131,   131,     0,   147,     0,     0,   388,   389, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    59, 
          0,     0,     0,     0,     0,     0,     0,   127,   127,   127, 
        127,     0,   127,   127,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   147,     0,     0,   127,   127,   127, 
        127,   316,   127,   127,    61,     0,     0,   127,   127,   127, 
        127,   127,   431,     0,     0,     0,     0,     0,   122,   122, 
        122,   122,   122,     0,     0,     0,     0,     0,     0,   131, 
        131,   131,   131,     0,     0,   131,     0,     0,     0,   127, 
        127,     0,     0,     0,     0,     0,     0,     0,     0,   131, 
        131,   131,   131,     0,   131,   131,     0,     0,     0,   131, 
        131,   131,   131,   131,     0,     0,     0,     0,     0,     0, 
          0,     0,    64,    65,    66,    67,    68,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   131,   131,     0,     0,     0,     0,     0,   122,   122, 
        122,   122,     0,     0,   122,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   122,   122, 
        122,   122,     0,   122,   122,     0,     0,     0,   122,     0, 
        122,   122,   122,     0,     0,     0,     0,     0,    64,    65, 
         66,    67,    68,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    69,   249,   250,   251,     0,     0,    70,     0, 
        122,   122,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   252,   253,   254,   255,     0,   256,   257,     0, 
          0,     0,   258,     0,   259,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    62,    63,     0,     0,    69,   249, 
        250,   251,     0,     0,    70,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   252,   253, 
        254,   255,     0,   256,   257,     0,     0,     0,   258,     0, 
        259,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         62,    63, 
    );
    protected static $yyCheck = array(4,
        141,    91,    42,   123,    42,    44,    44,    42,    37,    60, 
         63,   125,    41,    42,    43,    44,    45,   125,    47,   125, 
         59,   247,    27,   333,    62,    30,    93,    84,   108,    58, 
         59,    60,    61,    62,    63,   123,   284,    42,    43,    44, 
         91,   260,   260,   100,   378,   260,    40,    60,    41,    37, 
         44,   361,   193,    41,    42,    43,    44,    45,   396,    47, 
        303,    60,    91,   397,    93,    59,    59,    41,    48,    44, 
         58,    59,    60,    61,    62,    63,   304,   415,    91,    84, 
         85,    37,    87,   260,   123,    46,    42,    43,    40,    45, 
         41,    47,    91,    44,    46,   100,   125,   126,    44,   192, 
         93,    59,    37,    91,   260,    93,    41,    42,    43,    44, 
         45,   330,    47,    59,   340,   330,    59,   365,    93,   199, 
        264,   369,   340,    58,    59,    60,    61,    62,    63,   123, 
         59,   125,   125,   190,    58,    91,   141,   125,   126,    37, 
        260,   260,    91,    41,    42,    43,    44,    45,   241,    47, 
        260,   125,   132,    64,   260,    59,    91,   405,    93,   216, 
         58,    59,    60,    61,    62,    63,    46,   125,    33,    93, 
        126,    93,   420,    44,   125,    40,    59,   270,    43,   125, 
         45,   429,   187,    40,   340,   190,   330,    46,   193,   158, 
        125,   126,    37,   260,   123,    93,    41,    42,    43,    44, 
         45,   320,    47,   373,   374,    41,    59,   260,    44,   260, 
         60,   216,    91,    58,    59,    60,    61,    62,    63,   123, 
        340,   340,   260,   311,   330,   260,    91,   125,   126,    37, 
        150,   310,   373,    41,    42,    43,    44,    45,   207,    47, 
        123,    42,    43,    44,    41,   310,   125,    44,    93,   410, 
         58,    59,    60,    61,    62,    63,   225,    93,   123,   373, 
        374,   126,    59,    41,    40,   373,   374,    41,    37,   320, 
         46,   310,   311,    42,    43,   311,    45,    44,    47,   123, 
        125,   126,   320,   203,    85,    93,    87,   125,   293,   340, 
         59,    60,    61,    62,    63,    44,    93,   302,    37,   310, 
        340,   340,   340,    42,    43,   300,    45,    62,    47,   123, 
        230,   300,   301,   302,   300,   301,   302,   125,   126,   409, 
         44,    60,    61,    62,    63,   245,   246,   123,   333,   344, 
        345,   280,   281,   282,   283,   284,   285,   286,   287,    37, 
        141,    93,   260,    41,    42,    43,    40,    45,    58,    47, 
        355,   300,   301,   302,   260,   304,   361,   126,    91,    93, 
         41,    40,    60,    61,    62,    63,    93,    40,   373,   123, 
         59,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
        409,   125,   411,   412,   413,   414,   415,   126,    91,    44, 
         41,    93,   193,   123,   314,   260,   261,   262,   263,   264, 
        340,   280,   281,   282,   283,   284,   285,   286,   287,    40, 
        123,   416,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   409,   125,   411,   412,   413,   414,   415,   126,    37, 
         60,    41,    62,   123,    42,    43,    44,    45,   125,    47, 
        260,    40,    61,    41,   364,   125,    40,    40,    40,    40, 
         59,    40,    60,    61,    62,    63,    40,    59,    91,    59, 
        361,    41,   340,    44,    40,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   409,   340,   411,   412,   413,   414, 
        415,   346,    59,   403,   125,    59,    93,   125,    91,    40, 
        364,   340,   125,   321,   260,    41,   126,   125,    41,   123, 
         41,   344,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   345,   410,   411,   412,   413,   414,   415,   126,    37, 
         59,    40,   123,   371,    42,    43,    41,    45,   125,    47, 
        125,    58,    41,   340,   300,   301,   302,   402,   403,   125, 
        123,    59,    60,    61,    62,    63,   260,   280,   281,   282, 
        283,   284,   285,   286,   287,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   330,    91,   411,   412,   413,   414, 
        415,   125,   373,    93,    59,    41,   123,   280,   281,   282, 
        283,   284,   285,   286,   287,   125,   300,   301,   302,    41, 
        123,    93,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    58,    62,   411,   412,   413,   414,   415,   126,    42, 
         43,    41,    45,    40,    47,   416,   330,   280,   281,   282, 
        283,   284,   285,   286,   287,   125,    93,    60,   125,    62, 
         40,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         59,   125,   411,   412,   413,   414,   415,   280,   281,   282, 
        283,   284,   285,   286,   287,   125,    41,    59,    59,    41, 
        125,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
        125,     8,   411,   412,   413,   414,   415,   280,   281,   282, 
        283,   284,   285,   286,   287,    55,     6,    54,   353,    89, 
        242,   295,    41,   126,    40,   355,   312,   300,   301,   302, 
        316,   412,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   385,   302,   411,   412,   383,   414,   415,    91,    37, 
        196,   155,   365,    41,    42,    43,   369,    45,   190,    47, 
         25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    37,    60,    61,    62,    63,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,   280,   281,   282,   283,   284,   285, 
        286,   287,   405,    59,    60,    61,    62,    63,    -1,    -1, 
        400,   401,   402,   403,   300,   301,   302,   420,   394,    -1, 
         -1,   411,   412,    -1,    -1,    -1,   429,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   417,    -1,   411,   412,    -1,   414,   415,   126,    37, 
         -1,    -1,    -1,    -1,    42,    43,   432,    45,    -1,    47, 
        436,    -1,    -1,    -1,   440,    -1,    -1,    -1,    -1,    -1, 
        126,    59,    60,    61,    62,    63,    37,    -1,    -1,    -1, 
         41,    42,    43,    -1,    45,    -1,    47,    -1,    37,    -1, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    37,   414,   415,   126,    41, 
         42,    43,    -1,    45,    93,    47,    -1,   280,   281,   282, 
        283,   284,   285,   286,   287,    -1,    -1,    -1,    60,    61, 
         62,    63,    37,    -1,    -1,   126,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,    -1,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,    37, 
         -1,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,    -1,    60,    61,    62,    63,    -1,    37,   411,   412, 
         -1,    41,    42,    43,   126,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    37, 
         -1,   126,    -1,    -1,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    37,    60,    61,    62,    63,    42,    43,   126,    45, 
         -1,    47,    -1,    37,    -1,    -1,    -1,    41,    42,    43, 
         44,    45,   260,    47,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,   126,    61,    -1,    63, 
         -1,    -1,   280,   281,   282,   283,   284,   285,   286,   287, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   126,    93, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        126,    -1,   330,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   125,    37,    -1,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,    93,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   404,   405,   406,   407,   408, 
        125,    -1,    -1,    37,   413,   414,   415,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,    -1,    -1,    -1,    -1,    -1,    93, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   125,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    37,   413, 
        414,   415,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    37,    61,    -1,    63,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    37,    -1,    93,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    93,    63,   404, 
        405,   406,   407,   408,    -1,    -1,   125,    -1,   413,   414, 
        415,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1, 
         43,    44,    45,    -1,    -1,    -1,    37,    -1,    93,   125, 
         41,    -1,    43,    44,    45,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    37,    63,    -1,    -1,    41,    -1,    43,    44,    45, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         93,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,   413, 
        414,   415,   125,    -1,    37,    -1,    -1,    93,    41,    -1, 
         43,    44,    45,    -1,   125,    -1,    37,    -1,    -1,    -1, 
         41,    -1,    -1,    44,    -1,    58,    59,    -1,    61,    37, 
         63,    -1,    -1,    41,    -1,    -1,    44,    58,    59,   125, 
         61,    37,    63,    -1,    -1,    41,    -1,    -1,    44,    -1, 
         58,    59,    -1,    61,    37,    63,    -1,    -1,    41,    -1, 
         93,    44,    58,    59,    -1,    61,    -1,    63,    -1,    40, 
         -1,    42,    93,    44,    -1,    58,    59,    37,    61,    -1, 
         63,    41,    -1,    -1,    44,    93,    -1,    -1,    59,    60, 
         -1,    62,   125,    -1,    -1,    -1,    -1,    93,    58,    59, 
         -1,    61,    37,    63,   125,    -1,    41,    -1,    -1,    44, 
         93,    -1,    -1,    -1,    37,    -1,    -1,   125,    41,    -1, 
         91,    44,    93,    58,    59,    -1,    61,    37,    63,   125, 
         -1,    41,    -1,    93,    44,    58,    59,    -1,    61,    -1, 
         63,    42,   125,    -1,    -1,    -1,    47,    -1,    58,    59, 
         37,    61,   123,    63,    41,    -1,    -1,    44,    93,    60, 
         -1,    62,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1, 
         93,    58,    59,    -1,    61,    -1,    63,    37,    -1,    -1, 
         -1,    41,    -1,    93,    44,   404,   405,   406,   407,   408, 
        125,    -1,    -1,    -1,   413,   414,   415,    -1,    58,    59, 
         -1,    61,   125,    63,    -1,    -1,    93,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,   125,    -1,   413,   414,   415, 
         -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,   125,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,   260, 
        413,   414,   415,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,   414,   415,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   310, 
        311,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   320, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,   413,   414,   415,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,   413,   414,   415,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1,   410, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414, 
        415,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,    -1,   404,   405,   406,   407,   408,   400, 
        401,   402,   403,   413,   414,   415,    -1,    -1,    -1,    -1, 
        411,   412,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    48, 
         -1,    -1,    -1,   413,   414,   415,    -1,    -1,    57,    58, 
         -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1, 
         33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1, 
         43,    -1,    45,    -1,    93,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    59,   106,   107,   108, 
        109,   110,   111,   112,   113,   114,   115,   116,   117,   118, 
        119,   120,    -1,    -1,   123,   124,   125,   126,   127,   128, 
        129,    -1,    33,   132,    -1,    -1,    -1,    -1,    91,    40, 
         -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1, 
         -1,   150,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         91,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1, 
        199,    33,    -1,    -1,   203,    -1,    -1,    -1,    40,   208, 
         -1,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   123,    -1,   125,   126,    -1,    59,    -1,    -1, 
         -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   245,   246,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    91, 
         -1,    -1,    40,    -1,    -1,    43,    -1,    45,    -1,    -1, 
         -1,    -1,    -1,   272,    -1,    -1,    -1,    -1,    -1,    -1, 
        279,    59,   281,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   305,   260,   261,   262, 
        263,   264,    -1,    91,    -1,   314,   315,   316,    -1,    -1, 
         -1,    33,    -1,   322,   323,    -1,    -1,    -1,    40,    -1, 
         -1,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   123,    -1,    59,   126,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,    -1,   364,    -1,    -1,   367,   368, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342, 
        343,    -1,   345,   346,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   403,    -1,    -1,   360,   361,   362, 
        363,   123,   365,   366,   126,    -1,    -1,   370,   371,   372, 
        373,   374,   421,    -1,    -1,    -1,    -1,    -1,   260,   261, 
        262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1,   340, 
        341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1,   402, 
        403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360, 
        361,   362,   363,    -1,   365,   366,    -1,    -1,    -1,   370, 
        371,   372,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   260,   261,   262,   263,   264,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403,    -1,    -1,    -1,    -1,    -1,   340,   341, 
        342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361, 
        362,   363,    -1,   365,   366,    -1,    -1,    -1,   370,    -1, 
        372,   373,   374,    -1,    -1,    -1,    -1,    -1,   260,   261, 
        262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   340,   341,   342,   343,    -1,    -1,   346,    -1, 
        402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   360,   361,   362,   363,    -1,   365,   366,    -1, 
         -1,    -1,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   402,   403,    -1,    -1,   340,   341, 
        342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361, 
        362,   363,    -1,   365,   366,    -1,    -1,    -1,   370,    -1, 
        372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 
      'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 
      'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 
      'T_FOREACH', 'T_IN', 'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 
      'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      'T_OBJECT_OPERATOR', 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
      'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 'T_BOOLEAN_AND', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 130 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 142 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 142 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 153 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 154 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 158 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 158 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 13:  #line 166 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 15:  #line 171 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 16:  #line 177 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 177 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 18:  #line 186 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 19:  #line 186 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 195 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 21:  #line 195 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 22:  #line 206 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 207 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 211 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 25:  #line 212 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 216 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 217 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 221 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 222 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 30:  #line 226 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 31:  #line 227 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 231 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 33:  #line 232 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 233 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 35:  #line 237 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 238 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 239 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 243 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 39:  #line 244 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 40:  #line 248 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 41:  #line 248 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 42:  #line 251 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 251 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 261 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 45:  #line 268 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop][0];
      $yyVal->annotations= $yyVals[-5+$yyTop][1];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 46:  #line 279 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 48:  #line 284 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 49:  #line 285 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 50:  #line 286 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 51:  #line 290 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 291 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 297 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 54:  #line 297 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 55:  #line 307 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 56:  #line 307 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 57:  #line 315 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 58:  #line 315 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 59:  #line 328 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 60:  #line 329 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 61:  #line 333 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 62:  #line 334 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 63:  #line 338 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 64:  #line 342 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVals[-1+$yyTop] && $yyVal->parameters= array('default' => $yyVals[-1+$yyTop]);
    } break;

    case 65:  #line 347 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 66:  #line 355 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 67:  #line 356 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 68:  #line 360 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 69:  #line 361 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 70:  #line 365 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 71:  #line 366 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 72:  #line 370 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 73:  #line 371 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 74:  #line 375 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 75:  #line 376 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 82:  #line 388 "grammar/xp.jay"
    { $yyVal= '[]'; } break;

    case 83:  #line 389 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 84:  #line 397 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 86:  #line 402 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 87:  #line 403 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 88:  #line 407 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 89:  #line 407 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 90:  #line 410 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 91:  #line 410 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 92:  #line 415 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 93:  #line 415 "grammar/xp.jay"
    {
      $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 94:  #line 421 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 95:  #line 421 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 96:  #line 426 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 97:  #line 426 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 98:  #line 430 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 99:  #line 430 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 100:  #line 434 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 101:  #line 434 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 102:  #line 438 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 103:  #line 438 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 104:  #line 443 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 106:  #line 444 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 108:  #line 445 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 109:  #line 445 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 112:  #line 453 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 114:  #line 458 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 115:  #line 459 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 116:  #line 463 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 117:  #line 463 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 118:  #line 467 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 119:  #line 467 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 120:  #line 473 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 121:  #line 474 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 122:  #line 478 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 123:  #line 479 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 124:  #line 479 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 125:  #line 484 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 126:  #line 485 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 127:  #line 489 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 128:  #line 490 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 129:  #line 494 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 130:  #line 494 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 131:  #line 502 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 133:  #line 507 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 134:  #line 507 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 135:  #line 515 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 137:  #line 520 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 138:  #line 521 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 139:  #line 525 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 141:  #line 530 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 142:  #line 536 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 143:  #line 544 "grammar/xp.jay"
    { 
      /* TBI: Constant */ 
    } break;

    case 144:  #line 547 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 145:  #line 550 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new InvocationNode(array('name' => $yyVals[-3+$yyTop]))); 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 147:  #line 558 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 148:  #line 558 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 149:  #line 561 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 150:  #line 561 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 151:  #line 566 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 152:  #line 566 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyVals[-1+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 153:  #line 571 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 154:  #line 571 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 155:  #line 577 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 156:  #line 578 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 157:  #line 581 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 158:  #line 584 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 159:  #line 587 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 160:  #line 590 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 161:  #line 594 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 162:  #line 600 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 163:  #line 606 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 164:  #line 615 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 165:  #line 616 "grammar/xp.jay"
    { /* XXX class literal */ } break;

    case 166:  #line 617 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 167:  #line 617 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 168:  #line 621 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 169:  #line 626 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 170:  #line 627 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 171:  #line 628 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 172:  #line 629 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 173:  #line 633 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 175:  #line 638 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 176:  #line 639 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 177:  #line 643 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 178:  #line 647 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 179:  #line 648 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 180:  #line 649 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 181:  #line 650 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 182:  #line 651 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 183:  #line 652 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 184:  #line 656 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 185:  #line 657 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 658 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 659 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 188:  #line 660 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 189:  #line 661 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 190:  #line 665 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 191:  #line 666 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 192:  #line 667 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 193:  #line 668 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 194:  #line 669 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 195:  #line 670 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 196:  #line 674 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 197:  #line 675 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 198:  #line 676 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 199:  #line 677 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 200:  #line 678 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 201:  #line 679 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 202:  #line 683 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 203:  #line 684 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 204:  #line 689 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 207:  #line 695 "grammar/xp.jay"
    {  $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 208:  #line 699 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 209:  #line 699 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 210:  #line 702 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 211:  #line 705 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 212:  #line 705 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 215:  #line 719 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 216:  #line 720 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 217:  #line 724 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 218:  #line 728 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 219:  #line 729 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 221:  #line 734 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 222:  #line 738 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 223:  #line 739 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 224:  #line 745 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 225:  #line 746 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 226:  #line 750 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 227:  #line 751 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 228:  #line 755 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 229:  #line 756 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 230:  #line 757 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 231:  #line 758 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 232:  #line 759 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 233:  #line 760 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 234:  #line 761 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;

    case 235:  #line 762 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 1919 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
