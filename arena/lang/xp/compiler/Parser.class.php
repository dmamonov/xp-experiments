<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 43 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     8,     1,     3,     3,     5,     5,     6,     6, 
          9,     9,    11,    11,     7,     7,     7,    12,    12,    14, 
         14,    17,    17,    16,    16,    16,    15,    15,    13,    13, 
         22,    20,    26,    20,    24,    24,    21,    21,    28,    28, 
         29,    29,    23,    23,    25,    25,    25,    25,    25,    27, 
         27,    18,    18,    31,    30,    32,    30,    35,    30,    37, 
         30,    38,    30,    39,    30,    40,    30,    42,    30,    30, 
         33,    33,    34,    43,    34,    41,    41,    44,    44,    48, 
         47,    45,    45,    49,    46,    50,    50,    19,    51,    19, 
         53,    19,    19,    19,    55,    19,    56,    19,    57,    19, 
         58,    19,    59,    19,    19,    19,    19,    19,    19,    19, 
         19,    19,    60,    60,    60,    60,    60,    60,    61,    61, 
         61,    61,    61,    61,    62,    62,    62,    62,    62,    63, 
         63,    63,    63,    63,    63,    54,    54,    65,    64,    64, 
         66,    64,    64,    36,    36,    67,    67,     4,     4,     4, 
         52,    52,    10,    10,     2,     2,    68,    68,    69,    69, 
         69,    69,    69,    69,    69, 
    );
    protected static $yyLen= array(2,
          1,     8,     0,     8,     1,     1,     0,     2,     0,     2, 
          0,     2,     0,     3,     0,     1,     1,     1,     2,     5, 
          6,     0,     1,     2,     4,     4,     0,     2,     1,     2, 
          0,     9,     0,     9,     1,     3,     0,     1,     1,     3, 
          2,     3,     0,     2,     1,     1,     1,     1,     1,     0, 
          1,     1,     2,     0,     4,     0,     7,     0,    10,     0, 
         11,     0,     6,     0,     7,     0,     6,     0,     4,     2, 
          1,     3,     0,     0,     3,     2,     1,     1,     2,     0, 
          9,     0,     1,     0,     5,     0,     1,     1,     0,     4, 
          0,     5,     1,     1,     0,     3,     0,     8,     0,     5, 
          0,     8,     0,     6,     3,     3,     3,     3,     2,     2, 
          2,     5,     1,     1,     1,     1,     1,     1,     1,     1, 
          1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
          1,     1,     1,     1,     1,     0,     1,     0,     4,     2, 
          0,     6,     2,     0,     1,     1,     3,     1,     4,     3, 
          1,     3,     1,     3,     0,     1,     1,     2,     1,     1, 
          1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
        159,   161,   160,   162,   164,   163,   165,     0,     1,     0, 
        156,     0,     5,     3,     6,     0,   158,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   152, 
          8,     0,     0,   150,     0,     0,    12,     0,    10,     0, 
          0,   149,     0,     0,    16,    17,     0,     0,     0,   154, 
          0,     0,     0,     4,     0,    19,     0,    30,     2,    45, 
         46,    47,    48,    49,     0,     0,     0,     0,     0,     0, 
         33,     0,     0,    31,     0,     0,     0,     0,    24,     0, 
         23,     0,     0,   132,   133,    89,   130,   131,   134,   135, 
          0,    94,    93,    95,    97,     0,     0,     0,     0,    20, 
          0,     0,    38,     0,     0,    54,     0,    68,    58,    62, 
         64,    60,    56,     0,     0,     0,    21,     0,     0,   103, 
          0,     0,     0,   113,   125,   126,   127,   128,   129,     0, 
        114,   115,   116,   117,   118,   110,   111,   119,   120,   121, 
        122,   123,   124,     0,     0,     0,    91,     0,     0,     0, 
         41,     0,     0,    25,     0,    66,     0,     0,     0,     0, 
          0,     0,    26,    70,    53,     0,     0,     0,   145,     0, 
        138,     0,    96,     0,     0,   105,     0,     0,     0,     0, 
          0,     0,     0,    42,     0,     0,    40,     0,     0,     0, 
          0,     0,     0,    71,     0,     0,     0,     0,     0,    90, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    44, 
          0,    35,    34,    55,    51,     0,    69,     0,     0,     0, 
          0,     0,     0,    32,   147,     0,     0,     0,   141,     0, 
          0,    92,   100,     0,     0,     0,     0,     0,    72,     0, 
          0,     0,   104,   139,     0,     0,     0,    36,    80,    84, 
         67,     0,    77,     0,     0,    63,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    76,    83,    79,     0,    65, 
          0,    74,    57,   142,     0,    98,   102,     0,     0,     0, 
          0,     0,    14,     0,     0,     0,     0,    75,     0,    85, 
         59,     0,     0,    61,     0,     0,    81, 
    );
    protected static $yyDgoto= array(8,
          9,    43,    16,    35,    25,    33,    44,    18,    29,    36, 
        262,    45,    46,    47,    76,    73,    82,   215,   115,    48, 
        102,    83,   186,   213,    65,    77,   216,   103,   104,   116, 
        155,   162,   195,   273,   158,   168,   161,   159,   160,   189, 
        251,   157,   282,   252,   266,   253,   254,   264,   265,   228, 
        119,    98,   181,   173,   121,   122,   182,   183,   170,   144, 
        145,   146,    99,   174,   202,   245,   169,    11,    12, 
    );
    protected static $yySindex = array(          131,
          0,     0,     0,     0,     0,     0,     0,     0,     0,  -239, 
          0,   131,     0,     0,     0,  -217,     0,  -217,    -1,  -242, 
        -18,  -240,  -217,  -217,  -234,   -11,  -217,  -217,     1,     0, 
          0,  -217,    14,     0,   100,    84,     0,   131,     0,   131, 
       -217,     0,  -241,    26,     0,     0,   131,   131,    30,     0, 
         22,  -193,  -247,     0,  -232,     0,  -221,     0,     0,     0, 
          0,     0,     0,     0,   136,   -95,   137,   110,  -162,   -81, 
          0,  -111,   -95,     0,   786,   122,  -217,   142,     0,   989, 
          0,   133,  -217,     0,     0,     0,     0,     0,     0,     0, 
        108,     0,     0,     0,     0,   786,   735,   -89,   786,     0, 
        -41,   149,     0,   156,   155,     0,    78,     0,     0,     0, 
          0,     0,     0,    68,   152,   989,     0,   163,   786,     0, 
        -80,  -217,   179,     0,     0,     0,     0,     0,     0,   786, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   786,   786,   786,     0,     0,   735,  -135, 
          0,  -112,  -217,     0,   786,     0,   786,   166,   177,   860, 
        185,   187,     0,     0,     0,  -112,   201,   126,     0,   786, 
          0,   -32,     0,   -80,   192,     0,   223,   735,   735,   735, 
        786,  -106,   -27,     0,  -217,   -13,     0,   245,   989,   272, 
        786,   786,   989,     0,  -126,   786,   786,   -13,   786,     0, 
        195,   786,   197,   -80,   786,   786,   157,   -80,   209,     0, 
        989,     0,     0,     0,     0,   128,     0,   193,   299,   129, 
        215,   363,   671,     0,     0,   -80,   735,   165,     0,   218, 
        -24,     0,     0,   786,   144,  -253,   786,   860,     0,   786, 
        -84,   860,     0,     0,   786,   151,   226,     0,     0,     0, 
          0,   -70,     0,   -67,   219,     0,   698,   228,   -91,   255, 
        131,   -80,   -80,   257,   180,     0,     0,     0,   786,     0, 
        238,     0,     0,     0,   186,     0,     0,  -217,   989,   261, 
        -30,   860,     0,   -22,   191,   860,   281,     0,   283,     0, 
          0,   860,   202,     0,   989,   205,     0, 
    );
    protected static $yyRindex= array(         -179,
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   -29,     0,     0,     0,     0,     0,     0,   626,  -109, 
        750,   203,     0,     0,   216,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   -15,     0,     0,  -122,     0,  -122, 
          0,     0,     0,     0,     0,     0,  -107,  -110,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   284,     0,     0, 
          0,     0,   286,     0,     0,     0,   307,     0,     0,     0, 
          0,     0,   307,     0,     0,     0,     0,     0,     0,     0, 
        -37,     0,     0,     0,     0,     0,   290,     0,     0,     0, 
          0,     0,     0,   309,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   227,     0,     0,   258,     0, 
         70,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,  -243,    16,     0, 
          0,    -4,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    -4,    59,     0,     0,   312, 
          0,     0,     0,    98,     0,     0,     0,   235,   254,   279, 
        258,     0,     0,     0,     0,     0,     0,     0,   230,     0, 
        297,     0,   230,     0,     0,     0,     0,     0,     0,     0, 
          0,   264,   -10,   125,   312,     0,     0,    70,     0,     0, 
        230,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    70,   265,     0,     0,     0, 
        744,     0,     0,   312,     0,     0,   297,     0,     0,     0, 
          0,     0,     0,     0,   312,    43,     0,     0,     0,     0, 
          0,   824,     0,   599,     0,     0,     0,     0,   913,     0, 
       -122,    70,    70,     0,     0,     0,     0,     0,   312,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   230,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   230,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,   127,     0,   852,     0,     0,   -31,     0,     0,   -12, 
          0,   334,   335,     0,     0,   311,     0,   -50,  1225,     0, 
        302,     0,   220,   184,     0,     0,  -115,   236,     0,   -35, 
          0,     0,  -166,     0,     0,   251,     0,     0,     0,     0, 
          0,     0,     0,   150,     0,   167,     0,     0,     0,     0, 
          0,  1262,     0,  -168,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,  -133,     0,     0,   204,   397,     0, 
    );
    protected static $yyTable = array(88,
        150,   147,    15,    88,    88,    88,    88,    88,    49,    88, 
        171,    80,    67,     7,    29,    37,   101,    18,    19,    39, 
         88,    88,    88,    88,    88,    88,   140,    19,    50,   114, 
        140,   140,   140,   140,   140,   138,   140,   139,    19,   233, 
        204,    27,    19,   153,    23,   212,   153,   140,   140,   140, 
        140,   140,   140,   151,    43,    88,   109,   243,    64,   109, 
         13,    14,    15,    62,    60,   165,    61,    24,    63,    28, 
        204,   256,    26,   109,   109,   259,    32,   220,    51,    13, 
        140,    34,   140,    13,    13,    13,    13,    13,    52,    13, 
        249,   250,    68,   276,   277,   235,    99,    52,    51,   146, 
         13,    13,    13,    13,    13,    13,   136,   153,   109,   211, 
        136,   136,   136,   136,   136,   288,   136,   146,    43,   291, 
        155,   155,   155,    38,   194,   294,    10,   136,   136,   136, 
        136,   136,   136,    13,   137,    13,    40,   155,   137,   137, 
        137,   137,   137,    41,   137,    42,    66,   120,    78,   155, 
         54,   146,   155,    23,    59,   137,   137,   137,   137,   137, 
        137,   143,   136,   285,    72,   143,   143,   143,   143,   143, 
         75,   143,   210,    55,    57,    71,    74,    68,    67,   296, 
        100,   105,   143,   143,   143,   143,   143,   143,   129,   152, 
        137,   117,   163,   127,   125,   154,   126,   155,   128,   153, 
        156,     7,   194,   166,   184,   191,   194,   155,   185,   155, 
        164,   138,   124,   139,   130,   129,   192,   143,   200,   176, 
        127,   125,   155,   126,   196,   128,   197,   203,    79,   275, 
        157,   205,   209,   208,   221,   226,   229,   129,   138,   124, 
        139,   130,   127,   125,   199,   126,   194,   128,   234,   232, 
        194,   237,   236,   239,   240,   258,   194,   244,   246,   129, 
        138,   124,   139,   130,   127,   125,   263,   126,   248,   128, 
        157,   157,   157,   261,   250,   106,   249,   269,   106,   272, 
        206,   129,   138,   124,   139,   130,   127,   125,   271,   126, 
        157,   128,   106,   106,   107,   274,   278,   107,   151,   281, 
        157,   286,   279,   214,   138,   124,   139,   130,   129,   287, 
        283,   107,   107,   127,   125,   290,   126,   289,   128,   108, 
        148,   292,   108,   293,   295,    11,    88,   106,   172,   297, 
        217,   138,   124,   139,   130,   129,   108,   108,     9,   238, 
        127,   125,    27,   126,    22,   128,   107,    37,    28,    39, 
        144,    52,   144,   140,    50,   144,    86,    87,   138,   124, 
        139,   130,    88,    88,    88,    88,    88,    88,    88,    88, 
         88,   108,   151,    88,    88,   141,   140,   136,   137,   109, 
         56,   224,    58,    81,   118,   198,   142,   143,   187,   140, 
        140,   140,   140,   140,   140,   140,   140,   140,   140,   129, 
        140,   140,   225,   268,   127,   125,    13,   126,    17,   128, 
          1,     2,     3,     4,     5,     6,     7,     0,   267,     0, 
        201,     0,   138,   124,   139,   130,     0,     0,     0,     0, 
          0,   207,     0,   136,     0,     0,     0,     0,     0,     0, 
          0,   218,    13,    13,    13,    13,    13,    13,    13,    13, 
         13,    13,     0,    13,    13,   230,     0,     0,     0,     0, 
          0,   137,     0,     0,     0,     0,     0,     0,     0,   136, 
        136,   136,   136,   136,   136,   136,   136,   136,     0,     0, 
        136,   136,     0,     0,   247,     0,     0,   255,   143,     0, 
          0,     0,     0,     0,     0,   260,     0,   137,   137,   137, 
        137,   137,   137,   137,   137,   137,     0,     0,   137,   137, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   280, 
          0,     0,     0,     0,   143,   143,   143,   143,   143,   143, 
        143,   143,   143,     0,     0,   143,   143,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   141,   140,   136,   137,   131,   132,   133,   134,   135, 
          0,     0,   142,   143,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   141,   140, 
        136,   137,   131,   132,   133,   134,   135,     0,     0,   142, 
        143,     0,     0,     0,     0,     0,     0,     0,   106,     0, 
        141,   140,   136,   137,   131,   132,   133,   134,   135,     0, 
          0,   142,   143,     0,     0,     0,     0,   107,     0,     0, 
          0,     0,   141,   140,   136,   137,   131,   132,   133,   134, 
        135,    78,     0,   142,   143,     0,     0,     0,    78,     0, 
          0,    78,   108,    78,   141,   140,   136,   137,   131,   132, 
        133,   134,   135,     0,     0,   142,   143,     0,     0,     0, 
          0,     0,     0,     0,     0,   151,     0,   151,     0,   151, 
          0,   141,   140,   136,   137,   131,   132,   133,   134,   135, 
          0,     0,   142,   143,   151,   151,     0,   151,     0,    78, 
          0,     0,     0,     0,     0,     0,     0,     0,   141,   140, 
        136,   137,   131,   132,   133,   134,   135,   129,     0,   142, 
        143,   242,   127,   125,     0,   126,   151,   128,     0,     0, 
          0,     0,     0,    78,    78,     0,   241,     0,     0,     0, 
        138,   124,   139,   130,   129,     0,     0,     0,   270,   127, 
        125,     0,   126,     0,   128,     0,     0,     0,   151,     0, 
          0,     0,     0,     0,     0,     0,     0,   138,   124,   139, 
        130,     0,   141,   140,   136,   137,   131,   132,   133,   134, 
        135,   129,     0,   142,   143,     0,   127,   125,     0,   126, 
        112,   128,     0,     0,   112,   112,   112,   112,   112,   148, 
        112,   148,     0,   148,   138,   124,   139,   130,     0,     0, 
          0,   112,   112,     0,   112,     0,   112,     0,   148,     0, 
          0,   148,     0,     0,     0,     0,     0,     0,    87,     0, 
          0,     0,     0,     0,     0,    96,     0,     0,    84,     0, 
         85,     0,     0,     0,     0,     0,   112,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    82,     0,    78,    78, 
         78,     0,     0,    82,     0,     0,    82,    20,    82,    22, 
          0,     0,   148,     0,     0,    31,    86,     0,     0,     0, 
          0,     0,     0,     0,     0,   151,     0,     0,     0,     0, 
          0,     0,    87,     0,    53,     0,     0,     0,     0,    96, 
          0,     0,    84,     0,    85,     0,    69,     0,    70,     0, 
          0,    88,     0,     0,    82,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   101,     0, 
          0,     0,     0,     0,   101,   151,   151,     0,    78,    78, 
         78,    78,     0,    78,    78,    73,     0,     0,    82,    82, 
         86,     0,    73,     0,     0,    73,     0,    73,    78,    78, 
         78,    78,     0,     0,     0,   151,     0,     0,    78,    78, 
          0,     0,     0,   175,     0,     0,     0,     0,     0,     0, 
          0,     0,   193,     0,     0,    88,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         78,    78,     0,    73,   101,     0,     0,     0,     0,   148, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    87,     0,     0,     0,     0,     0,     0,    96,     0, 
          0,    84,     0,    85,     0,   151,     0,    73,    73,     0, 
          0,     0,     0,     0,     0,    91,    92,    93,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   148, 
        148,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        141,   140,   136,   137,   131,   132,   133,   134,   135,    86, 
          0,   142,   143,    82,    82,    82,     0,     0,     0,   148, 
          0,     0,     0,     0,     0,     0,     0,   141,   140,   136, 
        137,   131,   132,   133,   134,   135,     0,   112,   142,   143, 
          0,     0,     0,     0,    88,     0,     0,     0,     0,    91, 
         92,    93,     0,     0,     0,    94,     0,     0,     0,   284, 
          0,    95,     0,     0,   141,   140,   136,   137,   131,   132, 
        133,   134,   135,     0,     0,   142,   143,   112,   112,   112, 
        112,   112,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    82,    82,    82,    82,     0,     0,    82, 
          0,     0,    73,    73,    73,     0,     0,     0,     0,     0, 
          0,     0,     0,    82,    82,    82,    82,    89,    90,     0, 
          0,     0,     0,    82,    82,     0,     0,     0,     0,    94, 
        106,   107,   108,     0,     0,    95,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   109, 
        110,   111,   112,     0,     0,    82,    82,     0,     0,   113, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    91,    92, 
         93,     0,    73,    73,    73,    73,     0,     0,    73,     0, 
          0,    89,    90,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    73,    73,    73,    73,     0,    21,     0,    21, 
          0,     0,    73,     0,    30,    21,     0,     0,    21,    21, 
          0,     0,     0,    21,     0,     0,     0,     0,     0,    97, 
          0,     0,    21,     0,    21,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    73,    73,    21,     0,    21,     0, 
        123,     0,     0,   149,     0,     0,     0,     0,    94,   106, 
        107,   108,     0,     0,    95,     0,     0,     0,    21,     0, 
          0,     0,     0,   167,    21,     0,     0,     0,   109,   110, 
        111,   112,     0,     0,   177,     0,     0,     0,   113,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   178,   179, 
        180,     0,     0,     0,     0,     0,     0,     0,     0,   188, 
          0,   190,     0,    21,     0,     0,     0,     0,     0,     0, 
         89,    90,     0,     0,   167,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   167,     0,     0,     0,     0, 
          0,     0,     0,     0,    21,   167,   219,     0,     0,     0, 
        222,   223,     0,   167,     0,     0,   227,     0,     0,   167, 
        231,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    21,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   167,     0, 
          0,   167,     0,     0,   257,     0,     0,     0,     0,   167, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   167,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    21, 
    );
    protected static $yyCheck = array(37,
         42,    91,   125,    41,    42,    43,    44,    45,    40,    47, 
         91,   123,   260,   123,   125,    28,   260,   125,   260,    32, 
         58,    59,    60,    61,    62,    63,    37,   260,    41,    80, 
         41,    42,    43,    44,    45,    60,    47,    62,   260,   208, 
        174,    60,   260,    59,    46,    59,    62,    58,    59,    60, 
         61,    62,    63,    91,    59,    93,    41,   226,    37,    44, 
        300,   301,   302,    42,    43,   116,    45,   310,    47,   310, 
        204,   238,    91,    58,    59,   242,   311,   193,   320,    37, 
         91,    93,    93,    41,    42,    43,    44,    45,   330,    47, 
        344,   345,   340,   262,   263,   211,   340,   330,   320,    41, 
         58,    59,    60,    61,    62,    63,    37,   123,    93,   123, 
         41,    42,    43,    44,    45,   282,    47,    59,   123,   286, 
        300,   301,   302,   123,   160,   292,     0,    58,    59,    60, 
         61,    62,    63,    91,    37,    93,   123,   260,    41,    42, 
         43,    44,    45,    44,    47,    62,   340,    40,   260,   260, 
        125,    93,   260,    46,   125,    58,    59,    60,    61,    62, 
         63,    37,    93,   279,   260,    41,    42,    43,    44,    45, 
         61,    47,   185,    47,    48,    40,    40,   340,   260,   295, 
         59,    40,    58,    59,    60,    61,    62,    63,    37,    41, 
         93,    59,   125,    42,    43,    41,    45,   320,    47,    44, 
        123,   311,   238,    41,   340,    40,   242,   330,   321,   320, 
         59,    60,    61,    62,    63,    37,    40,    93,    93,    41, 
         42,    43,   330,    45,    40,    47,    40,   260,   340,   261, 
        260,    40,   260,   340,   361,    41,    40,    37,    60,    61, 
         62,    63,    42,    43,    44,    45,   282,    47,    40,    93, 
        286,    59,   125,   125,    40,   340,   292,    93,    41,    37, 
         60,    61,    62,    63,    42,    43,    41,    45,   125,    47, 
        300,   301,   302,   123,   345,    41,   344,    59,    44,   371, 
         58,    37,    60,    61,    62,    63,    42,    43,    61,    45, 
        320,    47,    58,    59,    41,    41,    40,    44,   340,    62, 
        330,    41,   123,    59,    60,    61,    62,    63,    37,   340, 
        125,    58,    59,    42,    43,   125,    45,   340,    47,    41, 
        410,    41,    44,    41,   123,   123,   364,    93,   409,   125, 
         59,    60,    61,    62,    63,    37,    58,    59,   123,    41, 
         42,    43,    59,    45,    59,    47,    93,    41,    59,    41, 
         93,   125,    41,   364,   125,    59,    93,    93,    60,    61, 
         62,    63,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    93,   410,   411,   412,   400,   401,   402,   403,   364, 
         47,   198,    48,    73,    83,   166,   411,   412,   153,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   409,    37, 
        411,   412,   199,   254,    42,    43,   364,    45,    12,    47, 
        280,   281,   282,   283,   284,   285,   286,    -1,   252,    -1, 
        170,    -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,   181,    -1,   364,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   191,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   409,    -1,   411,   412,   205,    -1,    -1,    -1,    -1, 
         -1,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,    -1,   234,    -1,    -1,   237,   364,    -1, 
         -1,    -1,    -1,    -1,    -1,   245,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   269, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,    -1,    -1,    -1,   364,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    33,    -1,   411,   412,    -1,    -1,    -1,    40,    -1, 
         -1,    43,   364,    45,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,    44, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    59,    60,    -1,    62,    -1,    91, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    37,    -1,   411, 
        412,    41,    42,    43,    -1,    45,    91,    47,    -1,    -1, 
         -1,    -1,    -1,   125,   126,    -1,   364,    -1,    -1,    -1, 
         60,    61,    62,    63,    37,    -1,    -1,    -1,    41,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,   123,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62, 
         63,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    37,    -1,   411,   412,    -1,    42,    43,    -1,    45, 
         37,    47,    -1,    -1,    41,    42,    43,    44,    45,    40, 
         47,    42,    -1,    44,    60,    61,    62,    63,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    59,    -1, 
         -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1, 
         -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1, 
         45,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,   260,   261, 
        262,    -1,    -1,    40,    -1,    -1,    43,    16,    45,    18, 
         -1,    -1,   123,    -1,    -1,    24,    91,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   260,    -1,    -1,    -1,    -1, 
         -1,    -1,    33,    -1,    43,    -1,    -1,    -1,    -1,    40, 
         -1,    -1,    43,    -1,    45,    -1,    55,    -1,    57,    -1, 
         -1,   126,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1, 
         -1,    -1,    -1,    -1,    83,   310,   311,    -1,   340,   341, 
        342,   343,    -1,   345,   346,    33,    -1,    -1,   125,   126, 
         91,    -1,    40,    -1,    -1,    43,    -1,    45,   360,   361, 
        362,   363,    -1,    -1,    -1,   340,    -1,    -1,   370,   371, 
         -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        402,   403,    -1,    91,   153,    -1,    -1,    -1,    -1,   260, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1, 
         -1,    43,    -1,    45,    -1,   410,    -1,   125,   126,    -1, 
         -1,    -1,    -1,    -1,    -1,   260,   261,   262,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   310, 
        311,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    91, 
         -1,   411,   412,   260,   261,   262,    -1,    -1,    -1,   340, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,   364,   411,   412, 
         -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,   260, 
        261,   262,    -1,    -1,    -1,   340,    -1,    -1,    -1,   278, 
         -1,   346,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   340,   341,   342,   343,    -1,    -1,   346, 
         -1,    -1,   260,   261,   262,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   360,   361,   362,   363,   402,   403,    -1, 
         -1,    -1,    -1,   370,   371,    -1,    -1,    -1,    -1,   340, 
        341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360, 
        361,   362,   363,    -1,    -1,   402,   403,    -1,    -1,   370, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,   261, 
        262,    -1,   340,   341,   342,   343,    -1,    -1,   346,    -1, 
         -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   360,   361,   362,   363,    -1,    16,    -1,    18, 
         -1,    -1,   370,    -1,    23,    24,    -1,    -1,    27,    28, 
         -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    -1,    75, 
         -1,    -1,    41,    -1,    43,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   402,   403,    55,    -1,    57,    -1, 
         96,    -1,    -1,    99,    -1,    -1,    -1,    -1,   340,   341, 
        342,   343,    -1,    -1,   346,    -1,    -1,    -1,    77,    -1, 
         -1,    -1,    -1,   119,    83,    -1,    -1,    -1,   360,   361, 
        362,   363,    -1,    -1,   130,    -1,    -1,    -1,   370,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,   145, 
        146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   155, 
         -1,   157,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1, 
        402,   403,    -1,    -1,   170,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   153,   191,   192,    -1,    -1,    -1, 
        196,   197,    -1,   199,    -1,    -1,   202,    -1,    -1,   205, 
        206,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1, 
         -1,   237,    -1,    -1,   240,    -1,    -1,    -1,    -1,   245, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   269,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   278, 
    );
    protected static $yyFinal= 8;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 'T_FINAL', 
      'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_EXTENDS', 'T_IMPLEMENTS', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PROPERTY', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_AS', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 'T_OBJECT_OPERATOR', 
      'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 2:  #line 109 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
        $yyVals[-6+$yyTop]->name= $yyVals[-5+$yyTop];
        $yyVals[-6+$yyTop]->parent= $yyVals[-4+$yyTop];
        $yyVals[-6+$yyTop]->implements= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
        $yyVal= $yyVals[-6+$yyTop];
      } break;

    case 3:  #line 117 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 4:  #line 117 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
        $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
        $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
        $yyVal= $yyVals[-6+$yyTop];
      } break;

    case 5:  #line 127 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ClassNode()); } break;

    case 6:  #line 128 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new EnumNode()); } break;

    case 7:  #line 132 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 8:  #line 133 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 9:  #line 137 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 10:  #line 138 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 11:  #line 142 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 12:  #line 143 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 13:  #line 147 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 14:  #line 148 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 15:  #line 152 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 16:  #line 153 "grammar/xp.jay"
    { $yyVal['fields']= $yyVals[0+$yyTop]; } break;

    case 17:  #line 154 "grammar/xp.jay"
    { $yyVal['methods']= $yyVals[0+$yyTop]; } break;

    case 18:  #line 160 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 19:  #line 161 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 20:  #line 165 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
        $yyVal->modifiers= $yyVals[-4+$yyTop];
        $yyVal->type= $yyVals[-3+$yyTop];
        $yyVal->name= $yyVals[-2+$yyTop];
        $yyVal->initialization= $yyVals[-1+$yyTop];
      } break;

    case 21:  #line 171 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
        $yyVal->modifiers= $yyVals[-5+$yyTop];
        $yyVal->name= $yyVals[-3+$yyTop];
        $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
        $yyVal->get= $gs['get'];
        $yyVal->set= $gs['set'];
      } break;

    case 22:  #line 181 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 24:  #line 186 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 25:  #line 187 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 26:  #line 188 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 27:  #line 192 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 28:  #line 193 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 29:  #line 199 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 30:  #line 200 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 31:  #line 204 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 32:  #line 204 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
        $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
      } break;

    case 33:  #line 213 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 34:  #line 213 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 35:  #line 224 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 36:  #line 225 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 37:  #line 229 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 230 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 39:  #line 234 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 40:  #line 235 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 41:  #line 239 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-1+$yyTop]); } break;

    case 42:  #line 240 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 43:  #line 244 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 44:  #line 245 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 50:  #line 261 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 266 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 53:  #line 267 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 54:  #line 271 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 55:  #line 271 "grammar/xp.jay"
    { 
        $yyVal->expression= $yyVals[-1+$yyTop];
      } break;

    case 56:  #line 274 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 57:  #line 274 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
      } break;

    case 58:  #line 279 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 59:  #line 279 "grammar/xp.jay"
    {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
        $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
        $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 60:  #line 285 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 61:  #line 285 "grammar/xp.jay"
    {
        $yyVals[-10+$yyTop]->expression= $yyVals[-7+$yyTop];
        $yyVals[-10+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 62:  #line 289 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 63:  #line 289 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
        $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 64:  #line 293 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 65:  #line 293 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
      } break;

    case 66:  #line 297 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 67:  #line 297 "grammar/xp.jay"
    { 
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
        $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-4+$yyTop]; 
      } break;

    case 68:  #line 302 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 69:  #line 302 "grammar/xp.jay"
    { /* Throw statement */ 
        $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
      } break;

    case 71:  #line 309 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 72:  #line 310 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 73:  #line 314 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 74:  #line 315 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 75:  #line 315 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 76:  #line 320 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 77:  #line 321 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 78:  #line 325 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 79:  #line 326 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 80:  #line 330 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 81:  #line 330 "grammar/xp.jay"
    {
        $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
        $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
        $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
      } break;

    case 82:  #line 338 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 84:  #line 343 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 85:  #line 343 "grammar/xp.jay"
    {
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      } break;

    case 86:  #line 351 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 88:  #line 356 "grammar/xp.jay"
    { /* XXX Constant */ } break;

    case 89:  #line 357 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 90:  #line 357 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 91:  #line 361 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 92:  #line 361 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= new TypeName($yyVals[-4+$yyTop]);
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 93:  #line 366 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 94:  #line 367 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 95:  #line 368 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 96:  #line 368 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 97:  #line 371 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InstanceCreationNode()); } break;

    case 98:  #line 371 "grammar/xp.jay"
    { 
      $yyVals[-7+$yyTop]->type= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-7+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 99:  #line 376 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 100:  #line 376 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 101:  #line 381 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 102:  #line 381 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 103:  #line 387 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 104:  #line 387 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 105:  #line 393 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 106:  #line 394 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode()); 
      $yyVal->variable= $yyVals[-2+$yyTop]; 
      $yyVal->expression= $yyVals[0+$yyTop]; 
      $yyVal->op= $yyVals[-1+$yyTop];
    } break;

    case 107:  #line 400 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= $yyVals[-1+$yyTop]; 
    } break;

    case 108:  #line 406 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= $yyVals[-1+$yyTop]; 
    } break;

    case 109:  #line 412 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new UnaryOpNode()); 
      $yyVal->expression= $yyVals[0+$yyTop];
      $yyVal->op= $yyVals[-1+$yyTop]; 
    } break;

    case 110:  #line 417 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new UnaryOpNode()); 
      $yyVal->expression= $yyVals[-1+$yyTop];
      $yyVal->op= $yyVals[0+$yyTop]; 
      $yyVal->postfix= TRUE;
    } break;

    case 111:  #line 423 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new UnaryOpNode()); 
      $yyVal->expression= $yyVals[-1+$yyTop];
      $yyVal->op= $yyVals[0+$yyTop]; 
      $yyVal->postfix= TRUE;
    } break;

    case 112:  #line 429 "grammar/xp.jay"
    { /* XXX Ternary */ } break;

    case 136:  #line 468 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 138:  #line 473 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 139:  #line 473 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 140:  #line 476 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 141:  #line 480 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 142:  #line 480 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 143:  #line 484 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 144:  #line 488 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 146:  #line 493 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 147:  #line 494 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 148:  #line 500 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 149:  #line 501 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 150:  #line 502 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 151:  #line 506 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 152:  #line 507 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 153:  #line 511 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 154:  #line 512 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 155:  #line 518 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 156:  #line 519 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 157:  #line 523 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 158:  #line 524 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 159:  #line 528 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 160:  #line 529 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 161:  #line 530 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 162:  #line 531 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 163:  #line 532 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 164:  #line 533 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 165:  #line 534 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1279 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
