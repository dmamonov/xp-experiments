<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.StaticImportNode',
    'xp.compiler.ast.NativeImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.ConstantNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.InstanceOfNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.SwitchNode',
    'xp.compiler.ast.CaseNode',
    'xp.compiler.ast.DefaultNode',
    'xp.compiler.ast.BreakNode',
    'xp.compiler.ast.ContinueNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 63 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_MOD_EQUAL= 408;
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_INSTANCEOF= 312;
    const T_CONCAT_EQUAL= 416;
    const T_INC= 402;
    const T_DEC= 403;
    const T_SE= 401;
    const T_GE= 400;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_DOTS= 330;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_NEW= 346;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     9,     7, 
          8,     8,     8,    10,    10,    10,     4,     4,    13,     3, 
         17,     3,    19,     3,    14,    14,    15,    15,    20,    20, 
         22,    22,    16,    16,    23,    23,    23,    18,    18,    18, 
         27,    27,    29,    28,    30,    28,    24,    24,    34,    34, 
         35,    35,    37,    37,    37,    33,    33,    39,    25,    42, 
         25,    44,    25,    11,    11,    45,    45,    47,    47,    47, 
         49,    49,    50,    41,    41,    38,    38,    36,    36,    51, 
         51,    40,    40,    43,    43,    43,    43,    43,    43,    26, 
         26,    52,    52,    54,    53,    55,    53,    58,    53,    60, 
         53,    61,    53,    62,    53,    63,    53,    65,    53,    67, 
         53,    68,    53,    69,    53,    53,    53,    64,    64,    70, 
         70,    72,    71,    73,    71,    56,    56,    57,    74,    57, 
         66,    66,    75,    75,    79,    78,    76,    76,    80,    77, 
         59,    59,    81,    81,    48,    48,    82,    82,    83,    83, 
         83,    31,    86,    31,    87,    31,    88,    31,    89,    31, 
         31,    31,    31,    31,    31,    31,    31,    31,    31,    31, 
         84,    84,    96,    84,    84,    84,    84,    84,    95,    95, 
         95,    95,    97,    97,    98,    90,    90,    90,    90,    90, 
         90,    90,    91,    91,    91,    91,    91,    91,    92,    92, 
         92,    92,    92,    92,    93,    93,    93,    93,    93,    93, 
         94,    94,    85,    85,    99,    99,   101,   100,   100,   102, 
        100,    32,    32,    12,    12,   103,   104,   104,   105,   105, 
         21,    21,    46,    46,   106,   106,   107,   107,   107,   107, 
        107,   107,   107,   107, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     7, 
          0,     1,     1,     1,     1,     3,     1,     3,     0,     9, 
          0,     9,     0,     8,     0,     2,     0,     2,     0,     2, 
          0,     3,     2,     0,     1,     1,     4,     3,     1,     0, 
          1,     3,     0,     3,     0,     6,     5,     6,     1,     4, 
          1,     2,     2,     4,     4,     0,     2,     0,     9,     0, 
          8,     0,    10,     4,     1,     1,     3,     2,     5,     5, 
          1,     3,     3,     1,     3,     0,     1,     1,     3,     3, 
          4,     0,     2,     1,     1,     1,     1,     1,     1,     0, 
          1,     1,     2,     0,     4,     0,     7,     0,    10,     0, 
          8,     0,     6,     0,     7,     0,     8,     0,     6,     0, 
          3,     0,     3,     0,     4,     2,     1,     0,     1,     1, 
          2,     0,     5,     0,     4,     1,     3,     0,     0,     3, 
          2,     1,     1,     2,     0,     9,     0,     1,     0,     5, 
          0,     1,     1,     3,     0,     1,     5,     6,     1,     1, 
          4,     1,     0,     3,     0,     4,     0,     5,     0,     6, 
          3,     1,     1,     1,     1,     1,     5,     3,     3,     3, 
          1,     3,     0,     4,     1,     1,     1,     1,     0,     1, 
          1,     1,     1,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     2,     2,     2,     2,     2,     2, 
          2,     2,     0,     1,     1,     2,     0,     4,     2,     0, 
          6,     1,     1,     1,     4,     3,     1,     3,     1,     3, 
          1,     3,     0,     1,     1,     2,     1,     1,     1,     1, 
          1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   237,   239,   238,   240,   242,   241,   243,   244, 
          1,     0,    65,   234,     0,     8,     0,     4,    12,    13, 
          0,     0,     0,     0,    19,    23,    21,   236,    18,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    64,    67, 
          0,     0,     0,     0,    15,     0,     0,     0,     0,   173, 
          0,     0,     0,     0,     0,   178,   175,   177,   176,   153, 
        155,     0,     0,     0,     0,     0,     0,   152,   162,   163, 
        164,   165,   166,     0,     0,     0,     0,     0,     0,     0, 
         10,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        159,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   211,   212,     0,     0,     0,     0,     0,     0, 
         69,    70,     0,     0,     0,   222,   229,   223,     0,     0, 
         26,     0,     0,     0,    30,    34,     0,    16,   180,     0, 
        181,     0,   182,     0,     0,     0,   217,     0,   154,   214, 
          0,     0,     0,     0,   161,   172,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   170,     0,     0,     0, 
          0,     0,     0,     0,   193,   194,   195,   196,   197,   198, 
          0,    72,     0,     0,   225,     0,    28,    34,     0,     0, 
          0,     0,     0,   174,     0,     0,     0,   142,     0,     0, 
        216,     0,     0,   156,     0,   150,     0,     0,   230,   226, 
        228,     0,   232,     0,    24,     0,    33,    35,    36,     0, 
          0,     0,     0,   144,     0,     0,   184,     0,     0,   220, 
          0,     0,     0,   158,     0,    20,     0,     0,     0,     0, 
          0,    22,    34,     0,   160,   218,     0,     0,     0,     0, 
         94,     0,   114,    98,   102,   104,   100,   110,   112,    96, 
        106,   117,     0,     0,    91,     0,    60,     0,     0,     0, 
          0,    34,    44,     0,     0,    42,     0,     0,   147,   151, 
          0,   108,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    37,   116,    93,     0,     0,    58,    88,    84,    85, 
         86,    87,    89,     0,     0,     0,     0,     0,     0,   221, 
        148,     0,     0,     0,     0,     0,     0,   126,     0,     0, 
        111,   113,     0,     0,     0,    77,     0,     0,     0,     0, 
         62,     0,    47,     0,     0,     0,    32,     0,    95,     0, 
        115,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    50,     0,     0,     0,    53,     0,    48,    52, 
         46,     0,     0,     0,   127,     0,     0,     0,     0,     0, 
         80,     0,     0,    79,     0,     0,     0,     0,   135,   139, 
        109,     0,   132,     0,     0,   103,     0,     0,     0,     0, 
         81,    83,    74,     0,    61,     0,     0,    54,    55,     0, 
          0,   131,   138,   134,     0,   105,     0,   129,    97,   122, 
        124,     0,   119,     0,     0,    59,     0,     0,     0,     0, 
        101,     0,     0,     0,   107,   121,    75,    63,     0,     0, 
          0,   130,     0,     0,     0,   140,    99,     0,   125,     0, 
        123,     0,     0,   136, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    21,    73,     4,     7,     8,    31,    11,    57, 
        226,   136,    44,    86,   143,   200,    46,   231,    45,    88, 
        145,   283,   227,   228,   229,   273,   232,   233,   250,   251, 
        274,   335,   316,   281,   345,   336,   346,   337,   340,   383, 
        405,   305,   314,   365,    33,    23,    34,    75,    76,    77, 
        338,   275,   276,   291,   300,   329,   419,   294,   207,   297, 
        295,   296,   301,   422,   323,   391,   298,   299,   293,   423, 
        424,   433,   434,   432,   392,   412,   393,   394,   410,   411, 
        208,   164,   217,    78,   159,   102,   103,   167,   156,    79, 
         80,    81,    82,    83,   152,    95,   153,   154,   160,   161, 
        209,   257,   138,   139,   140,    24,    25, 
    );
    protected static $yySindex = array(         -253,
          0,     0,  -206,  -120,     0,   242,     0,  -206,   133,    94, 
        -38,   117,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   -29,     0,     0,   341,     0,  -120,     0,     0,     0, 
        -69,  -120,   124,   177,     0,     0,     0,     0,     0,   187, 
        218,   341,   117,  -120,  -120,  -120,   -33,  2982,     0,     0, 
        216,   -73,   -25,   -73,     0,   240,   230,  2990,  2990,     0, 
       2990,  2990,  2990,  2990,   214,     0,     0,     0,     0,     0, 
          0,  2990,  -119,  1439,   251,   252,   250,     0,     0,     0, 
          0,     0,     0,   -50,  -120,   -11,  -120,   173,   -11,   -33, 
          0,   137,  1955,  1955,  2956,    -5,    -5,    -5,    -5,  2990, 
          0,   112,  -120,   716,     4,  2990,  2990,  2990,  2990,  2990, 
       2990,  2990,  2990,  2990,  -120,  2990,  2990,  2990,  2990,  2990, 
       2990,  2990,     0,     0,  2990,  2990,  2990,  2990,  2990,  2990, 
          0,     0,    45,    10,   122,     0,     0,     0,   244,   278, 
          0,  -120,   207,   290,     0,     0,   212,     0,     0,   592, 
          0,   245,     0,   293,  1439,  2990,     0,    81,     0,     0, 
        112,   134,   303,   112,     0,     0,  -250,   -26,   -26,   -26, 
        -26,   -26,   -26,   -26,   -26,   -26,     0,   -26,   286,  1955, 
       1955,    -5,    -5,    -5,     0,     0,     0,     0,     0,     0, 
        287,     0,  -120,   254,     0,   -50,     0,     0,  -120,   255, 
         96,  2990,  2990,     0,  2990,   786,   319,     0,  2990,   322, 
          0,   270,  2990,     0,   324,     0,   112,  2990,     0,     0, 
          0,   318,     0,   249,     0,   113,     0,     0,     0,     0, 
        256,   325,   343,     0,  1439,   738,     0,   112,   296,     0, 
        267,   352,  2990,     0,    29,     0,  2943,   213,  -166,   271, 
        360,     0,     0,    96,     0,     0,  2990,  2990,   271,   361, 
          0,   280,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   279,   814,     0,  2943,     0,    69,   197,   344, 
        285,     0,     0,  2990,   411,     0,   369,   288,     0,     0, 
       2990,     0,  2990,   371,   372,  2869,   374,   359,   363,   379, 
        380,     0,     0,     0,  -120,  -120,     0,     0,     0,     0, 
          0,     0,     0,   383,  2990,   367,   167,   615,   845,     0, 
          0,   377,  2943,   973,  2990,  2990,  2943,     0,    67,    97, 
          0,     0,  2990,  2990,  -274,     0,   397,   400,   364,  -120, 
          0,  1439,     0,   -90,   331,   167,     0,   271,     0,   333, 
          0,   401,  1010,   334,   421,    98,  1118,  1226,   431,   344, 
        157,  -120,     0,   438,  -120,   440,     0,  2943,     0,     0, 
          0,  -284,  2990,  2869,     0,  2990,  2990,  2869,   358,   142, 
          0,  -120,   -44,     0,   157,   443,   444,   362,     0,     0, 
          0,   141,     0,   144,   433,     0,  1256,  1283,   126,  -288, 
          0,     0,     0,  2943,     0,   -44,   157,     0,     0,   455, 
        376,     0,     0,     0,  2990,     0,  2869,     0,     0,     0, 
          0,   375,     0,  -288,   389,     0,   -44,  -120,  2943,   460, 
          0,  2869,  2990,   445,     0,     0,     0,     0,   164,   393, 
       2869,     0,  1390,  2943,   491,     0,     0,  2943,     0,   410, 
          0,  2943,   409,     0, 
    );
    protected static $yyRindex= array(          189,
          0,     0,   403,     0,     0,   -19,     0,   486,   105,     0, 
        292,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    14,     0,     0,     0,     0,     0, 
          0,     0,     0,   463,     0,     0,     0,     0,     0,     0, 
        100,    17,     0,     0,     0,     0,     0,   512,     0,     0, 
        143,  -112,   439,  -112,     0,   502,     0,     0,     0,     0, 
          0,     0,     0,     0,  1417,     0,     0,     0,     0,     0, 
          0,     0,     0,    -6,     0,     0,   522,     0,     0,     0, 
          0,     0,     0,     0,     0,   446,     0,     0,   446,     0, 
          0,   523,  1937,  1964,   478,  1514,  1555,  1663,  1691,     0, 
          0,   550,     0,     0,  -248,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   514,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   -42,     0,     0,     0,     0,   511, 
          0,     0,     0,   -27,     0,     0,     0,     0,     0,   481, 
          0,     0,     0,   482,   221,   535,     0,     0,     0,     0, 
        689,   539,     0,   550,     0,     0,     0,  1865,  2112,  2135, 
       2224,  2289,  2371,  2376,  2399,  2404,     0,  2511,     0,  1991, 
       2074,  1815,  1840,  1894,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   320, 
        464,     0,     0,     0,     0,    36,     0,     0,   495,   266, 
          0,     0,   535,     0,   308,     0,   550,     0,     0,     0, 
          0,   320,     0,   378,     0,     0,     0,     0,     0,   -15, 
          0,   465,   -28,     0,   107,     0,     0,   550,     0,     0, 
        556,     0,   535,     0,  2099,     0,   489,   -53,     0,   -20, 
          0,     0,     0,     0,     0,     0,   535,   490,   405,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,  -122,     0,   483,     0,   548, 
          0,     0,     0,     0,  -103,     0,     0,     0,     0,     0, 
        558,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   577,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   320,     0,     0, 
          0,     0,   489,     0,   560,     0,   489,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    63,     0,   577, 
          0,   202,     0,     0,     0,   505,     0,   -20,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   191, 
        -16,     0,     0,     0,   577,     0,     0,   489,     0,     0, 
          0,     0,   560,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   -16,     0,     0,     0,     0,     0, 
          0,  2601,     0,  2533,     0,     0,     0,     0,  2795,   506, 
          0,     0,     0,   489,     0,     0,   -16,     0,     0,     0, 
          0,     0,     0,     0,   535,     0,     0,     0,     0,     0, 
          0,     0,     0,   507,     0,     0,     0,     0,   489,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,  -117,     0,     0,     0,  -117,     0,     0, 
          0,   489,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   625,     0,     0,     0,   551, 
        634,   -40,     0,   588,   555,  -110,     0,     0,     0,     0, 
       -141,  -245,     0,     0,     0,   658,   391,     0,     0,     0, 
          6,   -57,   291,     0,   300,  -280,     0,  -281,     0,  -334, 
       -230,     0,     0,     0,   604,   614,     0,   -68,   524,     0, 
          0,   423,  -203,     0,     0,  -162,     0,     0,  -195,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   276, 
          0,     0,     0,     0,   307,     0,   310,     0,     0,     0, 
        -65,     0,     0,     0,     9,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   474,     0,   546,     0, 
          0,     0,     0,   525,     0,   700,     0, 
    );
    protected static $yyTable = array(10,
        197,   224,    92,    52,    53,    54,    17,    90,    55,   215, 
         25,   157,   134,   289,   403,   120,   118,   242,   119,   224, 
        121,    38,    39,    31,    45,   339,   137,    41,    43,   151, 
         41,   231,   368,   125,   146,   126,   117,    17,    31,    51, 
         51,    51,    82,    43,   141,   163,   144,   260,   179,     1, 
        406,   146,   146,    74,   125,   359,   126,   223,   364,   389, 
        390,   287,   288,    93,    94,   360,    96,    97,    98,    99, 
        120,   118,   427,   119,   177,   121,   143,   104,   404,   135, 
         51,   384,    51,   386,   420,   421,   146,   222,   125,   216, 
        126,   157,   328,   278,   143,   231,    41,     5,   162,   122, 
        150,   144,   371,    78,    31,   155,    82,    43,   307,    43, 
         51,   168,   169,   170,   171,   172,   173,   174,   175,   176, 
        122,   178,    74,   180,   181,   182,   183,   184,   143,   352, 
        185,   186,   187,   188,   189,   190,   234,    51,   137,     9, 
        239,    17,   285,    68,    17,    17,    17,    17,    17,    17, 
        185,    17,    28,   279,   122,    78,   233,   158,   144,   306, 
        143,   206,    17,    17,    17,    17,    17,    17,   249,   366, 
        328,   318,   214,   280,   328,   426,   101,   395,    27,   224, 
         32,    84,    27,   224,   224,   224,   224,   224,   219,   224, 
         40,   135,    68,    84,    51,    17,   438,    17,    25,   185, 
        224,   224,   157,   224,   224,   224,    17,   206,   235,     9, 
        236,   396,   194,   328,    74,   399,    42,   224,   206,   430, 
         43,   135,   322,   245,   212,   244,    56,    17,   328,    17, 
         17,    56,    47,   308,    56,   224,    85,   328,   311,   309, 
        402,   310,    57,   312,    29,    57,   255,    30,   206,   367, 
         92,    92,   277,   101,   431,    90,    90,    48,    27,    27, 
         57,    73,   206,   206,    73,   224,    17,   224,   224,   442, 
         35,    36,    37,   235,   100,    84,   233,   224,   447,     2, 
        233,   233,   233,    56,    87,    90,    17,   224,    91,   319, 
        105,   131,   132,   133,    57,   146,    74,   224,   324,   142, 
        135,   135,   219,   166,   191,   195,   219,   219,   219,   219, 
        219,   219,   219,   235,   235,   235,   233,   233,   233,   193, 
        342,   196,   313,   219,   219,   219,   219,   219,   219,   198, 
        206,   353,    12,   199,   201,   135,   205,   204,   357,   358, 
        210,   144,   213,   218,   149,    12,   220,   100,   149,   149, 
        149,   149,   149,   149,   149,   230,   219,   135,   219,   238, 
        135,   240,   241,   243,    17,   149,   149,   149,   149,   149, 
        149,   247,   248,   128,   127,   123,   124,    51,   206,   225, 
        252,   397,   398,   253,   129,   130,   254,   439,   256,   258, 
        219,   219,   259,   282,   128,   127,   123,   124,   149,   284, 
        149,   290,   292,   302,   315,   129,   130,   317,    12,   320, 
        325,   326,   321,   330,    17,    17,    17,   331,   333,   334, 
        206,   332,   341,    51,    17,   343,   344,   355,   128,   127, 
        123,   124,   149,   149,    17,   349,   356,   361,   443,   129, 
        130,    31,   246,   362,    17,    31,    31,    31,    31,    31, 
         31,    31,   224,   224,   224,   369,   363,   372,   375,   373, 
        376,   377,    31,    31,    31,    31,    31,    31,     2,     2, 
          2,     2,     2,     2,     2,     2,   380,   382,   385,   387, 
        400,   401,   224,   407,   408,   390,   409,   389,     2,     2, 
          2,   415,     2,     5,   428,    31,   418,    31,   429,   435, 
        441,    12,   444,   445,    17,    17,    17,    17,    17,    17, 
         17,    17,    17,   437,    17,    17,    17,   446,    17,    17, 
         17,    13,    14,    15,    16,    17,    18,    19,    20,    31, 
         31,   450,   452,   454,    13,    14,    15,   224,    17,    18, 
         19,    20,   224,   224,   224,   224,   224,   224,   224,   224, 
        224,    11,   145,   224,   224,    66,   224,   224,   224,   171, 
         14,    29,    71,   171,   171,   171,   171,   171,    27,   171, 
        179,   145,   227,   143,   183,   141,     7,   219,   224,   233, 
        171,   171,   171,   171,   171,   171,   213,   145,    40,    39, 
        213,   213,   213,   213,   213,   226,   213,    13,    14,    15, 
        224,    17,    18,    19,    20,    49,    56,   213,   213,   213, 
        213,   213,   213,    90,   141,   171,   145,    76,   141,   149, 
         13,    14,    15,    16,    17,    18,    19,    20,   107,    51, 
        118,   120,    26,   120,   118,   202,   119,   240,   121,    22, 
        148,    89,   213,   147,   286,   370,    50,   171,   171,   203, 
        381,   125,   106,   126,   117,    49,   192,   240,   240,   240, 
        240,   240,   240,   240,   240,   219,   219,   219,   219,   219, 
        219,   219,   219,   219,   213,   213,   219,   219,   237,   219, 
        219,   219,     5,     5,     5,     5,     5,     5,     5,     5, 
         13,    14,    15,   224,    17,    18,    19,    20,   304,   436, 
        414,   413,     5,     5,     5,    12,   211,   149,   149,   149, 
        149,   149,   149,   149,   149,   149,    31,   122,   149,   149, 
        221,   149,   149,   149,    38,   215,     0,     0,     0,   215, 
        215,   215,   215,   215,     0,   215,     0,     0,     0,   347, 
          0,     0,     0,     0,     0,     0,   215,   215,   215,   215, 
        215,   215,   107,     0,     0,     0,   165,   120,   118,     0, 
        119,     0,   121,     0,     0,     7,     7,     7,     7,     7, 
          7,     7,     7,     0,   107,   125,   106,   126,   117,   120, 
        118,   215,   119,     0,   121,     7,     7,     7,     0,     0, 
          0,     0,     0,     0,     0,   203,     0,   125,   106,   126, 
        117,     0,     0,     0,    31,    31,    31,    31,    31,    31, 
         31,    31,    31,   215,   215,    31,    31,     0,    31,    31, 
         31,     0,   107,     0,     0,     0,     0,   120,   118,   202, 
        119,     0,   121,     0,   171,     0,     0,     0,     0,     0, 
          0,   122,     0,     0,     0,   125,   106,   126,   117,     0, 
        107,     0,     0,     0,     0,   120,   118,     0,   119,     0, 
        121,   213,     0,   122,     0,     0,     0,     0,     0,     0, 
          0,     0,   303,   125,   106,   126,   117,     0,     0,     0, 
          0,   107,     0,     0,     0,   348,   120,   118,     0,   119, 
          0,   121,     0,     0,    13,    14,    15,   224,    17,    18, 
         19,    20,     0,   115,   125,   106,   126,   117,     0,     0, 
          0,   122,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   171,   171,   171,   171,   171,   171,   171,   171, 
        171,     0,    17,   171,   171,     0,   171,   171,   171,   122, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   213, 
        213,   213,   213,   213,   213,   213,   213,   213,     0,     0, 
        213,   213,     0,   213,   213,   213,     0,     0,     0,     0, 
        122,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        350,     0,     0,     0,   354,     0,     0,     0,     0,     0, 
          0,   128,   127,   123,   124,   108,   109,   110,   111,   112, 
        215,     0,   129,   130,     0,   113,   114,   116,     0,   107, 
          0,     0,     0,     0,   120,   118,     0,   119,     0,   121, 
          0,     0,     0,     0,     0,   388,     0,   115,     0,     0, 
          0,   351,   125,   106,   126,   117,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   107,     0,     0,   115, 
        374,   120,   118,     0,   119,     0,   121,     0,     0,     0, 
          0,   425,     0,     0,     0,     0,     0,     0,     0,   125, 
        106,   126,   117,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   440,     0,   215,   215, 
        215,   215,   215,   215,   215,   215,   215,   115,   122,   215, 
        215,   449,   215,   215,   215,   451,     0,     0,     0,   453, 
          0,     0,     0,     0,     0,   128,   127,   123,   124,   108, 
        109,   110,   111,   112,     0,   115,   129,   130,     0,   113, 
        114,   116,     0,     0,     0,   122,     0,   128,   127,   123, 
        124,   108,   109,   110,   111,   112,     0,     0,   129,   130, 
          0,   113,   114,   116,   107,     0,   115,     0,   378,   120, 
        118,     0,   119,     0,   121,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   125,   106,   126, 
        117,     0,     0,     0,     0,   128,   127,   123,   124,   108, 
        109,   110,   111,   112,     0,     0,   129,   130,     0,   113, 
        114,   116,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   128,   127,   123,   124,   108,   109,   110, 
        111,   112,     0,     0,   129,   130,     0,   113,   114,   116, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   122,   128,   127,   123,   124,   108,   109, 
        110,   111,   112,     0,     0,   129,   130,     0,   113,   114, 
        116,     0,   107,     0,     0,     0,   379,   120,   118,     0, 
        119,     0,   121,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   115,   125,   106,   126,   117,     0, 
          0,     0,   107,     0,     0,     0,   416,   120,   118,     0, 
        119,     0,   121,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   125,   106,   126,   117,   107, 
          0,   115,     0,   417,   120,   118,     0,   119,     0,   121, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   125,   106,   126,   117,     0,     0,     0,     0, 
          0,   122,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   128,   127,   123,   124,   108,   109,   110,   111, 
        112,   122,     0,   129,   130,     0,   113,   114,   116,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   122,   128, 
        127,   123,   124,   108,   109,   110,   111,   112,     0,     0, 
        129,   130,     0,   113,   114,   116,   107,     0,     0,   115, 
          0,   120,   118,     0,   119,     0,   121,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   448,     0,   125, 
        106,   126,   117,   171,     0,     0,     0,   171,   171,   171, 
          0,   171,     0,   171,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   107,   171,     0,   171,   171, 
        120,   118,     0,   119,     0,   121,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   125,   106, 
        126,   117,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   122,     0,   128,   127,   123, 
        124,   108,   109,   110,   111,   112,     0,     0,   129,   130, 
          0,   113,   114,   116,     0,     0,     0,   115,     0,     0, 
          0,     0,   171,     0,     0,     0,     0,     0,     0,     0, 
        205,     0,     0,     0,   205,   205,   205,   205,   205,     0, 
        205,     0,     0,     0,   122,     0,     0,   115,     0,     0, 
          0,   205,   205,     0,   205,     0,   205,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   206,     0,     0,   115,   206,   206,   206,   206,   206, 
          0,   206,     0,     0,     0,     0,   205,     0,     0,     0, 
          0,     0,   206,   206,     0,   206,     0,   206,     0,     0, 
          0,     0,     0,     0,     0,   128,   127,   123,   124,   108, 
        109,   110,   111,   112,     0,     0,   129,   130,   205,   113, 
        114,   116,     0,     0,     0,     0,     0,   206,     0,     0, 
          0,     0,     0,     0,     0,   128,   127,   123,   124,   108, 
        109,   110,   111,   112,     0,     0,   129,   130,     0,   113, 
        114,   116,     0,     0,     0,     0,     0,     0,     0,   206, 
          0,     0,   128,   127,   123,   124,   108,   109,   110,   111, 
        112,     0,     0,   129,   130,     0,   113,   114,   116,   209, 
          0,   115,     0,   209,   209,   209,   209,   209,     0,   209, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        209,   209,     0,   209,     0,   209,     0,   210,   171,     0, 
          0,   210,   210,   210,   210,   210,     0,   210,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   210,   210, 
        115,   210,     0,   210,     0,   209,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   210,     0,     0,     0,   209,     0,   128, 
        127,   123,   124,   108,   109,   110,   111,   112,     0,     0, 
        129,   130,     0,   113,   114,   116,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   210,   171,   171,   171,   171, 
        171,   171,   171,   171,   171,   205,    17,   171,   171,     0, 
        171,   171,   171,     0,     0,     0,     0,     0,   128,   127, 
        123,   124,   108,   109,   110,   111,   112,     0,     0,   129, 
        130,   201,   113,   114,   116,   201,   201,   201,   201,   201, 
          0,   201,     0,     0,     0,     0,   206,     0,     0,     0, 
          0,     0,   201,   201,     0,   201,   202,   201,     0,     0, 
        202,   202,   202,   202,   202,     0,   202,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   202,   202,     0, 
        202,   186,   202,     0,     0,   186,     0,   201,   186,     0, 
          0,     0,     0,     0,     0,     0,     0,   205,   205,   205, 
        205,   205,   186,   186,     0,   186,     0,   205,   205,   205, 
        204,     0,   202,     0,   204,   204,   204,   204,   204,   201, 
        204,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   204,   204,     0,   204,     0,   204,   186,   206,   206, 
        206,   206,   206,     0,   202,     0,     0,     0,   206,   206, 
        206,     0,     0,   207,   209,     0,     0,   207,     0,   207, 
        207,   207,     0,     0,     0,     0,   204,     0,     0,   186, 
          0,     0,     0,     0,   207,   207,   120,   207,     0,   207, 
        208,   121,   210,     0,   208,     0,   208,   208,   208,     0, 
          0,     0,     0,     0,   125,     0,   126,     0,   204,     0, 
          0,   208,   208,     0,   208,     0,   208,   199,     0,   207, 
          0,   199,     0,   199,   199,   199,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   199,   199, 
          0,   199,     0,   199,     0,     0,   208,     0,     0,     0, 
          0,   207,     0,     0,     0,     0,   209,   209,   209,   209, 
        209,     0,     0,     0,     0,     0,   209,   209,   209,     0, 
        122,     0,     0,   199,     0,     0,     0,     0,   208,     0, 
          0,     0,     0,     0,   210,   210,   210,   210,   210,     0, 
          0,     0,     0,     0,   210,   210,   210,     0,     0,     0, 
        200,     0,     0,     0,   200,   199,   200,   200,   200,     0, 
          0,     0,     0,     0,     0,     0,   201,     0,     0,     0, 
          0,   200,   200,     0,   200,   167,   200,     0,     0,   167, 
          0,     0,   167,     0,     0,     0,     0,     0,   203,     0, 
          0,   202,   203,     0,     0,   203,   167,   167,     0,   167, 
          0,   167,     0,     0,     0,     0,   200,     0,     0,   203, 
        203,   187,   203,     0,     0,   187,   186,     0,   187,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   167,   187,   187,     0,   187,     0,     0,   200,     0, 
          0,     0,     0,     0,   203,   204,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   201,   201, 
        201,   201,   201,   167,     0,     0,     0,   187,   201,   201, 
        201,     0,     0,     0,     0,     0,   203,     0,     0,     0, 
          0,     0,     0,   202,   202,   202,   202,   202,   207,     0, 
          0,     0,     0,   202,   202,   202,     0,     0,     0,   187, 
        188,     0,     0,     0,   188,     0,     0,   188,   186,   186, 
        186,   186,   186,     0,     0,   208,     0,     0,   186,   186, 
        186,   188,   188,     0,   188,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   204,   204,   204, 
        204,   204,   199,     0,     0,     0,     0,   204,   204,   204, 
          0,     0,     0,     0,     0,     0,   188,     0,     0,     0, 
          0,     0,     0,     0,     0,   189,     0,     0,     0,   189, 
          0,     0,   189,     0,     0,     0,     0,     0,     0,     0, 
        207,   207,   207,   207,   207,     0,   189,   189,   188,   189, 
        207,   207,   207,     0,   128,   127,   123,   124,     0,     0, 
          0,     0,     0,     0,     0,   129,   130,   208,   208,   208, 
        208,   208,     0,     0,     0,     0,     0,   208,   208,   208, 
          0,   189,     0,     0,     0,   200,     0,     0,     0,     0, 
          0,     0,     0,     0,   199,   199,   199,   199,   199,     0, 
          0,     0,     0,     0,   199,   199,   199,   190,     0,     0, 
        167,   190,   191,   189,   190,     0,   191,     0,     0,   191, 
          0,     0,     0,   203,     0,     0,     0,     0,   190,   190, 
          0,   190,     0,   191,   191,   168,   191,     0,     0,   168, 
        169,     0,   168,     0,   169,     0,   187,   169,     0,     0, 
          0,     0,     0,     0,     0,     0,   168,   168,     0,   168, 
          0,   169,   169,   190,   169,     0,     0,     0,   191,     0, 
          0,     0,     0,     0,     0,     0,     0,   200,   200,   200, 
        200,   200,     0,     0,     0,     0,     0,   200,   200,   200, 
          0,   168,     0,     0,     0,   190,   169,     0,     0,     0, 
        191,     0,   167,   167,   167,   167,   167,     0,     0,     0, 
          0,     0,   167,   167,   167,   203,   203,   203,   203,   203, 
          0,     0,     0,   168,     0,   203,   203,   203,   169,     0, 
          0,     0,     0,     0,     0,   188,     0,     0,   187,   187, 
        187,   187,   187,     0,     0,     0,     0,   192,   187,   187, 
        187,   192,     0,     0,   192,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   133,     0,     0,   192,   192, 
          0,   192,   133,     0,     0,   133,     0,   133,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   133,     0,     0,     0,     0,     0,     0,     0,     0, 
        189,     0,     0,   192,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   133,     0,     0,     0,   188,   188,   188, 
        188,   188,     0,   137,     0,   192,     0,   188,   188,   188, 
        137,     0,     0,   137,     0,   137,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   133,   133,   137, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   190,     0,     0,     0,     0,   191,     0,     0, 
          0,   137,   189,   189,   189,   189,   189,     0,     0,     0, 
          0,     0,   189,   189,   189,     0,     0,     0,     0,     0, 
        168,     0,     0,     0,     0,   169,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   137,   137,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   190,   190,   190,   190,   190,   191, 
        191,   191,   191,   191,   190,   190,   190,     0,     0,   191, 
        191,   191,   133,   133,   133,   133,   133,     0,     0,     0, 
          0,     0,   168,   168,   168,   168,   168,   169,   169,   169, 
        169,   169,   168,   168,   168,     0,     0,   169,   169,   169, 
          0,     0,   192,     0,     0,     0,     0,   128,     0,     0, 
          0,     0,     0,     0,   128,     0,     0,   128,     0,   128, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   128,     0,     0,     0,     0,     0,     0, 
        137,   137,   137,   137,   137,     0,     0,     0,     0,     0, 
          0,     0,   133,   133,   133,   133,     0,   133,   133,     0, 
          0,     0,     0,     0,     0,   128,     0,     0,     0,     0, 
          0,     0,   133,   133,   133,   133,     0,   133,   133,     0, 
          0,    61,   133,   133,   133,   133,   133,     0,    72,     0, 
          0,    58,     0,    59,   192,   192,   192,   192,   192,   128, 
        128,     0,     0,     0,   192,   192,   192,   272,     0,     0, 
          0,     0,     0,     0,   133,   133,     0,     0,     0,     0, 
        137,   137,   137,   137,     0,     0,   137,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    60, 
        137,   137,   137,   137,     0,   137,   137,     0,     0,     0, 
        137,   137,   137,   137,   137,    61,     0,     0,     0,     0, 
          0,     0,    72,     0,     0,    58,     0,    59,    61,     0, 
          0,   327,     0,     0,    62,    72,     0,     0,    58,     0, 
         59,   272,   137,   137,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   149,    61,     0,     0,     0,     0,     0, 
          0,    72,    61,     0,    58,     0,    59,     0,     0,    72, 
          0,     0,    58,    60,    59,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    60,     0,     0,     0, 
          0,     0,     0,     0,   128,   128,   128,   128,   128,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    62,     0, 
          0,     0,    60,     0,     0,     0,     0,     0,     0,     0, 
         60,    62,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    62,     0,     0, 
          0,     0,     0,     0,     0,    62,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    92,    66, 
         67,    68,    69,     0,   128,   128,   128,   128,     0,     0, 
        128,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   128,   128,   128,   128,     0,   128, 
        128,     0,     0,     0,   128,     0,   128,   128,   128,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   128,   128,     0,     0, 
          0,     0,    92,    66,    67,    68,    69,     0,    70,   261, 
        262,   263,     0,     0,    71,    92,    66,    67,    68,    69, 
          0,     0,     0,     0,     0,     0,     0,     0,   264,   265, 
        266,   267,     0,   268,   269,     0,     0,     0,   270,     0, 
        271,    65,    66,    67,    68,    69,     0,     0,     0,    92, 
         66,    67,    68,    69,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         63,    64,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    70,   261,   262,   263,     0,     0,    71,     0, 
          0,     0,     0,     0,     0,    70,     0,     0,     0,     0, 
          0,    71,   264,   265,   266,   267,     0,   268,   269,     0, 
          0,     0,   270,     0,   271,     0,     0,     0,     0,     0, 
          0,    70,     0,     0,     0,     0,     0,    71,     0,    70, 
          0,     0,     0,     0,     0,    71,     0,     0,     0,     0, 
          0,     0,     0,     0,    63,    64,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    63,    64,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    63,    64,     0,     0,     0,     0,     0, 
          0,    63,    64, 
    );
    protected static $yyCheck = array(4,
        142,    44,   125,    44,    45,    46,    60,   125,    42,   260, 
        123,   260,    63,   259,    59,    42,    43,   213,    45,    62, 
         47,   125,    27,    44,    40,   306,    84,    32,    44,    95, 
         59,    59,   123,    60,    41,    62,    63,    91,    59,    44, 
         45,    46,    59,    59,    85,   103,    87,   243,   117,   303, 
        385,    58,    59,    48,    60,   330,    62,   199,   340,   344, 
        345,   257,   258,    58,    59,   340,    61,    62,    63,    64, 
         42,    43,   407,    45,   115,    47,    41,    72,   123,    84, 
         85,   362,    87,   365,   373,   374,    93,   198,    60,   340, 
         62,   340,   296,   260,    59,   123,   125,   304,   103,   126, 
         95,   142,   348,    41,   125,   100,   123,   123,    40,   125, 
        115,   106,   107,   108,   109,   110,   111,   112,   113,   114, 
        126,   116,   117,   118,   119,   120,   121,   122,    93,   325, 
        125,   126,   127,   128,   129,   130,   202,   142,   196,   260, 
        209,    37,   253,    44,    40,    41,    42,    43,    44,    45, 
         44,    47,    59,   320,   126,    93,   260,    46,   199,    91, 
        125,   156,    58,    59,    60,    61,    62,    63,   226,   260, 
        374,   282,   164,   340,   378,   406,    40,   373,    46,    37, 
         64,    60,    46,    41,    42,    43,    44,    45,   193,    47, 
        260,   196,    93,    60,   199,    91,   427,    93,   311,    93, 
         58,    59,    91,    61,    62,    63,   260,   202,   203,   260, 
        205,   374,    91,   417,   209,   378,    93,   260,   213,   415, 
         44,   226,   291,   218,    91,   217,   260,   123,   432,   125, 
        126,    41,    46,    37,    44,    93,   310,   441,    42,    43, 
        382,    45,    41,    47,   283,    44,   238,   286,   243,   340, 
        373,   374,    40,    40,   417,   373,   374,    40,    46,    46, 
         59,    41,   257,   258,    44,   123,   320,   125,   126,   432, 
        300,   301,   302,   260,    61,    60,   260,   320,   441,    91, 
        300,   301,   302,    93,   310,    46,   340,   330,    59,   284, 
        410,    41,    41,    44,    93,   123,   291,   340,   293,   311, 
        305,   306,    37,   300,   260,    62,    41,    42,    43,    44, 
         45,    46,    47,   300,   301,   302,   300,   301,   302,   310, 
        315,    44,   126,    58,    59,    60,    61,    62,    63,   123, 
        325,   326,    91,    44,   123,   340,    44,    93,   333,   334, 
        260,   382,    40,    58,    37,    91,    93,    61,    41,    42, 
         43,    44,    45,    46,    47,   260,    91,   362,    93,    41, 
        365,    40,    93,    40,   260,    58,    59,    60,    61,    62, 
         63,   123,   260,   400,   401,   402,   403,   382,   373,   125, 
        125,   376,   377,    59,   411,   412,    44,   428,    93,   123, 
        125,   126,    41,   123,   400,   401,   402,   403,    91,    40, 
         93,    41,   123,   125,    61,   411,   412,   123,    91,    41, 
         40,    40,   125,    40,   310,   311,   312,    59,    40,    40, 
        415,    59,    40,   428,   320,    59,   260,   361,   400,   401, 
        402,   403,   125,   126,   330,    59,   340,    41,   433,   411, 
        412,    37,   125,    44,   340,    41,    42,    43,    44,    45, 
         46,    47,   310,   311,   312,   125,    93,   125,   125,    59, 
         40,   364,    58,    59,    60,    61,    62,    63,   280,   281, 
        282,   283,   284,   285,   286,   287,    46,   321,    41,    40, 
        123,   340,   340,    41,    41,   345,   125,   344,   300,   301, 
        302,    59,   304,    91,    40,    91,   371,    93,   123,   125, 
         41,    91,    58,   340,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,   125,   410,   411,   412,   125,   414,   415, 
        416,   280,   281,   282,   283,   284,   285,   286,   287,   125, 
        126,    41,   123,   125,   280,   281,   282,   283,   284,   285, 
        286,   287,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   260,    41,   411,   412,    93,   414,   415,   416,    37, 
         59,   123,    41,    41,    42,    43,    44,    45,   123,    47, 
         93,    58,    62,    93,    93,    41,    91,   312,    40,   260, 
         58,    59,    60,    61,    62,    63,    37,    93,   125,   125, 
         41,    42,    43,    44,    45,    40,    47,   280,   281,   282, 
        283,   284,   285,   286,   287,   123,    59,    58,    59,    60, 
         61,    62,    63,   125,   125,    93,    59,    41,    59,   312, 
        280,   281,   282,   283,   284,   285,   286,   287,    37,   125, 
        125,   125,     8,    42,    43,    44,    45,   260,    47,     6, 
         90,    54,    93,    89,   254,   346,    43,   125,   126,    58, 
        360,    60,    61,    62,    63,    42,   133,   280,   281,   282, 
        283,   284,   285,   286,   287,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   125,   126,   411,   412,   205,   414, 
        415,   416,   280,   281,   282,   283,   284,   285,   286,   287, 
        280,   281,   282,   283,   284,   285,   286,   287,   276,   424, 
        394,   392,   300,   301,   302,    91,   161,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   312,   126,   411,   412, 
        196,   414,   415,   416,    25,    37,    -1,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,   125, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61, 
         62,    63,    37,    -1,    -1,    -1,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,   280,   281,   282,   283,   284, 
        285,   286,   287,    -1,    37,    60,    61,    62,    63,    42, 
         43,    93,    45,    -1,    47,   300,   301,   302,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    -1,    60,    61,    62, 
         63,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,   125,   126,   411,   412,    -1,   414,   415, 
        416,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44, 
         45,    -1,    47,    -1,   312,    -1,    -1,    -1,    -1,    -1, 
         -1,   126,    -1,    -1,    -1,    60,    61,    62,    63,    -1, 
         37,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,    -1, 
         47,   312,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    59,    60,    61,    62,    63,    -1,    -1,    -1, 
         -1,    37,    -1,    -1,    -1,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,   280,   281,   282,   283,   284,   285, 
        286,   287,    -1,   312,    60,    61,    62,    63,    -1,    -1, 
         -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,   410,   411,   412,    -1,   414,   415,   416,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,    -1,    -1,    -1,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        323,    -1,    -1,    -1,   327,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
        312,    -1,   411,   412,    -1,   414,   415,   416,    -1,    37, 
         -1,    -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,   368,    -1,   312,    -1,    -1, 
         -1,    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,   312, 
         41,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,   404,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   429,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   312,   126,   411, 
        412,   444,   414,   415,   416,   448,    -1,    -1,    -1,   452, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,   312,   411,   412,    -1,   414, 
        415,   416,    -1,    -1,    -1,   126,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,    37,    -1,   312,    -1,    41,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   126,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,    -1,    37,    -1,    -1,    -1,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   312,    60,    61,    62,    63,    -1, 
         -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,    37, 
         -1,   312,    -1,    41,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   126,    -1,   411,   412,    -1,   414,   415,   416,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,    37,    -1,    -1,   312, 
         -1,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,    60, 
         61,    62,    63,    37,    -1,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    37,    60,    -1,    62,    63, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   126,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,    -1,    -1,    -1,   312,    -1,    -1, 
         -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         37,    -1,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,   126,    -1,    -1,   312,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    37,    -1,    -1,   312,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,   125,   414, 
        415,   416,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,    37, 
         -1,   312,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,    37,   312,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
        312,    61,    -1,    63,    -1,    93,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    -1,    -1,    -1,   125,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   125,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   312,   410,   411,   412,    -1, 
        414,   415,   416,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    37,   414,   415,   416,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    37,    63,    -1,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    37,    63,    -1,    -1,    41,    -1,    93,    44,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    58,    59,    -1,    61,    -1,   414,   415,   416, 
         37,    -1,    93,    -1,    41,    42,    43,    44,    45,   125, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    93,   404,   405, 
        406,   407,   408,    -1,   125,    -1,    -1,    -1,   414,   415, 
        416,    -1,    -1,    37,   312,    -1,    -1,    41,    -1,    43, 
         44,    45,    -1,    -1,    -1,    -1,    93,    -1,    -1,   125, 
         -1,    -1,    -1,    -1,    58,    59,    42,    61,    -1,    63, 
         37,    47,   312,    -1,    41,    -1,    43,    44,    45,    -1, 
         -1,    -1,    -1,    -1,    60,    -1,    62,    -1,   125,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    37,    -1,    93, 
         -1,    41,    -1,    43,    44,    45,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,   125,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,    -1,   414,   415,   416,    -1, 
        126,    -1,    -1,    93,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,    -1,   414,   415,   416,    -1,    -1,    -1, 
         37,    -1,    -1,    -1,    41,   125,    43,    44,    45,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    37,    63,    -1,    -1,    41, 
         -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    37,    -1, 
         -1,   312,    41,    -1,    -1,    44,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    93,    -1,    -1,    58, 
         59,    37,    61,    -1,    -1,    41,   312,    -1,    44,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    58,    59,    -1,    61,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,    93,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,   125,    -1,    -1,    -1,    93,   414,   415, 
        416,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,   312,    -1, 
         -1,    -1,    -1,   414,   415,   416,    -1,    -1,    -1,   125, 
         37,    -1,    -1,    -1,    41,    -1,    -1,    44,   404,   405, 
        406,   407,   408,    -1,    -1,   312,    -1,    -1,   414,   415, 
        416,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,   312,    -1,    -1,    -1,    -1,   414,   415,   416, 
         -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41, 
         -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    58,    59,   125,    61, 
        414,   415,   416,    -1,   400,   401,   402,   403,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   411,   412,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,    -1,   414,   415,   416, 
         -1,    93,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,    -1,   414,   415,   416,    37,    -1,    -1, 
        312,    41,    37,   125,    44,    -1,    41,    -1,    -1,    44, 
         -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    58,    59,    37,    61,    -1,    -1,    41, 
         37,    -1,    44,    -1,    41,    -1,   312,    44,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    58,    59,    93,    61,    -1,    -1,    -1,    93,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,    -1,   414,   415,   416, 
         -1,    93,    -1,    -1,    -1,   125,    93,    -1,    -1,    -1, 
        125,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,    -1,   414,   415,   416,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,   125,    -1,   414,   415,   416,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,    37,   414,   415, 
        416,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    58,    59, 
         -1,    61,    40,    -1,    -1,    43,    -1,    45,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        312,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    91,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    33,    -1,   125,    -1,   414,   415,   416, 
         40,    -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,    59, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   312,    -1,    -1,    -1,    -1,   312,    -1,    -1, 
         -1,    91,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,    -1,   414,   415,   416,    -1,    -1,    -1,    -1,    -1, 
        312,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,   404, 
        405,   406,   407,   408,   414,   415,   416,    -1,    -1,   414, 
        415,   416,   260,   261,   262,   263,   264,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,   404,   405,   406, 
        407,   408,   414,   415,   416,    -1,    -1,   414,   415,   416, 
         -1,    -1,   312,    -1,    -1,    -1,    -1,    33,    -1,    -1, 
         -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    45, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1, 
        260,   261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   340,   341,   342,   343,    -1,   345,   346,    -1, 
         -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1, 
         -1,    -1,   360,   361,   362,   363,    -1,   365,   366,    -1, 
         -1,    33,   370,   371,   372,   373,   374,    -1,    40,    -1, 
         -1,    43,    -1,    45,   404,   405,   406,   407,   408,   125, 
        126,    -1,    -1,    -1,   414,   415,   416,    59,    -1,    -1, 
         -1,    -1,    -1,    -1,   402,   403,    -1,    -1,    -1,    -1, 
        340,   341,   342,   343,    -1,    -1,   346,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91, 
        360,   361,   362,   363,    -1,   365,   366,    -1,    -1,    -1, 
        370,   371,   372,   373,   374,    33,    -1,    -1,    -1,    -1, 
         -1,    -1,    40,    -1,    -1,    43,    -1,    45,    33,    -1, 
         -1,   123,    -1,    -1,   126,    40,    -1,    -1,    43,    -1, 
         45,    59,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    33,    -1,    -1,    -1,    -1,    -1, 
         -1,    40,    33,    -1,    43,    -1,    45,    -1,    -1,    40, 
         -1,    -1,    43,    91,    45,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   260,   261,   262,   263,   264,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1, 
         -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         91,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,   261, 
        262,   263,   264,    -1,   340,   341,   342,   343,    -1,    -1, 
        346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   360,   361,   362,   363,    -1,   365, 
        366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   402,   403,    -1,    -1, 
         -1,    -1,   260,   261,   262,   263,   264,    -1,   340,   341, 
        342,   343,    -1,    -1,   346,   260,   261,   262,   263,   264, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361, 
        362,   363,    -1,   365,   366,    -1,    -1,    -1,   370,    -1, 
        372,   260,   261,   262,   263,   264,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   340,   341,   342,   343,    -1,    -1,   346,    -1, 
         -1,    -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,    -1, 
         -1,   346,   360,   361,   362,   363,    -1,   365,   366,    -1, 
         -1,    -1,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1, 
         -1,   340,    -1,    -1,    -1,    -1,    -1,   346,    -1,   340, 
         -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   402,   403,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   402,   403,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_DOTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 
      'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 
      'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 'T_CONTINUE', NULL, NULL, 
      NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      NULL, 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 
      'T_BOOLEAN_OR', 'T_BOOLEAN_AND', 'T_CONCAT_EQUAL', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 136 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 148 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 148 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 159 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 160 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 164 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 10:  #line 164 "grammar/xp.jay"
    {
      $yyVals[-4+$yyTop]->position= $p;
      $yyVals[-4+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 11:  #line 172 "grammar/xp.jay"
    { $yyVal= new ImportNode(); } break;

    case 12:  #line 173 "grammar/xp.jay"
    { $yyVal= new StaticImportNode(); } break;

    case 13:  #line 174 "grammar/xp.jay"
    { $yyVal= new NativeImportNode(); } break;

    case 16:  #line 180 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 18:  #line 185 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 19:  #line 191 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 20:  #line 191 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 21:  #line 200 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 22:  #line 200 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 23:  #line 209 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 24:  #line 209 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 25:  #line 220 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 26:  #line 221 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 27:  #line 225 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 28:  #line 226 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 29:  #line 230 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 30:  #line 231 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 31:  #line 235 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 236 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 33:  #line 240 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 34:  #line 241 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 35:  #line 245 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 36:  #line 246 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 247 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 38:  #line 251 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 39:  #line 252 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 40:  #line 253 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 41:  #line 257 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 42:  #line 258 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 43:  #line 262 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 44:  #line 262 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 45:  #line 265 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 46:  #line 265 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 47:  #line 275 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 48:  #line 282 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->modifiers= $yyVals[-5+$yyTop][0];
      $yyVals[-3+$yyTop]->annotations= $yyVals[-5+$yyTop][1];
      $yyVals[-3+$yyTop]->type= $yyVals[-4+$yyTop];
      $yyVals[-3+$yyTop]->handlers= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 49:  #line 292 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 50:  #line 293 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[-3+$yyTop], 'arguments' => $yyVals[-1+$yyTop]))); } break;

    case 51:  #line 297 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 52:  #line 298 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 53:  #line 302 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 54:  #line 303 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 55:  #line 304 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 56:  #line 308 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 57:  #line 309 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 58:  #line 315 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 59:  #line 315 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 60:  #line 325 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 61:  #line 325 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 62:  #line 333 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 63:  #line 333 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 64:  #line 346 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 65:  #line 347 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 66:  #line 351 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 67:  #line 352 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 68:  #line 356 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 69:  #line 360 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVals[-1+$yyTop] && $yyVal->parameters= array('default' => $yyVals[-1+$yyTop]);
    } break;

    case 70:  #line 365 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 71:  #line 373 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 72:  #line 374 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 73:  #line 378 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 74:  #line 382 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 75:  #line 383 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 76:  #line 387 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 77:  #line 388 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 78:  #line 392 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 79:  #line 393 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 80:  #line 397 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 81:  #line 398 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-3+$yyTop], 'vararg' => TRUE); } break;

    case 82:  #line 402 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 83:  #line 403 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 90:  #line 422 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 92:  #line 427 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 93:  #line 428 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 94:  #line 432 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 95:  #line 432 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 96:  #line 435 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 97:  #line 435 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 98:  #line 440 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 99:  #line 440 "grammar/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= array();
        foreach ($yyVals[-6+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->initialization[]= $stmt;
        }
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= array();
        foreach ($yyVals[-2+$yyTop] as $stmt) {
          $stmt->free= TRUE;
          $yyVals[-9+$yyTop]->loop[]= $stmt;
        }
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 100:  #line 458 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 101:  #line 458 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 102:  #line 463 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 103:  #line 463 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 104:  #line 467 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 105:  #line 467 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 106:  #line 471 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 107:  #line 471 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 108:  #line 475 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 109:  #line 475 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 110:  #line 480 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 112:  #line 481 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 114:  #line 482 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 115:  #line 482 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 116:  #line 485 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->free= TRUE; } break;

    case 118:  #line 490 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 120:  #line 495 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 121:  #line 496 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 122:  #line 500 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 123:  #line 500 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 124:  #line 504 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 125:  #line 504 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 126:  #line 510 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 127:  #line 511 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 128:  #line 515 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 129:  #line 516 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 130:  #line 516 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 131:  #line 521 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 132:  #line 522 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 133:  #line 526 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 134:  #line 527 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 135:  #line 531 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 136:  #line 531 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 137:  #line 539 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 139:  #line 544 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 140:  #line 544 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 141:  #line 552 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 143:  #line 557 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 144:  #line 558 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 145:  #line 562 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 147:  #line 567 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 148:  #line 573 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 149:  #line 581 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ConstantNode()); $yyVal->value= $yyVals[0+$yyTop];
    } break;

    case 150:  #line 584 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 151:  #line 587 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new InvocationNode(array('name' => $yyVals[-3+$yyTop]))); 
      $yyVal->parameters= $yyVals[-1+$yyTop];
    } break;

    case 153:  #line 595 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 154:  #line 595 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 155:  #line 598 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 156:  #line 598 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 157:  #line 603 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 158:  #line 603 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyVals[-1+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 159:  #line 608 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 160:  #line 608 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 161:  #line 614 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 162:  #line 615 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 163:  #line 618 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 164:  #line 621 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 165:  #line 624 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 166:  #line 627 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 167:  #line 631 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 168:  #line 637 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 169:  #line 643 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 170:  #line 649 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 171:  #line 657 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ConstantNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 172:  #line 658 "grammar/xp.jay"
    { /* XXX class literal */ } break;

    case 173:  #line 659 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 174:  #line 659 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->position= $p; $yyVals[-1+$yyTop]->type= NULL; $yyVal= $yyVals[-1+$yyTop]; } break;

    case 175:  #line 660 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 176:  #line 661 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 177:  #line 662 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 178:  #line 663 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 179:  #line 667 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ArrayNode(array('values' => NULL)));
    } break;

    case 180:  #line 670 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode(array('elements' => NULL)));
    } break;

    case 181:  #line 673 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ArrayNode(array('values' => $yyVals[0+$yyTop])));
    } break;

    case 182:  #line 676 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode(array('elements' => $yyVals[0+$yyTop])));
    } break;

    case 183:  #line 682 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 184:  #line 683 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 185:  #line 687 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 186:  #line 691 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 692 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 188:  #line 693 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 189:  #line 694 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 190:  #line 695 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 191:  #line 696 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 192:  #line 697 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 193:  #line 701 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 194:  #line 702 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 195:  #line 703 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 196:  #line 704 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 197:  #line 705 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 198:  #line 706 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 199:  #line 710 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 200:  #line 711 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 201:  #line 712 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 202:  #line 713 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 203:  #line 714 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 204:  #line 715 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 205:  #line 719 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 206:  #line 720 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 207:  #line 721 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 208:  #line 722 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 209:  #line 723 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 210:  #line 724 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 211:  #line 728 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 212:  #line 729 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 213:  #line 734 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 216:  #line 740 "grammar/xp.jay"
    {  $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 217:  #line 744 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 218:  #line 744 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 219:  #line 747 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); 
    } break;

    case 220:  #line 750 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 221:  #line 750 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 224:  #line 764 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 225:  #line 765 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 226:  #line 769 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 227:  #line 773 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 228:  #line 774 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 230:  #line 779 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 231:  #line 783 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 232:  #line 784 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 233:  #line 790 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 234:  #line 791 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 235:  #line 795 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 236:  #line 796 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 237:  #line 800 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 238:  #line 801 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 239:  #line 802 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 240:  #line 803 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 241:  #line 804 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 242:  #line 805 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 243:  #line 806 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;

    case 244:  #line 807 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2103 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
