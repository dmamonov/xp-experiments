<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 51 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_DECIMAL',  263);
  define('TOKEN_T_HEX',  264);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_PACKAGE',  303);
  define('TOKEN_T_IMPORT',  304);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_T_DOUBLE_ARROW',  413);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          9,     9,     9,     4,     4,    12,     3,    16,     3,    18, 
          3,    13,    13,    14,    14,    19,    19,    21,    21,    15, 
         15,    22,    22,    22,    17,    17,    17,    26,    26,    28, 
         27,    29,    27,    23,    23,    34,    34,    33,    33,    33, 
         32,    32,    37,    24,    40,    24,    42,    24,    39,    39, 
         36,    36,    43,    43,    44,    44,    38,    38,    41,    41, 
         41,    41,    41,    41,    25,    25,    35,    35,    46,    45, 
         47,    45,    50,    45,    52,    45,    54,    45,    55,    45, 
         56,    45,    58,    45,    45,    45,    53,    53,    48,    48, 
         49,    59,    49,    57,    57,    60,    60,    64,    63,    61, 
         61,    65,    62,    51,    51,    66,    66,    67,    67,    68, 
         68,    30,    71,    30,    72,    30,    73,    30,    74,    30, 
         75,    30,    30,    30,    30,    30,    30,    30,    30,    69, 
         81,    69,    69,    69,    69,    69,    69,    82,    82,    83, 
         83,    84,    76,    76,    76,    76,    76,    76,    77,    77, 
         77,    77,    77,    77,    78,    78,    78,    78,    78,    78, 
         79,    79,    79,    79,    79,    79,    80,    80,    70,    70, 
         86,    85,    85,    87,    85,    85,    31,    31,    11,    11, 
         88,    89,    89,    90,    90,    20,    20,    10,    10,    91, 
         91,    92,    92,    92,    92,    92,    92,    92, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     6, 
          1,     1,     3,     1,     3,     0,     9,     0,     9,     0, 
          8,     0,     2,     0,     2,     0,     2,     0,     3,     2, 
          0,     1,     1,     4,     3,     1,     0,     1,     3,     0, 
          3,     0,     6,     5,     6,     0,     1,     2,     4,     4, 
          0,     2,     0,     9,     0,     8,     0,     9,     1,     3, 
          0,     1,     1,     3,     3,     3,     0,     2,     1,     1, 
          1,     1,     1,     1,     0,     1,     1,     2,     0,     4, 
          0,     7,     0,    10,     0,     8,     0,     6,     0,     7, 
          0,     6,     0,     4,     2,     1,     3,     1,     1,     3, 
          0,     0,     3,     2,     1,     1,     2,     0,     9,     0, 
          1,     0,     5,     0,     1,     1,     3,     0,     1,     5, 
          6,     1,     0,     3,     0,     4,     0,     5,     0,     8, 
          0,     6,     3,     1,     1,     1,     1,     1,     5,     1, 
          0,     4,     3,     1,     1,     1,     1,     0,     1,     1, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          2,     2,     2,     2,     2,     2,     2,     2,     0,     1, 
          0,     4,     2,     0,     6,     2,     1,     1,     1,     4, 
          3,     1,     3,     1,     3,     1,     3,     0,     1,     1, 
          2,     1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,   202,   204,   203,   205,   207,   206,   208,     1,     0, 
        199,     0,     8,     0,     4,     0,    16,    20,    18,   201, 
         15,     0,     0,     0,     0,    12,     0,     0,     0,     0, 
          0,     0,     0,    10,     0,     0,     0,     0,     0,     0, 
         13,     0,   194,     0,     0,    23,     0,     0,     0,    27, 
         31,     0,     0,   190,     0,    25,    31,     0,     0,     0, 
        195,   193,     0,   197,     0,    21,     0,    30,    32,    33, 
          0,     0,     0,     0,    17,     0,     0,     0,     0,     0, 
        187,     0,   188,     0,     0,    19,    31,     0,     0,     0, 
        141,     0,     0,     0,     0,     0,   147,   144,   146,   145, 
        123,    79,     0,    93,   125,    83,    87,    89,    85,    81, 
         96,     0,     0,     0,     0,     0,    76,     0,   122,   134, 
        135,   136,   137,   138,    55,    69,    70,    71,    72,    73, 
         74,     0,     0,     0,     0,     0,    31,    41,     0,     0, 
         39,     0,     0,     0,     0,     0,     0,     0,   131,     0, 
          0,    91,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   149,     0,     0,     0,    34,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   177, 
        178,     0,     0,     0,     0,     0,     0,    95,    78,     0, 
         57,     0,     0,   191,    53,     0,     0,     0,     0,     0, 
          0,   115,     0,   181,     0,   124,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    99,     0,     0,     0, 
          0,   143,     0,   133,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   159, 
        160,   161,   162,   163,   164,     0,     0,    62,     0,     0, 
          0,    48,     0,    47,     0,     0,     0,    44,    29,     0, 
          0,   142,     0,     0,     0,     0,    80,     0,    94,     0, 
          0,   126,     0,     0,     0,     0,     0,     0,     0,     0, 
        151,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    45,     0,    43,   117,     0,     0,     0,   184,     0, 
          0,     0,     0,     0,   100,     0,     0,     0,   128,     0, 
          0,    66,    65,     0,     0,    64,     0,    49,    50,     0, 
        132,   182,     0,   108,   112,    92,     0,   105,     0,     0, 
          0,     0,    88,     0,     0,     0,     0,     0,    68,    59, 
          0,    56,     0,     0,     0,     0,     0,   104,   111,   107, 
          0,   120,     0,    90,     0,     0,   102,    82,     0,     0, 
         58,    54,   185,     0,     0,   121,     0,    97,    86,     0, 
        130,    60,     0,     0,     0,   103,     0,   113,    84,     0, 
          0,     0,   109, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    19,   124,     4,     7,     8,    11,    38,    77, 
         91,    33,    47,    58,    69,    35,    82,    34,    49,    60, 
        148,    78,    79,    80,   125,    83,    84,    94,    95,   126, 
        256,   207,   203,   265,   127,   257,   266,   325,   352,   200, 
        142,   260,   258,   259,   128,   161,   169,   228,   368,   165, 
        211,   168,   346,   166,   167,   219,   336,   163,   380,   337, 
        358,   338,   339,   356,   357,   212,   308,   223,   129,   216, 
        160,   164,   235,   236,   213,   130,   131,   132,   133,   134, 
        154,   171,   172,   173,   217,   274,   333,    93,    54,    55, 
         21,    22, 
    );
    protected static $yySindex = array(         -241,
          0,     0,  -230,  -176,     0,   309,     0,  -230,    79,    74, 
       -106,     0,     0,     0,     0,     0,     0,     0,     0,  -119, 
          0,   309,     0,  -176,     0,   109,     0,     0,     0,     0, 
          0,   -29,  -176,  -176,  -176,     0,   114,   100,   116,  -111, 
       -110,  -111,   -29,     0,   -46,  -176,  -133,  -176,    82,  -133, 
          0,   -89,     0,   180,   199,     0,  -176,   123,   209,     0, 
          0,   132,  -176,     0,   -46,     0,     0,  -176,    32,    -4, 
          0,     0,    62,     0,   134,     0,  -162,     0,     0,     0, 
          0,   136,   200,   216,     0,  1926,    19,    58,   -72,   112, 
          0,  -199,     0,   146,   231,     0,     0,    -4,  1552,  1552, 
          0,  1552,  1552,  1552,  1552,    24,     0,     0,     0,     0, 
          0,     0,   149,     0,     0,     0,     0,     0,     0,     0, 
          0,  1552,  1552,  -135,   151,  1283,     0,  1926,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   237,    20,   186,   243,   221,     0,     0,  1552,   347, 
          0,   -51,   -51,  1552,   -51,   -51,   -51,   -51,     0,   -90, 
       1552,     0,  1552,  -176,   244,   247,  2018,   256,   257,   202, 
        163,     0,   254,  1019,     0,     0,  1552,  1552,  1552,  1552, 
       1552,  1552,  1552,  1552,  1552,  1552,  1552,  1552,  1552,     0, 
          0,  1552,  1552,  1552,  1552,  1552,  1552,     0,     0,  -176, 
          0,  -108,    20,     0,     0,  1552,   240,    99,  1133,  1167, 
        211,     0,  1552,     0,    42,     0,   -90,  1314,  1926,  1342, 
        113,   263,   -90,  1552,  1552,  1926,     0,   -56,  1552,  1552, 
       1552,     0,  1552,     0,   -32,    63,   -51,   -51,   -51,   -51, 
        -51,   -51,  1391,   -51,   -51,   -51,   -51,   -51,   -51,     0, 
          0,     0,     0,     0,     0,   -40,   281,     0,   280,  -176, 
        285,     0,  1926,     0,   267,  -176,  1763,     0,     0,   146, 
       1552,     0,   288,  1552,   290,   -90,     0,   206,     0,   241, 
       1552,     0,   274,  1428,   212,   175,   295,  1539,  1575,  1763, 
          0,   -90,   298,  1552,    15,   221,    18,  -176,   299,   315, 
        233,     0,   318,     0,     0,   -90,  1763,   269,     0,  -315, 
        255,   336,  1552,  2018,     0,  1552,    47,  2018,     0,  1552, 
        -51,     0,     0,  -176,     7,     0,    18,     0,     0,    18, 
          0,     0,  1552,     0,     0,     0,    43,     0,    56,  1552, 
        146,   345,     0,  1715,    -7,   366,    37,   368,     0,     0, 
       1926,     0,     7,     7,   370,   372,   300,     0,     0,     0, 
        297,     0,  1552,     0,    85,  2018,     0,     0,   -90,   301, 
          0,     0,     0,  -176,  1926,     0,   386,     0,     0,  2018, 
          0,     0,    89,   305,  2018,     0,   392,     0,     0,   312, 
       1926,   313,     0, 
    );
    protected static $yyRindex= array(          450,
          0,     0,   528,     0,     0,   -75,     0,   561,  1353,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   242,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   378,     0,   135,   -95, 
        316,   -95,     0,     0,     0,     0,   319,     0,     0,   319, 
          0,     0,     0,     0,   381,     0,     0,     0,     8,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,  -132,   322, 
          0,     0,  -132,     0,   210,     0,     0,     0,     0,     0, 
        127,     0,   333,   -23,     0,   338,   -20,     0,     0,   -30, 
          0,     0,     0,    55,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    49,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   339,     0,     0,     0,     0,     0,   340,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   385,     0,     0,     0,  -107, 
          0,   248,   373,   375,   476,   579,   604,   632,     0,    76, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   344,     0,  -197,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   431, 
          0,     0,   414,     0,     0,     0,     0,  -132,     0,   -21, 
          0,     0,   433,     0,     0,     0,   103,     0,   338,     0, 
        445,     0,    76,   427,     0,   338,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   665,   701,   724,   760, 
        813,   849,     0,   872,   908,  1054,  1099,  1144,  1202,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   456,   431, 
          0,     0,     0,     0,     0,   431,   207,     0,     0,    55, 
          0,     0,     0,   406,   -37,   148,     0,     0,     0,     0, 
        433,     0,     0,     0,     0,     0,     0,     0,     0,    -1, 
          0,    76,     0,     0,     0,    -2,    26,     0,     0,     0, 
          0,     0,     0,     0,     0,    76,   407,     0,     0,     0, 
        461,     0,   427,     0,     0,     0,     0,     0,     0,   433, 
       1247,     0,     0,     0,     0,     0,    26,     0,     0,    26, 
          0,     0,   433,     0,     0,     0,  1838,     0,  1664,   397, 
        -10,     0,     0,     0,   483,     0,  1874,     0,     0,     0, 
        338,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   433,     0,     0,     0,     0,     0,    76,     0, 
          0,     0,     0,     0,   338,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        338,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,  1997,     0,   517,     0,     0,   484,   520, 
         12,     0,   486,   479,    30,     0,     0,     0,     0,   -54, 
       -215,     0,     0,     0,   -97,   434,     0,     0,     0,  2213, 
        -58,   235,   330,     0,  -112,  -184,     0,  -286,  -275,     0, 
          0,     0,   238,     0,   -99,     0,     0,    39,     0,     0, 
        108,     0,     0,     0,     0,     0,     0,     0,     0,   208, 
          0,   201,     0,     0,     0,   270,     0,     0,     0,  -136, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   324,     0,  -144,     0,     0,     0,   480,     0, 
        524,     0, 
    );
    protected static $yyTable = array(183,
        214,   295,    66,   183,   183,   183,   183,   183,   192,   183, 
        193,   189,    36,    74,   263,   199,    52,    35,    92,   116, 
        183,   183,   183,   183,   183,   183,    28,    22,   334,   335, 
         28,    28,    28,    28,    28,    38,    28,   116,    51,    14, 
        353,    51,   152,   354,    40,    41,    42,    28,    28,    28, 
         28,    28,    28,   183,   304,   183,    53,    56,   135,    59, 
        145,     1,   129,   159,    24,   350,   196,   227,    59,    24, 
         14,   116,   276,     5,   189,   299,    53,   371,   372,    59, 
         28,   303,    28,     9,    67,   140,   282,   183,   183,   140, 
        140,   140,   140,   140,   140,   140,    73,    87,    28,   138, 
        136,    38,   137,   116,   139,   222,   140,   140,   140,   140, 
        140,   140,   179,    28,    28,    28,   179,   179,   179,   179, 
        179,   278,   179,   152,    24,   362,   150,   198,   285,   351, 
        196,   276,    25,   179,   179,   179,   179,   179,   179,   180, 
        146,   140,   127,   180,   180,   180,   180,   180,    67,   180, 
        301,   261,   198,    26,    32,   319,    76,    88,    44,    43, 
        180,   180,   180,   180,   180,   180,    42,    89,   179,   331, 
         40,    45,    45,   140,   140,    45,   208,    57,   189,    28, 
         27,    28,    29,   141,   186,    40,    85,   198,   186,   186, 
        186,   186,   186,   189,   186,   180,   189,   198,    46,    48, 
        179,   179,   144,   280,    61,   186,   186,   186,   186,   186, 
        186,   182,   198,     9,   227,    22,   180,   178,   227,   179, 
         63,   181,   198,   269,   198,   198,   198,   180,   180,   189, 
         37,   262,   381,   198,   192,   177,   193,   183,   182,    14, 
        186,    64,    65,   180,   178,    67,   179,    52,   181,    40, 
         52,    40,    68,   370,    70,    81,    86,   189,    97,    98, 
         96,   192,   177,   193,   183,    52,   227,   143,   147,   349, 
        149,   162,   186,   186,   175,   176,   201,   384,   204,   202, 
        227,   206,   205,   224,   173,   227,   225,   232,   173,   173, 
        173,   173,   173,   392,   173,   229,   230,   233,   268,   296, 
        189,   275,   281,   272,   287,   173,   173,   292,   173,   189, 
        173,    12,    13,    14,    75,    16,    17,    18,   215,    14, 
        273,   297,   293,   298,   300,   302,   183,   189,   306,   309, 
        310,   283,   313,   311,   316,    59,   315,   320,   324,   327, 
        173,    12,    13,    14,    75,    16,    17,    18,   195,   194, 
        190,   191,   343,    28,   322,   328,   347,   329,   330,   196, 
        197,   332,   183,   183,   183,   183,   183,   183,   183,   183, 
        183,   183,   173,   183,   183,   183,   341,   340,    12,    13, 
         14,    75,    16,    17,    18,   383,   345,   335,   312,    28, 
         28,    28,    28,    28,    28,    28,    28,    28,    28,   334, 
         28,    28,    28,   363,   379,   365,   366,   367,   369,   174, 
        373,   374,   140,   174,   174,   174,   174,   174,   386,   174, 
        342,   376,   375,   389,   378,   382,   385,   348,   387,   388, 
        174,   174,   390,   174,   391,   174,    11,   393,    26,   179, 
        355,    24,   192,    51,   189,   189,    37,   361,   140,   140, 
        140,   140,   140,   140,   140,   140,   140,    36,    14,   140, 
        140,   140,    75,   148,    77,   174,   180,   114,   150,   205, 
        377,    61,    46,   114,   189,   179,   179,   179,   179,   179, 
        179,   179,   179,   179,   189,   114,   179,   179,   179,   205, 
        205,   205,   205,   205,   205,   205,    63,   174,   118,   119, 
        191,   200,   180,   180,   180,   180,   180,   180,   180,   180, 
        180,   186,   171,   180,   180,   180,   171,   171,   171,   171, 
        171,   114,   171,    98,    23,    20,    51,    50,    62,   205, 
        323,   151,   264,   171,   171,   326,   171,   359,   171,   205, 
        305,   200,   200,   200,    72,    30,   360,   186,   186,   186, 
        186,   186,   186,   186,   186,   186,   291,     0,   186,   186, 
        186,   200,     0,     0,     0,     0,     0,     0,   171,     0, 
          0,   200,     0,     0,   195,   194,   190,   191,   184,   185, 
        186,   187,   188,     0,     0,   196,   197,   231,    12,    13, 
         14,    15,    16,    17,    18,     0,     0,     0,     0,     0, 
        171,   195,   194,   190,   191,   184,   185,   186,   187,   188, 
          0,   173,   196,   197,   231,   172,     0,     0,     0,   172, 
        172,   172,   172,   172,     0,   172,    12,    13,    14,    75, 
         16,    17,    18,     0,     0,     0,   172,   172,     0,   172, 
        175,   172,     0,     0,   175,   175,   175,   175,   175,     0, 
        175,   173,   173,   173,   173,   173,     0,     0,     0,     0, 
        173,   175,   175,     0,   175,     0,   175,     0,   176,     0, 
          0,   172,   176,   176,   176,   176,   176,     0,   176,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   176, 
        176,     0,   176,     0,   176,     0,   175,     0,     0,     0, 
          0,   153,     0,   172,     0,   153,   153,   153,   153,   153, 
          0,   153,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   153,   153,   176,   153,     0,   153,   175,     2, 
          2,     2,     2,     2,     2,     2,   174,   165,     0,     0, 
          0,   165,   165,   165,   165,   165,     0,   165,     0,     2, 
          2,     2,     0,     2,     0,     0,   176,   153,   165,   165, 
        166,   165,     0,   165,   166,   166,   166,   166,   166,     0, 
        166,     0,     0,     0,     0,     0,   174,   174,   174,   174, 
        174,   166,   166,     0,   166,   174,   166,     0,     0,   153, 
          0,     0,     0,   165,     0,     0,   167,     0,     0,     0, 
        167,   167,   167,   167,   167,     0,   167,     5,     5,     5, 
          5,     5,     5,     5,     0,     0,   166,   167,   167,     0, 
        167,     0,   167,     0,     0,   165,     0,     5,     5,     5, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   171, 
          7,     7,     7,     7,     7,     7,     7,     0,   166,   168, 
          0,     0,   167,   168,   168,   168,   168,   168,     0,   168, 
          7,     7,     7,     0,     0,     0,     0,     0,     0,     0, 
        168,   168,     0,   168,     0,   168,     0,     0,     0,   171, 
        171,   171,   171,   171,   167,   169,     0,     0,   171,   169, 
        169,   169,   169,   169,     0,   169,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   168,   169,   169,   154,   169, 
          0,   169,   154,   154,   154,   154,   154,     0,   154,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   154, 
        154,     0,   154,     0,   154,     0,     0,   168,     0,     0, 
          0,   169,   172,     0,   155,     0,     0,     0,   155,   155, 
        155,   155,   155,     0,   155,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   154,   155,   155,   175,   155,     0, 
        155,     0,     0,   169,     0,     0,     0,     0,     0,     0, 
          0,     0,   172,   172,   172,   172,   172,     0,     0,     0, 
          0,   172,     0,     0,     0,   176,   154,     0,     0,     0, 
        155,     0,     0,     0,     0,     0,     0,   175,   175,   175, 
        175,   175,     0,     0,     0,     0,   175,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   153,     0, 
          0,     0,   155,     0,     0,   176,   176,   176,   176,   176, 
          0,     0,     0,     0,   176,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   182,     0,     0,     0,   234, 
        180,   178,     0,   179,   165,   181,     0,     0,   153,   153, 
        153,   153,   153,     0,     0,     0,     0,   153,   192,   177, 
        193,   183,     0,     0,     0,     0,     0,   166,     0,     0, 
        156,     0,     0,     0,   156,   156,   156,   156,   156,     0, 
        156,     0,     0,     0,   165,   165,   165,   165,   165,     0, 
          0,   156,   156,   165,   156,     0,   156,     0,     0,     0, 
          0,     0,     0,   167,     0,     0,     0,   166,   166,   166, 
        166,   166,     0,     0,     0,   157,   166,     0,     0,   157, 
        157,   157,   157,   157,   189,   157,   156,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   157,   157,     0,   157, 
          0,   157,     0,   167,   167,   167,   167,   167,     0,   182, 
          0,     0,   167,   270,   180,   178,   168,   179,   156,   181, 
        158,     0,     0,     0,   158,   158,   158,   158,   158,     0, 
        158,   157,   192,   177,   193,   183,     0,     0,     0,     0, 
          0,   158,   158,   182,   158,     0,   158,     0,   180,   178, 
        271,   179,   169,   181,     0,     0,   168,   168,   168,   168, 
        168,     0,     0,   157,     0,   168,   192,   177,   193,   183, 
          0,     0,     0,     0,     0,   154,   158,     0,   170,     0, 
          0,     0,   170,   170,   170,   170,   170,     0,   170,     0, 
          0,     0,   169,   169,   169,   169,   169,     0,   189,   170, 
        170,   169,   170,     0,   170,     0,     0,     0,   158,     0, 
          0,   155,     0,     0,     0,   154,   154,   154,   154,   154, 
          0,     0,     0,   139,   154,     0,     0,   139,   139,   139, 
        139,   139,   189,   139,   170,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   139,   139,     0,   139,     0,   139, 
          0,   155,   155,   155,   155,   155,     0,     0,     0,   182, 
        155,     0,     0,     0,   180,   178,   170,   179,     0,   181, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   139, 
          0,   198,   192,   177,   193,   183,     0,     0,     0,     0, 
        182,     0,     0,     0,     0,   180,   178,     0,   179,     0, 
        181,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   139,   277,   192,   177,   193,   183,     0,   182,     0, 
          0,     0,     0,   180,   178,     0,   179,     0,   181,     0, 
          0,     0,    14,     0,    14,     0,    14,     0,     0,     0, 
        279,   192,   177,   193,   183,     0,     0,     0,   189,     0, 
          0,    14,    14,     0,    14,     0,     0,   156,   195,   194, 
        190,   191,   184,   185,   186,   187,   188,   182,     0,   196, 
        197,     0,   180,   178,     0,   179,     0,   181,     0,   189, 
          0,     0,     0,    14,     0,     0,     0,     0,   294,     0, 
        192,   177,   193,   183,     0,     0,     0,   156,   156,   156, 
        156,   156,   157,     0,   182,     0,   156,   189,   314,   180, 
        178,     0,   179,     0,   181,    14,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   192,   177,   193, 
        183,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   157,   157,   157,   157,   157,   158,     0,     0, 
          0,   157,     0,     0,     0,     0,   189,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   195,   194,   190,   191,   184,   185,   186,   187, 
        188,     0,     0,   196,   197,     0,     0,   158,   158,   158, 
        158,   158,     0,   189,     0,     0,   158,     0,     0,     0, 
          0,     0,     0,     0,     0,   170,   195,   194,   190,   191, 
        184,   185,   186,   187,   188,   182,     0,   196,   197,     0, 
        180,   178,     0,   179,   102,   181,     0,     0,     0,     0, 
          0,   123,     0,     0,    99,     0,   100,     0,   192,   177, 
        193,   183,     0,     0,     0,   170,   170,   170,   170,   170, 
        139,   182,    14,     0,   170,   318,   180,   178,     0,   179, 
          0,   181,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   192,   177,   193,   183,     0,     0, 
          0,     0,   101,     0,     0,     0,     0,     0,     0,     0, 
        139,   139,   139,   139,   139,     0,     0,     0,     0,   139, 
          0,     0,    14,    14,   189,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   122,     0,     0,   103,     0,     0, 
          0,     0,   195,   194,   190,   191,   184,   185,   186,   187, 
        188,     0,    14,   196,   197,     0,   106,     0,     0,     0, 
        189,     0,     0,   106,     0,     0,   106,     0,   106,     0, 
          0,     0,     0,   195,   194,   190,   191,   184,   185,   186, 
        187,   188,   106,     0,   196,   197,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   195,   194,   190,   191,   184,   185,   186,   187,   188, 
          0,   182,   196,   197,   106,   364,   180,   178,     0,   179, 
          0,   181,    14,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   192,   177,   193,   183,     0,     0, 
          0,     0,     0,     0,     0,     0,   106,     0,   106,   106, 
        195,   194,   190,   191,   184,   185,   186,   187,   188,   182, 
          0,   196,   197,     0,   180,   178,     0,   179,     0,   181, 
          0,   106,   107,   108,   109,   110,     0,     0,     0,     0, 
          0,     0,   192,   177,   193,   183,     0,   195,   194,   190, 
        191,   184,   185,   186,   187,   188,     0,     0,   196,   197, 
        189,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        110,     0,     0,     0,     0,     0,     0,   110,     0,     0, 
        110,     0,   110,     0,     0,     0,     0,     0,   189,     0, 
          0,   111,     0,     0,     0,     0,   110,   115,     0,     0, 
          0,     0,   317,     0,     0,     0,   101,     0,     0,     0, 
          0,     0,     0,   101,     0,     0,   101,     0,   101,     0, 
          0,     0,     0,   106,   106,   106,   106,   106,   110,     0, 
          0,     0,   101,     0,     0,     0,     0,     0,   195,   194, 
        190,   191,   184,   185,   186,   187,   188,     0,     0,   196, 
        197,     0,     0,   104,   105,     0,     0,     0,   102,     0, 
        110,     0,   110,   110,   101,   123,     0,     0,    99,     0, 
        100,     0,     0,     0,   195,   194,   190,   191,   184,   185, 
        186,   187,   188,     0,   121,   196,   197,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   101,     0,   101,   101, 
         10,     0,     0,   106,   106,   106,   106,     0,   106,   106, 
          0,     0,     0,     0,     0,     0,   101,     0,     0,     0, 
         31,     0,     0,   106,   106,   106,   106,     0,     0,    39, 
         39,    39,     0,   106,   106,     0,     0,     0,     0,     0, 
          0,    39,    39,     0,    39,     0,     0,     0,   122,     0, 
        102,   103,     0,    39,     0,     0,     0,   123,     0,    71, 
         99,    39,   100,     0,    39,   106,   106,     0,     0,     0, 
          0,     0,     0,    90,     0,     0,   121,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   110,   110,   110, 
        110,   110,     0,     0,     0,     0,     0,     0,   101,     0, 
          0,     0,     0,     0,   195,   194,   190,   191,   184,   185, 
        186,   187,   188,     0,     0,   196,   197,     0,     0,     0, 
          0,     0,     0,   101,   101,   101,   101,   101,     0,     0, 
        226,     0,     0,   103,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        221,     0,   195,   194,   190,   191,   184,   185,   186,   187, 
        188,     0,     0,   196,   197,     0,     0,   110,   110,   110, 
        110,     0,     0,   110,     0,   106,   107,   108,   109,   110, 
          0,     0,     0,     0,     0,     0,    90,   110,   110,   110, 
        110,     0,     0,     0,     0,     0,     0,   110,   110,     0, 
          0,     0,     0,   101,   101,   101,   101,     0,     0,   101, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   101,   101,   101,   101,     0,     0,   110, 
        110,     0,     0,   101,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    90,     0,     0,     0, 
          0,     0,    90,     0,     0,   111,   112,   113,   114,     0, 
          0,   115,     0,     0,     0,   101,   101,   106,   107,   108, 
        109,   110,     0,     0,     0,   116,   117,   118,   119,     0, 
          0,     0,     0,     0,    90,   120,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   152,   153,     0,   155,   156,   157,   158,     0,     0, 
         39,     0,     0,     0,     0,     0,     0,   104,   105,     0, 
          0,     0,     0,     0,   170,   174,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   111,   112,   113, 
        114,   209,     0,   115,     0,     0,   210,     0,     0,     0, 
         39,     0,     0,   218,     0,   220,     0,   116,   117,   118, 
        119,     0,     0,     0,     0,     0,     0,   120,     0,   237, 
        238,   239,   240,   241,   242,   243,   244,   245,   246,   247, 
        248,   249,     0,     0,   250,   251,   252,   253,   254,   255, 
          0,     0,     0,     0,     0,     0,     0,     0,   267,   104, 
        105,     0,     0,     0,     0,   210,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   210,   284,   286,     0, 
          0,   288,   289,   290,     0,   170,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   210,     0,     0,   307,     0,     0,     0, 
          0,     0,     0,   210,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   321,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   210,     0,     0,   344,     0, 
          0,     0,   210,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   210,     0,     0,     0,     0, 
          0,     0,   210,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   210, 
    );
    protected static $yyCheck = array(37,
         91,    42,    57,    41,    42,    43,    44,    45,    60,    47, 
         62,    42,    42,    68,   123,   128,    63,   125,    77,    41, 
         58,    59,    60,    61,    62,    63,    37,   123,   344,   345, 
         41,    42,    43,    44,    45,    59,    47,    59,    41,    60, 
        327,    44,    44,   330,    33,    34,    35,    58,    59,    60, 
         61,    62,    63,    91,   270,    93,    45,    46,    40,    48, 
        260,   303,   260,    40,    46,    59,    59,   167,    57,    46, 
         91,    93,   217,   304,   126,   260,    65,   353,   354,    68, 
         91,   266,    93,   260,    59,    37,   223,   125,   126,    41, 
         42,    43,    44,    45,    37,    47,    67,   260,    44,    42, 
         43,   125,    45,   125,    47,   164,    58,    59,    60,    61, 
         62,    63,    37,    59,   125,   126,    41,    42,    43,    44, 
         45,   219,    47,   125,    46,   341,    97,   260,   226,   123, 
        123,   276,    59,    58,    59,    60,    61,    62,    63,    37, 
        340,    93,   340,    41,    42,    43,    44,    45,   123,    47, 
        263,   260,   260,   260,    46,   292,   125,   320,    59,    46, 
         58,    59,    60,    61,    62,    63,    40,   330,    93,   306, 
         44,    60,    60,   125,   126,    60,   147,   311,    44,   125, 
        300,   301,   302,   126,    37,    59,   125,   320,    41,    42, 
         43,    44,    45,    59,    47,    93,    62,   330,   310,   310, 
        125,   126,    91,    91,   123,    58,    59,    60,    61,    62, 
         63,    37,   320,   260,   314,   311,    42,    43,   318,    45, 
        310,    47,   330,   125,   300,   301,   302,   125,   126,   260, 
        260,   340,   369,    59,    60,    61,    62,    63,    37,   260, 
         93,    62,    44,    42,    43,   123,    45,    41,    47,   123, 
         44,   125,    44,   351,   123,   260,   123,   123,    59,    44, 
        125,    60,    61,    62,    63,    59,   366,   340,   123,   324, 
         40,   123,   125,   126,   410,   125,    40,   375,    93,   260, 
        380,    61,    40,    40,    37,   385,    40,   125,    41,    42, 
         43,    44,    45,   391,    47,    40,    40,    44,    59,   340, 
        126,   260,    40,    93,   361,    58,    59,   340,    61,   340, 
         63,   280,   281,   282,   283,   284,   285,   286,   409,   340, 
        213,    41,   260,    44,    40,    59,   364,   126,    41,    40, 
        125,   224,    59,    93,    40,   324,   125,    40,   321,    41, 
         93,   280,   281,   282,   283,   284,   285,   286,   400,   401, 
        402,   403,   314,   364,   340,    41,   318,   125,    41,   411, 
        412,    93,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   409,   125,   411,   412,   413,    41,   123,   280,   281, 
        282,   283,   284,   285,   286,   374,   340,   345,   281,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   409,   344, 
        411,   412,   413,    59,   366,   413,    41,   371,    41,    37, 
         41,    40,   364,    41,    42,    43,    44,    45,   380,    47, 
        313,   125,   123,   385,   340,   125,    41,   320,   340,   125, 
         58,    59,    41,    61,   123,    63,    59,   125,   123,   364, 
        333,   123,    62,    59,   310,   311,   125,   340,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   125,   410,   411, 
        412,   413,   125,   125,   125,    93,   364,    93,   125,   260, 
        363,    41,    59,    41,   340,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    40,    59,   411,   412,   413,   280, 
        281,   282,   283,   284,   285,   286,    41,   125,    93,    93, 
         40,   260,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   364,    37,   411,   412,   413,    41,    42,    43,    44, 
         45,   125,    47,    41,     8,     6,    43,    42,    50,   320, 
        296,    98,   203,    58,    59,   298,    61,   337,    63,   330, 
        271,   300,   301,   302,    65,    22,   339,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   233,    -1,   411,   412, 
        413,   320,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,   330,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,   413,   280,   281, 
        282,   283,   284,   285,   286,    -1,    -1,    -1,    -1,    -1, 
        125,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,   364,   411,   412,   413,    37,    -1,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,   280,   281,   282,   283, 
        284,   285,   286,    -1,    -1,    -1,    58,    59,    -1,    61, 
         37,    63,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,    58,    59,    -1,    61,    -1,    63,    -1,    37,    -1, 
         -1,    93,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    93,    -1,    -1,    -1, 
         -1,    37,    -1,   125,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    93,    61,    -1,    63,   125,   280, 
        281,   282,   283,   284,   285,   286,   364,    37,    -1,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,   300, 
        301,   302,    -1,   304,    -1,    -1,   125,    93,    58,    59, 
         37,    61,    -1,    63,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    58,    59,    -1,    61,   413,    63,    -1,    -1,   125, 
         -1,    -1,    -1,    93,    -1,    -1,    37,    -1,    -1,    -1, 
         41,    42,    43,    44,    45,    -1,    47,   280,   281,   282, 
        283,   284,   285,   286,    -1,    -1,    93,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,   125,    -1,   300,   301,   302, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364, 
        280,   281,   282,   283,   284,   285,   286,    -1,   125,    37, 
         -1,    -1,    93,    41,    42,    43,    44,    45,    -1,    47, 
        300,   301,   302,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,   125,    37,    -1,    -1,   413,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    93,    58,    59,    37,    61, 
         -1,    63,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,   125,    -1,    -1, 
         -1,    93,   364,    -1,    37,    -1,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    93,    58,    59,   364,    61,    -1, 
         63,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,    -1,    -1,    -1,   364,   125,    -1,    -1,    -1, 
         93,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,    -1, 
         -1,    -1,   125,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41, 
         42,    43,    -1,    45,   364,    47,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,   364,    -1,    -1, 
         37,    -1,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    58,    59,   413,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,   364,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    37,   413,    -1,    -1,    41, 
         42,    43,    44,    45,   126,    47,    93,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,   404,   405,   406,   407,   408,    -1,    37, 
         -1,    -1,   413,    41,    42,    43,   364,    45,   125,    47, 
         37,    -1,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    93,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    37,    61,    -1,    63,    -1,    42,    43, 
         44,    45,   364,    47,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,   125,    -1,   413,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,    -1,   364,    93,    -1,    37,    -1, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,   126,    58, 
         59,   413,    61,    -1,    63,    -1,    -1,    -1,   125,    -1, 
         -1,   364,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    37,   413,    -1,    -1,    41,    42,    43, 
         44,    45,   126,    47,    93,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    37, 
        413,    -1,    -1,    -1,    42,    43,   125,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93, 
         -1,    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         37,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   125,    59,    60,    61,    62,    63,    -1,    37,    -1, 
         -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    40,    -1,    42,    -1,    44,    -1,    -1,    -1, 
         59,    60,    61,    62,    63,    -1,    -1,    -1,   126,    -1, 
         -1,    59,    60,    -1,    62,    -1,    -1,   364,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    37,    -1,   411, 
        412,    -1,    42,    43,    -1,    45,    -1,    47,    -1,   126, 
         -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    58,    -1, 
         60,    61,    62,    63,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,   364,    -1,    37,    -1,   413,   126,    41,    42, 
         43,    -1,    45,    -1,    47,   123,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,   364,    -1,    -1, 
         -1,   413,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,   126,    -1,    -1,   413,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   364,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    37,    -1,   411,   412,    -1, 
         42,    43,    -1,    45,    33,    47,    -1,    -1,    -1,    -1, 
         -1,    40,    -1,    -1,    43,    -1,    45,    -1,    60,    61, 
         62,    63,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
        364,    37,   260,    -1,   413,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,   413, 
         -1,    -1,   310,   311,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,   340,   411,   412,    -1,    33,    -1,    -1,    -1, 
        126,    -1,    -1,    40,    -1,    -1,    43,    -1,    45,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    59,    -1,   411,   412,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    37,   411,   412,    91,    41,    42,    43,    -1,    45, 
         -1,    47,   410,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,   125,   126, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    37, 
         -1,   411,   412,    -1,    42,    43,    -1,    45,    -1,    47, 
         -1,   260,   261,   262,   263,   264,    -1,    -1,    -1,    -1, 
         -1,    -1,    60,    61,    62,    63,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1, 
         43,    -1,    45,    -1,    -1,    -1,    -1,    -1,   126,    -1, 
         -1,   340,    -1,    -1,    -1,    -1,    59,   346,    -1,    -1, 
         -1,    -1,   364,    -1,    -1,    -1,    33,    -1,    -1,    -1, 
         -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    45,    -1, 
         -1,    -1,    -1,   260,   261,   262,   263,   264,    91,    -1, 
         -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,    -1,   402,   403,    -1,    -1,    -1,    33,    -1, 
        123,    -1,   125,   126,    91,    40,    -1,    -1,    43,    -1, 
         45,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    59,   411,   412,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,   125,   126, 
          4,    -1,    -1,   340,   341,   342,   343,    -1,   345,   346, 
         -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1, 
         24,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    33, 
         34,    35,    -1,   370,   371,    -1,    -1,    -1,    -1,    -1, 
         -1,    45,    46,    -1,    48,    -1,    -1,    -1,   123,    -1, 
         33,   126,    -1,    57,    -1,    -1,    -1,    40,    -1,    63, 
         43,    65,    45,    -1,    68,   402,   403,    -1,    -1,    -1, 
         -1,    -1,    -1,    77,    -1,    -1,    59,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,   261,   262, 
        263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,    -1,    -1, 
         -1,    -1,    -1,   260,   261,   262,   263,   264,    -1,    -1, 
        123,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        164,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,    -1,   340,   341,   342, 
        343,    -1,    -1,   346,    -1,   260,   261,   262,   263,   264, 
         -1,    -1,    -1,    -1,    -1,    -1,   200,   360,   361,   362, 
        363,    -1,    -1,    -1,    -1,    -1,    -1,   370,   371,    -1, 
         -1,    -1,    -1,   340,   341,   342,   343,    -1,    -1,   346, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   360,   361,   362,   363,    -1,    -1,   402, 
        403,    -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   260,    -1,    -1,    -1, 
         -1,    -1,   266,    -1,    -1,   340,   341,   342,   343,    -1, 
         -1,   346,    -1,    -1,    -1,   402,   403,   260,   261,   262, 
        263,   264,    -1,    -1,    -1,   360,   361,   362,   363,    -1, 
         -1,    -1,    -1,    -1,   298,   370,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    99,   100,    -1,   102,   103,   104,   105,    -1,    -1, 
        324,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403,    -1, 
         -1,    -1,    -1,    -1,   122,   123,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,   342, 
        343,   149,    -1,   346,    -1,    -1,   154,    -1,    -1,    -1, 
        374,    -1,    -1,   161,    -1,   163,    -1,   360,   361,   362, 
        363,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,   177, 
        178,   179,   180,   181,   182,   183,   184,   185,   186,   187, 
        188,   189,    -1,    -1,   192,   193,   194,   195,   196,   197, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   206,   402, 
        403,    -1,    -1,    -1,    -1,   213,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   224,   225,   226,    -1, 
         -1,   229,   230,   231,    -1,   233,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   271,    -1,    -1,   274,    -1,    -1,    -1, 
         -1,    -1,    -1,   281,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   313,    -1,    -1,   316,    -1, 
         -1,    -1,   320,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   333,    -1,    -1,    -1,    -1, 
         -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   363, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 
      'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 
      'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 
      'T_FOREACH', 'T_AS', 'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 
      'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      'T_OBJECT_OPERATOR', 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
      'T_DOUBLE_ARROW', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 117 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 128 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 128 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 139 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 140 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 144 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 144 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 13:  #line 152 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 15:  #line 157 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 16:  #line 163 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 163 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 18:  #line 171 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 19:  #line 171 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 179 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 21:  #line 179 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 22:  #line 189 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 190 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 194 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 25:  #line 195 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 199 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 200 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 204 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 205 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 30:  #line 209 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 31:  #line 210 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 214 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 33:  #line 215 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 216 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 35:  #line 220 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 221 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 222 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 226 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 39:  #line 227 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 40:  #line 231 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 41:  #line 231 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 42:  #line 234 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 234 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 244 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 45:  #line 250 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 46:  #line 260 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 48:  #line 265 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 49:  #line 266 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 50:  #line 267 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 51:  #line 271 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 272 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 278 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 54:  #line 278 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 55:  #line 287 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 56:  #line 287 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 57:  #line 294 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 58:  #line 294 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 59:  #line 305 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 60:  #line 306 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 61:  #line 310 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 62:  #line 311 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 63:  #line 315 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 64:  #line 316 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 65:  #line 320 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 66:  #line 321 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 67:  #line 325 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 68:  #line 326 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 75:  #line 345 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 77:  #line 350 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 78:  #line 351 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 79:  #line 355 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 80:  #line 355 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 81:  #line 358 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 82:  #line 358 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 83:  #line 363 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 84:  #line 363 "grammar/xp.jay"
    {
      $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 85:  #line 369 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 86:  #line 369 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      /* $1->assignment= $6; XX FIXME XX*/
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 87:  #line 374 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 88:  #line 374 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 89:  #line 378 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 90:  #line 378 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 91:  #line 382 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 92:  #line 382 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 93:  #line 387 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 94:  #line 387 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
    } break;

    case 97:  #line 395 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 98:  #line 396 "grammar/xp.jay"
    { $yyVal= array(NULL, $yyVals[0+$yyTop]); } break;

    case 99:  #line 400 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 100:  #line 401 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 101:  #line 405 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 102:  #line 406 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 103:  #line 406 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 104:  #line 411 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 105:  #line 412 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 106:  #line 416 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 107:  #line 417 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 108:  #line 421 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 109:  #line 421 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
  } break;

    case 110:  #line 429 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 112:  #line 434 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 113:  #line 434 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
  } break;

    case 114:  #line 442 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 116:  #line 447 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 117:  #line 448 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 118:  #line 452 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 120:  #line 457 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 121:  #line 463 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 123:  #line 472 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 124:  #line 472 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 125:  #line 475 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 126:  #line 475 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 127:  #line 480 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 128:  #line 480 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 129:  #line 485 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 130:  #line 485 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 131:  #line 491 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 132:  #line 491 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 133:  #line 497 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 134:  #line 498 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); } break;

    case 135:  #line 499 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); } break;

    case 136:  #line 500 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); } break;

    case 137:  #line 501 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); } break;

    case 138:  #line 502 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); $yyVal->postfix= TRUE; } break;

    case 139:  #line 503 "grammar/xp.jay"
    { /* XXX Ternary */ } break;

    case 140:  #line 507 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 141:  #line 508 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 142:  #line 508 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 143:  #line 512 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 144:  #line 517 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 145:  #line 518 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 146:  #line 519 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 147:  #line 520 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 148:  #line 524 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 150:  #line 529 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 151:  #line 530 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 152:  #line 534 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 153:  #line 538 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 154:  #line 539 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 155:  #line 540 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 156:  #line 541 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 157:  #line 542 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 158:  #line 543 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 159:  #line 547 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 160:  #line 548 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 161:  #line 549 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 162:  #line 550 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 163:  #line 551 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 164:  #line 552 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 165:  #line 556 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 166:  #line 557 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 167:  #line 558 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 168:  #line 559 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 169:  #line 560 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 170:  #line 561 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 171:  #line 565 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 172:  #line 566 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 173:  #line 567 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 174:  #line 568 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 175:  #line 569 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 176:  #line 570 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 177:  #line 574 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 178:  #line 575 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 179:  #line 580 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 181:  #line 585 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 182:  #line 585 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 183:  #line 588 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 184:  #line 592 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 185:  #line 592 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 186:  #line 596 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 189:  #line 607 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 190:  #line 608 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 191:  #line 612 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 192:  #line 616 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 193:  #line 617 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 195:  #line 622 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 196:  #line 626 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 197:  #line 627 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 198:  #line 633 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 199:  #line 634 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 200:  #line 638 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 201:  #line 639 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 202:  #line 643 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 203:  #line 644 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 204:  #line 645 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 205:  #line 646 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 206:  #line 647 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 207:  #line 648 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 208:  #line 649 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1715 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
