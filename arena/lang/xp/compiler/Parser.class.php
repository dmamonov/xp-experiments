<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 35 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     8,     1,     3,     3,     5,     5,     6,     6, 
          9,     9,    11,    11,     7,     7,     7,    12,    12,    14, 
         14,    17,    17,    16,    16,    16,    15,    15,    13,    13, 
         22,    20,    26,    20,    24,    24,    21,    21,    28,    28, 
         29,    29,    23,    23,    25,    25,    25,    25,    25,    27, 
         27,    18,    18,    31,    30,    32,    30,    35,    30,    37, 
         30,    38,    30,    39,    30,    40,    30,    42,    30,    30, 
         33,    33,    34,    43,    34,    41,    41,    44,    44,    48, 
         47,    45,    45,    49,    46,    19,    19,    19,    19,    19, 
         19,    19,    19,    19,    19,    19,    50,    19,    19,    19, 
         19,    19,    19,    19,    19,    19,    19,    19,    19,    19, 
         19,    19,    19,    36,    36,    51,    51,     4,     4,     4, 
         52,    52,    10,    10,     2,     2,    53,    53,    54,    54, 
         54,    54,    54,    54,    54, 
    );
    protected static $yyLen= array(2,
          1,     8,     0,     8,     1,     1,     0,     2,     0,     2, 
          0,     2,     0,     3,     0,     1,     1,     1,     2,     5, 
          6,     0,     1,     2,     4,     4,     0,     2,     1,     2, 
          0,     9,     0,     9,     1,     3,     0,     1,     1,     3, 
          2,     3,     0,     2,     1,     1,     1,     1,     1,     0, 
          1,     1,     2,     0,     4,     0,     7,     0,    10,     0, 
         11,     0,     6,     0,     7,     0,     6,     0,     4,     2, 
          1,     3,     0,     0,     3,     2,     1,     1,     2,     0, 
          9,     0,     1,     0,     5,     1,     1,     1,     1,     3, 
          3,     3,     3,     3,     3,     6,     0,     5,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     5,     4,     3, 
          3,     2,     2,     0,     1,     1,     3,     1,     4,     3, 
          1,     3,     1,     3,     0,     1,     1,     2,     1,     1, 
          1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
        129,   131,   130,   132,   134,   133,   135,     0,     1,     0, 
        126,     0,     5,     3,     6,     0,   128,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   122, 
          8,     0,     0,   120,     0,     0,    12,     0,    10,     0, 
          0,   119,     0,     0,    16,    17,     0,     0,     0,   124, 
          0,     0,     0,     4,     0,    19,     0,    30,     2,    45, 
         46,    47,    48,    49,     0,     0,     0,     0,     0,     0, 
         33,     0,     0,    31,     0,     0,     0,     0,    24,     0, 
         23,     0,     0,     0,    88,    87,     0,     0,     0,     0, 
         20,     0,     0,    38,     0,     0,    54,     0,    68,    58, 
         62,    64,    60,    56,     0,     0,     0,    21,     0,    97, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   112, 
        113,     0,     0,    41,     0,     0,    25,     0,    66,     0, 
          0,     0,     0,     0,     0,    26,    70,    53,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   111,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         42,     0,     0,    40,     0,     0,     0,     0,     0,     0, 
         71,     0,     0,     0,     0,     0,     0,   115,     0,     0, 
        109,    44,     0,    35,    34,    55,    51,     0,    69,     0, 
          0,     0,     0,     0,     0,    32,     0,    98,     0,     0, 
          0,     0,     0,     0,    72,     0,     0,     0,   117,     0, 
         96,    36,    80,    84,    67,     0,    77,     0,     0,    63, 
          0,     0,     0,     0,     0,     0,    76,    83,    79,     0, 
         65,     0,    74,    57,    14,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    75,     0,    85,    59,     0,     0, 
         61,     0,     0,    81, 
    );
    protected static $yyDgoto= array(8,
          9,    43,    16,    35,    25,    33,    44,    18,    29,    36, 
        221,    45,    46,    47,    76,    73,    82,   197,   106,    48, 
         93,    83,   173,   195,    65,    77,   198,    94,    95,   107, 
        138,   145,   182,   244,   141,   187,   144,   142,   143,   176, 
        225,   140,   250,   226,   237,   227,   228,   235,   236,   150, 
        188,    21,    11,    12, 
    );
    protected static $yySindex = array(          118,
          0,     0,     0,     0,     0,     0,     0,     0,     0,  -163, 
          0,   118,     0,     0,     0,  -223,     0,  -223,    -5,  -255, 
        -18,  -243,  -223,  -223,  -252,   -28,  -223,  -223,   -42,     0, 
          0,  -223,   -39,     0,    48,    33,     0,   118,     0,   118, 
       -223,     0,  -194,   -25,     0,     0,   118,   118,   -24,     0, 
        287,  -234,  -257,     0,  -251,     0,  -245,     0,     0,     0, 
          0,     0,     0,     0,    68,  -148,    75,    55,  -219,  -133, 
          0,  -104,  -148,     0,   -23,    71,  -223,    94,     0,   331, 
          0,    88,  -223,   114,     0,     0,   -60,  -223,   -23,   259, 
          0,   -40,   125,     0,   131,   135,     0,    58,     0,     0, 
          0,     0,     0,     0,    53,    51,   331,     0,   147,     0, 
        -23,   -23,   -23,   -23,   -23,   -23,   154,    62,   -23,   -23, 
        -23,   -23,   -23,   -23,   -23,   -23,   -23,   -23,   -23,     0, 
          0,   -23,  -140,     0,  -120,  -223,     0,   -23,     0,   -23, 
        167,   177,    79,   179,   189,     0,     0,     0,  -120,   -23, 
        -48,   -48,   -48,   -48,   -48,   -48,   -23,     0,   -48,   -48, 
        -48,   -48,   -48,    86,    98,  -351,  -351,  -351,  -351,   259, 
          0,  -223,   -41,     0,   120,   331,   150,   -23,   -23,   331, 
          0,  -130,   -23,   -23,   -41,   161,   192,     0,   193,   -23, 
          0,     0,   331,     0,     0,     0,     0,   115,     0,   191, 
        185,   119,   211,   212,   223,     0,   -23,     0,   130,   -48, 
        133,  -282,   -23,    79,     0,   -23,   -77,    79,     0,   118, 
          0,     0,     0,     0,     0,   -78,     0,   -75,   218,     0, 
        247,   210,   -98,   157,   239,   168,     0,     0,     0,   -23, 
          0,   231,     0,     0,     0,  -223,   331,   254,   -35,    79, 
        -27,   174,    79,   271,     0,   274,     0,     0,    79,   205, 
          0,   331,   206,     0, 
    );
    protected static $yyRindex= array(         -150,
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    56,     0,     0,     0,     0,     0,     0,   335,  -112, 
        911,   213,     0,     0,   219,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   -46,     0,     0,  -105,     0,  -105, 
          0,     0,     0,     0,     0,     0,   -87,   -64,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   221,     0,     0, 
          0,     0,   276,     0,     0,     0,   277,     0,     0,     0, 
          0,     0,   277,   -37,     0,     0,   -13,     0,     0,   278, 
          0,     0,     0,     0,   292,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   224,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   -32,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   -32,   302, 
        467,   719,   746,   755,   778,   809,   302,     0,   818,   841, 
        850,   873,   882,     0,     0,   127,   674,   683,   710,   267, 
          0,     0,     0,     0,     0,   234,     0,   303,     0,   234, 
          0,     0,     0,     0,     0,    -2,     0,     0,     0,     0, 
          0,     0,   234,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    27,   905, 
          0,     0,   303,     0,     0,     0,     0,     0,     0,  -105, 
          0,     0,     0,     0,     0,   257,     0,   195,     0,     0, 
          0,     0,   344,     0,     0,     0,     0,     0,     0,   302, 
          0,     0,     0,     0,     0,     0,   234,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   234,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,   214,     0,   391,     0,     0,    -4,     0,     0,    12, 
          0,   320,   322,     0,     0,   295,     0,   -47,   892,     0, 
        291,     0,   229,   196,     0,     0,  -145,   244,     0,   155, 
          0,     0,    28,     0,     0,   -81,     0,     0,     0,     0, 
          0,     0,     0,   164,     0,   159,     0,     0,     0,     0, 
        176,   370,   394,     0, 
    );
    protected static $yyTable = array(86,
        111,   133,    67,    86,    86,    86,    86,    86,    19,    86, 
          7,   126,   123,   127,    19,   123,    89,   194,    80,    15, 
         86,    86,    86,    89,    86,    86,    43,    89,    89,    89, 
         89,    89,   105,    89,   202,    49,    19,    18,   116,    37, 
         23,    27,   125,    39,    89,    89,    89,   211,    89,    89, 
        130,   131,    50,    86,    24,    86,   116,   132,    32,   148, 
         29,   223,   224,    13,    34,    19,    28,    13,    13,    13, 
         13,    13,    26,    13,    51,   189,   123,    89,    52,    89, 
         38,   193,    68,    40,    13,    13,    13,   123,    13,    13, 
         43,    41,   121,   119,    42,   120,   200,   122,   123,    54, 
         59,   252,   158,   121,   119,    66,   120,    71,   122,   147, 
        126,    72,   127,   124,    74,    75,   263,    13,    89,    13, 
         68,   126,   123,   127,   124,    51,    67,   121,   119,    91, 
        120,   229,   122,    96,   123,    52,    13,    14,    15,   121, 
        119,   125,   120,   190,   122,   126,   108,   127,   124,   125, 
        125,   125,   125,   110,   125,    78,   123,   126,   248,   127, 
        124,   121,   119,    99,   120,   135,   122,    99,    99,    99, 
         99,    99,   125,    99,   136,   137,   125,   146,   196,   126, 
        139,   127,   124,   192,    99,    99,   123,   149,   125,    99, 
        191,   121,   119,   157,   120,   125,   122,   123,     7,   171, 
        172,   180,   121,   119,   207,   120,   178,   122,   199,   126, 
        125,   127,   124,    10,   125,   234,   179,    99,   183,    99, 
        126,   123,   127,   124,   125,   214,   121,   119,   184,   120, 
        203,   122,   208,   209,    78,    79,    84,    85,    86,   212, 
        125,   230,   125,   215,   126,   233,   127,   124,   123,   213, 
        216,   125,   220,   121,   119,   125,   120,   222,   122,   123, 
         55,    57,   232,   218,   121,   119,   224,   120,   223,   122, 
        242,   126,   243,   127,   124,   125,   240,   255,   246,    27, 
        258,   245,   126,   123,   127,   124,   261,   241,   121,   119, 
        247,   120,   249,   122,   253,   123,    82,   181,   257,   134, 
        121,   119,   125,   120,   254,   122,   126,   110,   127,   124, 
        110,   259,   256,   125,   260,   127,    87,    37,   126,    78, 
        127,   124,    88,    64,   110,   110,    86,   262,    62,    60, 
        264,    61,    39,    63,    22,    11,    28,   125,    84,    85, 
         86,     9,   114,   112,   113,   114,   115,   116,    52,   125, 
         89,   129,   128,   130,   131,   127,   127,   127,    50,   110, 
        132,   114,    86,    86,    86,    86,    56,    81,   181,    58, 
         89,    86,   181,   109,   121,   127,   121,   185,   121,   174, 
        206,    82,   219,    73,   238,   127,    89,    89,    89,    89, 
         13,   239,    30,   121,   121,    89,   121,     1,     2,     3, 
          4,     5,     6,     7,   181,    17,    20,   181,    22,     0, 
          0,     0,     0,   181,    31,     0,     0,     0,    87,    97, 
         98,    99,     0,     0,    88,   121,    13,    13,    13,    13, 
          0,     0,     0,    53,     0,    13,     0,     0,   100,   101, 
        102,   103,     0,     0,     0,    69,     0,    70,   104,     0, 
        129,   128,   130,   131,    78,    78,    78,   121,     0,   132, 
          0,   129,   128,   130,   131,     0,     0,    92,    73,     0, 
        132,     0,     0,    92,     0,     0,     0,     0,   117,     0, 
          0,     0,     0,     0,     0,   129,   128,   130,   131,     0, 
         99,     0,     0,     0,   132,     0,     0,   129,   128,   130, 
        131,     0,     0,    90,     0,     0,   132,    90,    90,    90, 
         90,    90,     0,    90,     0,     0,    82,    82,    82,   129, 
        128,   130,   131,     0,    90,    90,    92,     0,   132,    90, 
          0,     0,     0,     0,    78,    78,    78,    78,     0,    78, 
         78,     0,     0,     0,     0,     0,     0,     0,     0,   129, 
        128,   130,   131,     0,    78,    78,    78,    78,   132,    90, 
        129,   128,   130,   131,    78,    78,     0,     0,     0,   132, 
          0,     0,     0,     0,     0,   217,     0,     0,     0,     0, 
          0,     0,     0,     0,   129,   128,   130,   131,     0,     0, 
         84,    85,    86,   132,   121,     0,    82,    82,    82,    82, 
          0,     0,    82,    73,    73,    73,     0,     0,     0,     0, 
          0,   129,   128,   130,   131,     0,    82,    82,    82,    82, 
        132,     0,   129,   128,   130,   131,    82,    82,     0,     0, 
        110,   132,     0,     0,     0,     0,   251,     0,     0,     0, 
          0,     0,     0,     0,   121,   121,   129,   128,   130,   131, 
          0,     0,     0,     0,     0,   132,     0,     0,   129,   128, 
        130,   131,     0,     0,     0,     0,     0,   132,     0,     0, 
         87,    97,    98,    99,   121,     0,    88,     0,     0,     0, 
          0,     0,     0,    73,    73,    73,    73,     0,     0,    73, 
        100,   101,   102,   103,     0,     0,     0,     0,     0,     0, 
        104,     0,     0,    73,    73,    73,    73,     0,     0,     0, 
        100,     0,     0,    73,   100,   100,   100,   100,   100,   101, 
        100,     0,     0,   101,   101,   101,   101,   101,     0,   101, 
          0,   100,   100,     0,     0,     0,   100,     0,     0,     0, 
        101,   101,     0,     0,     0,   101,   102,     0,     0,     0, 
        102,   102,   102,   102,   102,    91,   102,     0,     0,    91, 
         91,    91,    91,    91,   100,    91,   100,   102,   102,     0, 
          0,     0,   102,   101,     0,   101,    91,    91,     0,     0, 
          0,    91,    92,     0,     0,     0,    92,    92,    92,    92, 
         92,    93,    92,     0,     0,    93,    93,    93,    93,    93, 
        102,    93,   102,    92,    92,     0,     0,     0,    92,     0, 
          0,    91,    93,    93,    94,     0,     0,    93,    94,    94, 
         94,    94,    94,     0,    94,     0,     0,     0,     0,     0, 
         90,     0,     0,     0,     0,    94,    94,     0,    92,     0, 
         94,     0,     0,     0,     0,    95,     0,    93,     0,    95, 
         95,    95,    95,    95,   103,    95,     0,     0,   103,   103, 
        103,   103,   103,     0,   103,     0,    95,    95,     0,     0, 
         94,    95,     0,     0,     0,   103,   103,   104,     0,     0, 
        103,   104,   104,   104,   104,   104,   105,   104,     0,     0, 
        105,   105,   105,   105,   105,     0,   105,     0,   104,   104, 
          0,    95,     0,   104,     0,     0,     0,   105,   105,   106, 
        103,     0,   105,   106,   106,   106,   106,   106,   107,   106, 
          0,     0,   107,   107,   107,   107,   107,     0,   107,     0, 
        106,   106,     0,   104,     0,   106,     0,     0,     0,   107, 
        107,   108,   105,     0,   107,   108,   108,   108,   108,   108, 
        118,   108,   118,     0,   118,     0,     0,     0,     0,     0, 
          0,     0,   108,   108,     0,   106,    90,   108,     0,   118, 
          0,     0,   118,     0,   107,     0,     0,     0,     0,     0, 
        118,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   108,     0,     0, 
          0,     0,   151,   152,   153,   154,   155,   156,     0,     0, 
        159,   160,   161,   162,   163,   164,   165,   166,   167,   168, 
        169,     0,     0,   170,     0,     0,     0,     0,     0,   175, 
          0,   177,     0,   118,     0,     0,     0,   100,     0,     0, 
          0,   186,     0,     0,     0,     0,   101,     0,   186,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   186, 
        201,     0,     0,   102,   204,   205,     0,     0,     0,     0, 
          0,   210,    91,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   186,     0, 
          0,     0,     0,     0,   186,     0,     0,   231,     0,    92, 
          0,     0,     0,     0,     0,     0,     0,     0,    93,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   186,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    94,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        118,     0,    95,     0,     0,     0,     0,     0,     0,     0, 
          0,   103,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   104,     0,     0,     0,     0,     0, 
          0,     0,     0,   105,     0,     0,     0,     0,     0,     0, 
        118,   118,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   106,     0,     0,     0, 
          0,     0,     0,     0,     0,   107,     0,     0,     0,     0, 
        118,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   108, 
    );
    protected static $yyCheck = array(37,
         61,    42,   260,    41,    42,    43,    44,    45,   260,    47, 
        123,    60,    59,    62,   260,    62,    40,    59,   123,   125, 
         58,    59,    60,    37,    62,    63,    59,    41,    42,    43, 
         44,    45,    80,    47,   180,    40,   260,   125,    41,    28, 
         46,    60,    91,    32,    58,    59,    60,   193,    62,    63, 
        402,   403,    41,    91,   310,    93,    59,   409,   311,   107, 
        125,   344,   345,    37,    93,   260,   310,    41,    42,    43, 
         44,    45,    91,    47,   320,   157,   123,    91,   330,    93, 
        123,   123,   340,   123,    58,    59,    60,    37,    62,    63, 
        123,    44,    42,    43,    62,    45,   178,    47,    37,   125, 
        125,   247,    41,    42,    43,   340,    45,    40,    47,    59, 
         60,   260,    62,    63,    40,    61,   262,    91,    40,    93, 
        340,    60,    37,    62,    63,   320,   260,    42,    43,    59, 
         45,   213,    47,    40,    37,   330,   300,   301,   302,    42, 
         43,    91,    45,    58,    47,    60,    59,    62,    63,   300, 
        301,   302,    91,    40,   260,   260,    37,    60,   240,    62, 
         63,    42,    43,    37,    45,    41,    47,    41,    42,    43, 
         44,    45,   260,    47,    44,    41,    91,   125,    59,    60, 
        123,    62,    63,   172,    58,    59,    37,    41,    91,    63, 
         93,    42,    43,    40,    45,   260,    47,    37,   311,   340, 
        321,   123,    42,    43,    44,    45,    40,    47,    59,    60, 
         91,    62,    63,     0,   320,   220,    40,    91,    40,    93, 
         60,    37,    62,    63,   330,    41,    42,    43,    40,    45, 
        361,    47,    41,    41,    40,   340,   260,   261,   262,   125, 
         91,   214,   330,   125,    60,   218,    62,    63,    37,    59, 
         40,    91,   123,    42,    43,   320,    45,   125,    47,    37, 
         47,    48,   340,    41,    42,    43,   345,    45,   344,    47, 
         61,    60,   371,    62,    63,    91,    59,   250,    40,    59, 
        253,   125,    60,    37,    62,    63,   259,    41,    42,    43, 
        123,    45,    62,    47,    41,    37,    40,   143,   125,   340, 
         42,    43,    91,    45,   340,    47,    60,    41,    62,    63, 
         44,    41,   340,    91,    41,   260,   340,    41,    60,   125, 
         62,    63,   346,    37,    58,    59,   364,   123,    42,    43, 
        125,    45,    41,    47,    59,   123,    59,    91,   260,   261, 
        262,   123,    41,   404,   405,   406,   407,   408,   125,    91, 
        364,   400,   401,   402,   403,   300,   301,   302,   125,    93, 
        409,    59,   400,   401,   402,   403,    47,    73,   214,    48, 
         40,   409,   218,    83,    40,   320,    42,   149,    44,   136, 
        185,   125,   207,    40,   226,   330,   400,   401,   402,   403, 
        364,   228,    23,    59,    60,   409,    62,   280,   281,   282, 
        283,   284,   285,   286,   250,    12,    16,   253,    18,    -1, 
         -1,    -1,    -1,   259,    24,    -1,    -1,    -1,   340,   341, 
        342,   343,    -1,    -1,   346,    91,   400,   401,   402,   403, 
         -1,    -1,    -1,    43,    -1,   409,    -1,    -1,   360,   361, 
        362,   363,    -1,    -1,    -1,    55,    -1,    57,   370,    -1, 
        400,   401,   402,   403,   260,   261,   262,   123,    -1,   409, 
         -1,   400,   401,   402,   403,    -1,    -1,    77,   125,    -1, 
        409,    -1,    -1,    83,    -1,    -1,    -1,    -1,    88,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,    -1, 
        364,    -1,    -1,    -1,   409,    -1,    -1,   400,   401,   402, 
        403,    -1,    -1,    37,    -1,    -1,   409,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,   260,   261,   262,   400, 
        401,   402,   403,    -1,    58,    59,   136,    -1,   409,    63, 
         -1,    -1,    -1,    -1,   340,   341,   342,   343,    -1,   345, 
        346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,    -1,   360,   361,   362,   363,   409,    93, 
        400,   401,   402,   403,   370,   371,    -1,    -1,    -1,   409, 
         -1,    -1,    -1,    -1,    -1,   364,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,    -1,    -1, 
        260,   261,   262,   409,   260,    -1,   340,   341,   342,   343, 
         -1,    -1,   346,   260,   261,   262,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,    -1,   360,   361,   362,   363, 
        409,    -1,   400,   401,   402,   403,   370,   371,    -1,    -1, 
        364,   409,    -1,    -1,    -1,    -1,   246,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   310,   311,   400,   401,   402,   403, 
         -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,   400,   401, 
        402,   403,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1, 
        340,   341,   342,   343,   340,    -1,   346,    -1,    -1,    -1, 
         -1,    -1,    -1,   340,   341,   342,   343,    -1,    -1,   346, 
        360,   361,   362,   363,    -1,    -1,    -1,    -1,    -1,    -1, 
        370,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1, 
         37,    -1,    -1,   370,    41,    42,    43,    44,    45,    37, 
         47,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    58,    59,    -1,    -1,    -1,    63,    -1,    -1,    -1, 
         58,    59,    -1,    -1,    -1,    63,    37,    -1,    -1,    -1, 
         41,    42,    43,    44,    45,    37,    47,    -1,    -1,    41, 
         42,    43,    44,    45,    91,    47,    93,    58,    59,    -1, 
         -1,    -1,    63,    91,    -1,    93,    58,    59,    -1,    -1, 
         -1,    63,    37,    -1,    -1,    -1,    41,    42,    43,    44, 
         45,    37,    47,    -1,    -1,    41,    42,    43,    44,    45, 
         91,    47,    93,    58,    59,    -1,    -1,    -1,    63,    -1, 
         -1,    93,    58,    59,    37,    -1,    -1,    63,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
        364,    -1,    -1,    -1,    -1,    58,    59,    -1,    93,    -1, 
         63,    -1,    -1,    -1,    -1,    37,    -1,    93,    -1,    41, 
         42,    43,    44,    45,    37,    47,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    58,    59,    -1,    -1, 
         93,    63,    -1,    -1,    -1,    58,    59,    37,    -1,    -1, 
         63,    41,    42,    43,    44,    45,    37,    47,    -1,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    58,    59, 
         -1,    93,    -1,    63,    -1,    -1,    -1,    58,    59,    37, 
         93,    -1,    63,    41,    42,    43,    44,    45,    37,    47, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         58,    59,    -1,    93,    -1,    63,    -1,    -1,    -1,    58, 
         59,    37,    93,    -1,    63,    41,    42,    43,    44,    45, 
         40,    47,    42,    -1,    44,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    93,    75,    63,    -1,    59, 
         -1,    -1,    62,    -1,    93,    -1,    -1,    -1,    -1,    -1, 
         89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1, 
         -1,    -1,   111,   112,   113,   114,   115,   116,    -1,    -1, 
        119,   120,   121,   122,   123,   124,   125,   126,   127,   128, 
        129,    -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,   138, 
         -1,   140,    -1,   123,    -1,    -1,    -1,   364,    -1,    -1, 
         -1,   150,    -1,    -1,    -1,    -1,   364,    -1,   157,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   178, 
        179,    -1,    -1,   364,   183,   184,    -1,    -1,    -1,    -1, 
         -1,   190,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   207,    -1, 
         -1,    -1,    -1,    -1,   213,    -1,    -1,   216,    -1,   364, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        260,    -1,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   364,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   364,    -1,    -1,    -1,    -1,    -1,    -1, 
        310,   311,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   364,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   364,    -1,    -1,    -1,    -1, 
        340,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364, 
    );
    protected static $yyFinal= 8;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 'T_FINAL', 
      'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_EXTENDS', 'T_IMPLEMENTS', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PROPERTY', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_AS', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 'T_OBJECT_OPERATOR', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 2:  #line 98 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
        $yyVals[-6+$yyTop]->name= $yyVals[-5+$yyTop];
        $yyVals[-6+$yyTop]->parent= $yyVals[-4+$yyTop];
        $yyVals[-6+$yyTop]->implements= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
        $yyVal= $yyVals[-6+$yyTop];
      } break;

    case 3:  #line 106 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 4:  #line 106 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop];
        $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
        $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
        $yyVal= $yyVals[-6+$yyTop];
      } break;

    case 5:  #line 116 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ClassNode()); } break;

    case 6:  #line 117 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new EnumNode()); } break;

    case 7:  #line 121 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 8:  #line 122 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 9:  #line 126 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 10:  #line 127 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 11:  #line 131 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 12:  #line 132 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 13:  #line 136 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 14:  #line 137 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 15:  #line 141 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 16:  #line 142 "grammar/xp.jay"
    { $yyVal['fields']= $yyVals[0+$yyTop]; } break;

    case 17:  #line 143 "grammar/xp.jay"
    { $yyVal['methods']= $yyVals[0+$yyTop]; } break;

    case 18:  #line 149 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 19:  #line 150 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 20:  #line 154 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
        $yyVal->modifiers= $yyVals[-4+$yyTop];
        $yyVal->type= $yyVals[-3+$yyTop];
        $yyVal->name= $yyVals[-2+$yyTop];
        $yyVal->initialization= $yyVals[-1+$yyTop];
      } break;

    case 21:  #line 160 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
        $yyVal->modifiers= $yyVals[-5+$yyTop];
        $yyVal->name= $yyVals[-3+$yyTop];
        $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
        $yyVal->get= $gs['get'];
        $yyVal->set= $gs['set'];
      } break;

    case 22:  #line 170 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 24:  #line 175 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 25:  #line 176 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 26:  #line 177 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 27:  #line 181 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 28:  #line 182 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 29:  #line 188 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 30:  #line 189 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 31:  #line 193 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 32:  #line 193 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
        $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
      } break;

    case 33:  #line 202 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 34:  #line 202 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop];
        $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
        $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
        $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
        $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 35:  #line 213 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 36:  #line 214 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 37:  #line 218 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 219 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 39:  #line 223 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 40:  #line 224 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 41:  #line 228 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-1+$yyTop]); } break;

    case 42:  #line 229 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 43:  #line 233 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 44:  #line 234 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 50:  #line 250 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 255 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 53:  #line 256 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 54:  #line 260 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 55:  #line 260 "grammar/xp.jay"
    { 
        $yyVal->expression= $yyVals[-1+$yyTop];
      } break;

    case 56:  #line 263 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 57:  #line 263 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
      } break;

    case 58:  #line 268 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 59:  #line 268 "grammar/xp.jay"
    {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
        $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
        $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 60:  #line 274 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 61:  #line 274 "grammar/xp.jay"
    {
        $yyVals[-10+$yyTop]->expression= $yyVals[-7+$yyTop];
        $yyVals[-10+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 62:  #line 278 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 63:  #line 278 "grammar/xp.jay"
    {
        $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
        $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
      } break;

    case 64:  #line 282 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 65:  #line 282 "grammar/xp.jay"
    {
        $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
        $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
      } break;

    case 66:  #line 286 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 67:  #line 286 "grammar/xp.jay"
    { 
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
        $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
        $yyVal= $yyVals[-4+$yyTop]; 
      } break;

    case 68:  #line 291 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 69:  #line 291 "grammar/xp.jay"
    { /* Throw statement */ 
        $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
      } break;

    case 71:  #line 298 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 72:  #line 299 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 73:  #line 303 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 74:  #line 304 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 75:  #line 304 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 76:  #line 309 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 77:  #line 310 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 78:  #line 314 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 79:  #line 315 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 80:  #line 319 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 81:  #line 319 "grammar/xp.jay"
    {
        $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
        $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
        $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
      } break;

    case 82:  #line 327 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 84:  #line 332 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 85:  #line 332 "grammar/xp.jay"
    {
        $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      } break;

    case 86:  #line 340 "grammar/xp.jay"
    { /* XXX Constant */ } break;

    case 87:  #line 341 "grammar/xp.jay"
    { /* XXX Number */ } break;

    case 88:  #line 342 "grammar/xp.jay"
    { /* XXX String */ } break;

    case 89:  #line 343 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new VariableNode()); $yyVal->name= $yyVals[0+$yyTop]; } break;

    case 90:  #line 344 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode()); $yyVal->variable= $yyVals[-2+$yyTop]; $yyVal->expression= $yyVals[0+$yyTop]; } break;

    case 91:  #line 345 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode()); $yyVal->variable= $yyVals[-2+$yyTop]; $yyVal->expression= $yyVals[0+$yyTop]; } break;

    case 92:  #line 346 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode()); $yyVal->variable= $yyVals[-2+$yyTop]; $yyVal->expression= $yyVals[0+$yyTop]; } break;

    case 93:  #line 347 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode()); $yyVal->variable= $yyVals[-2+$yyTop]; $yyVal->expression= $yyVals[0+$yyTop]; } break;

    case 94:  #line 348 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode()); $yyVal->variable= $yyVals[-2+$yyTop]; $yyVal->expression= $yyVals[0+$yyTop]; } break;

    case 95:  #line 349 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode()); $yyVal->variable= $yyVals[-2+$yyTop]; $yyVal->expression= $yyVals[0+$yyTop]; } break;

    case 96:  #line 350 "grammar/xp.jay"
    { /* XXX Instance creation */ } break;

    case 97:  #line 351 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 98:  #line 351 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-3+$yyTop]->parameters= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 99:  #line 356 "grammar/xp.jay"
    { /* XXX SmallerThan */ } break;

    case 100:  #line 357 "grammar/xp.jay"
    { /* XXX GreaterThan */ } break;

    case 101:  #line 358 "grammar/xp.jay"
    { /* XXX S|E */ } break;

    case 102:  #line 359 "grammar/xp.jay"
    { /* XXX G|E */ } break;

    case 103:  #line 360 "grammar/xp.jay"
    { /* XXX Add */ } break;

    case 104:  #line 361 "grammar/xp.jay"
    { /* XXX Subtract */ } break;

    case 105:  #line 362 "grammar/xp.jay"
    { /* XXX Multiply */ } break;

    case 106:  #line 363 "grammar/xp.jay"
    { /* XXX Divide */ } break;

    case 107:  #line 364 "grammar/xp.jay"
    { /* XXX Modulo */ } break;

    case 108:  #line 365 "grammar/xp.jay"
    { /* XXX Ternary */ } break;

    case 109:  #line 366 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new ArrayAccessNode()); $yyVals[-2+$yyTop]->offset= $yyVals[-1+$yyTop]; $yyVals[-3+$yyTop]->chained= $yyVals[-2+$yyTop];} break;

    case 110:  #line 367 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 111:  #line 368 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 112:  #line 369 "grammar/xp.jay"
    { /* XXX Post-Increment */ } break;

    case 113:  #line 370 "grammar/xp.jay"
    { /* XXX Post-Decrement */ } break;

    case 114:  #line 374 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 116:  #line 378 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 117:  #line 379 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 118:  #line 385 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 119:  #line 386 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 120:  #line 387 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 121:  #line 391 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 122:  #line 392 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 123:  #line 396 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 124:  #line 397 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 125:  #line 403 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 126:  #line 404 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 127:  #line 408 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 128:  #line 409 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 129:  #line 413 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 130:  #line 414 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 131:  #line 415 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 132:  #line 416 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 133:  #line 417 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 134:  #line 418 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 135:  #line 419 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1121 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
