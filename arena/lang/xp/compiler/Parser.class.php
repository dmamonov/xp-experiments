<?php
/* This file is part of the XP framework
 *
 * $Id$
 */
  uses('text.parser.generic.AbstractParser');

#line 2 "grammar/xp.jay"
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.PropertyNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.NumberNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassMemberNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode'
  );
#line 53 "-"
  define('TOKEN_T_ADD_EQUAL',  404);
  define('TOKEN_T_SUB_EQUAL',  405);
  define('TOKEN_T_MUL_EQUAL',  406);
  define('TOKEN_T_DIV_EQUAL',  407);
  define('TOKEN_T_MOD_EQUAL',  408);
  define('TOKEN_T_BOOLEAN_OR',  414);
  define('TOKEN_T_BOOLEAN_AND',  415);
  define('TOKEN_T_INC',  402);
  define('TOKEN_T_DEC',  403);
  define('TOKEN_T_SE',  401);
  define('TOKEN_T_GE',  400);
  define('TOKEN_T_OBJECT_OPERATOR',  409);
  define('TOKEN_T_EQUALS',  411);
  define('TOKEN_T_NOT_EQUALS',  412);
  define('TOKEN_T_WORD',  260);
  define('TOKEN_T_STRING',  261);
  define('TOKEN_T_NUMBER',  262);
  define('TOKEN_T_DECIMAL',  263);
  define('TOKEN_T_HEX',  264);
  define('TOKEN_T_PUBLIC',  280);
  define('TOKEN_T_PRIVATE',  281);
  define('TOKEN_T_PROTECTED',  282);
  define('TOKEN_T_STATIC',  283);
  define('TOKEN_T_FINAL',  284);
  define('TOKEN_T_ABSTRACT',  285);
  define('TOKEN_T_NATIVE',  286);
  define('TOKEN_T_CLASS',  300);
  define('TOKEN_T_INTERFACE',  301);
  define('TOKEN_T_ENUM',  302);
  define('TOKEN_T_PACKAGE',  303);
  define('TOKEN_T_IMPORT',  304);
  define('TOKEN_T_EXTENDS',  310);
  define('TOKEN_T_IMPLEMENTS',  311);
  define('TOKEN_T_OPERATOR',  320);
  define('TOKEN_T_THROWS',  321);
  define('TOKEN_T_PROPERTY',  330);
  define('TOKEN_T_VARIABLE',  340);
  define('TOKEN_T_RETURN',  341);
  define('TOKEN_T_TRY',  342);
  define('TOKEN_T_THROW',  343);
  define('TOKEN_T_CATCH',  344);
  define('TOKEN_T_FINALLY',  345);
  define('TOKEN_T_NEW',  346);
  define('TOKEN_T_FOR',  360);
  define('TOKEN_T_WHILE',  361);
  define('TOKEN_T_DO',  362);
  define('TOKEN_T_FOREACH',  363);
  define('TOKEN_T_AS',  364);
  define('TOKEN_T_BREAK',  365);
  define('TOKEN_T_CONTINUE',  366);
  define('TOKEN_T_IF',  370);
  define('TOKEN_T_ELSE',  371);
  define('TOKEN_T_SWITCH',  372);
  define('TOKEN_T_CASE',  373);
  define('TOKEN_T_DEFAULT',  374);
  define('TOKEN_T_DOUBLE_COLON',  410);
  define('TOKEN_T_DOUBLE_ARROW',  413);
  define('TOKEN_YY_ERRORCODE', 256);

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends AbstractParser {
    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     8,     7, 
          9,     9,     9,     4,     4,    12,     3,    16,     3,    18, 
          3,    13,    13,    14,    14,    19,    19,    21,    21,    15, 
         15,    22,    22,    22,    17,    17,    17,    26,    26,    28, 
         27,    29,    27,    23,    23,    34,    34,    33,    33,    33, 
         32,    32,    37,    24,    40,    24,    42,    24,    10,    10, 
         43,    43,    45,    45,    45,    39,    39,    36,    36,    48, 
         48,    49,    49,    38,    38,    41,    41,    41,    41,    41, 
         41,    41,    25,    25,    35,    35,    51,    50,    52,    50, 
         55,    50,    57,    50,    59,    50,    60,    50,    61,    50, 
         63,    50,    50,    50,    58,    58,    53,    53,    54,    64, 
         54,    62,    62,    65,    65,    69,    68,    66,    66,    70, 
         67,    56,    56,    71,    71,    46,    46,    72,    72,    30, 
         75,    30,    76,    30,    77,    30,    78,    30,    79,    30, 
         30,    30,    30,    30,    30,    30,    30,    30,    30,    73, 
         85,    73,    73,    73,    73,    73,    73,    86,    86,    47, 
         47,    87,    80,    80,    80,    80,    80,    80,    81,    81, 
         81,    81,    81,    81,    82,    82,    82,    82,    82,    82, 
         83,    83,    83,    83,    83,    83,    84,    84,    74,    74, 
         89,    88,    88,    90,    88,    88,    31,    31,    11,    11, 
         91,    92,    92,    93,    93,    20,    20,    44,    44,    94, 
         94,    95,    95,    95,    95,    95,    95,    95, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     6, 
          1,     1,     3,     1,     3,     0,     9,     0,     9,     0, 
          8,     0,     2,     0,     2,     0,     2,     0,     3,     2, 
          0,     1,     1,     4,     3,     1,     0,     1,     3,     0, 
          3,     0,     6,     5,     6,     0,     1,     2,     4,     4, 
          0,     2,     0,     9,     0,     8,     0,    10,     4,     1, 
          1,     3,     2,     5,     5,     1,     3,     0,     1,     1, 
          3,     3,     3,     0,     2,     1,     1,     1,     1,     1, 
          1,     2,     0,     1,     1,     2,     0,     4,     0,     7, 
          0,    10,     0,     8,     0,     6,     0,     7,     0,     6, 
          0,     4,     2,     1,     3,     1,     1,     3,     0,     0, 
          3,     2,     1,     1,     2,     0,     9,     0,     1,     0, 
          5,     0,     1,     1,     3,     0,     1,     5,     6,     1, 
          0,     3,     0,     4,     0,     5,     0,     8,     0,     6, 
          3,     1,     1,     1,     1,     1,     5,     3,     3,     1, 
          0,     4,     3,     1,     1,     1,     1,     0,     1,     1, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          2,     2,     2,     2,     2,     2,     2,     2,     0,     1, 
          0,     4,     2,     0,     6,     2,     1,     1,     1,     4, 
          3,     1,     3,     1,     3,     1,     3,     0,     1,     1, 
          2,     1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     6,     0,     0,     0, 
          0,     0,   212,   214,   213,   215,   217,   216,   218,     1, 
          0,    60,   209,     0,     8,     0,     4,     0,     0,     0, 
          0,    16,    20,    18,   211,    15,     0,     0,     0,     0, 
          0,     0,     0,    12,     0,     0,     0,    59,    62,     0, 
          0,     0,     0,     0,    10,     0,     0,   151,     0,     0, 
          0,     0,     0,   157,   154,   156,   155,   131,   133,     0, 
          0,     0,     0,     0,     0,   130,   142,   143,   144,   145, 
        146,     0,     0,     0,     0,     0,     0,     0,    13,     0, 
          0,     0,     0,     0,     0,     0,   139,     0,     0,     0, 
        159,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   187, 
        188,     0,     0,     0,     0,     0,     0,     0,    64,    65, 
          0,     0,   204,     0,     0,    23,     0,     0,     0,    27, 
         31,     0,     0,     0,   123,     0,   191,     0,   132,     0, 
          0,   197,     0,     0,   198,   153,   141,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   169,   170,   171,   172,   173,   174, 
          0,   161,     0,   200,     0,    25,    31,     0,     0,     0, 
          0,   152,     0,     0,     0,     0,     0,     0,   134,     0, 
          0,     0,   205,   203,     0,   207,     0,    21,     0,    30, 
         32,    33,     0,     0,     0,     0,   125,     0,     0,     0, 
        194,     0,     0,   136,     0,     0,    17,     0,     0,     0, 
          0,     0,     0,     0,    19,    31,     0,   140,   192,     0, 
          0,     0,     0,    87,     0,   101,    91,    95,    97,    93, 
         89,   104,     0,     0,    84,     0,    55,     0,     0,     0, 
          0,     0,    31,    41,     0,     0,    39,     0,     0,   128, 
          0,     0,    99,     0,     0,     0,     0,     0,     0,    34, 
        103,    86,     0,     0,     0,   201,    53,    76,    77,    78, 
         79,    80,     0,    81,     0,     0,     0,     0,     0,   195, 
        129,   138,     0,     0,     0,     0,     0,     0,   107,     0, 
          0,     0,     0,     0,    69,     0,     0,    48,     0,    47, 
          0,     0,    82,    57,     0,    44,    29,     0,    88,     0, 
        102,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    45,     0,     0,    43,     0,     0, 
          0,   108,     0,     0,     0,    73,    72,     0,     0,    71, 
         49,    50,     0,     0,   116,   120,   100,     0,   113,     0, 
          0,    96,     0,     0,     0,     0,    75,    66,     0,    56, 
          0,     0,     0,     0,   112,   119,   115,     0,    98,     0, 
          0,   110,    90,     0,    54,     0,     0,     0,     0,   105, 
         94,     0,    67,    58,     0,     0,     0,   111,     0,   121, 
         92,     0,     0,     0,   117, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    20,    72,     4,     7,     8,    11,    46,   209, 
        152,    41,    85,   138,   189,    43,   214,    42,    87,   140, 
        264,   210,   211,   212,   253,   215,   216,   233,   234,   254, 
        313,   297,   285,   321,   255,   314,   322,   359,   380,   283, 
        295,   347,    30,    22,    31,    74,   101,   315,   316,   256, 
        272,   279,   310,   393,   275,   144,   278,   375,   276,   277, 
        304,   367,   274,   402,   368,   385,   369,   370,   383,   384, 
        145,   154,    76,   149,    98,    99,   158,   159,   146,    77, 
         78,    79,    80,    81,    92,   102,    82,   150,   194,   240, 
        155,   134,   135,    23,    24, 
    );
    protected static $yySindex = array(         -259,
          0,     0,  -250,  -196,     0,   366,     0,  -250,    28,    42, 
       -169,    65,     0,     0,     0,     0,     0,     0,     0,     0, 
        -86,     0,     0,   188,     0,  -196,     0,   112,  -196,    76, 
        133,     0,     0,     0,     0,     0,   -38,   147,   188,    65, 
       -196,  -196,  -196,     0,   153,   173,   651,     0,     0,   146, 
        -59,   -51,   -59,   -38,     0,   651,   651,     0,   651,   651, 
        651,   651,    17,     0,     0,     0,     0,     0,     0,   651, 
        651,  -150,   261,   235,   237,     0,     0,     0,     0,     0, 
          0,   224,   -60,  -196,   -31,  -196,   158,   -31,     0,   148, 
        148,   651,   148,   148,   148,   148,     0,   -90,  -196,   261, 
          0,   162,   349,     0,   651,   651,   651,   651,   651,   651, 
        651,   651,   651,   651,   651,   651,   651,   651,   651,     0, 
          0,   651,   651,   651,   651,   651,   651,   651,     0,     0, 
        651,   -16,     0,   226,   251,     0,  -196,   174,   255,     0, 
          0,   184,   297,   216,     0,   651,     0,    51,     0,   -90, 
         -2,     0,   272,   -90,     0,     0,     0,   -20,    53,   148, 
        148,   148,   148,   148,   148,   404,   148,   148,   148,   148, 
        148,   148,   148,   148,     0,     0,     0,     0,     0,     0, 
        933,     0,  -196,     0,   -60,     0,     0,  -196,   604,    67, 
        651,     0,   284,   651,   286,   -90,   240,   651,     0,   -90, 
        290,   651,     0,     0,   653,     0,   212,     0,  -213,     0, 
          0,     0,     0,   211,   287,   301,     0,   -90,   933,   254, 
          0,   225,   308,     0,   651,   148,     0,  2330,   209,    12, 
         95,  -214,   232,   313,     0,     0,    67,     0,     0,   651, 
        651,   232,   321,     0,   242,     0,     0,     0,     0,     0, 
          0,     0,   238,   459,     0,  2330,     0,   107,   285,   344, 
          8,   334,     0,     0,   651,   509,     0,   356,   273,     0, 
        -90,   651,     0,   651,   359,   367,  2586,   368,   373,     0, 
          0,     0,  -196,  -107,   107,     0,     0,     0,     0,     0, 
          0,     0,   323,     0,   377,   651,   376,   744,   673,     0, 
          0,     0,   725,  2330,   780,   651,   651,  2330,     0,    82, 
        651,   651,   -40,   409,     0,   401,   412,     0,  2330,     0, 
        394,  -196,     0,     0,   933,     0,     0,   232,     0,   329, 
          0,   396,   835,   331,   230,   418,   857,   884,   119,   334, 
        140,  -196,   419,   338,     0,   435,  -196,     0,  -143,   651, 
       2586,     0,   651,   137,  2586,     0,     0,  -196,   -25,     0, 
          0,     0,   140,   453,     0,     0,     0,   152,     0,   154, 
        440,     0,   911,    87,   462,   134,     0,     0,  2330,     0, 
        -25,   140,   475,   393,     0,     0,     0,   651,     0,   177, 
       2586,     0,     0,   398,     0,   -25,  -196,  2330,   483,     0, 
          0,  2586,     0,     0,   185,   402,  2586,     0,   485,     0, 
          0,   405,  2330,   416,     0, 
    );
    protected static $yyRindex= array(          548,
          0,     0,   120,     0,     0,    15,     0,   733,   104,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   -72,     0,     0,     0,     0,     0,     0, 
        436,     0,     0,     0,     0,     0,     0,    66,   -48,     0, 
          0,     0,     0,     0,   488,     0,   511,     0,     0,   108, 
       -115,   430,  -115,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    78,     0,     0,     0,     0,     0,     0,   429, 
          0,     0,   514,     0,     0,     0,     0,     0,     0,     0, 
          0,   -22,     0,     0,   433,     0,     0,   433,     0,   945, 
        999,   469,  1052,  1105,  1324,  1378,     0,   131,     0,     0, 
          0,     0,     0,  -228,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   501,     0,     0,     0,    31,     0, 
          0,     0,   -18,     0,     0,   523,     0,     0,     0,   176, 
        525,     0,     0,   131,     0,     0,     0,     0,     0,  1431, 
       1484,  1507,  1538,  1561,  1592,     0,  1615,  1652,  1706,  1759, 
       1814,  1990,  2035,  2088,     0,     0,     0,     0,     0,     0, 
         32,     0,     0,     0,     0,     0,     0,     0,  -195,   441, 
          0,     0,     0,   476,   -32,   203,     0,   523,     0,   131, 
          0,     0,     0,     0,  -195,     0,   227,     0,     0,     0, 
          0,     0,    84,     0,   443,   -17,     0,   131,   477,     0, 
          0,   531,     0,     0,   523,  2142,     0,   447,    11,     0, 
        -35,     0,   -11,     0,     0,     0,     0,     0,     0,   523, 
        448,    25,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   449,     0,     0,     0,     0, 
          0,   516,     0,     0,     0,  -104,     0,     0,     0,     0, 
        131,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   545,     0,   533,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,  -195,     0,     0, 
          0,     0,     0,   447,     0,   534,     0,   447,     0,     0, 
          0,     0,     0,     0,     0,   553,     0,     0,     0,     0, 
          0,   545,     0,     0,   139,     0,     0,   -11,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   141, 
         38,     0,     0,     0,     0,     0,   545,     0,     0,   534, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    38,     0,     0,     0,     0,  2218,     0,  2171, 
          0,     0,     0,   554,     0,  2262,     0,     0,   447,     0, 
          0,    38,     0,     0,     0,     0,     0,   523,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   447,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   447,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,   588,     0,     0,   544,   593, 
        200,     0,   549,   513,  -131,     0,     0,     0,     0,   -88, 
       -236,     0,     0,     0,  -268,   375,     0,     0,     0,  2666, 
        -82,   279,   335,     0,  -238,  -270,     0,  -339,  -234,     0, 
          0,     0,   581,   583,     0,   431,   -27,   281,     0,  -242, 
          0,     0,   -41,     0,     0,   415,     0,     0,     0,     0, 
          0,     0,     0,     0,   256,     0,   259,     0,     0,     0, 
        437,     0,     0,  -140,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   -54,     0,     0, 
          0,   439,     0,   605,     0, 
    );
    protected static $yyTable = array(10,
        147,   339,   132,    44,   193,   270,   199,    22,   193,   193, 
        193,   193,   193,   199,   193,   319,   153,   282,   160,    75, 
         35,    36,   124,   381,    38,   193,   193,   193,   193,   193, 
        193,   137,    28,   378,   309,   330,    50,    50,    50,   334, 
        124,    38,   396,     1,   292,   260,   229,    28,   186,   290, 
        288,   346,   289,     5,   291,   205,    97,    83,   193,   224, 
        193,    28,    26,     9,   208,    28,    28,    28,    28,    28, 
         14,    28,   162,    26,   124,   162,   364,   238,    50,    50, 
        344,    50,    28,    28,    28,    28,    28,    28,   197,   206, 
         28,   348,   193,   193,   151,   196,    74,   379,   293,   206, 
         27,    14,   160,   182,   266,   261,   124,    38,   309,    63, 
        394,   135,   309,    28,   150,    28,   230,    28,   150,   150, 
        150,   150,   150,    42,   150,   262,   232,    40,    29,   406, 
        302,   298,    50,   294,   208,   150,   150,   150,   150,   150, 
        150,   196,    40,    14,   414,    14,   395,    14,   309,    28, 
         28,   199,   317,   206,    83,   208,   162,    37,    63,   309, 
         74,   404,    14,    14,   309,    14,   199,   189,    39,   199, 
        150,   189,   189,   189,   189,   189,    40,   189,   203,    52, 
         50,    51,    52,    50,    51,   259,    47,   210,   189,   189, 
        189,   189,   189,   189,    14,    22,    14,    52,    54,     9, 
        365,   366,   150,   150,   231,    83,    40,   122,    40,   123, 
          5,   208,   190,    32,    33,    34,   190,   190,   190,   190, 
        190,    45,   190,   189,   199,   208,    14,   210,   210,   210, 
        199,    55,   318,   190,   190,   190,   190,   190,   190,   196, 
         51,    52,    53,   196,   196,   196,   196,   196,   257,   196, 
         84,   208,   208,   208,    26,   189,   189,   210,    86,   104, 
        196,   196,   196,   196,   196,   196,   110,   131,   190,   377, 
         14,   108,   106,   119,   107,   129,   109,   130,   231,   137, 
        141,   208,   133,   136,   199,   139,   156,   184,   281,   122, 
        105,   123,   111,   183,   185,   196,   187,   110,   188,   340, 
        190,   190,   108,   106,   199,   107,   190,   109,   192,   372, 
        195,   198,   201,   376,   208,   208,   208,   231,   148,   200, 
        122,   105,   123,   111,   218,   221,   213,   196,   196,   225, 
         14,   193,   222,   110,   228,   235,   139,   231,   108,   106, 
        191,   107,   231,   109,   237,   236,   239,   241,   242,   401, 
         14,   258,   265,    50,   263,   119,   122,   105,   123,   111, 
        408,   271,   280,    14,   273,   411,   284,   193,   193,   193, 
        193,   193,   193,   193,   193,   193,   193,   286,   193,   193, 
        193,   193,   193,   287,   133,   110,   119,   139,    28,   157, 
        108,   106,    50,   107,   296,   109,   300,   301,   306,     5, 
          5,     5,     5,     5,     5,     5,   307,   311,   122,   105, 
        123,   111,   312,    14,    14,   323,   324,   199,   199,     5, 
          5,     5,   119,    14,    28,    28,    28,    28,    28,    28, 
         28,    28,    28,    28,   326,    28,    28,    28,    28,    28, 
        110,   150,   336,    14,   342,   108,   106,   199,   107,   341, 
        109,   343,   345,   349,   350,   352,    12,   353,   356,   361, 
        358,   202,   362,   122,   105,   123,   111,    13,    14,    15, 
         16,    17,    18,    19,   119,   363,   374,   150,   150,   150, 
        150,   150,   150,   150,   150,   150,   215,    14,   150,   150, 
        150,   150,   150,   382,   189,   110,   366,   365,   388,   390, 
        108,   106,   391,   107,   392,   109,   215,   215,   215,   215, 
        215,   215,   215,    14,   397,   398,   400,   281,   122,   105, 
        123,   111,   403,   407,   409,   412,   410,   413,    61,   119, 
        189,   189,   189,   189,   189,   189,   189,   189,   189,   190, 
        415,   189,   189,   189,   189,   189,    11,   125,   124,   120, 
        121,   126,    26,   158,   127,    24,   215,   139,   126,   127, 
        193,   122,   202,   122,   199,    37,   196,    36,   126,   127, 
        201,    83,   122,    85,    51,   190,   190,   190,   190,   190, 
        190,   190,   190,   190,   119,    68,   190,   190,   190,   190, 
        190,    46,   122,    70,   106,    25,   405,    89,    21,    12, 
        142,    88,   196,   196,   196,   196,   196,   196,   196,   196, 
        196,   267,   223,   196,   196,   196,   196,   196,   357,   320, 
         49,    48,   360,   204,   220,   387,   386,   217,    35,   125, 
        124,   120,   121,   112,   113,   114,   115,   116,     2,   243, 
        126,   127,   128,   117,   118,    13,    14,    15,    16,    17, 
         18,    19,     0,     0,   268,   269,     0,     0,     0,     0, 
        125,   124,   120,   121,   112,   113,   114,   115,   116,     0, 
          0,   126,   127,   128,   117,   118,     0,     0,     0,     0, 
          0,     0,     0,    59,     0,     0,     0,     0,     0,     0, 
         71,     0,     0,    56,    12,    57,   125,   124,   120,   121, 
        112,   113,   114,   115,   116,     0,     0,   126,   127,   110, 
        117,   118,     0,   328,   108,   106,     0,   107,     0,   109, 
        332,     0,     0,     0,     0,     0,     0,     0,   208,     0, 
          0,     0,   122,   105,   123,   111,     0,     0,     0,     0, 
          0,    58,     0,    12,     0,     0,     0,     0,   125,   124, 
        120,   121,   112,   113,   114,   115,   116,     0,     0,   126, 
        127,   110,   117,   118,   371,     0,   108,   106,     0,   107, 
          0,   109,     0,    70,     0,     0,    60,   227,     0,     0, 
          0,     0,     0,   329,   122,   105,   123,   111,    13,    14, 
         15,   207,    17,    18,    19,     0,     0,     0,   119,     0, 
          0,     0,   399,   125,   124,   120,   121,   112,   113,   114, 
        115,   116,     0,     0,   126,   127,   110,   117,   118,     0, 
          0,   108,   106,     7,   107,     0,   109,     2,     2,     2, 
          2,     2,     2,     2,    12,     0,     0,     0,   331,   122, 
        105,   123,   111,     0,     0,     0,     0,     2,     2,     2, 
        119,     2,     0,     0,     0,     0,     0,     0,   125,   124, 
        120,   121,   112,   113,   114,   115,   116,     0,   327,   126, 
        127,   110,   117,   118,     0,   351,   108,   106,     0,   107, 
          0,   109,     0,    13,    14,    15,   207,    17,    18,    19, 
          0,     0,     0,   110,   122,   105,   123,   111,   108,   106, 
          0,   107,     0,   109,     0,   119,     0,     0,     0,     0, 
         63,    64,    65,    66,    67,     0,   122,   105,   123,   111, 
        110,     0,     0,     0,   355,   108,   106,     0,   107,     0, 
        109,     0,    13,    14,    15,   207,    17,    18,    19,     0, 
          0,     0,     0,   122,   105,   123,   111,   110,     0,     0, 
          0,   389,   108,   106,     0,   107,     0,   109,     0,     0, 
        119,     0,     0,     0,     0,     0,     0,     0,     0,   110, 
        122,   105,   123,   111,   108,   106,     0,   107,     0,   109, 
          0,   183,   119,     0,     0,   183,   183,   183,   183,   183, 
         68,   183,   122,   105,   123,   111,    69,     0,     0,     0, 
          0,     0,   183,   183,     0,   183,     0,   183,     0,   119, 
          0,     0,     7,     7,     7,     7,     7,     7,     7,     0, 
          0,     0,     0,    13,    14,    15,   207,    17,    18,    19, 
          0,     0,     7,     7,     7,   184,   119,   183,     0,   184, 
        184,   184,   184,   184,     0,   184,     0,     0,     0,     0, 
          0,     0,    61,    62,     0,     0,   184,   184,   119,   184, 
          0,   184,     0,     0,     0,     0,     0,     0,     0,   183, 
          0,     0,   125,   124,   120,   121,   112,   113,   114,   115, 
        116,     0,     0,   126,   127,     0,   117,   118,   181,     0, 
          0,   184,   181,   181,   181,   181,   181,     0,   181,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   181, 
        181,     0,   181,     0,   181,     0,     0,     0,     0,     0, 
          0,     0,     0,   184,   125,   124,   120,   121,   112,   113, 
        114,   115,   116,     0,     0,   126,   127,     0,   117,   118, 
          0,   182,     0,     0,   181,   182,   182,   182,   182,   182, 
          0,   182,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   182,   182,     0,   182,     0,   182,     0,     0, 
          0,     0,     0,     0,     0,     0,   181,     0,     0,   125, 
        124,   120,   121,   112,   113,   114,   115,   116,     0,     0, 
        126,   127,     0,   117,   118,     0,     0,   182,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        354,     0,     0,     0,     0,     0,     0,     0,     0,   182, 
          0,     0,     0,     0,   125,   124,   120,   121,   112,   113, 
        114,   115,   116,     0,     0,   126,   127,     0,   117,   118, 
          0,     0,     0,     0,     0,     0,   125,   124,   120,   121, 
        112,   113,   114,   115,   116,     0,     0,   126,   127,     0, 
        117,   118,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   125,   124,   120,   121,   112,   113,   114, 
        115,   116,     0,     0,   126,   127,     0,   117,   118,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   183,     0, 
        125,   124,   120,   121,   112,   113,   114,   115,   116,     0, 
          0,   126,   127,     0,   117,   118,     0,     0,     0,     0, 
          0,     0,   125,   124,   120,   121,   112,   113,   114,   115, 
        116,     0,     0,   126,   127,     0,   117,   118,   183,   183, 
        183,   183,   183,     0,     0,     0,     0,   183,   183,   183, 
        185,     0,   184,     0,   185,   185,   185,   185,   185,     0, 
        185,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   185,   185,     0,   185,     0,   185,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   184,   184,   184,   184,   184,     0,     0,     0, 
          0,   184,   184,   184,   186,   181,   185,     0,   186,   186, 
        186,   186,   186,     0,   186,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   186,   186,     0,   186,     0, 
        186,     0,     0,     0,     0,     0,     0,     0,   185,     0, 
          0,     0,     0,     0,     0,   181,   181,   181,   181,   181, 
          0,     0,     0,     0,   181,   181,   181,   163,   182,     0, 
        186,   163,   163,   163,   163,   163,     0,   163,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   163,   163, 
          0,   163,     0,   163,     0,     0,     0,     0,     0,     0, 
          0,     0,   186,     0,     0,     0,     0,     0,   182,   182, 
        182,   182,   182,     0,     0,     0,     0,   182,   182,   182, 
        175,     0,     0,   163,   175,   175,   175,   175,   175,     0, 
        175,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   175,   175,   176,   175,     0,   175,   176,   176,   176, 
        176,   176,     0,   176,     0,   163,     0,     0,     0,     0, 
          0,     0,     0,     0,   176,   176,     0,   176,     0,   176, 
          0,     0,     0,     0,   177,     0,   175,     0,   177,   177, 
        177,   177,   177,     0,   177,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   177,   177,   178,   177,   176, 
        177,   178,   178,   178,   178,   178,     0,   178,   175,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   178,   178, 
          0,   178,     0,   178,     0,     0,     0,     0,   179,     0, 
        177,   176,   179,   179,   179,   179,   179,     0,   179,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   179, 
        179,   164,   179,   178,   179,   164,   164,   164,   164,   164, 
          0,   164,   177,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   164,   164,     0,   164,     0,   164,     0,     0, 
          0,     0,     0,     0,   179,   178,     0,   185,   165,     0, 
          0,     0,   165,   165,   165,   165,   165,     0,   165,     0, 
          0,     0,     0,     0,     0,     0,     0,   164,     0,   165, 
        165,     0,   165,     0,   165,     0,   179,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   185,   185,   185, 
        185,   185,     0,     0,     0,     0,   185,   185,   185,   164, 
          0,   186,   166,     0,   165,     0,   166,   166,   166,   166, 
        166,     0,   166,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   166,   166,     0,   166,     0,   166,     0, 
          0,     0,     0,     0,     0,     0,   165,     0,     0,     0, 
          0,   186,   186,   186,   186,   186,     0,     0,     0,     0, 
        186,   186,   186,     0,   163,   167,     0,     0,   166,   167, 
        167,   167,   167,   167,     0,   167,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   167,   167,     0,   167, 
          0,   167,     0,     0,     0,     0,     0,     0,     0,     0, 
        166,     0,     0,     0,   163,   163,   163,   163,   163,     0, 
          0,     0,     0,   163,   163,   163,     0,   175,     0,     0, 
        168,   167,     0,     0,   168,   168,   168,   168,   168,     0, 
        168,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        176,   168,   168,     0,   168,     0,   168,     0,     0,     0, 
          0,     0,     0,   167,     0,     0,     0,   175,   175,   175, 
        175,   175,     0,     0,     0,     0,   175,   175,   175,     0, 
          0,   177,     0,     0,     0,     0,   168,     0,     0,     0, 
        176,   176,   176,   176,   176,     0,     0,     0,     0,   176, 
        176,   176,     0,     0,   178,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   168,     0, 
          0,   177,   177,   177,   177,   177,     0,     0,     0,     0, 
        177,   177,   177,     0,     0,   179,     0,     0,     0,     0, 
          0,     0,     0,     0,   178,   178,   178,   178,   178,     0, 
          0,     0,     0,   178,   178,   178,     0,     0,   164,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   179,   179,   179,   179,   179, 
          0,     0,     0,     0,   179,   179,   179,     0,     0,     0, 
          0,     0,     0,     0,     0,   165,     0,     0,   164,   164, 
        164,   164,   164,     0,     0,     0,   148,   164,   164,   164, 
        148,   148,   148,   148,   148,     0,   148,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   148,   148,     0, 
        148,     0,   148,     0,     0,   165,   165,   165,   165,   165, 
          0,     0,     0,     0,   165,   165,   165,     0,     0,   166, 
          0,   149,     0,     0,     0,   149,   149,   149,   149,   149, 
          0,   149,   148,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   149,   149,     0,   149,     0,   149,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   166, 
        166,   166,   166,   166,   148,     0,     0,     0,   166,   166, 
        166,     0,   167,     0,   180,     0,     0,   149,   180,   180, 
        180,   180,   180,     0,   180,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   180,   180,     0,   180,     0, 
        180,     0,     0,     0,     0,     0,     0,     0,     0,   149, 
          0,     0,   167,   167,   167,   167,   167,     0,     0,     0, 
          0,   167,   167,   167,     0,     0,     0,   168,   147,     0, 
        180,     0,   147,   147,   147,   147,   147,     0,   147,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   147, 
        147,     0,   147,   114,   147,     0,     0,     0,     0,     0, 
        114,     0,   180,   114,     0,   114,     0,   168,   168,   168, 
        168,   168,     0,     0,     0,     0,   168,   168,   168,   114, 
          0,     0,     0,     0,   147,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        118,     0,     0,     0,     0,     0,     0,   118,     0,     0, 
        118,   114,   118,     0,     0,     0,   147,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   118,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   114,   109,   114,   114,     0,     0,     0, 
          0,   109,     0,     0,   109,     0,   109,     0,   118,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        109,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        118,     0,   118,   118,     0,     0,     0,     0,     0,     0, 
          0,     0,   109,   148,     0,     0,     0,     0,     0,     0, 
          0,     0,    59,     0,     0,     0,     0,     0,     0,    71, 
          0,     0,    56,     0,    57,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   109,     0,   109,   109,   252,     0, 
          0,     0,     0,   148,   148,   148,   148,   148,   149,     0, 
          0,     0,   148,   148,   148,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         58,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        114,   114,   114,   114,   114,     0,     0,     0,   149,   149, 
        149,   149,   149,     0,     0,     0,     0,   149,   149,   149, 
          0,   180,    70,     0,     0,    60,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   118,   118,   118, 
        118,   118,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   180,   180,   180,   180,   180,     0,     0,     0,     0, 
        180,   180,   180,     0,     0,   147,     0,     0,     0,     0, 
        114,   114,   114,   114,     0,   114,   114,     0,     0,     0, 
          0,   109,   109,   109,   109,   109,     0,     0,     0,     0, 
        114,   114,   114,   114,     0,     0,     0,     0,     0,     0, 
        114,   114,     0,     0,     0,   147,   147,   147,   147,   147, 
          0,     0,     0,     0,   147,   147,   147,   118,   118,   118, 
        118,     0,     0,   118,     0,     0,     0,     0,     0,     0, 
          0,     0,   114,   114,     0,     0,     0,   118,   118,   118, 
        118,     0,     0,     0,     0,     0,     0,   118,   118,    63, 
         64,    65,    66,    67,     0,     0,     0,     0,     0,     0, 
          0,   109,   109,   109,   109,     0,     0,   109,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    59,   118, 
        118,   109,   109,   109,   109,    71,     0,     0,    56,     0, 
         57,   109,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   252,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   109,   109,     0,     0,     0,     0,    68, 
        244,   245,   246,     0,     0,    69,    58,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   247, 
        248,   249,   250,     0,     0,     0,     0,     0,     0,   251, 
          0,     0,     0,     0,     0,     0,     0,     0,   308,     0, 
          0,    60,    73,     0,     0,     0,     0,     0,     0,     0, 
          0,    90,    91,     0,    93,    94,    95,    96,     0,     0, 
          0,    61,    62,     0,     0,   100,   103,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   143,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        160,   161,   162,   163,   164,   165,   166,   167,   168,   169, 
        170,   171,   172,   173,   174,     0,     0,   175,   176,   177, 
        178,   179,   180,   181,     0,     0,   100,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   143,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    63,    64,    65,    66,    67, 
          0,     0,     0,     0,     0,     0,   143,     0,     0,   219, 
          0,     0,     0,   143,     0,     0,     0,   226,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        143,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   143,   143,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    68,   244,   245,   246,     0, 
        299,    69,     0,     0,     0,     0,     0,   303,     0,   305, 
          0,     0,     0,     0,     0,   247,   248,   249,   250,     0, 
          0,     0,     0,     0,     0,   251,     0,     0,     0,     0, 
          0,   325,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   143,   333,   335,     0,     0,   337,   338,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    61,    62,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   143,     0,     0,   373,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   143, 
    );
    protected static $yyCheck = array(4,
         91,    42,    63,    42,    37,   242,    42,   123,    41,    42, 
         43,    44,    45,   154,    47,   123,    99,   256,    41,    47, 
        125,    26,    41,   363,    29,    58,    59,    60,    61,    62, 
         63,   260,    44,    59,   277,   304,    41,    42,    43,   308, 
         59,    59,   382,   303,    37,   260,   260,    59,   137,    42, 
         43,   322,    45,   304,    47,   187,    40,    60,    91,   200, 
         93,    37,    46,   260,   260,    41,    42,    43,    44,    45, 
         60,    47,    41,    46,    93,    44,   347,   218,    83,    84, 
        319,    86,    58,    59,    60,    61,    62,    63,    91,    59, 
        260,   328,   125,   126,    99,   150,    59,   123,    91,   188, 
         59,    91,   125,   131,   236,   320,   125,   125,   351,    44, 
        379,   340,   355,   125,    37,    91,   330,    93,    41,    42, 
         43,    44,    45,    40,    47,   340,   209,    44,    64,   398, 
        271,   263,   137,   126,   330,    58,    59,    60,    61,    62, 
         63,   196,    59,    40,   413,    42,   381,    44,   391,   125, 
        126,    44,   260,   123,    60,   260,   125,    46,    93,   402, 
        123,   396,    59,    60,   407,    62,    59,    37,    93,    62, 
         93,    41,    42,    43,    44,    45,    44,    47,   183,    41, 
        185,    41,    44,   188,    44,    91,    40,   260,    58,    59, 
         60,    61,    62,    63,    91,   311,    93,    59,    46,   260, 
        344,   345,   125,   126,   209,    60,   123,    60,   125,    62, 
         91,   260,    37,   300,   301,   302,    41,    42,    43,    44, 
         45,   260,    47,    93,   260,   330,   123,   300,   301,   302, 
        123,    59,   340,    58,    59,    60,    61,    62,    63,    37, 
         41,    42,    43,    41,    42,    43,    44,    45,    40,    47, 
        310,   300,   301,   302,    46,   125,   126,   330,   310,   410, 
         58,    59,    60,    61,    62,    63,    37,    44,    93,   358, 
        260,    42,    43,   126,    45,    41,    47,    41,   283,   311, 
        123,   330,    83,    84,   320,    86,   125,    62,    59,    60, 
         61,    62,    63,   310,    44,    93,   123,    37,    44,   340, 
        125,   126,    42,    43,   340,    45,   123,    47,    93,   351, 
        260,    40,   260,   355,   300,   301,   302,   322,   409,   340, 
         60,    61,    62,    63,    41,    40,   260,   125,   126,    40, 
        320,   364,    93,    37,   123,   125,   137,   342,    42,    43, 
         44,    45,   347,    47,    44,    59,    93,   123,    41,   391, 
        340,   340,    40,   358,   123,   126,    60,    61,    62,    63, 
        402,    41,   125,   260,   123,   407,   260,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   409,    93,   411,   412, 
        413,   414,   415,    40,   185,    37,   126,   188,   364,    41, 
         42,    43,   397,    45,    61,    47,    41,   125,    40,   280, 
        281,   282,   283,   284,   285,   286,    40,    40,    60,    61, 
         62,    63,    40,   310,   311,    93,    40,   310,   311,   300, 
        301,   302,   126,   320,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,   409,    59,   411,   412,   413,   414,   415, 
         37,   364,   361,   340,    44,    42,    43,   340,    45,    41, 
         47,    40,    59,   125,    59,   125,    91,    40,   340,    41, 
        321,    58,   125,    60,    61,    62,    63,   280,   281,   282, 
        283,   284,   285,   286,   126,    41,   340,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   260,   410,   411,   412, 
        413,   414,   415,    41,   364,    37,   345,   344,    59,   413, 
         42,    43,    41,    45,   371,    47,   280,   281,   282,   283, 
        284,   285,   286,   410,    40,   123,   340,    59,    60,    61, 
         62,    63,   125,    41,   340,    41,   125,   123,    93,   126, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   364, 
        125,   411,   412,   413,   414,   415,    59,   400,   401,   402, 
        403,    41,   123,   125,    41,   123,   330,   358,   411,   412, 
        146,    93,    62,    41,    40,   125,   364,   125,    93,    93, 
         40,   125,   125,   125,    59,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   126,    41,   411,   412,   413,   414, 
        415,    59,    59,    41,    41,     8,   397,    54,     6,    91, 
         88,    53,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   237,   198,   411,   412,   413,   414,   415,   340,   285, 
         40,    39,   342,   185,   194,   370,   368,   191,    24,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    91,   225, 
        411,   412,   413,   414,   415,   280,   281,   282,   283,   284, 
        285,   286,    -1,    -1,   240,   241,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,   413,   414,   415,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1, 
         40,    -1,    -1,    43,    91,    45,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    37, 
        414,   415,    -1,    41,    42,    43,    -1,    45,    -1,    47, 
        306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    91,    -1,    91,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    37,   414,   415,   350,    -1,    42,    43,    -1,    45, 
         -1,    47,    -1,   123,    -1,    -1,   126,   125,    -1,    -1, 
         -1,    -1,    -1,    59,    60,    61,    62,    63,   280,   281, 
        282,   283,   284,   285,   286,    -1,    -1,    -1,   126,    -1, 
         -1,    -1,   388,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    37,   414,   415,    -1, 
         -1,    42,    43,    91,    45,    -1,    47,   280,   281,   282, 
        283,   284,   285,   286,    91,    -1,    -1,    -1,    59,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,   300,   301,   302, 
        126,   304,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,   125,   411, 
        412,    37,   414,   415,    -1,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,   280,   281,   282,   283,   284,   285,   286, 
         -1,    -1,    -1,    37,    60,    61,    62,    63,    42,    43, 
         -1,    45,    -1,    47,    -1,   126,    -1,    -1,    -1,    -1, 
        260,   261,   262,   263,   264,    -1,    60,    61,    62,    63, 
         37,    -1,    -1,    -1,    41,    42,    43,    -1,    45,    -1, 
         47,    -1,   280,   281,   282,   283,   284,   285,   286,    -1, 
         -1,    -1,    -1,    60,    61,    62,    63,    37,    -1,    -1, 
         -1,    41,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37, 
         60,    61,    62,    63,    42,    43,    -1,    45,    -1,    47, 
         -1,    37,   126,    -1,    -1,    41,    42,    43,    44,    45, 
        340,    47,    60,    61,    62,    63,   346,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,   126, 
         -1,    -1,   280,   281,   282,   283,   284,   285,   286,    -1, 
         -1,    -1,    -1,   280,   281,   282,   283,   284,   285,   286, 
         -1,    -1,   300,   301,   302,    37,   126,    93,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,   402,   403,    -1,    -1,    58,    59,   126,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,    37,    -1, 
         -1,    93,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   125,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
         -1,    37,    -1,    -1,    93,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,    -1,    -1,    93,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
         37,    -1,   364,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,    37,   364,    93,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,    37,   364,    -1, 
         93,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
         37,    -1,    -1,    93,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    37,    61,    -1,    63,    41,    42,    43, 
         44,    45,    -1,    47,    -1,   125,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,    -1,    37,    -1,    93,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    37,    61,    93, 
         63,    41,    42,    43,    44,    45,    -1,    47,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    37,    -1, 
         93,   125,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    37,    61,    93,    63,    41,    42,    43,    44,    45, 
         -1,    47,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    93,   125,    -1,   364,    37,    -1, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,   125, 
         -1,   364,    37,    -1,    93,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,    -1,   364,    37,    -1,    -1,    93,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        125,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,    -1,   364,    -1,    -1, 
         37,    93,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        364,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,   125,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,    -1, 
         -1,   364,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,   413, 
        414,   415,    -1,    -1,   364,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,    -1,    -1,   364,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,   413,   414,   415,    -1,    -1,   364,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   364,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    37,   413,   414,   415, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,    -1,    -1,   364, 
         -1,    37,    -1,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,   125,    -1,    -1,    -1,   413,   414, 
        415,    -1,   364,    -1,    37,    -1,    -1,    93,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,   413,   414,   415,    -1,    -1,    -1,   364,    37,    -1, 
         93,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    33,    63,    -1,    -1,    -1,    -1,    -1, 
         40,    -1,   125,    43,    -1,    45,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,   413,   414,   415,    59, 
         -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1, 
         43,    91,    45,    -1,    -1,    -1,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   123,    33,   125,   126,    -1,    -1,    -1, 
         -1,    40,    -1,    -1,    43,    -1,    45,    -1,    91,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    91,   364,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40, 
         -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   123,    -1,   125,   126,    59,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,   364,    -1, 
         -1,    -1,   413,   414,   415,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        260,   261,   262,   263,   264,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,   415, 
         -1,   364,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,   261,   262, 
        263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
        413,   414,   415,    -1,    -1,   364,    -1,    -1,    -1,    -1, 
        340,   341,   342,   343,    -1,   345,   346,    -1,    -1,    -1, 
         -1,   260,   261,   262,   263,   264,    -1,    -1,    -1,    -1, 
        360,   361,   362,   363,    -1,    -1,    -1,    -1,    -1,    -1, 
        370,   371,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,   413,   414,   415,   340,   341,   342, 
        343,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   402,   403,    -1,    -1,    -1,   360,   361,   362, 
        363,    -1,    -1,    -1,    -1,    -1,    -1,   370,   371,   260, 
        261,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   340,   341,   342,   343,    -1,    -1,   346,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,   402, 
        403,   360,   361,   362,   363,    40,    -1,    -1,    43,    -1, 
         45,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   402,   403,    -1,    -1,    -1,    -1,   340, 
        341,   342,   343,    -1,    -1,   346,    91,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360, 
        361,   362,   363,    -1,    -1,    -1,    -1,    -1,    -1,   370, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1, 
         -1,   126,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    56,    57,    -1,    59,    60,    61,    62,    -1,    -1, 
         -1,   402,   403,    -1,    -1,    70,    71,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        105,   106,   107,   108,   109,   110,   111,   112,   113,   114, 
        115,   116,   117,   118,   119,    -1,    -1,   122,   123,   124, 
        125,   126,   127,   128,    -1,    -1,   131,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   260,   261,   262,   263,   264, 
         -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,    -1,   194, 
         -1,    -1,    -1,   198,    -1,    -1,    -1,   202,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   340,   341,   342,   343,    -1, 
        265,   346,    -1,    -1,    -1,    -1,    -1,   272,    -1,   274, 
         -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363,    -1, 
         -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,    -1,    -1, 
         -1,   296,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   306,   307,   308,    -1,    -1,   311,   312,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   350,    -1,    -1,   353,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   388, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, NULL, NULL, "'%'", NULL, 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", NULL, "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_OPERATOR', 
      'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_PROPERTY', NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_VARIABLE', 'T_RETURN', 
      'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 'T_NEW', NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_FOR', 'T_WHILE', 'T_DO', 
      'T_FOREACH', 'T_AS', 'T_BREAK', 'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 
      'T_ELSE', 'T_SWITCH', 'T_CASE', 'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, 'T_GE', 'T_SE', 'T_INC', 'T_DEC', 
      'T_ADD_EQUAL', 'T_SUB_EQUAL', 'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', 
      'T_OBJECT_OPERATOR', 'T_DOUBLE_COLON', 'T_EQUALS', 'T_NOT_EQUALS', 
      'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 'T_BOOLEAN_AND', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new ParseError(E_ERROR, sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new ParseError(E_ERROR, sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 121 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 132 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 132 "grammar/xp.jay"
    {
    $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
  } break;

    case 7:  #line 143 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 144 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 9:  #line 148 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ImportNode()); } break;

    case 10:  #line 148 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
    } break;

    case 13:  #line 156 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 15:  #line 161 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 16:  #line 167 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode()); } break;

    case 17:  #line 167 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 18:  #line 176 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode()); } break;

    case 19:  #line 176 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 20:  #line 185 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode()); } break;

    case 21:  #line 185 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->body= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 22:  #line 196 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 23:  #line 197 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 24:  #line 201 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 25:  #line 202 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 26:  #line 206 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 207 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 211 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 212 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 30:  #line 216 "grammar/xp.jay"
    { $k= key($yyVals[0+$yyTop]); $yyVal[$k][]= $yyVals[0+$yyTop][$k]; } break;

    case 31:  #line 217 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 221 "grammar/xp.jay"
    { $yyVal= array('fields' => $yyVals[0+$yyTop]); } break;

    case 33:  #line 222 "grammar/xp.jay"
    { $yyVal= array('methods' => $yyVals[0+$yyTop]); } break;

    case 34:  #line 223 "grammar/xp.jay"
    { $yyVal= array('static' => $yyVals[-1+$yyTop]); } break;

    case 35:  #line 227 "grammar/xp.jay"
    { $yyVals[0+$yyTop]['members']= $yyVals[-2+$yyTop]; $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 228 "grammar/xp.jay"
    { $yyVal= array('members' => $yyVals[0+$yyTop]); } break;

    case 37:  #line 229 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 233 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 39:  #line 234 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 40:  #line 238 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 41:  #line 238 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 42:  #line 241 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 43:  #line 241 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 44:  #line 251 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 45:  #line 258 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode());
      $yyVal->modifiers= $yyVals[-5+$yyTop][0];
      $yyVal->annotations= $yyVals[-5+$yyTop][1];
      $yyVal->name= $yyVals[-3+$yyTop];
      $gs= array_merge(array('get' => NULL, 'set' => NULL), $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]);
      $yyVal->get= $gs['get'];
      $yyVal->set= $gs['set'];
    } break;

    case 46:  #line 269 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 48:  #line 274 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 49:  #line 275 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-2+$yyTop]); } break;

    case 50:  #line 276 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 51:  #line 280 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 52:  #line 281 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 287 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode()); } break;

    case 54:  #line 287 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 55:  #line 297 "grammar/xp.jay"
    { if ('__construct' == $yyVals[-1+$yyTop]) $yyVals[0+$yyTop]= $yyLex->create(new ConstructorNode()); } break;

    case 56:  #line 297 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 57:  #line 305 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode()); } break;

    case 58:  #line 305 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->arguments= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
  } break;

    case 59:  #line 318 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 60:  #line 319 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 61:  #line 323 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 62:  #line 324 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 63:  #line 328 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 64:  #line 332 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= array('default' => $yyVals[-2+$yyTop]);
    } break;

    case 65:  #line 337 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[-3+$yyTop]; 
      $yyVal->parameters= $yyVals[-2+$yyTop];
    } break;

    case 66:  #line 345 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 67:  #line 346 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 68:  #line 350 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 69:  #line 351 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 70:  #line 355 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 71:  #line 356 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 72:  #line 360 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 73:  #line 361 "grammar/xp.jay"
    { $yyVal= array('name' => $yyVals[0+$yyTop], 'type' => $yyVals[-2+$yyTop], 'vararg' => TRUE); } break;

    case 74:  #line 365 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 75:  #line 366 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 82:  #line 378 "grammar/xp.jay"
    { $yyVal= '[]'; } break;

    case 83:  #line 386 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 85:  #line 391 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 86:  #line 392 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 87:  #line 396 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 88:  #line 396 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 89:  #line 399 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 90:  #line 399 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 91:  #line 404 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 92:  #line 404 "grammar/xp.jay"
    {
      $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 93:  #line 410 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 94:  #line 410 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      /* $1->assignment= $6; XX FIXME XX*/
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 95:  #line 415 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 96:  #line 415 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 97:  #line 419 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 98:  #line 419 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->expression= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-4+$yyTop];
    } break;

    case 99:  #line 423 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 100:  #line 423 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 101:  #line 428 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 102:  #line 428 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= NULL; /*/ XXX $3;*/
    } break;

    case 105:  #line 436 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 106:  #line 437 "grammar/xp.jay"
    { $yyVal= array(NULL, $yyVals[0+$yyTop]); } break;

    case 107:  #line 441 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 108:  #line 442 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 109:  #line 446 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 110:  #line 447 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 111:  #line 447 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 112:  #line 452 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 113:  #line 453 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 114:  #line 457 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 115:  #line 458 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-1+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 116:  #line 462 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CatchNode()); } break;

    case 117:  #line 462 "grammar/xp.jay"
    {
    $yyVals[-8+$yyTop]->type= $yyVals[-5+$yyTop];
    $yyVals[-8+$yyTop]->variable= $yyVals[-4+$yyTop];
    $yyVals[-8+$yyTop]->statements= NULL; /* XXX $8;*/
  } break;

    case 118:  #line 470 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 120:  #line 475 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 121:  #line 475 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= NULL; /* XXX $4;*/
  } break;

    case 122:  #line 483 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 124:  #line 488 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 125:  #line 489 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 126:  #line 493 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 128:  #line 498 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 129:  #line 504 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= new TypeName($yyVals[-5+$yyTop]);
      $yyVal->values= $yyVals[-1+$yyTop];
  } break;

    case 131:  #line 513 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 132:  #line 513 "grammar/xp.jay"
    {
      $yyVals[0+$yyTop] && $yyVals[-2+$yyTop]->chained= $yyVals[0+$yyTop];
    } break;

    case 133:  #line 516 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 134:  #line 516 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[0+$yyTop] && $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-1+$yyTop];
    } break;

    case 135:  #line 521 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 136:  #line 521 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->member= $yyLex->create(new VariableNode(array('name' => $yyVals[-1+$yyTop])));
      $yyVals[0+$yyTop] && $yyVals[-3+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 137:  #line 526 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassMemberNode()); $yyVals[0+$yyTop]->class= new TypeName($yyVals[-1+$yyTop]); } break;

    case 138:  #line 526 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->member= $yyLex->create(new InvocationNode(array('name' => $yyVals[-4+$yyTop])));
      $yyVals[-6+$yyTop]->member->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-6+$yyTop]->member->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 139:  #line 532 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 140:  #line 532 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-4+$yyTop]->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVals[-4+$yyTop]->chained= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 141:  #line 538 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 142:  #line 539 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); } break;

    case 143:  #line 540 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); } break;

    case 144:  #line 541 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); } break;

    case 145:  #line 542 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); } break;

    case 146:  #line 543 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); $yyVal->postfix= TRUE; } break;

    case 147:  #line 544 "grammar/xp.jay"
    { /* XXX Ternary */ } break;

    case 148:  #line 545 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new BinaryOpNode()); $yyVal->lhs= $yyVals[-2+$yyTop]; $yyVal->rhs= $yyVals[0+$yyTop]; $yyVal->op= '||'; } break;

    case 149:  #line 546 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new BinaryOpNode()); $yyVal->lhs= $yyVals[-2+$yyTop]; $yyVal->rhs= $yyVals[0+$yyTop]; $yyVal->op= '&&'; } break;

    case 150:  #line 550 "grammar/xp.jay"
    { /* XXX Constant, e.g. NULL, FALSE, TRUE */ } break;

    case 151:  #line 551 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayNode()); } break;

    case 152:  #line 551 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->values= $yyVals[-1+$yyTop];
      $yyVals[-3+$yyTop]->type= NULL;   /* XXX anytype?*/
    } break;

    case 153:  #line 555 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode());
      $yyVal->elements= $yyVals[-1+$yyTop];
      $yyVal->type= NULL;   /* XXX anytype?*/
    } break;

    case 154:  #line 560 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new NumberNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 155:  #line 561 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 156:  #line 562 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 157:  #line 563 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode()); $yyVal->value= $yyVals[0+$yyTop]; } break;

    case 158:  #line 567 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 160:  #line 572 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 161:  #line 573 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 162:  #line 577 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 163:  #line 581 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 164:  #line 582 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 165:  #line 583 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 166:  #line 584 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 167:  #line 585 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 168:  #line 586 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 169:  #line 590 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 170:  #line 591 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 171:  #line 592 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 172:  #line 593 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 173:  #line 594 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 174:  #line 595 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 175:  #line 599 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 176:  #line 600 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 177:  #line 601 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 178:  #line 602 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 179:  #line 603 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 180:  #line 604 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 181:  #line 608 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 182:  #line 609 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 183:  #line 610 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 184:  #line 611 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 185:  #line 612 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 186:  #line 613 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 187:  #line 617 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 188:  #line 618 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 189:  #line 623 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 191:  #line 628 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode()); } break;

    case 192:  #line 628 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 193:  #line 631 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new VariableNode()); 
      $yyVal->name= $yyVals[0+$yyTop]; 
    } break;

    case 194:  #line 635 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new InvocationNode()); } break;

    case 195:  #line 635 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-1+$yyTop];
    } break;

    case 196:  #line 639 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->chained= $yyVals[0+$yyTop]; } break;

    case 199:  #line 650 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 200:  #line 651 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 201:  #line 655 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop].'[]'); } break;

    case 202:  #line 659 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 203:  #line 660 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 205:  #line 665 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 206:  #line 669 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 207:  #line 670 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 208:  #line 676 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 209:  #line 677 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 210:  #line 681 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 211:  #line 682 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 212:  #line 686 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 213:  #line 687 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 214:  #line 688 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 215:  #line 689 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 216:  #line 690 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 217:  #line 691 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 218:  #line 692 "grammar/xp.jay"
    { $yyVal= MODIFIER_NATIVE; } break;
#line 1873 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
