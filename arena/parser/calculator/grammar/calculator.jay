%{
  $package= 'math';

  uses(
    'lang.types.Integer',
    'lang.types.Double',
    'math.functions.Factory',
    'math.functions.Call',
    'math.Constant',
    'math.Value',
    'math.Addition',
    'math.Subtraction',
    'math.Multiplication',
    'math.Division',
    'math.Power',
    'math.Modulo'
  );
%}

%token T_INTEGER T_DOUBLE T_WORD
%left '+' '-' 
%left '*' '/' '^' '%'
%start expression

%%

expression:
    T_INTEGER { $$= new math·Value(new Integer($1)); }
  | T_DOUBLE { $$= new math·Value(new Double($1)); }
  | T_WORD '(' arguments ')' { $$= new math·functions·Call(math·functions·Factory::forName($1), $3); }
  | T_WORD { $$= Enum::valueOf(XPClass::forName('math.Constant'), $1); }
  | '-' expression { $$= new math·Multiplication(new math·Value(new Integer(-1)), $2); }
  | expression '+' expression { $$= new math·Addition($1, $3); }
  | expression '-' expression { $$= new math·Subtraction($1, $3); }
  | expression '*' expression { $$= new math·Multiplication($1, $3); }
  | expression '/' expression { $$= new math·Division($1, $3); }
  | expression '^' expression { $$= new math·Power($1, $3); }
  | expression '%' expression { $$= new math·Modulo($1, $3); }
  | '(' expression ')' { $$= $2; }
;

arguments:
    expression { $$= array($1); }
  | arguments ',' expression { $$= array_merge($1, array($3)); }
;

%%
