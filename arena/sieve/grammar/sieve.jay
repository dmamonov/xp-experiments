%{
  uses(
    'peer.sieve.RuleSet',
    'peer.sieve.Rule',
    'peer.sieve.ActionFactory',
    'peer.sieve.AllOfCondition',
    'peer.sieve.NegationOfCondition',
    'peer.sieve.AnyOfCondition',
    'peer.sieve.HeaderCondition',
    'peer.sieve.SizeCondition',
    'peer.sieve.AddressCondition',
    'peer.sieve.BooleanCondition'
  );
%}

%token T_WORD 260
%token T_STRING 261
%token T_NUMBER 263

%token T_REQUIRE 270

%token T_IF 280
%token T_ELSEIF 281

%token T_ALLOF 290
%token T_ANYOF 291
%token T_NOT 292

%token T_HEADER 300
%token T_SIZE 301
%token T_ADDRESS 302
%token T_TRUE 303
%token T_FALSE 304
%token T_COMPARATOR 305

%%

start:
    requires_opt rules_opt {
      $$= new peer新ieve愛uleSet();
      $$->required= $1;
      $$->rules= $2;
    }
;

// {{{ Required items
requires_opt:
    /* empty */ { $$= NULL; }
  | requires 
;

requires:
    require { $$= $1; }
  | require requires { $$= array_merge(array($1), $2); }
;

require:
    T_REQUIRE '[' stringlist ']' ';' { $$= $3; }
;
// }}}

// {{{ Rules
rules_opt:
    /* empty */ { $$= NULL; }
  | rules 
;

rules:
    rule { $$= array($1); }
  | rule rules { $$= array_merge(array($1), $2); }
;

rule:
    T_IF { $1= $yyLex->create(new peer新ieve愛ule()); } test '{' actions '}' else_opt {
      $1->condition= $3;
      $1->actions= $5;
    }
  | actions { 
      $$= $yyLex->create(new peer新ieve愛ule());
      $$->condition= NULL;
      $$->actions= $1;
    }
      
;

else_opt:
    /* empty */ { $$= NULL; }
  | T_ELSEIF test '{' actions '}' else_opt
;
// }}}

actions:
    action { $$= array($1); }
  | action actions { $$= array_merge(array($1), $2); }
;

action:
    T_WORD { $1= $yyLex->create(ActionFactory::newAction($1)); } taglist_opt arguments_opt ';' {
      $1->tags= $3;
      $1->arguments= $4;
    }
;

// {{{ Tests
//     E.g. allof (address :regex ["From"] "bug[\-\+](.*)?@laudi\.de")
test:
    T_ALLOF { $1= $yyLex->create(new AllOfCondition()); } '(' testlist ')' {
      $1->conditions= $4;
    }
  | T_ANYOF { $1= $yyLex->create(new AnyOfCondition()); } '(' testlist ')' {
      $1->conditions= $4;
    }
  | T_NOT { $1= $yyLex->create(new NegationOfCondition()); } test {
      $1->condition= $2;
    }
  | T_HEADER { $1= $yyLex->create(new HeaderCondition()); } taglist arguments { 
      $1->tags= $3;
      $1->arguments= $4;
    }
  | T_SIZE ':' T_WORD { 
      try { 
        $1= $yyLex->create(SizeCondition::forName($3)); 
      } catch (IllegalArgumentException $e) { 
        $this->error(E_ERROR, $e->getMessage().' at '.$yyLex->fileName.', line '.$yyLex->position[0]); 
        $1= NULL;
      }
    } T_NUMBER {
      $1 && $1->value= intval($5);
    }
  | T_ADDRESS { $1= $yyLex->create(new AddressCondition()); } taglist arguments {
      $1->tags= $3;
      $1->arguments= $4;
    }
  | T_TRUE { 
      $$= $yyLex->create(new BooleanCondition(TRUE));
    }
  | T_FALSE { 
      $$= $yyLex->create(new BooleanCondition(FALSE));
    }
;

taglist_opt:
    /* Empty */ { $$= NULL; }
  | taglist
;

taglist:
    tag { $$= $1; }
  | tag taglist { $$= array_merge($1, $2); }
;

tag:
    ':' T_WORD tag { $$= array_merge(array($2 => NULL), $3); }
  | ':' T_WORD argument { $$= array($2 => $3); }
  | ':' T_COMPARATOR T_STRING { $$= array($2 => $3); }
;

testlist:
    test { $$= array($1); }
  | test ',' testlist { $$= array_merge(array($1), $3); }
;

arguments_opt:
    /* Empty */ { $$= NULL; }
  | arguments
;

arguments:
    argument { $$= array($1); }
  | argument arguments { $$= array_merge(array($1), $2); }
;

argument:
    T_STRING
  | T_NUMBER
  | '[' stringlist ']' { $$= $2; }
;

// }}}


// {{{ List of strings
stringlist:
    T_STRING { $$= array($1); }
  | T_STRING ',' stringlist  { $$= array_merge(array($1), $3); }
;

// }}}
%%
