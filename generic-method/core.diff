diff -ur /home/Timm Friebe/devel/xp.public/core/src/main/php/lang/ArrayType.class.php src/main/php/lang/ArrayType.class.php
--- /home/Timm Friebe/devel/xp.public/core/src/main/php/lang/ArrayType.class.php	2011-05-02 09:02:52.376748700 +0200
+++ src/main/php/lang/ArrayType.class.php	2012-01-15 17:16:50.058000000 +0100
@@ -14,6 +14,33 @@
    * @purpose  Type implementation
    */
   class ArrayType extends Type {
+    public $default = array();
+
+    /**
+     * Returns a new instance of this object
+     *
+     * @param   var value
+     * @return  var
+     */
+    public function newInstance($value= NULL) {
+      if (!$this->isInstance($value)) {
+        raise('lang.IllegalArgumentException', 'Cannot create instances of the array type from '.xp::typeOf($value));
+      }
+      return $value;
+    }
+
+    /**
+     * Returns a new instance of this object
+     *
+     * @param   var value
+     * @return  var
+     */
+    public function cast($value) {
+      if (!$this->isInstance($value)) {
+        raise('lang.ClassCastException', 'Cannot cast '.xp::typeOf($value).' to the array type');
+      }
+      return $value;
+    }
   
     /**
      * Gets this array's component type
diff -ur /home/Timm Friebe/devel/xp.public/core/src/main/php/lang/MapType.class.php src/main/php/lang/MapType.class.php
--- /home/Timm Friebe/devel/xp.public/core/src/main/php/lang/MapType.class.php	2011-05-02 09:02:52.469748700 +0200
+++ src/main/php/lang/MapType.class.php	2012-01-15 17:16:47.505000000 +0100
@@ -14,6 +14,33 @@
    * @purpose  Type implementation
    */
   class MapType extends Type {
+    public $default = array();
+
+    /**
+     * Returns a new instance of this object
+     *
+     * @param   var value
+     * @return  var
+     */
+    public function newInstance($value= NULL) {
+      if (!$this->isInstance($value)) {
+        raise('lang.IllegalArgumentException', 'Cannot create instances of the map type from '.xp::typeOf($value));
+      }
+      return $value;
+    }
+
+    /**
+     * Returns a new instance of this object
+     *
+     * @param   var value
+     * @return  var
+     */
+    public function cast($value) {
+      if (!$this->isInstance($value)) {
+        raise('lang.ClassCastException', 'Cannot cast '.xp::typeOf($value).' to the map type');
+      }
+      return $value;
+    }
   
     /**
      * Gets this array's component type
diff -ur /home/Timm Friebe/devel/xp.public/core/src/main/php/lang/Object.class.php src/main/php/lang/Object.class.php
--- /home/Timm Friebe/devel/xp.public/core/src/main/php/lang/Object.class.php	2011-05-02 09:02:52.482748700 +0200
+++ src/main/php/lang/Object.class.php	2012-01-15 16:25:38.672000000 +0100
@@ -92,6 +92,9 @@
     public function __call($name, $args) {
       if ("\7" === $name{0}) {
         return call_user_func_array(array($this, substr($name, 1)), $args);
+      } else if (FALSE !== ($p= strpos($name, '<'))) {
+        array_unshift($args, Type::forName(substr($name, $p+ 1, -1)));
+        return call_user_func_array(array($this, substr($name, 0, $p).'«»'), $args);
       }
       $t= debug_backtrace();
       $i= 1; $s= sizeof($t);
diff -ur /home/Timm Friebe/devel/xp.public/core/src/main/php/lang/Primitive.class.php src/main/php/lang/Primitive.class.php
--- /home/Timm Friebe/devel/xp.public/core/src/main/php/lang/Primitive.class.php	2011-07-22 23:12:22.075000000 +0200
+++ src/main/php/lang/Primitive.class.php	2012-01-15 17:16:41.373000000 +0100
@@ -38,11 +38,22 @@
       $INTEGER = NULL;    // deprecated
     
     static function __static() {
-      self::$STRING= new self('string');
-      self::$INTEGER= self::$INT= new self('int');
-      self::$DOUBLE= new self('double');
-      self::$BOOLEAN= self::$BOOL= new self('bool');
-      self::$ARRAY= new self('array');
+      self::$STRING= new self('string', '');
+      self::$INTEGER= self::$INT= new self('int', 0);
+      self::$DOUBLE= new self('double', 0.0);
+      self::$BOOLEAN= self::$BOOL= new self('bool', FALSE);
+      self::$ARRAY= new self('array', array());
+    }
+    
+    /**
+     * Creates a new primitive instance
+     *
+     * @param   string name
+     * @param   var default
+     */
+    public function __construct($name, $default) {
+      parent::__construct($name);
+      $this->default= $default;
     }
     
     /**
@@ -60,6 +71,32 @@
         case self::$ARRAY: return XPClass::forName('lang.types.ArrayList'); // deprecated
       }
     }
+
+    /**
+     * Returns a new instance of this object
+     *
+     * @param   var value
+     * @return  var
+     */
+    public function newInstance($value= NULL) {
+      if (!$this->isInstance($value)) {
+        raise('lang.IllegalArgumentException', 'Cannot create instances of the '.$this->name.' type from '.xp::typeOf($value));
+      }
+      return $value;
+    }
+
+    /**
+     * Returns a new instance of this object
+     *
+     * @param   var value
+     * @return  var
+     */
+    public function cast($value) {
+      if (!$this->isInstance($value)) {
+        raise('lang.ClassCastException', 'Cannot cast '.xp::typeOf($value).' to the '.$this->name.' type');
+      }
+      return $value;
+    }
     
     /**
      * Boxes a type - that is, turns Generics into primitives
diff -ur /home/Timm Friebe/devel/xp.public/core/src/main/php/lang/Type.class.php src/main/php/lang/Type.class.php
--- /home/Timm Friebe/devel/xp.public/core/src/main/php/lang/Type.class.php	2011-05-02 09:02:52.560748700 +0200
+++ src/main/php/lang/Type.class.php	2012-01-15 17:16:37.980000000 +0100
@@ -21,7 +21,8 @@
       $VOID;
 
     public
-      $name= '';
+      $name    = '',
+      $default = NULL;
 
     static function __static() {
       self::$ANY= self::$VAR= new self('var');
@@ -38,6 +39,32 @@
     }
 
     /**
+     * Returns a new instance of this object
+     *
+     * @param   var value
+     * @return  var
+     */
+    public function newInstance($value= NULL) {
+      if (self::$VAR === $this) return $value;
+
+      // Default implementation
+      raise('lang.IllegalArgumentException', 'Cannot create instances of the '.$this->name.' type');
+    }
+
+    /**
+     * Returns a new instance of this object
+     *
+     * @param   var value
+     * @return  var
+     */
+    public function cast($value) {
+      if (self::$VAR === $this) return $value;
+
+      // Default implementation
+      raise('lang.ClassCastException', 'Cannot cast to the '.$this->name.' type');
+    }
+
+    /**
      * Retrieves the fully qualified class name for this class.
      * 
      * @return  string name - e.g. "io.File", "rdbms.mysql.MySQL"
diff -ur /home/Timm Friebe/devel/xp.public/core/src/main/php/lang/XPClass.class.php src/main/php/lang/XPClass.class.php
--- /home/Timm Friebe/devel/xp.public/core/src/main/php/lang/XPClass.class.php	2011-11-02 11:26:08.910947300 +0100
+++ src/main/php/lang/XPClass.class.php	2012-01-15 17:32:02.573000000 +0100
@@ -143,7 +143,7 @@
      * @return  lang.Object 
      * @throws  lang.IllegalAccessException in case this class cannot be instantiated
      */
-    public function newInstance() {
+    public function newInstance($value= NULL) {
       if ($this->_reflect->isInterface()) {
         throw new IllegalAccessException('Cannot instantiate interfaces ('.$this->name.')');
       } else if ($this->_reflect->isAbstract()) {
@@ -193,7 +193,7 @@
       }
       return $list;
     }
-
+    
     /**
      * Gets a method by a specified name.
      *
@@ -203,8 +203,12 @@
      * @throws  lang.ElementNotFoundException
      */
     public function getMethod($name) {
-      if ($this->hasMethod($name)) {
+      if (0 === strncmp('__', $name, 2)) {
+        return FALSE;
+      } else if ($this->_reflect->hasMethod($name)) {
         return new Method($this->_class, $this->_reflect->getMethod($name));
+      } else if ($this->_reflect->hasMethod($g= $name.'«»')) {
+        return new Method($this->_class, $this->_reflect->getMethod($g));
       }
       raise('lang.ElementNotFoundException', 'No such method "'.$name.'" in class '.$this->name);
     }
@@ -221,10 +225,13 @@
      * @return  bool TRUE if method exists
      */
     public function hasMethod($method) {
-      return ((0 === strncmp('__', $method, 2))
-        ? FALSE
-        : $this->_reflect->hasMethod($method)
-      );
+      if (0 === strncmp('__', $method, 2)) {
+        return FALSE;
+      } else if ($this->_reflect->hasMethod($method)) {
+        return TRUE;
+      } else if ($this->_reflect->hasMethod($method.'«»')) {
+        return TRUE;
+      }
     }
     
     /**
@@ -347,11 +354,11 @@
     /**
      * Cast a given object to the class represented by this object
      *
-     * @param   lang.Generic expression
+     * @param   var expression
      * @return  lang.Generic the given expression
      * @throws  lang.ClassCastException
      */
-    public function cast(Generic $expression= NULL) {
+    public function cast($expression) {
       if (NULL === $expression) {
         return xp::null();
       } else if (is($this->name, $expression)) {
diff -ur /home/Timm Friebe/devel/xp.public/core/src/main/php/lang/reflect/Method.class.php src/main/php/lang/reflect/Method.class.php
--- /home/Timm Friebe/devel/xp.public/core/src/main/php/lang/reflect/Method.class.php	2012-01-08 12:32:37.197347800 +0100
+++ src/main/php/lang/reflect/Method.class.php	2012-01-15 18:02:34.759000000 +0100
@@ -15,6 +15,91 @@
    * @test  xp://net.xp_framework.unittest.reflection.ReflectionTest
    */
   class Method extends Routine {
+    protected $generic= NULL;
+  
+    /**
+     * Creates a new method instance
+     *
+     * @param   string name
+     * @param   php.ReflectionMethod reflect
+     */
+    public function __construct($name, $reflect) {
+      parent::__construct($name, $reflect);
+      if ('«»' === substr($this->_reflect->name, -2)) {
+        $this->generic= $this->getAnnotation('generic', 'self');
+      }
+    }
+  
+    /**
+     * Returns whether this is a generic method
+     *
+     * @return  bool
+     */
+    public function isGeneric() {
+      return NULL !== $this->generic;
+    }
+    
+    /**
+     * Returns this method's name
+     *
+     * @return  string
+     */
+    public function getName() {
+      return $this->generic
+        ? substr($this->_reflect->name, 0, -2).'<'.$this->generic.'>'
+        : $this->_reflect->name
+      ;
+    }
+
+    /**
+     * Returns whether this is a generic method
+     *
+     * @return  bool
+     */
+    public function genericComponents() {
+      if (!$this->generic) {
+        throw new IllegalStateException('Method '.$this->_reflect->name.' is not generic');
+      }
+      $components= array();
+      foreach (explode(',', $this->generic) as $name) {
+        $components[]= ltrim($name);
+      }
+      return $components;
+    }
+
+    /**
+     * Returns this method's parameters
+     *
+     * @return  lang.reflect.Parameter[]
+     */
+    public function getParameters() {
+      $parameters= parent::getParameters();
+      if (NULL === $this->generic) {
+        return $parameters;
+      } else {
+        return array_slice($parameters, 1 + substr_count($this->generic, ','));
+      }
+    }
+
+    /**
+     * Retrieve one of this method's parameters by its offset
+     *
+     * @param   int offset
+     * @return  lang.reflect.Parameter or NULL if it does not exist
+     */
+    public function getParameter($offset) {
+      return parent::getParameter($offset + (NULL === $this->generic ? 0 : 1 + substr_count($this->generic, ',')));
+    }
+    
+    /**
+     * Retrieve how many parameters this method declares (including optional 
+     * ones)
+     *
+     * @return  int
+     */
+    public function numParameters() {
+      return parent::numParameters() - (NULL === $this->generic ? 0 : 1 + substr_count($this->generic, ','));
+    }
 
     /**
      * Invokes the underlying method represented by this Method object, 
@@ -65,7 +150,7 @@
         throw new IllegalAccessException(sprintf(
           'Cannot invoke abstract %s::%s',
           $this->_class,
-          $this->_reflect->getName()
+          $this->getName()
         ));
       }
       if (!($m & MODIFIER_PUBLIC)) {
@@ -78,7 +163,7 @@
                 'Cannot invoke %s %s::%s from scope %s',
                 Modifiers::stringOf($this->getModifiers()),
                 $this->_class,
-                $this->_reflect->getName(),
+                $this->getName(),
                 $t[1]['class']
               ));
             }
@@ -94,7 +179,7 @@
         } catch (SystemExit $e) {
           throw $e;
         } catch (Throwable $e) {
-          throw new TargetInvocationException($this->_class.'::'.$this->_reflect->getName().'() ~ '.$e->getMessage(), $e);
+          throw new TargetInvocationException($this->_class.'::'.$this->getName().'() ~ '.$e->getMessage(), $e);
         }
       }
 
@@ -103,11 +188,11 @@
       } catch (SystemExit $e) {
         throw $e;
       } catch (Throwable $e) {
-        throw new TargetInvocationException($this->_class.'::'.$this->_reflect->getName().'() invocation failed', $e);
+        throw new TargetInvocationException($this->_class.'::'.$this->getName().'() invocation failed', $e);
       } catch (ReflectionException $e) {
 
         // This should never occur, we checked everything beforehand...
-        throw new TargetInvocationException($this->_class.'::'.$this->_reflect->getName().'() invocation failed', new XPException($e->getMessage()));
+        throw new TargetInvocationException($this->_class.'::'.$this->getName().'() invocation failed', new XPException($e->getMessage()));
       }
     }
   }
