<?xml version="1.0" encoding="UTF-8"?>
<report>
  <event code="RC_DYNAMIC_ERROR" source="PHPCS/Generic">
    <name>Erreur PHP_CodeSniffer</name>
    <message>:message</message>
    <level>ERROR</level>
    <category>Maintainability</category>
    <priority>MAJOR</priority>
  </event>
  <event code="RC_DYNAMIC_WARNING" source="PHPCS/Generic">
    <name>Warning PHP_CodeSniffer</name>
    <message>:message</message>
    <level>WARNING</level>
    <category>Maintainability</category>
    <priority>MAJOR</priority>
  </event>

  <!-- ClassCommentSniff -->
  <event code="XP_CLASS_COMMENT_EXCEPTION">
    <name>Class comment exception</name>
    <message>:message</message>
    <level>ERROR</level>
    <category>Reliability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/ClassCommentSniff</sniffer>
  </event>
  <event code="XP_CLASS_COMMENT_INVALID">
    <name>Class comment</name>
    <message>You must use /** style comments for a class comment</message>
    <level>ERROR</level>
    <category>Portability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/ClassCommentSniff</sniffer>
  </event>
  <event code="XP_CLASS_COMMENT_MISSING">
    <name>Class comment</name>
    <message>Class comment missing</message>
    <level>ERROR</level>
    <category>Usability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/ClassCommentSniff</sniffer>
  </event>
  <event code="XP_CLASS_COMMENT_EMPTY">
    <name>Class comment</name>
    <message>Class comment is empty</message>
    <level>ERROR</level>
    <category>Usability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/ClassCommentSniff</sniffer>
  </event>
  <event code="XP_CLASS_COMMENT_EXTRA_NEWLINE_BEFORE_SHORT_DESCRIPTION">
    <name>Class comment</name>
    <message>Extra blank line found before class comment short description</message>
    <level>WARNING</level>
    <category>Portability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/ClassCommentSniff</sniffer>
  </event>
  <event code="XP_CLASS_COMMENT_EXTRA_NEWLINE_BETWEEN_DESCRIPTION">
    <name>Class comment</name>
    <message>There must be exactly one blank line between descriptions in class comments</message>
    <level>WARNING</level>
    <category>Portability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/ClassCommentSniff</sniffer>
  </event>
  <event code="XP_CLASS_COMMENT_EXTRA_NEWLINE_BEFORE_TAGS">
    <name>Class comment</name>
    <message>There must be exactly one blank line before the tags in class comments</message>
    <level>WARNING</level>
    <category>Portability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/ClassCommentSniff</sniffer>
  </event>
  <event code="XP_CLASS_COMMENT_TAG_INVALID">
    <name>Invalid class comment tag</name>
    <message>:message</message>
    <level>ERROR</level>
    <category>Portability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/ClassCommentSniff</sniffer>
  </event>
  <event code="XP_CLASS_COMMENT_TAG_MISSING">
    <name>Tag missing in class comment</name>
    <message>:message</message>
    <level>ERROR</level>
    <category>Portability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/ClassCommentSniff</sniffer>
  </event>
  <event code="XP_CLASS_COMMENT_TAG_DUPLICATE">
    <name>Tag duplicate in class comment</name>
    <message>:message</message>
    <level>ERROR</level>
    <category>Portability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/ClassCommentSniff</sniffer>
  </event>
  <event code="XP_CLASS_COMMENT_TAG_GROPUPPED">
    <name>Tags not groupped in class comment</name>
    <message>:message</message>
    <level>WARNING</level>
    <category>Portability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/ClassCommentSniff</sniffer>
  </event>


  <!-- ClassDeclarationSniff -->
  <event code="XP_CLASS_DECLARATION_MISSING_BRACE">
    <name>Class declaration</name>
    <message>Missing class opening or closing brace</message>
    <level>ERROR</level>
    <category>Reliability</category>
    <priority>BLOCKER</priority>
    <sniffer>xp/Core/ClassDeclarationSniff</sniffer>
  </event>
  <event code="XP_CLASS_DECLARATION_OPENING_BRACE_WHITESPACE">
    <name>Class declaration</name>
    <message>Whitespace found after class opening brace (on the same line)</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/ClassDeclarationSniff</sniffer>
  </event>
  <event code="XP_CLASS_DECLARATION_ONE_SPACE_BEFORE_OPENING_BRACE">
    <name>Class declaration</name>
    <message>Expected exactly one space before class opening brace</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/ClassDeclarationSniff</sniffer>
  </event>


  <!-- ClassHeaderSniff -->
  <event code="XP_CLASS_HEADER_INVALID">
    <name>Class header</name>
    <message>You must use /** style comments for a file comment</message>
    <level>ERROR</level>
    <category>Portability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/ClassHeaderSniff</sniffer>
  </event>
  <event code="XP_CLASS_HEADER_MISSING">
    <name>Class header</name>
    <message>Missing file doc comment</message>
    <level>ERROR</level>
    <category>Maintainability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/ClassHeaderSniff</sniffer>
  </event>
  <event code="XP_CLASS_HEADER_NOT_AFTER_OPEN_TAG">
    <name>Class header</name>
    <message>File header not directly following open tag</message>
    <level>WARNING</level>
    <category>Portability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/ClassHeaderSniff</sniffer>
  </event>
  <event code="XP_CLASS_HEADER_EXCEPTION">
    <name>Class header exception</name>
    <message>:message</message>
    <level>ERROR</level>
    <category>Reliability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/ClassHeaderSniff</sniffer>
  </event>
  <event code="XP_CLASS_HEADER_NEWLINE_BEFORE_SHORT_DESCRIPTION">
    <name>Class header</name>
    <message>Extra newline(s) found before file comment short description</message>
    <level>WARNING</level>
    <category>Portability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/ClassHeaderSniff</sniffer>
  </event>
  <event code="XP_CLASS_HEADER_EMPTYLINE_BETWEEN_SHORT_DESCRIPTION_AND_SVNID">
    <name>Class header</name>
    <message>There must be an empty line between SVN ID tag and the description</message>
    <level>WARNING</level>
    <category>Portability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/ClassHeaderSniff</sniffer>
  </event>
  <event code="XP_CLASS_HEADER_EMPTYLINE_BETWEEN_DESCRIPTION_AND_ID">
    <name>Class header</name>
    <message>There must be exactly one blank line between description and the ID Tag</message>
    <level>WARNING</level>
    <category>Portability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/ClassHeaderSniff</sniffer>
  </event>
  <event code="XP_CLASS_HEADER_SVNID_CORRUPT">
    <name>Class header</name>
    <message>SVN Id tag is corrupt</message>
    <level>ERROR</level>
    <category>Portability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/ClassHeaderSniff</sniffer>
  </event>
  <event code="XP_CLASS_HEADER_SVNID_MISSING">
    <name>Class header</name>
    <message>SVN Id tag is missing</message>
    <level>ERROR</level>
    <category>Maintainability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/ClassHeaderSniff</sniffer>
  </event>
  <event code="XP_CLASS_HEADER_CONTENT_AFTER_SVNID">
    <name>Class header</name>
    <message>Extra content after SVN ID Tag</message>
    <level>WARNING</level>
    <category>Portability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/ClassHeaderSniff</sniffer>
  </event>


  <!-- FunctionCommentSniff -->
  <event code="XP_FUNCTION_COMMENT_INVALID">
    <name>Function comment</name>
    <message>You must use /** style comments for a function comment</message>
    <level>ERROR</level>
    <category>Portability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/FunctionCommentSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_COMMENT_MISSING">
    <name>Function comment</name>
    <message>Function comment missing</message>
    <level>ERROR</level>
    <category>Usability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/FunctionCommentSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_COMMENT_EMPTY">
    <name>Function comment</name>
    <message>Function comment is empty</message>
    <level>ERROR</level>
    <category>Usability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/FunctionCommentSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_COMMENT_NEWLINE_BEFORE_SHORT_DESCRIPTION">
    <name>Function comment</name>
    <message>Extra newline(s) found before function comment short description</message>
    <level>WARNING</level>
    <category>Portability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/FunctionCommentSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_COMMENT_EXTRA_NEWLINE_BETWEEN_DESCRIPTION">
    <name>Function comment</name>
    <message>There must be exactly one blank line between descriptions in function comments</message>
    <level>WARNING</level>
    <category>Portability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/FunctionCommentSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_COMMENT_EXTRA_NEWLINE_BEFORE_TAGS">
    <name>Function comment</name>
    <message>There must be exactly one blank line before the tags in function comments</message>
    <level>WARNING</level>
    <category>Portability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/FunctionCommentSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_COMMENT_THROWS_MUST_CONTAIN_CLASSNAME">
    <name>Function comment</name>
    <message>@throws tag must contain the exception class name</message>
    <level>ERROR</level>
    <category>Maintainability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/FunctionCommentSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_COMMENT_RETURN_MISSING">
    <name>Function comment</name>
    <message>Missing @return tag in function comment</message>
    <level>ERROR</level>
    <category>Maintainability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/FunctionCommentSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_COMMENT_RETURN_EMPTY">
    <name>Function comment</name>
    <message>@return tag is empty in function comment</message>
    <level>ERROR</level>
    <category>Maintainability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/FunctionCommentSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_COMMENT_PARAM_NOMATCH">
    <name>Doc comment var does not match actual variable name</name>
    <message>:message</message>
    <level>ERROR</level>
    <category>Maintainability</category>
    <priority>CRITICAL</priority>
    <sniffer>xp/Core/FunctionCommentSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_COMMENT_PARAM_SUPERFLUOUS">
    <name>Superfluous doc comment</name>
    <message>:message</message>
    <level>ERROR</level>
    <category>Maintainability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/FunctionCommentSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_COMMENT_PARAM_MISSING_NAME">
    <name>Missing parameter name</name>
    <message>:message</message>
    <level>ERROR</level>
    <category>Maintainability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/FunctionCommentSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_COMMENT_PARAM_MISSING_TYPE">
    <name>Missing parameter type</name>
    <message>:message</message>
    <level>ERROR</level>
    <category>Maintainability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/FunctionCommentSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_COMMENT_SPACE_AFTER_LONGEST_TYPE">
    <name>Function comment</name>
    <message>Expected 1 space after the longest type</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/FunctionCommentSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_COMMENT_SPACE_AFTER_LONGEST_VARIABLE">
    <name>Function comment</name>
    <message>Expected 1 space after the longest variable name</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/FunctionCommentSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_COMMENT_PARAM_MISSING">
    <name>Doc comment for param missing</name>
    <message>:message</message>
    <level>ERROR</level>
    <category>Maintainability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/FunctionCommentSniff</sniffer>
  </event>


  <!-- FunctionDeclarationArgumentSpacingSniff -->
  <event code="XP_FUNCTION_DECLARATION_ARGUMENT_SPACING_NOPSACE_BEFORE_EQUALS">
    <name>Function declaration</name>
    <message>Expected no spaces between argument and equals sign</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/FunctionDeclarationArgumentSpacingSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_DECLARATION_ARGUMENT_SPACING_ONESPACE_AFTER_EQUALS">
    <name>Function declaration</name>
    <message>Expected exactly one space between default value and equals sign</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/FunctionDeclarationArgumentSpacingSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_DECLARATION_ARGUMENT_SPACING_NOSPACE_BEFORE_COMMA">
    <name>Function declaration</name>
    <message>Expected no spaces between argument and comma</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/FunctionDeclarationArgumentSpacingSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_DECLARATION_ARGUMENT_ONESPACE_AFTER_HINT">
    <name>Function declaration</name>
    <message>Expected exactly one space between type hint and argument</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/FunctionDeclarationArgumentSpacingSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_DECLARATION_ARGUMENT_ONESPACE_BETWEEN_COMMA_AND_HINT">
    <name>Function declaration</name>
    <message>Expected exactly one space between comma and type hint</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/FunctionDeclarationArgumentSpacingSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_DECLARATION_ARGUMENT_ONESPACE_BETWEEN_COMMA_AND_ARGUMENT">
    <name>Function declaration</name>
    <message>Expected exactly one space between comma and argument</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/FunctionDeclarationArgumentSpacingSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_DECLARATION_ARGUMENT_ONESPACE_BETWEEN_BRACKET_AND_HINT">
    <name>Function declaration</name>
    <message>Expected no spaces between opening bracket and type hint</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/FunctionDeclarationArgumentSpacingSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_DECLARATION_ARGUMENT_ONESPACE_BETWEEN_BRACKET_AND_ARGUMENT">
    <name>Function declaration</name>
    <message>Expected no spaces between opening bracket and argument</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/FunctionDeclarationArgumentSpacingSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_DECLARATION_ARGUMENT_ONESPACE_BETWEEN_BRACKETS">
    <name>Function declaration</name>
    <message>Expected no spaces between brackets of function declaration</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/FunctionDeclarationArgumentSpacingSniff</sniffer>
  </event>
  <event code="XP_FUNCTION_DECLARATION_ARGUMENT_NOSPACE_BETWEEN_ARGUMENT_AND_CLOSING_BRACKET">
    <name>Function declaration</name>
    <message>Expected no spaces between argument and closing bracket</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/FunctionDeclarationArgumentSpacingSniff</sniffer>
  </event>


  <!-- LineLengthSniff -->
  <event code="XP_LINE_LENGTH_EXCEEDS_MAXIMUM_LIMIT">
    <name>Line exceeds maximum limit</name>
    <message>:message</message>
    <level>WARNING</level>
    <category>Portability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/LineLengthSniff</sniffer>
  </event>
  <event code="XP_LINE_LENGTH_EXCEEDS_LIMIT">
    <name>Line exceeds limit</name>
    <message>:message</message>
    <level>WARNING</level>
    <category>Portability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/LineLengthSniff</sniffer>
  </event>


  <!-- MemberVarScopeSniff -->
  <event code="XP_MEMBER_VAR_SCOPE_NOT_SPECIFIED">
    <name>Scope modifier not specified for member variable</name>
    <message>:message</message>
    <level>ERROR</level>
    <category>Portability</category>
    <priority>CRITICAL</priority>
    <sniffer>xp/Core/MemberVarScopeSniff</sniffer>
  </event>


  <!-- MultipleStatementAlignmentSniff -->
  <event code="XP_MULTIPLE_STATEMENT_ALIGNMENT_EQUALS_SIGN_NOT_ALIGNED_CORRECTLY">
    <name>Equals sign not aligned correctly</name>
    <message>:message</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/MultipleStatementAlignmentSniff</sniffer>
  </event>
  <event code="XP_MULTIPLE_STATEMENT_ALIGNMENT_EQUALS_SIGN_NOT_ALIGNED_WITH_SURROUNDING_ASSIGNMENTS">
    <name>Equals sign not aligned with surrounding assignments</name>
    <message>:message</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/MultipleStatementAlignmentSniff</sniffer>
  </event>


  <!-- OpenTagSniff -->
  <event code="XP_OPEN_TAG_SHORT_PHP_OPENING_TAG">
    <name>Short PHP opening tag used</name>
    <message>:message</message>
    <level>ERROR</level>
    <category>Portability</category>
    <priority>CRITICAL</priority>
    <sniffer>xp/Core/OpenTagSniff</sniffer>
  </event>
  <event code="XP_OPEN_TAG_SHORT_PHP_OPENING_TAG_WITH_ECHO">
    <name>Short PHP opening tag used with echo</name>
    <message>:message</message>
    <level>ERROR</level>
    <category>Portability</category>
    <priority>CRITICAL</priority>
    <sniffer>xp/Core/OpenTagSniff</sniffer>
  </event>
  <event code="XP_OPEN_TAG_EXTRA_CONTENT_BEFORE_OPEN_TAG">
    <name>Extra content before open tag</name>
    <message>Extra content before open tag</message>
    <level>ERROR</level>
    <category>Portability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/OpenTagSniff</sniffer>
  </event>


  <!-- ScopeClosingBraceSniff -->
  <event code="XP_SCOPE_CLOSING_BRACE_CLOSING_BRACE_MUST_BE_ON_A_LINE_BY_ITSELF">
    <name>Closing brace must be on a line by itself</name>
    <message>:message</message>
    <level>ERROR</level>
    <category>Usability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/ScopeClosingBraceSniff</sniffer>
  </event>
  <event code="XP_SCOPE_CLOSING_BRACE_BREAK_STATEMENT_INDENTED_INCORRECTLY">
    <name>Break statement indented incorrectly</name>
    <message>:message</message>
    <level>ERROR</level>
    <category>Usability</category>
    <priority>MAJOR</priority>
    <sniffer>xp/Core/ScopeClosingBraceSniff</sniffer>
  </event>
  <event code="XP_SCOPE_CLOSING_BRACE_CLOSING_BRACE_INDENTED_INCORRECTLY">
    <name>Closing brace indented incorrectly</name>
    <message>:message</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/ScopeClosingBraceSniff</sniffer>
  </event>


  <!-- ScopeIndentSniff -->
  <event code="XP_SCOPE_INDENT_LINE_INDENTED_INCORRECTLY">
    <name>Line indented incorrectly</name>
    <message>:message</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/ScopeIndentSniff</sniffer>
  </event>


  <!-- ValidVariableNameSniff -->
  <event code="XP_VALID_VARIABLE_NAME_NOT_IN_CAMEL_CAPS_FORMAT">
    <name>Variable is not in valid camel caps format</name>
    <message>:message</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/ValidVariableNameSniff</sniffer>
  </event>
  <event code="XP_VALID_VARIABLE_NAME_CONTAINS_NUMBERS">
    <name>Variable contains numbers but this is discouraged</name>
    <message>:message</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/ValidVariableNameSniff</sniffer>
  </event>
  <event code="XP_VALID_VARIABLE_NAME_NOT_CONTAIN_LEADING_UNDERSCORE">
    <name>Public member variable must not contain a leading underscore</name>
    <message>:message</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/ValidVariableNameSniff</sniffer>
  </event>
  
  <!-- Keyword sniff -->
  <event code="XP_WHITESPACE_AFTER_KEYWORD_MISSING">
    <name>White space after keyword is missing</name>
    <message>:message</message>
    <level>WARNING</level>
    <category>Usability</category>
    <priority>MINOR</priority>
    <sniffer>xp/Core/WhitespaceAfterKeywordSniff</sniffer>
  </event>
</report>
