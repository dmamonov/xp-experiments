<?xml version="1.0" encoding="ISO-8859-1" ?>
<documentation>
  <meta>
    <name>OEL - Opcode Engeneering Library for PHP</name>
    <author>
      <name>Wagner</name>
      <firstname>Ruben</firstname>
      <mail>ruben.wagner@qmx.net</mail>
    </author>
  </meta>

  <function name="oel_add_begin_array_init">
    <tokens>
      <token type="push" name="OEL_TYPE_TOKEN_ARRAY_INIT" />
    </tokens>
    <operands>
      <operand type="push">initialized array handle</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="array" /></tags>
    <description>
      Begin an array definition.
    </description>
  </function>

  <function name="oel_add_end_array_init">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_ARRAY_INIT" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="array" /></tags>
    <description>
      Finish  an array definition.
    </description>
  </function>

  <function name="oel_add_array_init_element">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_ARRAY_INIT" />
    </tokens>
    <operands>
      <operand type="pop">value of element</operand>
      <operand type="pop">array handle</operand>
      <operand type="push">array handle</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="bool" optional="TRUE" default="FALSE">TRUE if element is a reference</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="array" /></tags>
    <description>
      Add a value to an array.
    </description>
  </function>

  <function name="oel_add_array_init_key_element">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_ARRAY_INIT" />
    </tokens>
    <operands>
      <operand type="pop">value of first element</operand>
      <operand type="pop">key of first element</operand>
      <operand type="pop">array handle</operand>
      <operand type="push">array handle</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="bool" optional="TRUE" default="FALSE">TRUE for element is a reference</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="array" /></tags>
    <description>
      Add a value key pair to an array.
    </description>
  </function>

  <function name="oel_push_dim">
    <operands>
      <operand type="pop">key of the element to fetch</operand>
      <operand type="pop">array handle</operand>
      <operand type="push">array dimension handle</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="array" /></tags>
    <description>
      fetch an array dimension handle by key.
    </description>
  </function>

  <function name="oel_push_new_dim">
    <operands>
      <operand type="pop">array handle</operand>
      <operand type="push">array dimension handle</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="array" /></tags>
    <description>
      Fetch an new array dimension handle ($array[]= ...).
    </description>
  </function>

  <function name="oel_add_begin_staticarray_init">
    <tokens>
      <token type="push" name="OEL_TYPE_TOKEN_ARRAY_STATIC" />
    </tokens>
    <operands>
      <operand type="push">static array handle</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="array" /></tags>
    <description>
      Begin a static array definition.
    </description>
  </function>

  <function name="oel_add_end_staticarray_init">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_ARRAY_STATIC" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="array" /></tags>
    <description>
      end a static array definition.
    </description>
  </function>

  <function name="oel_add_staticarray_init_element">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_ARRAY_STATIC" />
    </tokens>
    <operands>
      <operand type="pop">value of element</operand>
      <operand type="pop">static array handle</operand>
      <operand type="push">static array handle</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="bool" optional="TRUE" default="FALSE">TRUE if element is a reference</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="array" /></tags>
    <description>
      Add an element to the static array.
    </description>
  </function>

  <function name="oel_add_staticarray_init_key_element">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_ARRAY_STATIC" />
    </tokens>
    <operands>
      <operand type="pop">value of element</operand>
      <operand type="pop">key of the element</operand>
      <operand type="pop">static array handle</operand>
      <operand type="push">static array handle</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="bool" optional="TRUE" default="FALSE">TRUE if element is a reference</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="array" /></tags>
    <description>
      Add a key element pair to the static array.
    </description>
  </function>

  <function name="oel_add_begin_list">
    <tokens>
      <token type="push" name="OEL_TYPE_TOKEN_LIST" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="array" /></tags>
    <description>
      Begin a list declaration (list($a, $b)= ...).
    </description>
  </function>

  <function name="oel_add_end_list">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_LIST" />
    </tokens>
    <operands>
      <operand type="pop">an array to assign to the list's elements</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="array" /></tags>
    <description>
      End a list declaration and assigns an array to its elements.
    </description>
  </function>

  <function name="oel_add_begin_inner_list">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_LIST|OEL_TYPE_TOKEN_LIST_INNER" />
      <token type="push" name="OEL_TYPE_TOKEN_LIST_INNER" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="array" /></tags>
    <description>
      Begin a list declaration inner an other list declaration.
    </description>
  </function>

  <function name="oel_add_end_inner_list">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_LIST_INNER" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="array" /></tags>
    <description>
      End a list declaration inner an other list declaration.
    </description>
  </function>

  <function name="oel_add_list_element">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_VARIABLE" />
      <token type="test" name="OEL_TYPE_TOKEN_LIST|OEL_TYPE_TOKEN_LIST_INNER" />
    </tokens>
    <operands>
      <operand type="pop">variable to add as list element</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="array" /></tags>
    <description>
      Add a list element to an open list
    </description>
  </function>

  <function name="oel_add_begin_class_declaration">
    <tokens>
      <token type="push" name="OEL_TYPE_TOKEN_CLASS" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">class name</parameter>
      <parameter type="string" optional="TRUE" default="none">parent class name</parameter>
      <parameter type="bool" optional="TRUE" default="FALSE">TRUE if class is final</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="class" /></tags>
    <description>
      Begin class definition.
    </description>
  </function>

  <function name="oel_add_end_class_declaration">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_CLASS" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="class" /></tags>
    <description>
      End class definition.
    </description>
  </function>

  <function name="oel_add_begin_abstract_class_declaration">
    <tokens>
      <token type="push" name="OEL_TYPE_TOKEN_ACLASS" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">class name</parameter>
      <parameter type="string" optional="TRUE" default="none">parent class name</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="class" /></tags>
    <description>
      Begin an abstract class definietion.
    </description>
  </function>

  <function name="oel_add_end_abstract_class_declaration">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_ACLASS" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="class" /></tags>
    <description>
      End an abstract class definietion.
    </description>
  </function>

  <function name="oel_add_begin_interface_declaration">
    <tokens>
      <token type="push" name="OEL_TYPE_TOKEN_ICLASS" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">interface name</parameter>
      <parameter type="string" optional="TRUE" default="none">parent interface name</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="class" /></tags>
    <description>
      Begin interface declaration.
    </description>
  </function>

  <function name="oel_add_end_interface_declaration">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_ICLASS" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="class" /></tags>
    <description>
      End interface declaration.
    </description>
  </function>

  <function name="oel_add_parent_interface">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_ICLASS" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">parent interface name</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="class" /></tags>
    <description>
      Add a parent interface to an interface.
    </description>
  </function>

  <function name="oel_add_implements_interface">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_CLASS|OEL_TYPE_TOKEN_ACLASS" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">implementing interface name</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="class" /></tags>
    <description>
      Add an interface to a class.
    </description>
  </function>

  <function name="oel_add_declare_property">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_CLASS|OEL_TYPE_TOKEN_ACLASS" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">property name</parameter>
      <parameter type="mixed" optional="TRUE" default="NULL">default value</parameter>
      <parameter type="bool" optional="TRUE" default="FALSE">TRUE if property is static</parameter>
      <parameter type="integer" optional="TRUE" default="OEL_ACC_PUBLIC">access flag (OEL_ACC_PRIVATE, OEL_ACC_PROTECTED, OEL_ACC_PUBLIC)</parameter>
    </parameters>
    <description>
      Add a class member to a class.
    </description>
  </function>

  <function name="oel_add_declare_class_constant">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_CLASS|OEL_TYPE_TOKEN_ACLASS|OEL_TYPE_TOKEN_ICLASS" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">class constant name</parameter>
      <parameter type="mixed" optional="FALSE">class constant value</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="class" /></tags>
    <description>
      Add a class constant to a class.
    </description>
  </function>

  <function name="oel_add_instanceof">
    <operands>
      <operand type="pop">varable to test</operand>
      <operand type="push">test result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">class name to test for</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="class" /></tags>
    <description>
      Test a variable for being an instance of a certain class.
    </description>
  </function>

  <function name="oel_add_clone">
    <operands>
      <operand type="pop">object to clone</operand>
      <operand type="push">cloned object</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="class" /></tags>
    <description>
      Clone an object.
    </description>
  </function>

  <function name="oel_add_begin_if">
    <tokens>
      <token type="push" name="OEL_TYPE_TOKEN_ELSE" />
      <token type="push" name="OEL_TYPE_TOKEN_IF" />
    </tokens>
    <operands>
      <operand type="pop">result of condition test</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="control" /></tags>
    <description>
      Begin an if-then-else block.
    </description>
  </function>

  <function name="oel_add_end_if">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_IF" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="control" /></tags>
    <description>
      End an if block and begin an else block.
    </description>
  </function>

  <function name="oel_add_end_else">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_ELSE" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="control" /></tags>
    <description>
      End an if-then-else block.
    </description>
  </function>

  <function name="oel_add_begin_elseif">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_ELSE" />
      <token type="push" name="OEL_TYPE_TOKEN_ELSEIF" />
    </tokens>
    <operands>
      <operand type="pop">result of condition test</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="control" /></tags>
    <description>
      Begin an elseif block.
    </description>
  </function>

  <function name="oel_add_end_elseif">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_ELSEIF" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="control" /></tags>
    <description>
      End an elseif block.
    </description>
  </function>

  <function name="oel_add_begin_switch">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_SWITCH" />
    </tokens>
    <operands>
      <operand type="pop">switch subject</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="control" /></tags>
    <description>
      Begin a switch block.
    </description>
  </function>

  <function name="oel_add_end_switch">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_SWITCH" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="control" /></tags>
    <description>
      End a switch block.
    </description>
  </function>

  <function name="oel_add_begin_case">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_SWITCH" />
      <token type="push" name="OEL_TYPE_TOKEN_SWITCH_CASE" />
    </tokens>
    <operands>
      <operand type="pop">switch case comperand</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="control" /></tags>
    <description>
      Begin an switch-case block.
    </description>
  </function>

  <function name="oel_add_end_case">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_SWITCH_CASE" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="control" /></tags>
    <description>
      End an switch-case block.
    </description>
  </function>

  <function name="oel_add_begin_default">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_SWITCH" />
      <token type="push" name="OEL_TYPE_TOKEN_SWITCH_DEFAULT" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="control" /></tags>
    <description>
      Begin an switch-default block.
    </description>
  </function>

  <function name="oel_add_end_default">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_SWITCH_DEFAULT" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="control" /></tags>
    <description>
      End an switch-default block.
    </description>
  </function>

  <function name="oel_new_op_array">
    <return type="resource(oel)">OEL resource handle</return>
    <tags><tag name="oel" /><tag name="core" /></tags>
    <description>
      Create new base opcode array.
    </description>
  </function>

  <function name="oel_finalize">
    <tokens>
      <token type="pop" name="OEL_TYPE_OAR_FUNCTION|OEL_TYPE_OAR_METHOD|OEL_TYPE_OAR_AMETHOD" certain="FALSE" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="core" /></tags>
    <description>
      Prepare execution or save op of an base opcode array. A finalized opcode array cannot be modified anymore.
    </description>
  </function>

  <function name="oel_execute">
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="core" /></tags>
    <description>
      Execute an opcode array.
    </description>
  </function>

  <function name="oel_add_echo">
    <operands>
      <operand type="pop">value to echo</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="core" /></tags>
    <description>
      Print anything to stdout.
    </description>
  </function>

  <function name="oel_add_return">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_VARIABLE" certain="FALSE" />
    </tokens>
    <operands>
      <operand type="pop">value to return</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="" optional="TRUE" default=""></parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="core" /></tags>
    <description>
      Return a value. Pop OEL_TYPE_TOKEN_VARIABLE if the value is a variable.
    </description>
  </function>

  <function name="oel_add_free">
    <operands>
      <operand type="pop">value to free</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operand" /></tags>
    <description>
      Destroy the top of the operand stack.
    </description>
  </function>

  <function name="oel_add_break">
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="TRUE" default="1">depth to break</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="loop" /><tag name="control" /></tags>
    <description>
      Break up a block.
    </description>
  </function>

  <function name="oel_add_continue">
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="TRUE" default="1">depth to continue</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="loop" /></tags>
    <description>
      Continue a loop body.
    </description>
  </function>

  <function name="oel_add_exit">
    <operands>
      <operand type="pop">value as exitcode</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="core" /></tags>
    <description>
      Exit processing.
    </description>
  </function>

  <function name="oel_add_include">
    <operands>
      <operand type="pop">include uri</operand>
      <operand type="push">result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="core" /></tags>
    <description>
      Include a php program.
    </description>
  </function>

  <function name="oel_add_include_once">
    <operands>
      <operand type="pop">include uri</operand>
      <operand type="push">result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="core" /></tags>
    <description>
      Include a php program once.
    </description>
  </function>

  <function name="oel_add_require">
    <operands>
      <operand type="pop">require uri</operand>
      <operand type="push">result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="core" /></tags>
    <description>
      Require a php program.
    </description>
  </function>

  <function name="oel_add_require_once">
    <operands>
      <operand type="pop">require uri</operand>
      <operand type="push">result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="core" /></tags>
    <description>
      Require a php program once.
    </description>
  </function>

  <function name="oel_add_eval">
    <operands>
      <operand type="pop">eval string</operand>
      <operand type="push">result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="core" /></tags>
    <description>
      Evaluate a source code string.
    </description>
  </function>

  <function name="oel_add_unset">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_VARIABLE" />
    </tokens>
    <operands>
      <operand type="pop">variable to unset</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operand" /></tags>
    <description>
      Unset a variable.
    </description>
  </function>

  <function name="oel_add_begin_while">
    <tokens>
      <token type="push" name="OEL_TYPE_TOKEN_WHILE" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="loop" /></tags>
    <description>
      Begin while loop head.
    </description>
  </function>

  <function name="oel_add_begin_while_body">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_WHILE" />
      <token type="push" name="OEL_TYPE_TOKEN_WHILE_BODY" />
    </tokens>
    <operands>
      <operand type="pop">condition result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="loop" /></tags>
    <description>
      End while loop head and begin while loop body.
    </description>
  </function>

  <function name="oel_add_end_while">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_WHILE_BODY" />
      <token type="pop" name="OEL_TYPE_TOKEN_WHILE" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="loop" /></tags>
    <description>
      End while loop body.
    </description>
  </function>

  <function name="oel_add_begin_dowhile">
    <tokens>
      <token type="push" name="OEL_TYPE_TOKEN_DOWHILE" />
      <token type="push" name="OEL_TYPE_TOKEN_DOWHILE_BODY" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="loop" /></tags>
    <description>
      Begin dowhile loop body.
    </description>
  </function>

  <function name="oel_add_end_dowhile_body">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_DOWHILE_BODY" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="loop" /></tags>
    <description>
      End dowhile loop body and begin condition.
    </description>
  </function>

  <function name="oel_add_end_dowhile">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_DOWHILE_BODY" />
      <token type="pop" name="OEL_TYPE_TOKEN_DOWHILE" />
    </tokens>
    <operands>
      <operand type="pop">loop condition result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="loop" /></tags>
    <description>
      End dowhile loop.
    </description>
  </function>

  <function name="oel_add_begin_foreach">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_VARIABLE" certain="FALSE" />
      <token type="pop" name="OEL_TYPE_TOKEN_FOREACH" />
      <token type="pop" name="OEL_TYPE_TOKEN_FOREACH_HEAD" />
    </tokens>
    <operands>
      <operand type="pop">array to iterate</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="loop" /></tags>
    <description>
      Begin foreach loop. Array can be static or a function result, so OEL_TYPE_TOKEN_VARIABLE won't be poped.
    </description>
  </function>

  <function name="oel_add_begin_foreach_body">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_VARIABLE" certain="FALSE" />
      <token type="pop" name="OEL_TYPE_TOKEN_VARIABLE" />
      <token type="pop" name="OEL_TYPE_TOKEN_FOREACH_HEAD" />
      <token type="test" name="OEL_TYPE_TOKEN_FOREACH" />
    </tokens>
    <operands>
      <operand type="pop">key can be NULL to ommit</operand>
      <operand type="pop">value</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="bool" optional="TRUE" default="FALSE">TRUE if value is a reference</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="loop" /></tags>
    <description>
      End foreach loop head and begin foreach body. Key can be NULL, so OEL_TYPE_TOKEN_VARIABLE won't be poped.
    </description>
  </function>

  <function name="oel_add_end_foreach">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_FOREACH" />
      <token type="test" name="" />
      <token type="push" name="" />
    </tokens>
    <operands>
      <operand type="pop"></operand>
      <operand type="push"></operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="loop" /></tags>
    <description>
      begin foreach body.
    </description>
  </function>

  <function name="oel_add_receive_arg">
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="FALSE">argument position (starts with 1)</parameter>
      <parameter type="string" optional="FALSE">name of the parameter</parameter>
      <parameter type="mixed" optional="TRUE" default="NULL">default value (if present and not NULL parameter is optional)</parameter>
      <parameter type="string" optional="TRUE" default="none">class type</parameter>
      <parameter type="bool" optional="TRUE" default="FALSE">TRUE if parameter is a reference</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="procedure" /></tags>
    <description>
      define a parameter of a function/method.
    </description>
  </function>

  <function name="oel_add_static_variable">
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">variable name</parameter>
      <parameter type="mixed" optional="FALSE">initial value</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operand" /></tags>
    <description>
      Declare a static variable.
    </description>
  </function>

  <function name="oel_add_begin_variable_parse">
    <tokens>
      <token type="push" name="OEL_TYPE_TOKEN_VARIABLE" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operand" /></tags>
    <description>
      Prepare back patch stack for a chained expression.
    </description>
  </function>

  <function name="oel_add_end_variable_parse">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_VARIABLE" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="" optional="TRUE" default=""></parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operand" /></tags>
    <description>
      End expression and declare it readable.
    </description>
  </function>

  <function name="oel_push_variable">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_VARIABLE" />
    </tokens>
    <operands>
      <operand type="push">variable</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">variable name</parameter>
      <parameter type="string" optional="TRUE" default="NULL">class name for static access</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operand" /></tags>
    <description>
      Push a variable by name on the operand stack. If it is a static member of a class, it's class name must be named as second parameter.
    </description>
  </function>

  <function name="oel_push_variable_indirect">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_VARIABLE" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="FALSE">number of indirections</parameter>
      <parameter type="string" optional="FALSE">variable name</parameter>
      <parameter type="string" optional="TRUE" default="NULL">class name for static access</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operand" /></tags>
    <description>
      Push a variable by it name on the operand stack. The variable name is storen in a variable.
      If it is a static member of a class, it's class name must be named as second parameter.
      (fetch b indirect with indirection level 2: $a= "b"; $$a;)
    </description>
  </function>

  <function name="oel_push_property">
    <operands>
      <operand type="pop">object</operand>
      <operand type="push">property</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">property name</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operand" /></tags>
    <description>
      Push an object member on the operand stack.
    </description>
  </function>

  <function name="oel_push_constant">
    <operands>
      <operand type="push">constant value</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">name of the constant</parameter>
      <parameter type="string" optional="TRUE" default="NULL">class name</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operand" /></tags>
    <description>
      Push a constant on the operand stack.
      If it is a constant of a class, it's class name must be named as second parameter.
    </description>
  </function>

  <function name="oel_push_value">
    <operands>
      <operand type="push">value</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="mixed" optional="FALSE">value</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operand" /></tags>
    <description>
      Push a value on the stack.
    </description>
  </function>

  <function name="oel_add_unary_op">
    <operands>
      <operand type="pop">operand</operand>
      <operand type="pop">result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="FALSE">operation</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operation" /></tags>
    <description>
      perform an operation on one operand. Operations:
        OEL_UNARY_OP_BOOL_NOT: boolean not
        OEL_UNARY_OP_BW_NOT: bitwise not
    </description>
  </function>

  <function name="oel_add_incdec_op">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_VARIABLE" />
    </tokens>
    <operands>
      <operand type="pop">variable</operand>
      <operand type="push">result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="FALSE">operation</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operation" /></tags>
    <description>
      Perform an incrementation or a decrementation. Operations:<code><pre>
        OEL_OP_POST_INC: $a++
        OEL_OP_POST_DEC: $a--
        OEL_OP_PRE_INC:  ++$a
        OEL_OP_PRE_DEC:  --$a</pre></code>
    </description>
  </function>

  <function name="oel_add_binary_op">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_VARIABLE" certain="FALSE" />
    </tokens>
    <operands>
      <operand type="pop">lefthand operand</operand>
      <operand type="pop">righthand operand</operand>
      <operand type="push">result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="FALSE">operation</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operation" /></tags>
    <description>
      Perform an operation with two operands.
      OEL_TYPE_TOKEN_VARIABLE is poped if operation is an assign operation.
      Operations:<code><pre>
        OEL_BINARY_OP_BW_OR:               $a | $b
        OEL_BINARY_OP_BW_AND:              $a &amp; $b
        OEL_BINARY_OP_BW_XOR:              $a ^ $b
        OEL_BINARY_OP_CONCAT:              $a.$b
        OEL_BINARY_OP_ADD:                 $a + $b
        OEL_BINARY_OP_SUB:                 $a - $b
        OEL_BINARY_OP_MUL:                 $a * $b
        OEL_BINARY_OP_DIV:                 $a / $b
        OEL_BINARY_OP_MOD:                 $a % $b
        OEL_BINARY_OP_SL:                  $a &lt;&lt; $b
        OEL_BINARY_OP_SR:                  $a &gt;&gt; $b
        OEL_BINARY_OP_IS_IDENTICAL:        $a === $b
        OEL_BINARY_OP_IS_NOT_IDENTICAL:    $a !== $b
        OEL_BINARY_OP_IS_EQUAL:            $a == $b
        OEL_BINARY_OP_IS_NOT_EQUAL:        $a != $b
        OEL_BINARY_OP_IS_SMALLER:          $a &lt; $b
        OEL_BINARY_OP_IS_SMALLER_OR_EQUAL: $a &lt;= $b
        OEL_BINARY_OP_BOOL_XOR:            $a xor $b</pre></code>
      Assign Operations:<code><pre>
        OEL_BINARY_OP_ASSIGN_ADD:    $a+= $b
        OEL_BINARY_OP_ASSIGN_SUB:    $a-= $b
        OEL_BINARY_OP_ASSIGN_MUL:    $a*= $b
        OEL_BINARY_OP_ASSIGN_DIV:    $a/= $b
        OEL_BINARY_OP_ASSIGN_CONCAT: $a.= $b
        OEL_BINARY_OP_ASSIGN_MOD:    $a%= $b
        OEL_BINARY_OP_ASSIGN_BW_AND: $a&amp;= $b
        OEL_BINARY_OP_ASSIGN_BW_OR:  $a|= $b
        OEL_BINARY_OP_ASSIGN_BW_XOR: $a^= $b
        OEL_BINARY_OP_ASSIGN_SL:     $a&lt;&lt;= $b
        OEL_BINARY_OP_ASSIGN_SR:     $a&gt;&gt;= $b</pre></code>
    </description>
  </function>

  <function name="oel_add_begin_tinary_op">
    <tokens>
      <token type="push" name="OEL_TYPE_TOKEN_TINARY1" />
    </tokens>
    <operands>
      <operand type="pop">condition result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operation" /></tags>
    <description>
      Begin tinary operator positiv part (?:).
    </description>
  </function>

  <function name="oel_add_end_tinary_op_true">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_TINARY1" />
      <token type="push" name="OEL_TYPE_TOKEN_TINARY2" />
    </tokens>
    <operands>
      <operand type="pop">expression result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operation" /></tags>
    <description>
      End tinary operator positiv part and begin negativ part.
    </description>
  </function>

  <function name="oel_add_end_tinary_op_false">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_TINARY2" />
      <token type="pop" name="OEL_TYPE_TOKEN_TINARY1" />
    </tokens>
    <operands>
      <operand type="pop">expression result</operand>
      <operand type="push">result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operation" /></tags>
    <description>
      End negativ part.
    </description>
  </function>

  <function name="oel_add_begin_logical_op">
    <tokens>
      <token type="push" name="OEL_TYPE_TOKEN_LOGIC_AND|OEL_TYPE_TOKEN_LOGIC_OR" />
    </tokens>
    <operands>
      <operand type="pop">lefthand expression result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="FALSE">operation</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operation" /></tags>
    <description>
      Begin a logical operation. Operation:<code><pre>
      OEL_OP_BOOL_AND: $a &amp;&amp; $b
      OEL_OP_BOOL_OR:  $a || $b</pre></code>
    </description>
  </function>

  <function name="oel_add_end_logical_op">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_LOGIC_AND|OEL_TYPE_TOKEN_LOGIC_OR" />
    </tokens>
    <operands>
      <operand type="pop">righthand expression result</operand>
      <operand type="push">result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="FALSE">operation</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operation" /></tags>
    <description>
      End a logical operation.
    </description>
  </function>

  <function name="oel_add_cast_op">
    <operands>
      <operand type="pop">operand</operand>
      <operand type="push">result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="FALSE">operation</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operation" /></tags>
    <description>
      Cast an operand. Operations:<code><pre>
      OEL_OP_TO_INT:    cast to integer
      OEL_OP_TO_DOUBLE: cast to double
      OEL_OP_TO_STRING: cast to string
      OEL_OP_TO_ARRAY:  cast to array
      OEL_OP_TO_OBJECT: cast to object(std)
      OEL_OP_TO_BOOL:   cast to bool
      OEL_OP_TO_UNSET:  cast to NULL</pre></code>
    </description>
  </function>

  <function name="oel_add_assign">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_VARIABLE" />
    </tokens>
    <operands>
      <operand type="pop">value to assign</operand>
      <operand type="pop">variable to assign to</operand>
      <operand type="push">assigned value</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="bool" optional="TRUE" default="FALSE">TRUE to assign as reference</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operation" /></tags>
    <description>
      Assign anything to a variable.
    </description>
  </function>

  <function name="oel_add_empty">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_VARIABLE" />
    </tokens>
    <operands>
      <operand type="pop">varable to test</operand>
      <operand type="push">result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operation" /></tags>
    <description>
      Test if variable is empty
    </description>
  </function>

  <function name="oel_add_isset">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_VARIABLE" />
    </tokens>
    <operands>
      <operand type="pop">variable</operand>
      <operand type="push">result</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="operation" /></tags>
    <description>
      Test if a variable is set.
    </description>
  </function>

  <function name="oel_new_function">
    <tokens>
      <token type="push" name="OEL_TYPE_OAR_FUNCTION" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">function name</parameter>
      <parameter type="bool" optional="TRUE" default="FALSE">TRUE if function returns a reference</parameter>
    </parameters>
    <return type="resource(oel)">OEL resource handle</return>
    <tags><tag name="oel" /><tag name="procedure" /></tags>
    <description>
      Create function's opcode array resource.
    </description>
  </function>

  <function name="oel_new_method">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_CLASS|OEL_TYPE_TOKEN_ACLASS|OEL_TYPE_TOKEN_ICLASS" />
      <token type="push" name="OEL_TYPE_OAR_METHOD" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">method name</parameter>
      <parameter type="bool" optional="TRUE" default="FALSE">TRUE if method returns a reference</parameter>
      <parameter type="bool" optional="TRUE" default="FALSE">TRUE if method is static</parameter>
      <parameter type="integer" optional="TRUE" default="OEL_ACC_PUBLIC">access flag (OEL_ACC_PRIVATE, OEL_ACC_PROTECTED, OEL_ACC_PUBLIC)</parameter>
      <parameter type="bool" optional="TRUE" default="FALSE">TRUE if method is final</parameter>
    </parameters>
    <return type="resource(oel)">OEL resource handle</return>
    <tags><tag name="oel" /><tag name="procedure" /></tags>
    <description>
      Create a method's opcode array resource.
    </description>
  </function>

  <function name="oel_new_abstract_method">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_ACLASS" />
      <token type="push" name="OEL_TYPE_OAR_AMETHOD" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">method name</parameter>
      <parameter type="bool" optional="TRUE" default="FALSE">TRUE if method returns a reference</parameter>
      <parameter type="bool" optional="TRUE" default="FALSE">TRUE if method is static</parameter>
      <parameter type="integer" optional="TRUE" default="OEL_ACC_PUBLIC">access flag (OEL_ACC_PRIVATE, OEL_ACC_PROTECTED, OEL_ACC_PUBLIC)</parameter>
    </parameters>
    <return type="resource(oel)">OEL resource handle</return>
    <tags><tag name="oel" /><tag name="procedure" /></tags>
    <description>
      Create an abstract method's opcode array resource.
    </description>
  </function>

  <function name="oel_add_call_function">
    <operands>
      <operand type="pop">parameters</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="FALSE">number of parameters to pop</parameter>
      <parameter type="string" optional="FALSE">name of function</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="procedure" /></tags>
    <description>
      Make a function call.
    </description>
  </function>

  <function name="oel_add_call_function_name">
    <operands>
      <operand type="pop">parameters</operand>
      <operand type="pop">function name</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="FALSE">number of parameters to pop</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="procedure" /></tags>
    <description>
      Make a function call by name.
    </description>
  </function>

  <function name="oel_add_call_method">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_VARIABLE" />
    </tokens>
    <operands>
      <operand type="pop">parameters</operand>
      <operand type="pop">object</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="FALSE">number of parameters to pop</parameter>
      <parameter type="string" optional="FALSE">method name</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="procedure" /></tags>
    <description>
      Make a method call.
    </description>
  </function>

  <function name="oel_add_call_method_static">
    <operands>
      <operand type="pop">parameters</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="FALSE">number of parameters to pop</parameter>
      <parameter type="string" optional="FALSE">method name</parameter>
      <parameter type="string" optional="FALSE">class name</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="procedure" /></tags>
    <description>
      Make a static method call.
    </description>
  </function>

  <function name="oel_add_call_method_name">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_VARIABLE" />
    </tokens>
    <operands>
      <operand type="pop">parameters</operand>
      <operand type="pop">method name</operand>
      <operand type="pop">object</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="FALSE">number of parameters to pop</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="procedure" /></tags>
    <description>
      Make a method call by name.
    </description>
  </function>

  <function name="oel_add_call_method_name_static">
    <operands>
      <operand type="pop">parameters</operand>
      <operand type="pop">method name</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="FALSE">number of parameters to pop</parameter>
      <parameter type="string" optional="FALSE">class name</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="procedure" /></tags>
    <description>
      Make a static method call by name.
    </description>
  </function>

  <function name="oel_add_new_object">
    <operands>
      <operand type="pop">parameters</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="integer" optional="FALSE">number of parameters to pop</parameter>
      <parameter type="string" optional="FALSE">class name</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="procedure" /><tag name="class" /></tags>
    <description>
      Make new object;
    </description>
  </function>

  <function name="oel_add_begin_tryblock">
    <tokens>
      <token type="push" name="OEL_TYPE_TOKEN_TRY" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="error" /></tags>
    <description>
      Begin try block.
    </description>
  </function>

  <function name="oel_add_begin_catchblock">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_TRY" />
      <token type="push" name="OEL_TYPE_TOKEN_CATCH" />
      <token type="push" name="OEL_TYPE_TOKEN_CATCH_FIRST" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="error" /></tags>
    <description>
      End try block and begin all-catch block.
    </description>
  </function>

  <function name="oel_add_begin_firstcatch">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_CATCH_FIRST" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">exception class name</parameter>
      <parameter type="string" optional="FALSE">variable name</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="error" /></tags>
    <description>
      Begin the first catch block.
    </description>
  </function>

  <function name="oel_add_end_firstcatch">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_CATCH_FIRST" />
      <token type="push" name="OEL_TYPE_TOKEN_CATCH_LAST" />
      <token type="push" name="OEL_TYPE_TOKEN_CATCH_ADD" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="error" /></tags>
    <description>
      End the first catch block.
    </description>
  </function>

  <function name="oel_add_begin_catch">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_CATCH_ADD" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
      <parameter type="string" optional="FALSE">exception class name</parameter>
      <parameter type="string" optional="FALSE">variable name</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="error" /></tags>
    <description>
      Begin an additional catch block.
    </description>
  </function>

  <function name="oel_add_end_catch">
    <tokens>
      <token type="test" name="OEL_TYPE_TOKEN_CATCH_ADD" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="error" /></tags>
    <description>
      End an additional catch block.
    </description>
  </function>

  <function name="oel_add_end_catchblock">
    <tokens>
      <token type="pop" name="OEL_TYPE_TOKEN_CATCH_ADD" />
      <token type="pop" name="OEL_TYPE_TOKEN_CATCH_LAST" />
      <token type="pop" name="OEL_TYPE_TOKEN_CATCH" />
      <token type="pop" name="OEL_TYPE_TOKEN_TRY" />
    </tokens>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="error" /></tags>
    <description>
      End all-catch block.
    </description>
  </function>

  <function name="oel_add_throw">
    <operands>
      <operand type="pop">exception object</operand>
    </operands>
    <parameters>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="error" /></tags>
    <description>
      Throw an exception
    </description>
  </function>

  <function name="bcompiler_write_oel_oparray">
    <parameters>
      <parameter type="resource(stream)" optional="FALSE">output stream resource handle</parameter>
      <parameter type="resource(oel)" optional="FALSE">OEL resource handle</parameter>
    </parameters>
    <tags><tag name="oel" /><tag name="boel" /><tag name="bcompiler" /></tags>
    <description>
      Serialize an opcode array.
    </description>
  </function>

</documentation>
