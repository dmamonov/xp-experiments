%{

  uses(
    'xp.ide.source.Scope',
    'xp.ide.source.element.Classdef',
    'xp.ide.source.element.Classmember',
    'xp.ide.source.element.Classmethod',
    'xp.ide.source.element.Classconstant',
    'xp.ide.source.element.Classmethodparam',
    'xp.ide.source.element.Array',
    'xp.ide.source.element.BlockComment'
  );

%}


%token
  T_ENCAPSED_STRING T_NUMBER T_STRING T_VARIABLE T_ARRAY
  T_NULL T_BOOLEAN T_DOUBLE_ARROW T_FUNCTION T_FUNCTION_BODY
  T_OPEN_APIDOC T_CONTENT_APIDOC T_CLOSE_APIDOC T_DIRECTIVE_APIDOC
  T_START_ANNOTATION T_CLOSE_ANNOTATION T_ANNOTATION

%right
  T_PUBLIC T_PRIVATE T_PROTECTED T_CONST T_STATIC T_ABSTRACT

%%

start:
   classConstantList classMemberScopes classMethods { $$= new xp·ide·source·element·Classdef(); $$->setConstants($1); $$->setMembers($2); $$->setMethods($3); }
  | classConstantList classMemberScopes { $$= new xp·ide·source·element·Classdef(); $$->setConstants($1); $$->setMembers($2); }
  | classConstantList { $$= new xp·ide·source·element·Classdef(); $$->setConstants($1); }
  | classMemberScopes { $$= new xp·ide·source·element·Classdef(); $$->setMembers($1); }
  | classMethods { $$= new xp·ide·source·element·Classdef(); $$->setMethods($1); }
  | { $$= new xp·ide·source·element·Classdef(); }
;

classMethods:
  classMethods classMethod { $$= $1; $$[]= $2; }
  | classMethod { $$= array($1); }
;

classMethod:
  classMethodMods T_FUNCTION T_STRING classMethodParamDef '{' T_FUNCTION_BODY '}' {
    $$= new xp·ide·source·element·Classmethod($3->getValue());
    isset($1['abstract']) && $$->setAbstract($1['abstract']);
    isset($1['scope'])    && $$->setScope($1['scope']);
    isset($1['static'])   && $$->setStatic($1['static']);
    $$->setParams($4);
    $$->setContent($6->getValue());
  }
  | T_FUNCTION T_STRING classMethodParamDef '{' T_FUNCTION_BODY '}' {
    $$= new xp·ide·source·element·Classmethod($2->getValue());
    $$->setParams($3);
    $$->setContent($5->getValue());
  }
  | apidoc classMethodMods T_FUNCTION T_STRING classMethodParamDef '{' T_FUNCTION_BODY '}' {
    $$= new xp·ide·source·element·Classmethod($4->getValue());
    $$->setApidoc($1);
    isset($2['abstract']) && $$->setAbstract($2['abstract']);
    isset($2['scope'])    && $$->setScope($2['scope']);
    isset($2['static'])   && $$->setStatic($2['static']);
    $$->setParams($5);
    $$->setContent($7->getValue());
  }
  | apidoc T_FUNCTION T_STRING classMethodParamDef '{' T_FUNCTION_BODY '}' {
    $$= new xp·ide·source·element·Classmethod($3->getValue());
    $$->setApidoc($1);
    $$->setParams($4);
    $$->setContent($6->getValue());
  }
;

apidoc:
  T_OPEN_APIDOC T_CONTENT_APIDOC apidocDirectives T_CLOSE_APIDOC { $$= new xp·ide·source·element·Apidoc(); $$->setText($2->getValue()); $$->setDirectives($3); }
  | T_OPEN_APIDOC T_CONTENT_APIDOC T_CLOSE_APIDOC { $$= new xp·ide·source·element·Apidoc(); $$->setText($2->getValue()); }
;

apidocDirectives:
  apidocDirectives T_DIRECTIVE_APIDOC { $$= $1; $$[]= new xp·ide·source·element·ApidocDirective($2->getValue()); }
  | T_DIRECTIVE_APIDOC { $$= array(new xp·ide·source·element·ApidocDirective($1->getValue())); }
;

classMethodParamDef:
  '(' classMethodParams ')' { $$= $2; }
  | '(' ')' { $$= array(); }
;

classMethodParams:
  classMethodParams ',' classMethodParam { $$= $1; $$[]= $3; }
  | classMethodParam { $$= array($1); }
;

classMethodParam:
  typehint T_VARIABLE '=' initAssignRight { $$= new xp·ide·source·element·Classmethodparam(substr($2->getValue(), 1), $1); $$->setInit($4); }
  | typehint T_VARIABLE { $$= new xp·ide·source·element·Classmethodparam(substr($2->getValue(), 1), $1); }
  | T_VARIABLE '=' initAssignRight { $$= new xp·ide·source·element·Classmethodparam(substr($1->getValue(), 1)); $$->setInit($3); }
  | T_VARIABLE { $$= new xp·ide·source·element·Classmethodparam(substr($1->getValue(), 1)); }
;

typehint:
  T_STRING { $$= $1->getValue(); }
  | T_ARRAY { $$= $1->getValue(); }
;

classMethodMods:
  classMethodMods classMethodMod { $$= array_merge($1, $2); }
  | classMethodMod { $$= $1; }
;

classMethodMod:
  classMemberMod { $$= $1; }
  | T_ABSTRACT { $$= array('abstract' => TRUE); }
;

classConstantList:
  classConstantList T_CONST classConstants ';' { $$= array_merge($1, $3); }
  | T_CONST classConstants ';' { $$= $2; }
;

classConstants:
  classConstants ',' T_STRING '=' initAssignRight { $1[]= new xp·ide·source·element·Classconstant($3->getValue()); $$= $1; };
  | T_STRING '=' initAssignRight { $$= array(new xp·ide·source·element·Classconstant($1->getValue())); }
;

classMemberScopes:
  classMemberScopes classMemberMods classMembers ';' { foreach($3 as $m) { isset($2['static']) && $m->setStatic($2['static']); isset($2['scope']) && $m->setScope($2['scope']); } $$= array_merge($1,$3); }
  | classMemberScopes classMembers ';' { $$= array_merge($1, $2); }
  | classMemberMods classMembers ';' { foreach($2 as $m) { isset($1['static']) && $m->setStatic($1['static']); isset($1['scope']) && $m->setScope($1['scope']); } $$= $2; }
  | classMembers ';' { $$= $1; }
;

classMembers:
  classMembers ',' classMember { $1[]= $3; $$= $1;}
  | classMember { $$= array($1); }
;

classMember:
  T_VARIABLE '=' initAssignRight { $$= new xp·ide·source·element·Classmember(substr($1->getValue(), 1), NULL, $3); }
  | T_VARIABLE { $$= new xp·ide·source·element·Classmember(substr($1->getValue(), 1)); }


classMemberMods:
  classMemberMods classMemberMod { $$= array_merge($1, $2); }
  | classMemberMod { $$= $1; }
;

classMemberMod:
  scope { $$= array('scope' => $1); }
  | T_STATIC { $$= array('static' => TRUE); }
;

scope:
  T_PUBLIC { $$= xp·ide·source·Scope::$PUBLIC; }
  | T_PRIVATE { $$= xp·ide·source·Scope::$PRIVATE; }
  | T_PROTECTED { $$= xp·ide·source·Scope::$PROTECTED; }
;

initSimple:
  T_ENCAPSED_STRING { $$= $1->getValue(); }
  | T_NULL { $$= $1->getValue(); }
  | T_NUMBER { $$= $1->getValue(); }
  | T_BOOLEAN { $$= $1->getValue(); }
;

initAssignRight:
  T_ARRAY '(' initArrayBody ',' ')' { $$= new xp·ide·source·element·Array($3); }
  | T_ARRAY '(' initArrayBody ')' { $$= new xp·ide·source·element·Array($3); }
  | T_ARRAY '(' ')' { $$= new xp·ide·source·element·Array(); }
  | initSimple  { $$= $1; }
;

initArrayBody:
  initArrayBody "," initSimple T_DOUBLE_ARROW initAssignRight { $1[$3]= $5; $$= $1; }
  | initArrayBody "," initAssignRight { $1[]= $3; $$= $1; }
  | initSimple T_DOUBLE_ARROW initAssignRight { $$= array($1 => $3); }
  | initAssignRight { $$= array($1); }
;
%%
