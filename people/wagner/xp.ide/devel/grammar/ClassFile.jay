%{

  uses(
    'xp.ide.source.Scope',
    'xp.ide.source.element.Package',
    'xp.ide.source.element.Uses',
    'xp.ide.source.element.Classdef',
    'xp.ide.source.element.ClassFile',
    'xp.ide.source.element.BlockComment',
    'xp.ide.source.element.Annotation',
    'xp.ide.source.element.Apidoc',
    'xp.ide.source.element.ApidocDirective'
  );

%}

%token
  T_CLASS T_CLOSE_BCOMMENT T_CLOSE_TAG T_CONTENT_BCOMMENT T_ENCAPSED_STRING
  T_EXTENDS T_IMPLEMENTS T_OPEN_BCOMMENT T_OPEN_TAG T_USES  T_CONTENT_INNERBLOCK T_ABSTRACT
  T_VARIABLE T_STRING T_OPEN_APIDOC T_CONTENT_APIDOC T_CLOSE_APIDOC T_DIRECTIVE_APIDOC
  T_START_ANNOTATION T_CLOSE_ANNOTATION T_ANNOTATION

%%

start:
  T_OPEN_TAG meta classDef T_CLOSE_TAG { $$= $2; $$->setClassdef($3); }
  | T_OPEN_TAG classDef T_CLOSE_TAG { $$= $this->top_element; $$->setClassdef($2); }
;

classDef:
  apidoc annotationblock T_ABSTRACT classDefSc {
    $$= $4;
    $$->setApidoc($1);
    $$->setAnnotations($2);
    $$->setAbstract(TRUE);
  }
  | apidoc annotationblock classDefSc {
    $$= $3;
    $$->setApidoc($1);
    $$->setAnnotations($2);
  }
;

classDefSc:
  T_CLASS T_STRING T_EXTENDS T_STRING T_IMPLEMENTS interfaces classBody {
    $$= new xp·ide·source·element·Classdef($2->getValue(), $4->getValue());
    $$->setInterfaces($6);
    $$->setContent($7);
  }
  | T_CLASS T_STRING T_EXTENDS T_STRING classBody {
    $$= new xp·ide·source·element·Classdef($2->getValue(), $4->getValue());
    $$->setContent($5);
  }
;

interfaces:
  interfaces ',' T_STRING { $1[]= $3->getValue(); $$= $1; }
  | T_STRING { $$= array($1->getValue()); }
;

classBody:
  '{' T_CONTENT_INNERBLOCK '}' { $$= $2->getValue(); }
  | '{' '}' { $$= ''; }
;

annotationblock:
  T_START_ANNOTATION annotations T_CLOSE_ANNOTATION { $$= $2;}
  | { $$= array(); }
;
annotations:
  annotations ',' annotation { $$= $1; $$[]= $3; }
  | annotation { $$= array($1); }
;
annotation:
  T_ANNOTATION '(' annotationparams ')' { $$= new xp·ide·source·element·Annotation(substr($1->getValue(), 1), $3); }
  | T_ANNOTATION '(' ')' { $$= new xp·ide·source·element·Annotation(substr($1->getValue(), 1)); }
  | T_ANNOTATION { $$= new xp·ide·source·element·Annotation(substr($1->getValue(), 1)); }
;
annotationparams:
  annotationparams ',' annotationparam { $$= $1; list($k, $v)= each($3); $$[$k]= $v; }
  | annotationparam { $$= $1; }
;
annotationparam:
  T_STRING '=' T_ENCAPSED_STRING { $$= array($1->getValue() => $this->unquote($3->getValue())); }
  | T_ENCAPSED_STRING { $$= array($this->unquote($1->getValue())); }
;

meta:
  blockComment package uses { $$= $this->top_element; $$->setHeader($1); $$->setPackage($2); $$->setUses($3); }
  | blockComment package { $$= $this->top_element; $$->setHeader($1); $$->setPackage($2); }
  | blockComment uses { $$= $this->top_element; $$->setHeader($1); $$->setUses($2); }
  | package uses { $$= $this->top_element; $$->setPackage($1); $$->setUses($2); }
  | blockComment { $$= $this->top_element; $$->setHeader($1); }
  | package { $$= $this->top_element; $$->setPackage($1); }
  | uses { $$= $this->top_element; $$->setUses($1); }
;

package:
  T_VARIABLE '=' T_ENCAPSED_STRING ';'  { $$= new xp·ide·source·element·Package($this->unquote($3->getValue())); }
;

uses:
  T_USES '(' usesClasses ')' ';'  { $$= new xp·ide·source·element·Uses(); $$->setClassnames($3); }
;
usesClasses:
  usesClasses ',' T_ENCAPSED_STRING { $1[]= $this->unquote($3->getValue()); $$= $1; }
  | T_ENCAPSED_STRING { $$= array($this->unquote($1->getValue())); }
;

blockComment:
  T_OPEN_BCOMMENT T_CONTENT_BCOMMENT T_CLOSE_BCOMMENT { $$= new xp·ide·source·element·BlockComment(); $$->setText($2->getValue()); }
;

apidoc:
  T_OPEN_APIDOC T_CONTENT_APIDOC apidocDirectives T_CLOSE_APIDOC { $$= new xp·ide·source·element·Apidoc(); $$->setText($2->getValue()); $$->setDirectives($3); }
  | T_OPEN_APIDOC T_CONTENT_APIDOC T_CLOSE_APIDOC { $$= new xp·ide·source·element·Apidoc(); $$->setText($2->getValue()); }
;

apidocDirectives:
  apidocDirectives T_DIRECTIVE_APIDOC { $$= $1; $$[]= new xp·ide·source·element·ApidocDirective($2->getValue()); }
  | T_DIRECTIVE_APIDOC { $$= array(new xp·ide·source·element·ApidocDirective($1->getValue())); }
;

%%
