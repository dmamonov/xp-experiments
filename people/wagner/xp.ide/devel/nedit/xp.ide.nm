# XP Framework Macro file for Nedit
#
# INSTALLATION
#
# Load these macros by put the following line to your autoload.nm file
#
#       load_macro_file(getenv("HOME") "/.nedit/xp.ide.nm")
#
# The autoload.nm file should be located in the ~/.nedit directory.
#
# $Id$
#

##
# check the Syntax of the current javascript source file
#
##
define xp_ide_lint_js {
  xp_ide_lint("js")
}

##
# check the Syntax of the current sh source file
#
##
define xp_ide_lint_sh {
  xp_ide_lint("sh")
}

##
# check the Syntax of the current PHP file
#
##
define xp_ide_lint_php {
  xp_ide_lint("php")
}

##
# check the Syntax of the current XML file
#
##
define xp_ide_lint_xml {
  xp_ide_lint("xml")
}

##
# parse a lint result
# if result is not empty
# line#1: error line
# line#2: error column
# rest: Error Text
#
##
define xp_ide_lint {
  lang= $1
  res_list= split(shell_command("xpide Nedit checksyntax -ln " lang , get_range(0,$text_length)), "\n")
  if (res_list[2] == "") {
    kill_calltip()
    return
  }
  goto_line_number(res_list[0], res_list[1])
  select($cursor, search("$", $cursor, "regex", "forward"))
  res= res_list[2]
  for (k= 3; res_list[] > k; k++) res= res "\n" res_list[k]
  calltip(res)
}

##
# complete the full qualified class as long as the
# last result was not empty
# displays a dialog if more than one possible completions
# are available
#
# @return  int 1
##
define xp_ide_complete {
  result= shell_command("xpide Nedit complete -cp " $cursor " -cl " $line " -cc " $column, get_range(0, $text_length))
  kill_calltip()
  if (0 != $shell_cmd_status) {
    calltip(result)
    return
  }

  res_list= split(result, "\n")
  replacepos= res_list[0]
  delete res_list[0]
  replacelen= res_list[1]
  delete res_list[1]
  sugg_cnt= res_list[2]
  delete res_list[2]

  if (0 == sugg_cnt) {
    calltip("no class found")
    return
  } else if (1 == sugg_cnt) {
    sugg= res_list[3]
  } else {
    res_list_d= ""
    for (k in res_list) res_list_d= res_list_d "\n" res_list[k]
    sugg= list_dialog("suggestions", res_list_d, "ok", "cancel")
    if (1 != $list_dialog_button) return
  }

  replace_range(replacepos, replacepos + replacelen, sugg)
  set_cursor_pos(replacepos + length(sugg))
}

##
# toggle the class locator (flly qualified class name)
# to the real class name
#
# @return  int 1
##
define xp_ide_toggle {
  result= shell_command("xpide Nedit toggleClass -cp " $cursor " -cl " $line " -cc " $column, get_range(0, $text_length))
  kill_calltip()
  if (0 != $shell_cmd_status) {
    calltip(result)
    return
  }

  res_list= split(result, "\n")
  replacepos= res_list[0]
  replacelen= res_list[1]
  classname=  res_list[2]

  replace_range(replacepos, replacepos + replacelen, classname)
  set_cursor_pos(replacepos + length(classname))
}

##
# try to open the class which full
# qualified class name is under the cursor
#
##
define xp_ide_open_xpclass {
  result= shell_command("xpide Nedit grepclassfile -cp " $cursor " -cl " $line " -cc " $column, get_range(0, $text_length))
  kill_calltip()

  if (0 == $shell_cmd_status) {
    open(result)
  } else {
    calltip(result)
  }
}

##
# create accessors which do not exist yet
# for all class members
# insert at cursor position
#
##
define xp_ide_make_accessors {
  result= shell_command("xpide Nedit createAccessors", get_range(0, $text_length))
  kill_calltip()

  if (0 == $shell_cmd_status) {
    replace_range($cursor, $cursor, result)
  } else {
    calltip(result)
  }
}
