# XP Framework Macro file for Nedit
#
# $Id$
#

##
# check the Syntax of the current sh source file
#
##
define xp_ide_lint_sh {
  xp_ide_parse_lint_result(shell_command("xpide xp.ide.lint.Runner xp.ide.lint.Sh", get_range(0,$text_length)))
}

##
# check the Syntax of the current PHP file
#
##
define xp_ide_lint_php {
  xp_ide_parse_lint_result(shell_command("xpide xp.ide.lint.Runner xp.ide.lint.Php", get_range(0,$text_length)))
}

##
# check the Syntax of the current XML file
#
##
define xp_ide_lint_xml {
  xp_ide_parse_lint_result(shell_command("xpide xp.ide.lint.Runner xp.ide.lint.Xml", get_range(0,$text_length)))
}

##
# complete the full qualified class as long as the
# last result was not empty
# displays a dialog if more than one possible completions
# are available
#
# @return  int 1
##
define xp_ide_complete_class {
  to_complete= xp_ide_get_class_range()

  suggestions= shell_command("xpide xp.ide.autocompletion.Runner xp.ide.autocompletion.Nedit " to_complete["part"], "")
  if (0 == length(suggestions)) {
    calltip("nothing found")
    return 0
  }

  res_list= split(suggestions, "\n")
  if (1 == res_list[])  {
    res= res_list[0]
  } else {
    res= list_dialog("multiple packages found", suggestions, "OK", "Cancel")
    if (1 != $list_dialog_button) return 0
  }

  replace_range(to_complete["pos"], to_complete["pos"] + length(to_complete["part"]), res)
  set_cursor_pos(to_complete["pos"] + length(res))
}

##
# try to open the class which full
# qualified class name is selected
#
##
define xp_ide_open_xpclass {
  res= shell_command("xpide xp.ide.resolve.Runner xp.ide.resolve.Nedit " xp_ide_get_class_range()["part"], "")
  if (0 == $shell_cmd_status) {
    filename= split(res, "\n")
    open(filename[0])
  } else if (1 == $shell_cmd_status) {
    calltip(res)
  } else {
    calltip("class not found")
  }
}

##
# search a part of a class left to the cursor
#
# @return  string[pos, part]
##
define xp_ide_get_class_range {
   search_regex= "(?n[^a-z0-9\._-])"
   result["pos"]= $cursor
   result["part"]= ""

   bs= search(search_regex, $cursor - 1, "regexNoCase", "backward")
   if (bs == $cursor - 1) {
     return result
   }
   result["pos"]= bs + 1
   search_end= search(search_regex, result["pos"], "regexNoCase", "forward")
   result["part"]= get_range(result["pos"], search_end)
   return result
}

##
# parse a lint result
# if result is not empty
# line#1: error line
# line#2: error column
# rest: Error Text
#
##
define xp_ide_parse_lint_result {
  res_list= split($1, "\n")
  if (res_list[2] == "") {
    kill_calltip()
    return
  }
  goto_line_number(res_list[0], res_list[1])
  select($cursor, search("$", $cursor, "regex", "forward"))
  res= res_list[2]
  for (k= 3; res_list[] > k; k++) res= res "\n" res_list[k]
  calltip(res)
}
