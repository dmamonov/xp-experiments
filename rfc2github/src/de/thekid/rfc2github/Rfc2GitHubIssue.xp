/* This class is part of the XP framework
 *
 * $Id$ 
 */

package de.thekid.rfc2github;

import peer.http.*;
import peer.URL;
import peer.Header;
import io.File;
import lang.types.String;

import native standard.sscanf;
import native standard.strtok;
import native standard.str_replace;
import native standard.explode;
import native standard.trim;
import native standard.ltrim;
import native standard.urlencode;
import native standard.substr;
import native standard.max;
import native standard.sprintf;
import native standard.array_diff;
import native standard.array_merge;

import native pcre.preg_replace;

import native core.strncmp;
import native core.strlen;

/**
 * Imports XP Framework RFCs to Github issues
 *
 * @see      http://develop.github.com/p/issues.html
 * @see      https://github.com/thekid/experiments/issues
 */
public class Rfc2GitHubIssue extends util.cmd.Command {
  protected File $origin;
  protected HttpConnection $conn= new HttpConnection('https://api.github.com/');
  protected Header $identity;
  protected [:string] $parameters;
  protected bool $verbose = false;

  /**
   * Sets origin filename
   *
   */
  [@arg(position= 0)]
  public void setCredentials(string $credentials) {
    $user= $pass= null;
    sscanf($credentials, "%[^:]:%[^\r]", $user, $pass);
    $this.identity= new BasicAuthorization($user, $pass);
  }
  
  /**
   * Sets origin filename
   *
   */
  [@arg(position= 1)]
  public void setOriginFile(string $file) {
    $this.origin= new File($file);
  }

  /**
   * Sets target (owner/repo)
   *
   */
  [@arg(position= 2)]
  public void setTarget(string $target) {
    $owner= $repo= null;
    sscanf($target, "%[^/]/%[^\r]", $owner, $repo);
    $this.parameters= [ user: $owner, repo: $repo ];
  }

  /**
   * Sets whether to be verbose
   *
   */
  [@arg]
  public void setVerbose() {
    $this.verbose= true;
  }
  
  protected static var $segments= new text.regex.Pattern(':([a-z_]+)');
  
  /**
   * Creates a new API request
   *
   * @param   method One of the HttpConstants constants
   * @param   string resource in the form /path/part/:segment/
   * @param   parameters parameters which will be used as segments and request parameters
   */
  protected HttpRequest newApiRequest(string $method, string $resource, [:string] $parameters= [:]) {
    $parameters= array_merge($this.parameters, $parameters) as [:var];
    foreach ($group in self::$segments.match($resource).groups()) {
      $resource= str_replace($group[0], $parameters[$group[1]], $resource);
      unset($parameters[$group[1]]);
    }

    $request= $this.conn.create(new HttpRequest());
    $request.setMethod($method);
    $request.setTarget($resource);
    $request.setParameters($parameters);
    $request.setHeader('Authorization', $this.identity);
    
    $this.verbose && $this.err.writeLine('>>> ', $request.getRequestString());
    return $request;
  }

  /**
   * Creates a new API request
   *
   */
  protected ApiResponse sendApiRequest(HttpRequest $request) {
    $response= $this.conn.send($request);

    $this.verbose && $this.err.writeLine('<<< ', $response);
    return new ApiResponse($response);
  }
  
  protected static var $state = [
    draft :       'open',
    discussion :  'open',
    rejected :    'closed',
    obsoleted :   'closed',
    implemented:  'closed',
  ];
  
  protected static var $json = webservices.json.JsonFactory::create();
  
  /**
   * Modify an issue
   *
   */
  protected [:var] modifyIssue(HttpRequest $request, int $expect, string $title, string $content, [:var] $fields) {
    $request.setParameters(new RequestData(self::$json.encode([
      title  : new String($title),
      body   : new String($content),
      state  : self::$state[$fields['status.id']],
      labels : [ $fields['status.id'] ]
    ])));
    $request.setHeader('Content-Type', 'application/vnd.github-issue.raw+json');

    $response= $this.sendApiRequest($request);
    if ($expect != $response.status()) {
      throw new IllegalArgumentException($response.toString());
    }

    return $response.result() as [:var];
  }

  /**
   * Creates an issue
   *
   */
  protected [:var] createIssue(string $title, string $content, [:var] $fields) {
    return $this.modifyIssue(
      $this.newApiRequest(HttpConstants::POST, '/repos/:user/:repo/issues'), 
      201, 
      $title, 
      $content, 
      $fields
    );
  }

  /**
   * Updates an existing issue
   *
   */
  protected [:var] updateIssue(int $id, string $title, string $content, [:var] $fields) {
    return $this.modifyIssue(
      $this.newApiRequest(HttpConstants::PATCH, '/repos/:user/:repo/issues/:id', [ id: $id ]),
      200, 
      $title, 
      $content, 
      $fields
    );
  }
  
  /**
   * Entry point method
   *
   */
  public void run() {
  
    // Parse RFC into caption, fields and body text
    $fields= [:];
    with ($st= new text.StreamTokenizer($this.origin.getInputStream(), "\r\n")) {
      $title= $st.nextToken();
      $id= $caption= null;
      sscanf($title, "RFC %4s: %[^\r]", $id, $caption);
      $st.nextToken('@');
      
      while ($st.hasMoreTokens()) {
        if ('' === ($t= ltrim($st.nextToken(), '@'))) break;   // End of attributes

        $key= $value= null;
        sscanf($t, "%[^:]: %[^\r]", $key, $value);

        switch ($key) {
          case 'status':
            $fields['status.id']= strtok($value, ',( ');
            $fields['status.text']= strtok("\0");
            break;

          case 'authors':
            $fields['authors']= explode(', ', $value);
            break;

          case 'created':
            $fields['created']= util.Date::fromString($value);
            break;

          case 'category':
            $fields['category']= trim($value, '<>');
            break;
            
          default:
            $fields[$key]= $value;
            break;
        }
      }

      // Rest of text (use a token that is not very likely to appear so
      // scanning will happen in large chunks).
      $content= '';
      while ($st.hasMoreTokens()) {
        $line= $st.nextToken();
        if (0 === strncmp('---', $line, 3)) {
          $line= '====';
        } else if (0 === strncmp('~~~', $line, 3)) {
          $line= '----';
        } else if ('<code>' === $line) {
          $line= "\n```php\n<?php";
        } else if ('</code>' === $line) {
          $line= "?>\n```";
        } else if ('<pre>' === $line || '</pre>' === $line) {
          $line= "\n```";
        }

        $content ~= preg_replace(
          [ '#<tt>#', '#</tt>#', '/RFC #([0-9]+)/e'],
          [ '`', '`', '"xp-framework/rfc #".ltrim("\1", "0")'],
          $line
        ) ~ "\n";
      }
    }
    
    $this.out.writeLine('#', $id, ': ', $caption, ' ', $fields);
    // $this.out.writeLine($content);
    
    // Check GH for corresponding issue
    $response= $this.sendApiRequest($this.newApiRequest(HttpConstants::GET, '/repos/:user/:repo/issues/:id', [ id : $id ]));
    if (200 == $response.status()) {
      $issue= $response.result() as [:var];
      
      // Found it, update and exit
      $this.out.write('Found existing issue #', $issue['number']);
      $this.updateIssue($issue['number'], $title, $content, $fields);
      $this.out.writeLine(': Updated');
      return 0;
    }

    // Check back until we find an issue, creating placeholders along the way
    // This way, we ensure the created RFC has the correct number!
    $last= $id;
    while (--$last) {
      $response= $this.sendApiRequest($this.newApiRequest(HttpConstants::HEAD, '/repos/:user/:repo/issues/:id', [ id : $last ]));
      if (200 == $response.status()) break;
      
      $this.out.write('Creating place holder RFC for ', $last);
      $placeholder= $this.createIssue('(Placeholder)', '', [:]);
      $this.out.writeLine('Created issue #', $placeholder['number']);
    }
    
    // Now create the real issue
    $this.out.write('Nothing found, creating new issue');
    $issue= $this.createIssue($title, $content, $fields);
    $this.out.writeLine('Created issue #', $issue['number']);
    return 0;
  }
}
